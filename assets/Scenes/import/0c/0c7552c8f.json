[1,["caE3+6hkVMyYigcj3kSN6C@f9941","bctXr3YPNMq5H4XHVcnvVN","f6SJZOjTJB/JrJeh5xTdF7","9130Am4qdJc5vZgP6QC3VU@6c48a","d4rvzUFUND3JkDeZ3trf4T","45kJO5Za5Di76ZxpT2HpN6","b5snqx50BDmLQHhI/CssiX@6c48a","eadHiwQI1AUrcD8NI1Xglf","b21ajk4OVCFaI/V+PhIEwx","19U8buGCpBoKF8or2ipqwe@6c48a","7eDf6SCGpKtYyLTvgsy5lp","0cSTdMWAFM3rvsABxj0oLP","35kijYVVBJEKpJxZw8Gjl5","12Y9dMgWdJKJGmTiZyQR9H@17020","d3x4IMKphEKYvHuEU7yaxB","79XPoW/N5KRI4jPPbCPm3U","3fb5W9qVJG0qpjVVyxEQke","20g1ukYUVPvKWKBRznAKo+@f9941","0aDVYaA/lLL4Jq268cxfdE@6c48a","dfthHZSE1Azo9qUYlByVt3@6c48a","13ndxwafxNopBo7FA8O1WM","eegj9vXiNKnZIP+idCPo2Q@f9941","241GIJ2WNDHbLpgPiQ5x0X@f9941","411k87jBlIMZrpWgmfEXy9","964FMB5u5E6JV7nOISENOk","d1NGQ2rJZCcbhjH0/erZWw","49gzYSRRlNzK/ZDiJm3lbe@f9941","54TknWPwVPqJqeCR+Y/Czo@f9941","95EkngnxZFbYuFpsqVTaFr@f9941","5eXto5mOpKBq89YYVenc3K@6c48a","bdsiw/ZzRPjqVt1nzsjZT6","aakOI3jQ5EaIfp9PqCp9Ic","12Y9dMgWdJKJGmTiZyQR9H@a804a","9aQ96f/1ZK06MgGrFmEOP3","a3zQCfCrBCDZJ4uf2rk5u8","bbfy98TXRNsKcSAJj2T3qE","50u6ipYltAeYiOa0/0WAHT@f94d2","bfNVUHhrFPNIWzAa+CQXD4@ebe84","80YG8VVkhEEaRlhrbORGB5@0960d","458d5ymVZJa5AYwj+TnkAT@6c48a","beqIctrg1Fg4PXs0xj8fQ4@f9941","83Mo4StotFK4+hbbDXPVPt@6c48a","ba6WTtEqBMYJC8zKmP/rcI","4ccE9EbdhGP5oN7m+uCp1u","e7PaSylAxNsJGlWiQjvVIq@6c48a","f0NM+XOc1NtIgasPPXRteE","157kFjB6NI0ZjFgeb01vKP@f9941","c6dikiC9pK171tS9m5cZfr","7b/cd4+ZpEGYNrM0GX/9h+","12Y9dMgWdJKJGmTiZyQR9H@fc873","8dRQX+HDBMdoYGFV6I2gOP@f9941","01kv5TdHFKApUTO7zPmZJm","883naem4JIk6qErbYP15T4","8dDuAO1EJNTof32jabvSsy@6c48a","feS+Oim1pKGoItvor9c9ac","94TkpVKsxHopwRMEB9lMDk@f9941","5aW5bNec9J5ohbBumvdHmx@f9941","e0sz7W62RE/4AlPIyJ4rVn","1brw/JvvpFnIvdrxpFCgMZ","d8ITjdJ65J27jrON7HkdFq@f9941","95J4eiNC5PS46/3KIfOKP3","74FHccKbxNSrieq0Xupve+","79n9eoM59Lgq4IrC8q/x7l","d6K6NwbqpC45SpBRkP3qEa@638ba","72rlalWuJOhrQuDs7JLXsX@6c48a","ffl3L6PkREpaWuOW30FeC8","ff7PlvTktOT4dPeAF91EKl@1008c","a3yhcyCCVOAbLXYM01zD7w","67T1eJBilG9o+6wuiSh+k7@408eb","48CaBYJAZLzLzQDpT3h9uJ@f62fa","4eBGyNSOBOt7JaDxqLNIwF@f352c","165hLPoVdL17g0N2G7I3ee","e1tpuxZdNKU5HOhvKhy3vd@6c48a","ec8SIyk9BLE5VnkH0oylwE@6c48a","a0+NcmevZGd7ol3MnakYVe","c3Lgor+oJM4YuPcWlFspp8@f9941","a0jTGwZcpAloFOuEbZ5TrX@f9941","01EMrxkylKCqnTWY4kDr7D","93ZbzT1KlPiZfakCLNUEsA","b3spTF+DJDrorlmdpYTh6s","b5nZbXXA5Ob5tHmvmU7cjz","ed2tjZAfhIqrlraFn0z6nP@3e9b7","adOqJthyJBa6G6PzIWKael@678ab","cdd4jL2d5MHobR0bJXPk+p@c244a","d96yFaYhVNvqwZApbAVz7q","f9rqCjsR9P/6e/R3PHmR6N","47FjzSQjBDI54L+ofdoJC+@6c48a","f8jPaawz5Npa5mBALcitOQ","70pJ/3Q61E3Zmxf2W/n42c","c3GpAbZxtMPZJG+abl8UuQ","3ettQ3QCNBsIV+Ealfpdy6@2cd2b","a5C2OKS09Gr56/jfr8JbDh","f6k3PZqsNBybAjIRTPSH5Q","c43pGCiiVCMZE4miDEprLc@0e59a","eb+oJ7CARAa4FJEsipeUGv","afAdeoDw9Fq6L4qKP2jjXt","e1OFZtympH55XYter7c/Rl@ecee6","bfmMtzr4BKmZmX3xZKFvu+","8aruAyoSFNoazrKwBWGKJ1","870L3omnxOwq9fiCdJnhyr","40+KuGRZhGnbkYfcMvvUgZ","0ftns4yOhFP7rVqeKf1a23","0fy0JuDZdEFLu7Nfd++wKo","82MQEW2ulPqoRYqpDNqR7T","20GyRP5pFF9pU0o04llct9","f73vBSHFdMiZmEvJA+3ryO","67fenIPP1F4790AY2X7/Uh","0dfQ051iBOLa1AE7XF2uK8","a2fNNVt1lB1JmNAoBZE01P","9956WMue5JSYRjHHMKh4x4","28MUdnCipE94/tFCQ5/Cl4","fdxUDMg+FKd5l74czAumFG","f1fCiRruhC7Lz6eZxAUlPM","6ewcG4l9dBw4ScUXX9v3TV","a7TFioGd9CJYqH8N+yJWwQ","5fNMXSIo5KkYHxqVtqs6cn","fbsVm0XutPYq85z1OSO2j5","ac9VT97xFAkqSOTYBQxroy","2fZHbSA0pO/q+Mj22aLQpw","b2zVaVcZFOI4wzGS/3dmK7","b52u7xOeVJfZdxzRj/0Ykc","49KE3HJCpJVLyg7JAnTtmP","fdQcfVEqlKoJDlEAqRU3yu","06zde2EVBDB4deRPBiR4+D","6fIwnrBQhNs62mJpOkBB1M","34ZaNJKzNNO5X4A2r4V2dF","3fVcKh5ShKxbIP8S0W9OtW","3dFbRDbV1Eqqef1fOLGPf3","05jMMoZmNFT544YBRrphjV","59phXLfedO3JuwQISQhq55","a3DlPis/hP0r1S7ulf0b0p","86FwwOeqBMaJTQQkGsnZa5","69HmLh6KpPs6BsmBqh7pdy","0eNGXgewZNWrXzi4eh6pVY","e7NhHEYexOhIwbfDueY2VU","92OWmi0J9LvLJh5C99B64c","951JpRXxNFUIB9jqbDBdBf","4b08OquSJNOoZ3Xx5PCwTx@f9941","26b2Dh9dZOHZB8ONJDPdx9","fdRgO02s9Ld6mtZO+WuvA2","d7DY3IqWNB0qhS1ck3iUED","15MVKYyI1PvbZ6b86i+lvZ","25RW0P8yxGnpL1VIlxZDBX","10FZHf5YBI+bZfi2MU34Fe","99QdSVSUVF4J/vB3sez3aS@726c1","b4Q31Ro+JDc4z5Hao5UU8/","c5HTsXRf5EGKd1gIPOBnUz@825ed","c5HTsXRf5EGKd1gIPOBnUz@7d6ab","5cgLF+TQxFnKfPzycxCxAG@13c6c","76XbSWhf5Nu58yy09j/dWf@b60bf","e6DL9/KgtFGJwyZTHiw34j","a8Ofyb9TlMIrlQZv70qhBw","7df28ghq1Cj6OYyqgS+Z1b","22BwgbEYNJSZP8+LLEr3Ck","77TmHxBsNFOoLPCtsMNZV0","17OMvhmrVNdIQVeM43c2+/","c0apHtDyBD9Y2iqwmVOA8l","56duDiSVBFX4/rYc5zc5X8","5ckx17sDNEz6HSZ6gZ896M","a2YJ/yHMdB1bIQ68Kj+HV6","4fWXFr30lOqbRk+AlIjR+h","99BpM9yCdDzpJ6yEcLEKD+","8222EpWqJGpZZ9Ec+3TSEG","27n/ib7x5GM4Xlj/74LtQG","e0yJKshP9E37Z0938Mgjpa","9deSQaz1FN54ox1Q4rLb/q","0cncXbHXVKrptSq+AdfWyS@1056d","2euHe/WatLXoRwOBRtxds2@3c6be","34JDcg001PH4SZJqYkSvVN","7dSdBs77VBP4APJEj/UYIH@7fd05","a8yy7IkkRCqLAjPBiTwmaX","41RTU08KxPvIgz4uUdzeSX","b7MFJ8MjNBwqr3fNq1j5dJ@f9941","3fyClbaGJFz5H8HgmoHoqe@33f9d","79Ju9BC4VLDYixxI6tI6b+@f9941","ccN4VA4YxDnKzLe2fpCME6@f9941","55jdrQwoFGK7sDP2O82lQ8","40lNW8NphPba+haJMSHFrA","49KCyVd3pKhJR8k5U/7cnT","51kbPy0wNMPJtRnUwbu5Rb@4196b","544gKVZjlGvoNIwG/+pV5M@f6c3a","e9nxzx0chFiJzTKOhJf5CH@6c48a","b5YpM+QfJKJrddvoJe2V7h@e567b","9eGqfC7vpBVZ2wAJmO3l5j@17d9a","20C8YyrSRO2JpDQ37sqC23","edgBqm/ttJybdMEeLCQl0P@02e3b","cd44bOVKdKB5yHgBR3Jb3O","adb0W5KlZCJ6VOcijwcTox@cedb5","89MXmCUv9Ov4RziM+8aRE8@a7d69","f8vRAzBmZDLYo/mQ/+ndIe@b4e5d","dbz5zR6GJGgavEM9jY6fNA@d261c","9aOcxg+KhEH478N+yKTA8s@0bd7e","c7eWgrp05Enq1HV2tAbbSY@e7d69","b2fqEhseNB9qTwg3eaBMji@7da2f","c7suwoopNKyaOehSH43jdV@b0092","27NZNIZaFLDY/7ieLAst9r","18z8HsqM9PD6KiGmzJo/cx","dayIxUSIlGUoOYdFyM/hWv","b7kHmp0sBN66Kok5I3wbCS@2fbfa","cfTpGFd81Ksq68S9yz0+J9@71bdb","643EzH3tRGb7EoznsJlnhF","3csnqf+4hNqqNGxMoeFSiX","691na27MhIW50hnZbE+mzv","49F9a14gxOwbJDZK5idOSz","69eZl+GkZAw6glMiCxw1fP","1dHAsM3TZGLLtFD1VhRXJd","0bKlit6E1L/45YMHsd71Ci@6c48a","1dwG24X8BJsr/8Q3kN+Fcy@6c48a","51+tjFnEdC/ocBiQgNo9bb","01nr6V6JZHxpejrthNEAnp@f10f1","01nr6V6JZHxpejrthNEAnp@29428","bafsmQ4F9IPYq/xDVO6sYR@f9941","e7OyE7YyBP7bbIReQmk86U@f9941","38dvFe6lxANaOayYqvEGXU","99GXHEIyREFY9JMRF8lFRG@f9941","b5rsshQg9I4JpG2RvaPVao@f9941","e1bEl8/ktPu4Na6cdnpx5A","65tIBARy5Fa6lYC4Ffs/ji@f9941","43SroQCgBLm5cYmZapgjMA@f9941","c4CtF7uJVCJoHMKQxzNRRy@f9941","94Dg7hrZRJbLmm4gxJYCmI","1a1aN0gIJGt7siiTc3mWZi@f9941","82Ks/4KsNMb5tWebKdkrjN","29oUQ15NxPaKUOz9YbBw6s","4bmlw3HvhF37V/PPHel0BL","eenvN61m1J25ES4hlCTLgA","06MMkdH6pNhKZqBtxYqyPy@cf430","06MMkdH6pNhKZqBtxYqyPy@5c421","99kTuj6AdCQIazXDT4o01G@17952","08FmsGFj1Co4ghvRCNe7l5@90a35","08FmsGFj1Co4ghvRCNe7l5@18907","bbxquLWAtDM56TUeCDZ87V","0cncXbHXVKrptSq+AdfWyS@44601","0cncXbHXVKrptSq+AdfWyS@5b1d4","37va5QrUtP/JGot/vFsItw@da86b","03ixxzscFFYoCbEmhiQ0Qm","aeexYGWwFBx4/P4A1FmrNR@7db75","05hDFigw9Fs7n49sR2mEnv","cdd4jL2d5MHobR0bJXPk+p@bb2af","d7wH9C0bBCtaFJatphTN15","d67DVgTPVDBqT+VYeDQRQS","ae3zwNoPNNVp2Rm9uUOEmG","0eL3jHrchEELnt8g+JGmN5@6dda2","0eL3jHrchEELnt8g+JGmN5@93735","27VfxVWOVA6rDLTZ1MnbiW@f7074","4bvvxTQ41An65r34u2+RCT@c85cb","12sy2vqsxLpqLQvPfA0KeZ@73df1","12sy2vqsxLpqLQvPfA0KeZ@09513","157kFjB6NI0ZjFgeb01vKP@6c48a","57UgcWSMhKGYrPQcn4d3+w@f9941","a26C2ljdZCWpHXja4Ih+g+","e7PMULPuZHvJ96CO6lleMc","43Y5sG4OJFvpzoSoHKqyCR","1a1aN0gIJGt7siiTc3mWZi@6c48a","1bd/J2kzBPkY7C0fOYrsCI@a4e62","1bd/J2kzBPkY7C0fOYrsCI@0344e","1daJeGv8hIBrCDYRrW8dol@ade6d","1daJeGv8hIBrCDYRrW8dol@e97c4","1e607HVMZANbi5JiRYPqdU@44b9f","1e607HVMZANbi5JiRYPqdU@bea09","1f5N8l5DtKo7EOlIrVguDz@9f069","1f5N8l5DtKo7EOlIrVguDz@d8f22","1daJeGv8hIBrCDYRrW8dol@d56b5","20g1ukYUVPvKWKBRznAKo+@6c48a","241GIJ2WNDHbLpgPiQ5x0X@6c48a","27VfxVWOVA6rDLTZ1MnbiW@2bc87","27VfxVWOVA6rDLTZ1MnbiW@b608f","c0jFfpqVRHT7CURHvk4fvb@b4cec","2bPjo1Qg5FVLrp8u3QUuoQ@6c48a","839RfstXxF1IRJtXXY4dMg@e77e3","faXyixPOVNDpnBXexCNF94@5c421","38DQ4H1I5MQarUOFUtEorv@645cb","75nOjWMaNNM6O2nQlEHYt7@7d0a2","72+J64IjVIOrRmgyy/lnXd@c92ed","6e4K2/7wlA0YOeKN3qHRnQ@2adba","f0pBWTlVZJIpU8Yx3lx/y6@cab79","64co0hzn5O+arcUKwiJ08r@42227","d89A+bjdBGGYYK1qwFkpFG@bb1eb","71QcKMevNLpbsJiogRDfJP@60715","ac/E7VCehGt492ycDEpguF@45a4e","01nr6V6JZHxpejrthNEAnp@e6f22","bbnXRp0K1Mw4uLpL5oQiBL@d84ae","2euHe/WatLXoRwOBRtxds2@1bb18","6blRW5aUJPw5VjZt4Xbkqv@af651","32y3a3zYRGbIfr9bwsc2dE@73c61","32y3a3zYRGbIfr9bwsc2dE@ac3e5","57ZD14qyZKl6FktQ6+Qjh9@e8225","85dFCHoWBCsKYCMuqh7xbZ@6c48a","37va5QrUtP/JGot/vFsItw@d52e4","37va5QrUtP/JGot/vFsItw@fd4a2","38DQ4H1I5MQarUOFUtEorv@2e2da","38DQ4H1I5MQarUOFUtEorv@42545","92hV48pOxDDa4wIgjMt/kp","b5/33byRRG6JdPhtE/zhwn","7026fl0s9G2Jo7UWJCVgAy","c2gPFv/ihDg6Z1bNAaSRKt","c9ltVKPvNC/5zDVa1BAVcy","3cf1Cu9OZEOKuuYAae5+Rh@81c0f","3cf1Cu9OZEOKuuYAae5+Rh@3a858","3dDqYolTNDSqjncv35pTnp@35fe0","3dDqYolTNDSqjncv35pTnp@88b23","a2gmgH3nVPkqxj293IDuzr","5cgLF+TQxFnKfPzycxCxAG@6812d","b7kHmp0sBN66Kok5I3wbCS@d1e5f","99QdSVSUVF4J/vB3sez3aS@c1af8","adb0W5KlZCJ6VOcijwcTox@32c6a","544gKVZjlGvoNIwG/+pV5M@3f7b0","e1OFZtympH55XYter7c/Rl@3f590","c7suwoopNKyaOehSH43jdV@f9e07","3f3kXI7mNEy4vMcK+v0ih7","a8WTSC+p5Ac4RLhvklaxxH","52/3KBSHFCnogqwkNfU59v","25Yl5NS6tPbbxYUK9N0I3d","fa3FAsExZMKK1z+NeBxmoY","3ettQ3QCNBsIV+Ealfpdy6@9bcf8","3ettQ3QCNBsIV+Ealfpdy6@6fdb7","3fyClbaGJFz5H8HgmoHoqe@cdfe2","db24Ij7r1Ieren4RiiVlV6","43SroQCgBLm5cYmZapgjMA@6c48a","97D4OuyNdL048sZ4Hfej5U@6db04","b6EeQM+jlLDZQ7NvzDzsDL","9aoz2rn7xBlYgMOZV83Bo6","1bAV+vNoVMqp1RogaYL/xj","49gzYSRRlNzK/ZDiJm3lbe@6c48a","87tKi3j3xGI7U2z3cw/X+p","09WFbRUDVEOYJaLcKaympJ","4bvvxTQ41An65r34u2+RCT@5b57a","4bvvxTQ41An65r34u2+RCT@d78fc","4b08OquSJNOoZ3Xx5PCwTx@6c48a","4eichtYuBFK7GEybo4VuId@242c0","4eichtYuBFK7GEybo4VuId@b2c37","50u6ipYltAeYiOa0/0WAHT@4d711","50u6ipYltAeYiOa0/0WAHT@b80d4","51kbPy0wNMPJtRnUwbu5Rb@ea756","51+JWUM45MvrNqh3cPhmeH@f241c","51+JWUM45MvrNqh3cPhmeH@5c421","54TknWPwVPqJqeCR+Y/Czo@6c48a","efSWrXlz9INroB4y8mvMsA","f6/JQLPIVOvYoeuYugLfYX","1bpVTi2v9GU7HwEjniKBrr","1f5N8l5DtKo7EOlIrVguDz@8db91","06MMkdH6pNhKZqBtxYqyPy@2f010","51+JWUM45MvrNqh3cPhmeH@cd7f2","84ODC1/Z1JU4OMZPfhiGad","b5fcGoXR5IT4ljeGZ6l7YU","3eNg0FzJ1LYpk0W9Vf1D4f","544gKVZjlGvoNIwG/+pV5M@cbb8f","57UgcWSMhKGYrPQcn4d3+w@6c48a","57ZD14qyZKl6FktQ6+Qjh9@e6475","57ZD14qyZKl6FktQ6+Qjh9@d482b","5aW5bNec9J5ohbBumvdHmx@6c48a","5cgLF+TQxFnKfPzycxCxAG@d8d51","5dG1KYKNZFUbeRQvNPn8j/@53f97","5dG1KYKNZFUbeRQvNPn8j/@54ccb","32y3a3zYRGbIfr9bwsc2dE@45dd9","64co0hzn5O+arcUKwiJ08r@2dd45","64co0hzn5O+arcUKwiJ08r@b45a1","65tIBARy5Fa6lYC4Ffs/ji@6c48a","d9ZnhwpcVKr4AW85ZL7451@d639f","68hiAjVTFOA5D4sQ/6zDuE@d3bd4","68hiAjVTFOA5D4sQ/6zDuE@41ac8","6blRW5aUJPw5VjZt4Xbkqv@5b9a6","6blRW5aUJPw5VjZt4Xbkqv@45f73","6eWV7ZPUdAkqYEWkdjVAjG@eb276","6eWV7ZPUdAkqYEWkdjVAjG@c6e33","6eWV7ZPUdAkqYEWkdjVAjG@6924c","6e4K2/7wlA0YOeKN3qHRnQ@21c72","6e4K2/7wlA0YOeKN3qHRnQ@d8a69","68hiAjVTFOA5D4sQ/6zDuE@2fafe","c5M9doA3pGgIc+Via6NGbh","12Y9dMgWdJKJGmTiZyQR9H@8abdc","d9RMZX25xChKHQL/qig5yS","95HVcRh25OW5y2llI+JaAl","71QcKMevNLpbsJiogRDfJP@812cc","71QcKMevNLpbsJiogRDfJP@38a9f","72+J64IjVIOrRmgyy/lnXd@12f8c","72+J64IjVIOrRmgyy/lnXd@e97c4","75nOjWMaNNM6O2nQlEHYt7@ce9cd","75nOjWMaNNM6O2nQlEHYt7@2e7eb","76XbSWhf5Nu58yy09j/dWf@5150d","33bTAlU99GPqR9S1pVwfwG","9dHuzRYYRNR73ufZTBAqZE","1e607HVMZANbi5JiRYPqdU@6397a","887sx7tMVKYKVim2mSSVLr@d4ad7","cc3d8D7q9FdLruQQRoJZ7I@3f699","29+emHF1hFVbG8frdX5o2E","79Ju9BC4VLDYixxI6tI6b+@6c48a","7dSdBs77VBP4APJEj/UYIH@43857","0dwSBnz6BG3qs2NZBNufsF","781bTuBc5P9qHwbxkDNOAU","4bXnRMNsJFfKyg2voQgyYi","54xYIybcFMDLSvj1dzHUII","2d3P7E3kRGS4zi0oLIlz21","951aZ5srZK/aFEMzXdz/IR","54thyxc4pFqaduGFl3q5LF","80YG8VVkhEEaRlhrbORGB5@cca6e","80YG8VVkhEEaRlhrbORGB5@0d8b3","27Yo5aAR5Ntb+jgfErw+a7","e0iwNJUNdK4ropj/s+sFyb","839RfstXxF1IRJtXXY4dMg@bafe5","839RfstXxF1IRJtXXY4dMg@90ea3","cfTpGFd81Ksq68S9yz0+J9@2f364","89MXmCUv9Ov4RziM+8aRE8@0fcfa","3fyClbaGJFz5H8HgmoHoqe@ec7f1","edgBqm/ttJybdMEeLCQl0P@1eac0","2euHe/WatLXoRwOBRtxds2@4f646","9aOcxg+KhEH478N+yKTA8s@57ec8","b5YpM+QfJKJrddvoJe2V7h@a8d5c","03W/ragWhDzJrSgY7NV0Xq","dc8gycz/hHBa6mqN0iAl6h","e2zJH57A1D24RynW/Wk2X3","e0mTQiWY5KzpKJ9Y5LPy2W","10p6KV/8pHWpSgvzk57olP","72cHf4qa9JMZ2cUkRATyhN","6eS5tpSOdAKJcUmgGI1A9F","4cDlFcgTlMvbDW40+xfCPe","12sy2vqsxLpqLQvPfA0KeZ@33aff","887sx7tMVKYKVim2mSSVLr@3604e","887sx7tMVKYKVim2mSSVLr@7594b","89MXmCUv9Ov4RziM+8aRE8@7a59b","e7wl1ZzhJDTaXvTIqIqHBa@08914","8bv4XdXL5LnoyPRyZ6e/pb@abfda","8bv4XdXL5LnoyPRyZ6e/pb@40189","8dRQX+HDBMdoYGFV6I2gOP@6c48a","94TkpVKsxHopwRMEB9lMDk@6c48a","95EkngnxZFbYuFpsqVTaFr@6c48a","f9KCwKSP5BEpXjaqOqSOPT@c5828","97D4OuyNdL048sZ4Hfej5U@44804","97D4OuyNdL048sZ4Hfej5U@d8a69","99QdSVSUVF4J/vB3sez3aS@eea49","99kTuj6AdCQIazXDT4o01G@dfbcf","99kTuj6AdCQIazXDT4o01G@97b51","3cf1Cu9OZEOKuuYAae5+Rh@a99af","9aOcxg+KhEH478N+yKTA8s@60679","9eGqfC7vpBVZ2wAJmO3l5j@138db","9ffY+YuVtHsq1iC4psITsd@b9763","9ffY+YuVtHsq1iC4psITsd@cce37","a0jTGwZcpAloFOuEbZ5TrX@6c48a","a04HV/W0xMMoVGPgjU6o7x@6284c","a04HV/W0xMMoVGPgjU6o7x@a8165","5dG1KYKNZFUbeRQvNPn8j/@d8169","0eL3jHrchEELnt8g+JGmN5@62b5e","0bznSYcKZJi6sduVI4brQz@6c48a","173rzDCmtLirAL3Fi4hVge","a04HV/W0xMMoVGPgjU6o7x@6c586","ac/E7VCehGt492ycDEpguF@20240","ac/E7VCehGt492ycDEpguF@f702a","adOqJthyJBa6G6PzIWKael@21ffe","adOqJthyJBa6G6PzIWKael@70a10","adb0W5KlZCJ6VOcijwcTox@18557","aeexYGWwFBx4/P4A1FmrNR@063ae","aeexYGWwFBx4/P4A1FmrNR@70a10","b2fqEhseNB9qTwg3eaBMji@bf9fa","3dDqYolTNDSqjncv35pTnp@78c48","b5YpM+QfJKJrddvoJe2V7h@859cb","a7NEhiVaxOmq4ruDBFL7K9","b2fqEhseNB9qTwg3eaBMji@70c3d","c7eWgrp05Enq1HV2tAbbSY@0c18a","76XbSWhf5Nu58yy09j/dWf@482cf","7dSdBs77VBP4APJEj/UYIH@862d4","dbz5zR6GJGgavEM9jY6fNA@d23d2","51kbPy0wNMPJtRnUwbu5Rb@baa15","9eGqfC7vpBVZ2wAJmO3l5j@4b134","0f0VKeb/tP5Z5MbsvGXcA9","49Qq489O5Hi6r0+HouM4le","b5rsshQg9I4JpG2RvaPVao@6c48a","08FmsGFj1Co4ghvRCNe7l5@6ad9c","b7MFJ8MjNBwqr3fNq1j5dJ@6c48a","b7kHmp0sBN66Kok5I3wbCS@eb87c","bafsmQ4F9IPYq/xDVO6sYR@6c48a","bbnXRp0K1Mw4uLpL5oQiBL@77a1a","bbnXRp0K1Mw4uLpL5oQiBL@05e54","2bPjo1Qg5FVLrp8u3QUuoQ@f9941","b3DAUapdlHIrpydKKLVWLw","eeY+2/plNA04Nwi5+bGlEx@6c48a","e7MSwmStpEE7PsJu7sJ5Xb","beqIctrg1Fg4PXs0xj8fQ4@6c48a","bfNVUHhrFPNIWzAa+CQXD4@285dd","bfNVUHhrFPNIWzAa+CQXD4@0b3b2","1bd/J2kzBPkY7C0fOYrsCI@7fb70","c0jFfpqVRHT7CURHvk4fvb@a0177","c0jFfpqVRHT7CURHvk4fvb@9a1ef","c3Lgor+oJM4YuPcWlFspp8@6c48a","c4CtF7uJVCJoHMKQxzNRRy@6c48a","c43pGCiiVCMZE4miDEprLc@f0cae","c43pGCiiVCMZE4miDEprLc@13319","c7eWgrp05Enq1HV2tAbbSY@34d41","c7suwoopNKyaOehSH43jdV@308f0","ccN4VA4YxDnKzLe2fpCME6@6c48a","cc3d8D7q9FdLruQQRoJZ7I@788b3","cc3d8D7q9FdLruQQRoJZ7I@03807","cdd4jL2d5MHobR0bJXPk+p@5a3b5","cfTpGFd81Ksq68S9yz0+J9@9645f","d6K6NwbqpC45SpBRkP3qEa@7c7f1","d6K6NwbqpC45SpBRkP3qEa@70a10","a9ETyHmtxL7ZgQUFsXomB/@6c48a","d8ITjdJ65J27jrON7HkdFq@6c48a","d89A+bjdBGGYYK1qwFkpFG@f7ea1","d89A+bjdBGGYYK1qwFkpFG@c5c89","d9ZnhwpcVKr4AW85ZL7451@64cfc","d9ZnhwpcVKr4AW85ZL7451@c2d4f","d94i0LLVpK0L14aPzYufNe@39098","d94i0LLVpK0L14aPzYufNe@3e56e","dbz5zR6GJGgavEM9jY6fNA@5c390","e1OFZtympH55XYter7c/Rl@affd9","e4aje+YNlLwa4SzSuuT/8B@42735","e4aje+YNlLwa4SzSuuT/8B@69165","e7OyE7YyBP7bbIReQmk86U@6c48a","b1rQPh77NAaZJBX/dr1+Ar","e7wl1ZzhJDTaXvTIqIqHBa@ef971","e7wl1ZzhJDTaXvTIqIqHBa@7b9da","58ahD5ralG5KIRLQcM8L40","55MQA5ZUZF6Y3iJniueAFV","6azJRRF8JEQZM4Gw+10rzh","380uoHmM1HtKcv03PyFCwH","7eenc3FFNGN6/glekiVICJ","04LhIy85JCmbmQVZHzS090","3ei5zKrUJCx4xF78MRFuS+","01mn1bEapACoLPFDcK4EFU","4cybZ2qzJJ07lniGvIpH5X","5c6cseuftEQJad2kXSV8F7","0cm26aWc5JQr7siuI5CmGK","055vq6wg9PRY4THynhWSRe","d0MqyYBeFAkIi762QNy1/B@b47c0","6fAc9/gb9Kfr1dCvwZaWSA@b47c0","29Zz/LetFFhpmd4nvWMTxw","edgBqm/ttJybdMEeLCQl0P@fbe56","ed2tjZAfhIqrlraFn0z6nP@5f9a5","ed2tjZAfhIqrlraFn0z6nP@70a10","bc+GnKT9xOaaUJecB3oSUH","a9eAdJiaFGda//Klslv4it","79P9UX5atAO6K8Mzyw4AQt","79R7fJtO1KiqNW7q1HDgiS","cdd8whYh1C9YvxboJd5DGq","77319xcVtIVIqWDgjGtjOo","d1pFXxrpBJMq/39g8/hIfX","a6bd/eEepK6pX/n5+Slzqj","9dA4XZosFMjZ/ADX+l1L82","15kUMzY/pF+pSEXOWavKEN","97Wsy2Q4ZJT7NkbW9Scn02","39/bzMxaBEg5KqRxs86O5d","83iNWgbgRDQZKdgHKv/ssH","78RkkNifNHWpN2ML+v1cVS","11S/8b2iROW505BqefxqkJ","0d2QUqmkBMe7VizaI7S7Ja","b21d8/fSVOSKLNyR0u9eCl","bdarPXFvBKiZybpkyEls5G","84SJNDsWVPaIwSMG6fK6OI","01lHNM9H5P85aJxnbRAWno","6bBUIuuthNH6NZx0cOb2pQ","f0pBWTlVZJIpU8Yx3lx/y6@de7e1","f0pBWTlVZJIpU8Yx3lx/y6@f051b","d94i0LLVpK0L14aPzYufNe@fd5ac","9ffY+YuVtHsq1iC4psITsd@9274c","f8vRAzBmZDLYo/mQ/+ndIe@185d8","f8vRAzBmZDLYo/mQ/+ndIe@5c421","f9KCwKSP5BEpXjaqOqSOPT@83c18","f9KCwKSP5BEpXjaqOqSOPT@b4f62","e4aje+YNlLwa4SzSuuT/8B@7569e","4eichtYuBFK7GEybo4VuId@2e1d1","8bv4XdXL5LnoyPRyZ6e/pb@6e50e","9aO6YgMLJLcreXFivvADdM","ff7PlvTktOT4dPeAF91EKl@0ca75","ff7PlvTktOT4dPeAF91EKl@4ac35"],["node","targetInfo","root","target","_particleSystem","_mainTexture","_spriteFrame","_parent","asset","data","_mesh","value","_effectAsset","source","to","from","clip","_target","_defaultClip","_font","_stunController","_textureSource","_anyState","_exitState","_entryState","_normalSprite","graph","_movement","_hpManager","commonLabel","mainTexture","shootPrefab","headModel","_animator","_worldSettingsPrefab","_hoverSprite","_pressedSprite","_disabledSprite","_enemy","_towersDataPrefab","entryNode","_button","_material2","prefabRootNode","_attackVFX","_detectionRange","_targetChooserPrefab","_setModelsToUI","_formatter","_collider","noise1Texture","noise2Texture","_adsButton","_levelHintsPrefab","_activeStarSprite","_inactiveStarSprite","_pointerNode","_towerBaseParent","_towerHeadParent","_towersBasePrefab","_lookAtTarget","_pulsarVFXScaler","_pulsarSpawnNode","_beamSpawnNode","_node","_sprite","_towerHolder","_terrainPrefab","_outterBlockPrefab","_rayDebugNode","_burnSpecialPrefab","_commonBulletPrefab","scene","_envmapHDR","_envmapLDR"],[["cc.Node",["_name","_layer","_active","_id","_objFlags","__editorExtras__","_components","_prefab","_parent","_children","_lpos","_lrot","_euler","_lscale"],-3,9,4,1,2,5,5,5,5],["cc.Widget",["_alignFlags","_alignMode","_top","_bottom","_originalWidth","_originalHeight","_left","_right","_horizontalCenter","node","__prefab","_target"],-6,1,4,1],"cc.SpriteFrame",["cc.ParticleSystem",["loop","playOnAwake","duration","_capacity","_aabbHalfX","_aabbHalfY","_simulationSpace","_prewarm","_enabled","_aabbHalfZ","startSize3D","scaleSpace","simulationSpeed","__prefab","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_trailModule","renderer","_materials","node","bursts"],-10,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,12,1,9],["cc.Node",["_name","_layer","_active","_objFlags","_id","_components","_prefab","_parent","_children","_lpos","_lscale","_lrot","_euler","__editorExtras__"],-2,12,4,1,2,5,5,5,5,11],["cc.Sprite",["_sizeMode","_type","_isTrimmedMode","_fillRange","_enabled","node","_spriteFrame","__prefab","_color"],-2,1,6,4,5],["cc.Node",["_name","_layer","_active","_components","_prefab","_parent","_lrot","_euler","_lpos","_children","_lscale"],0,2,4,1,5,5,5,2,5],["cc.ShapeModule",["_enable","radius","emitFrom","length","_shapeType","_angle","alignToDirection","radiusThickness","randomDirectionAmount","sphericalDirectionAmount","arcSpeed","_rotation","_scale","_position"],-7,4,5,5,5],["cc.Label",["_string","_actualFontSize","_fontSize","_isSystemFontUsed","_lineHeight","_overflow","_enableWrapText","_horizontalAlign","_verticalAlign","node","__prefab","_color","_font"],-6,1,4,5,6],["cc.Button",["_transition","_zoomScale","_interactable","node","__prefab","clickEvents","_normalSprite","_target","_normalColor","_hoverSprite","_pressedSprite","_disabledSprite"],0,1,4,9,6,1,5,6,6,6],["cc.RealKeyframeValue",["interpolationMode","rightTangent","leftTangent","value","rightTangentWeight","leftTangentWeight","tangentWeightMode"],-4],["cc.CurveRange",["mode","multiplier","constant","constantMax","constantMin","spline","splineMin","splineMax"],-2,4,4,4],["cc.Animation",["_enabled","playOnLoad","node","_clips","__prefab","_defaultClip"],1,1,3,4,6],["cc.Layout",["_layoutType","_resizeMode","_spacingX","_spacingY","_enabled","_paddingBottom","_constraint","_constraintNum","_paddingLeft","_paddingRight","_paddingTop","_verticalDirection","_isAlign","node","__prefab"],-10,1,4],["cc.ParticleSystemRenderer",["_renderMode","_alignSpace","_velocityScale","_mainTexture","_mesh"],0,6,6],["cc.animation.AnimationTransition",["duration","exitConditionEnabled","relativeDuration","_exitCondition","from","to","conditions"],-1,1,1,9],["cc.Node",["_name","_layer","_children","_prefab","_components","_parent","_lpos"],1,12,4,9,1,5],["cc.ParticleSystem",["loop","playOnAwake","duration","startSize3D","startRotation3D","_simulationSpace","node","__prefab","_materials","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_trailModule","renderer","bursts"],-3,1,4,3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,9],["cc.UITransform",["node","__prefab","_contentSize","_anchorPoint"],3,1,4,5,5],["1eddcq+dFJL6Kd35j8xBAOw",["duration","easing","useCustomStartValue","valueStart","valueEnd","node","__prefab","target","onComplete"],-2,1,4,1,9],["cc.ClickEvent",["_componentId","handler","customEventData","target"],0,1],["cc.GradientRange",["_mode","gradient","color","colorMin","colorMax","gradientMin","gradientMax"],2,4,5,5,5,4,4],["cc.PrefabInstance",["fileId","propertyOverrides","prefabRootNode","mountedComponents","mountedChildren"],2,9,1,9,9],["cc.PrefabInfo",["fileId","targetOverrides","root","asset","instance","nestedPrefabInstanceRoots"],1,1,6,4,2],["cc.MeshRenderer",["_name","_enabled","node","__prefab","lightmapSettings","_mesh","_materials"],1,1,4,4,6,3],["cc.Material",["_defines","_states","_name","_techIdx","_props"],-1,12],["cc.ColorKey",["time","color"],2,5],["cc.TextureAnimationModule",["_numTilesX","_numTilesY","_enable","cycleCount","frameOverTime","startFrame"],-1,4,4],["da750P4YkNMQaDYb6vs4+jf",["_eventID","_delay","node","_onEventRaised","__prefab"],1,1,9,4],["cc.TargetOverrideInfo",["propertyPath","targetInfo","source","target","sourceInfo"],2,4,1,1,4],["c4d68jIEQZKZ5AKzGQQzzsP",["prefix","node","commonLabel","__prefab","_formatter"],2,1,1,4,1],["c9120oqWzNEu7ayinGm/kcL",["_eventID","_delay","node","_onEventRaised","__prefab"],1,1,9,4],["cc.Camera",["_visibility","_clearFlags","_priority","_name","_projection","node","_color"],-2,1,5],["cc.PrefabInfo",["fileId","root","asset","nestedPrefabInstanceRoots","targetOverrides"],2,1,1,2,9],["cc.Gradient",["colorKeys","alphaKeys"],3,9,9],["cc.SizeOvertimeModule",["_enable","separateAxes","size","x","y","z"],1,4,4,4,4],["cc.RotationOvertimeModule",["_enable","_separateAxes","x","y","z"],1,4,4,4],["cc.TrailModule",["widthFromParticle","_enable","lifeTime","widthRatio","colorOverTrail","colorOvertime","_particleSystem"],1,4,4,4,4,1],["cc.Canvas",["_alignCanvasWithScreen","node","__prefab"],2,1,4],["2022ebMdchE2pNL1SpqTm8g",["_debug","node","_animator","__prefab"],2,1,1,4],["eb61d1BRKpDnpWImZxs1KwG",["_eventID","_data","node","__prefab"],1,1,4],["a2b25EHeuNHtrhlTfnn9xoq",["_key","_delay","node","__prefab"],1,1,4],["72ee5PZ+hdMopet3lRswSwG",["_onStart","node","__prefab"],3,9,1,4],["cc.animation.AnimationController",["node","__prefab","graph"],3,1,4,6],["aef56Y21r9E+J7yXKIjObFP",["_enemyID","_tier","node","__prefab","_initializeEnemyData","_hpManager","_movement","_stunController"],1,1,4,9,1,1,1],["133b7ahIhlFXJe04KNJ+98c",["node","__prefab","_onDeath","_enemy","_onHit"],3,1,4,9,1,9],["80495HhBfdC64qEifbVQrbr",["_buttonState","node","__prefab","_setCost","_button","_hideButton","_setButtonActive","_setButtonInactive","_hideClickedButton","_setName","_setEnable","_setDisable","_setButtonSelected","_setButtonDeselected","_setButtonLocked","_setButtonUnlocked"],2,1,4,9,1,9,9,9,9,9,9,9,9,9,9,9],["cc.LabelOutline",["_width","_enabled","node","__prefab","_color"],1,1,4,5],["cc.animation.BindableNumber",["variable","value"],1],["ColumnDelayData",["delay","column"],1],["c3d3d1BwjRM46w7Jwj5DBqA",["elasticity","to","__prefab","node","target"],2,5,4,1,1],["cc.Prefab",["_name"],2],["cc.Node",["_name","_children","_components","_prefab","_parent","_lscale"],2,12,12,4,1,5],["cc.Node",["_name","_layer","_objFlags","__editorExtras__","_prefab","_children","_components","_parent"],-1,4,12,2,4],["a8166/pfj5AOJwP6C7HTwV/",["_key","node","_onKeyPressed","__prefab"],2,1,9,4],["99672sUg5NFw4x7bEPAiyHE",["node","__prefab"],3,1,4],["cc.Material",["_props","_defines","_states"],0],["cc.ParticleSystem",["duration","_materials","startSize3D","startRotation3D","loop","playOnAwake","_capacity","node","__prefab","startColor","startSizeX","startSizeY","startSizeZ","startSpeed","startRotationX","startRotationY","startRotationZ","startDelay","startLifetime","gravityModifier","rateOverTime","rateOverDistance","bursts","_colorOverLifetimeModule","_shapeModule","_sizeOvertimeModule","_velocityOvertimeModule","_forceOvertimeModule","_limitVelocityOvertimeModule","_rotationOvertimeModule","_textureAnimationModule","_trailModule","renderer"],-4,1,4,4,4,4,4,4,4,4,4,4,4,4,4,4,9,4,4,4,4,4,4,4,4,4,4],["cc.Burst",["_time","count"],2,4],["cc.ColorOvertimeModule",["_enable","color"],2,4],["cc.AlphaKey",["alpha","time"],1],["cc.VelocityOvertimeModule",["_enable","x","y","z","speedModifier"],2,4,4,4,4],["cc.LimitVelocityOvertimeModule",["dampen","limitX","limitY","limitZ","limit"],2,4,4,4,4],["12ea43w32ZDAL2+IVCNZlsZ",["duration","node","__prefab","target","valueEnd","valueStart"],2,1,4,1,5,5],["645f8g3LiVNPYTP4Crp5TTR",["node","__prefab"],3,1,4],["cc.UIOpacity",["_opacity","node","__prefab"],2,1,4],["Data",["_key","_actions"],2,9],["51cbayfFYRI0b4PXBU6JCiq",["_eventID","node","__prefab"],2,1,4],["ac879rTendCEbpZWFz/jexs",["_audioKey","node","__prefab"],2,1,4],["0ca47t6TKlPq7GfoQTtu5fu",["_levelOffset","node","_setCurrentLevel","__prefab"],2,1,9,4],["dd9c0fxyXpOX7Q1l8AlM8Gz",["_eventID","node","_onEventRaised","__prefab"],2,1,9,4],["cc.RigidBody",["_type","_group","node","__prefab"],1,1,4],["cc.BoxCollider",["_isTrigger","node","__prefab","_size","_center"],2,1,4,5,5],["1bef6jJvZ9JSrZKP9zLO/+3",["__prefab","_onStunBegin","_onStunEnd","node"],3,4,9,9,1],["cc.animation.Layer",["name","_stateMachine"],2,4],["cc.animation.TriggerVariable",["_flags"],2],["cc.animation.ClipMotion",["clip"],3,6],["cd32dlNM6hEkokUGHlLV8y+",["_eventID","_data","node","__prefab"],1,1,4],["b2629pBo9BDtrAXL8hN6QoS",["__prefab","node","_button"],3,4,1,1],["cc.EffectAsset",["_name","shaders","techniques","combinations"],-1],["cc.animation.PlainVariable",["_type","_value"],1],["cc.animation.UnaryCondition",["operator","operand"],2,4],["d9dbaePcK9EmpC+u+4XoTKT",["_emptyChange","_debug","node","__prefab","_objects"],1,1,4,9],["UpgradeState",["_currentStateID","_nextStateID","_costToUpgrade","_readableName","_id","_modelNode"],-2,1],["925cc7HsYRKfKoUI6HIv/Em",["duration","useRelativeValue","__prefab","onComplete","valueEnd","node","target"],1,4,9,5,1,1],["WorldSettingsData",["maxLevel","worldID","minLevel"],0],["TowerUpgradeEntryData",["entryType","entryNode"],2,1],["LevelHintData",["levelID","info","displayType","displayTowerID","displayEnemyID"],-2],["ebaab2OBJ5OarmKfYyuWVeW",["_sceneLoaderEventId","_sceneName","_delay","node"],0,1],["TowerData",["id","storeID","description","readableName","upgradeID","headModel"],-2,6],["cc.PrefabInfo",["fileId","targetOverrides","root","asset","nestedPrefabInstanceRoots"],1,1,1,2],["cc.PrefabInfo",["fileId","root","instance","targetOverrides","asset"],2,1,4,9,6],["cc.CompPrefabInfo",["fileId"],2],["cc.ModelLightmapSettings",[],3],["17bd6e7Ug9Jf40Gp1zz8+EI",["_freezeDuration","node","__prefab"],2,1,4],["cc.Mesh",["_native","_hash","_struct"],1,11],["cf6d2i9odJJNo3fjHspWuC9",["node","__prefab","_onEnable","_onCollided","_onCollidedParticles"],3,1,4,9,9,2],["cc.RealCurve",["_times","_values"],2,9],["cc.ForceOvertimeModule",["x","y","z"],3,4,4,4],["12ea43w32ZDAL2+IVCNZlsZ",["target","duration","node","__prefab","valueStart","valueEnd"],1,1,4,5,5],["ca75cIVvLBMl7Ykys8006FJ",["_initialEnergy","_rechargeAmount","_maxEnergy","node","__prefab","_towersDataPrefab"],0,1,4,6],["b1095ptzkVKS5ePz++tOAKw",["_eventID","node","__prefab","_onEventRaised"],2,1,4,9],["26530mDlypKVbgkyPCFjn/T",["node","__prefab","_enemyPrefabs","_setModelsToUI"],3,1,4,3,1],["5e48d52AelOTqiPc6aCFTma",["_includeChildren","_runOnLoad","node","__prefab"],1,1,4],["cc.TargetOverrideInfo",["propertyPath","source","targetInfo"],2,4,4],["cc.TargetInfo",["localID"],2],["cc.PrefabInstance",["fileId","prefabRootNode","propertyOverrides"],1,9],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,8],["CCPropertyOverrideInfo",["value","propertyPath","targetInfo"],1,4],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,8],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,4,6],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,6],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,1],["CCPropertyOverrideInfo",["propertyPath","targetInfo","value"],2,1,4],["cc.Animation",["_clips","node","__prefab"],2,1,4],["53d3fTbnFxPOLwJ9KE2Kruy",["node","__prefab","_animationEvents"],3,1,4,9],["3ee1589zapM9JITH6e5vok4",["node","__prefab"],3,1,4],["cc.BlockInputEvents",["node","__prefab"],3,1,4],["2e422rMyxhPNoAP/9tU8bNO",["node","__prefab","_hpEntries","_setCurrentValue","_animateCurrentValue","_setTotalValue"],3,1,4,2,9,9,9],["48f99m4mrhOfJj9PX5MTE9r",["node","__prefab","_starsAnimators","_activeStarSprite","_inactiveStarSprite"],3,1,4,2,6,6],["cc.MountedComponentsInfo",["targetInfo","components"],3,4,9],["cc.MountedComponentsInfo",["targetInfo","components"],3,4,2],["cc.UIMeshRenderer",["__prefab"],3,4],["bf1ee1D121LrYfqbYo8LfSs",["node","__prefab","_setCurrentValue","_setTotalValue"],3,1,4,9,9],["826172kECFGjq4DVDVtJUzR",["node","__prefab","_energyEntries","_energyLockEntries","_setCurrentValue","_setTotalValue","_onEnergyFull","_onNotEnergyFull"],3,1,4,2,2,9,9,9,9],["38246A7yIhB9pH55CZX1oMb",["node","__prefab","_setHintText","_setHintModel","_levelHintsPrefab"],3,1,4,9,9,6],["09fd5YmvChK1qMRLrEa1jkX",["_eventID","node","__prefab"],2,1,4],["45356D3D1dGypgAffMAEUkM",["node","__prefab","_adsButton","_openAdsPanelButton"],3,1,4,1,1],["8caceFDiJpLCp8Q+7rXBUKZ",["_eventID","node","__prefab","_onEventRaised"],2,1,4,9],["634b0b0+spC5rwO9HtRDINm",["_eventID","node","__prefab","_onEventRaised"],2,1,4,9],["2c777uJJKlMQKZijqaRubSj",["_eventID","node","__prefab","_onEventRaised"],2,1,4,9],["eff21f12D1AfZxhjzNkUlQX",["_eventID","node","__prefab","_onEventRaised"],2,1,4,9],["042b84REhpIkrcWQXDTBB9U",["_length","node","__prefab"],2,1,4],["cc.SphereCollider",["_isTrigger","_radius","node","__prefab"],1,1,4],["5a0eaVysqhMqoORZai6uA9P",["__prefab","_target"],3,4,1],["62285pUnQZPabUSSmdd/Zu1",["node","__prefab","_pSystems","_onFinished"],3,1,4,2,9],["f42c8MUO3JGzqBnIvM7zfpb",["node","__prefab","_targetNode","_onReachedDestination"],3,1,4,1,9],["4dee2eFUPZHNKQRW/WBo2uh",["node","__prefab","_pointerParent","_pointerNode","_uiPositionOffset","_onShow","_onHide","_uiConstructionPosition","_uiUpgradePosition","_uiScale","_commonScale"],3,1,4,1,1,8,9,9,5,5,5,5],["78e68VG5n1LtqisCiyJPS9I",["_eventID","node","__prefab","_onEventRaised"],2,1,4,9],["ea4deEUC69CLYW1FXWHWimn",["node","__prefab","_onSpawn"],3,1,4,9],["cc.MountedChildrenInfo",["targetInfo","nodes"],3,4,2],["b6b88lnaNhOIYa+C0LFNa5B",["node","__prefab","_sfxs"],3,1,4,2],["f55faVr9BhB65ZsbgP52ExD",["node","__prefab","_themeModels","_worldSettingsPrefab"],3,1,4,2,6],["71b59j50pJOQYyfqjE0LpJs",["node","__prefab","_enemy"],3,1,4,1],["28a939hTddDx7kAZtJaeXXi",["_loop","_duration","node","__prefab","_onReachTimer"],1,1,4,9],["cc.animation.AnimationGraph",["_layers","_variables"],3,9,11],["cc.animation.StateMachine",["_states","_transitions","_entryState","_exitState","_anyState"],3,2,9,1,1,1],["cc.animation.Transition",["from","to"],3,1,1],["cc.animation.TriggerCondition",["trigger"],2],["cc.animation.State",["name"],2],["cc.animation.Motion",["name","motion"],2,4],["9724cyw/qJC54XASWo2Oks7",["_destroyTowerTitle","_destroyTowerDescription","_levelUpTowerDescription","node","__prefab","_enableStats","_disableStats","_setName","_setDescription","_setDamage","_setSpeed","_setRange"],0,1,4,9,9,9,9,9,9,9],["12290cr8jJAjbgZr/tKZ9ku",["node","__prefab","_width","_color","_material2"],3,1,4,4,4,6],["cc.animation.BinaryCondition",["lhs","rhs"],3,4,4],["cc.animation.BindableBoolean",["variable"],2],["cc.animation.EmptyStateTransition",["duration","from","to","conditions"],2,1,1,9],["cc.animation.EmptyState",["name"],2],["b65aftrretCPqoXV85A31xE",["node","__prefab"],3,1,4],["RandomizerEntry",["_chance","_node"],2,1],["c2467V6o2dIzJlGyn2L2FDD",["_randomizeOnEnable","node","__prefab","_min","_max","_targetNode"],2,1,4,5,5,2],["56f824up7tJH6vIYn6FglJc",["node","__prefab","_onEnable"],3,1,4,9],["34d5dMnUohLwIpOOtI38H+y",["node","__prefab","_towerHeadParent","_towerBaseParent","_setModelsToUI","_towersBasePrefab","_towersDataPrefab"],3,1,4,1,1,1,6,6],["6224ediLkZG84aZ/Y7G48dr",["node","__prefab","_enemiesPrefabs"],3,1,4,3],["e4500P8ArFGmJVAHcDYRV4l",["_eventID","node","__prefab","_onEventRaised"],2,1,4,9],["eabd4jLlnpI9pLiRtNsUPbD",["_damage","_radius","_attackModifier","_stunDuration","_stunFrequency","node","__prefab","_towerNode","_detectionRange","_attackVFX","_chainAttackData","_lookAtTarget","_targetChooserPrefab"],-2,1,4,1,1,1,4,1,6],["ChainSpecialData",[],3],["0e0544yblFGAInBmDlibiCW",["node","__prefab","_sfxs"],3,1,4,2],["b6223hbyb9EN43KLh0Z0lQR",["_baseTowerID","_energyCost","_currentUpgradeState","_towerType","node","__prefab","_upgrades","_onBeginDestruction"],-1,1,4,9,9],["73d3de5uWhKsLUv3xQl1Qmu",["node","__prefab","_tower","_shootVFXs","_onBeamStarted","_onBeamStopped"],3,1,4,1,9,9,9],["ShootVFXData",["key","shootPrefab"],2,6],["955699OWahJqo9EFR6ii5ti",["node","__prefab","_tower","_auraVFXs"],3,1,4,1,2],["b902aOEwNdPBYlSlwTCn6gl",["_scaleX","_scaleY","_multiplier","node","__prefab"],0,1,4],["b46f3gbdcBN4Zzu1k+puyPE",["__prefab","_renderNode"],3,4,1],["1c9a7hThbRDAZOJlNfeGc8g",["_towerType","node","__prefab","_tower","_setDamage","_setShootFrequency","_setRange","_damageModifier","_setSlow","_setStun","_setChainAttack","_setSingleTarget"],2,1,4,1,9,9,9,9,9,9,9,9],["c75d1lxJgZOt6RDeS6sCJMj",["_tutorialStartDelay","_towersIDUpgradeOrder","_towersIDConstructionOrder","node","__prefab"],0,1,4],["22dbfDFrMNJE7Cj5beOtQhf",["node","__prefab","_node"],3,1,4,1],["b2074tyucJAB5HC6PM0fXYi",["node","__prefab","_sprite","_showBar","_hideBar"],3,1,4,1,9,9],["079e0oHz71Oao8qfSApBiG5",["node","__prefab"],3,1,4],["b5600xDovpC0YN63dQkxnxN",["node","__prefab","_columnsDelays","_onShow","_onHide","_onDamage"],3,1,4,9,9,9,9],["49a11a/LjxMzoQg6t3SZkfy",["_dmg","_duration","node","__prefab","_collider","_burnParticles","_onPreFinishBurn"],1,1,4,1,2,9],["cc.CapsuleCollider",["_cylinderHeight","node","__prefab"],2,1,4],["f5a6aDPK29N6IWgXWw1eZoP",["node","__prefab"],3,1,4],["ca967I1gMNLm6CKVgweRwFH",["node","__prefab"],3,1,4],["78c1blW921HzpFUNin1bCvq",["node","__prefab","_leftBlocksData","_rightBlocksData","_topBlocksData","_bottomBlocksData"],3,1,4,4,4,4,4],["BoundaryBlockData",["blockSide","blockNodes"],2,2],["cb730GgZGlA0o2b0bqxYlIm",["node","__prefab","_onSelectedConstruction","_onDeselectedConstruction","_onDisableSelectionConstruction","_onSelectedUpgrades","_onDeselectedUpgrades","_onDisableSelectionUpgrades"],3,1,4,9,9,9,9,9,9],["9af9dOKerdLvJjnt/yI4qE+",["node","__prefab","_onTap"],3,1,4,9],["adf59GLSYVGZJ3dfVqyt6MG",["_physicsGroup","node","__prefab","_target"],2,1,4,1],["642bcspAnpEK4LUpupK8i0T",["node","__prefab","_onUpgraded","_towersDataPrefab"],3,1,4,9,6],["9c66529d09P4Zt3iRYdMpnm",["node","__prefab","_towersPrefabs","_towerHolder","_onConstructed"],3,1,4,3,1,9],["730c2m+dVlIkomlZBav90dv",["node","__prefab","_towerHolder","_onDestruct"],3,1,4,1,9],["4b49aIoOPNJGbyOKIzv2YTd",["_oneStar","_twoStars","_threeStars","node","__prefab"],0,1,4],["42f642WIEJAjprBy1WVF7oY",["node","__prefab"],3,1,4],["1bb54x5k2ZLwpsDBRHVFrFw",["node","__prefab","_entries","_onTowerConstructed","_showTowerInfo"],3,1,4,9,9,9],["TowerContructionEntryData",["entryType","entryNode"],2,1],["641aap4CudNrKMJCJ5DOmSr",["node","__prefab"],3,1,4],["85ba8zO9clG9KMZhnWVluYT",["_debug","node","__prefab"],2,1,4],["cc.Line",["node","__prefab","_width","_color"],3,1,4,4,4],["4cab1fyCaNOmL8JHIOImiw3",["node","__prefab"],3,1,4],["31cdcvhPtdJNZjVbuOE4DwI",["_eventID","node","__prefab"],2,1,4],["b091d/zYThK/q6JkfRYKBAK",["_startHP","node","__prefab","_onDamage","_onDeath","_onHPChanged","_setInitialHP"],2,1,4,9,9,9,9],["8047a44vKNE9LmKzAWzaOGd",["_eventID","node","__prefab","_onEventRaised"],2,1,4,9],["e93b2BayABBuKYLltRfqtdm",["_debug","_levelID","node","__prefab","_blocksPrefabs","_terrainPrefab","_outterBlockPrefab"],1,1,4,3,6,6],["d99f8q9JitMHpjrz0o8jKu2",["_damage","_radius","_attackCD","_sniperShotBitMask","node","__prefab","_towerNode","_detectionRange","_attackVFX","_towerHeads","_rayDebugNode","_targetChooserPrefab"],-1,1,4,1,1,1,2,1,6],["da0622vv4BBe4nNeJ2WOyKd",["_radiusMultiplier","node","__prefab","_collider"],2,1,4,1],["d955ajLtu5AIoknVee9/pvJ",["_commonBulletTime","node","__prefab","_tower","_shootVFXs","_bulletSpawnNode","_onShoot"],2,1,4,1,9,1,9],["9b749big4dCWY0qDLrSNM9k",["node","__prefab","_tower","_setDamage","_setShootFrequency","_setRange","_setCCTargets","_setSpecial1"],3,1,4,1,9,9,9,9,9],["5fec0TnEtNP1biJdJcxsype",["node","__prefab","_worlds"],3,1,4,9],["90668MDLy5GBJFMTozjY7sY",["__prefab","_showUI","_hideUI","_tierUpUpgrades","_commonUpgrades","_showUpgradeInfo","_confirmUpgrade","_confirmDestroy","_setTierUpUI","_setLevelUpUI"],3,4,9,9,9,9,9,9,9,9,9],["cc.TTFFont",["_name","_native"],1],["a7f6bBnGXlLbINkQ05pYpA3",["_damage","_radius","_attackCD","_explosionRadius","node","__prefab","_towerNode","_detectionRange","_attackVFX","_towerHeads","_targetChooserPrefab","_burnSpecialPrefab"],-1,1,4,1,1,1,2,6,6],["97706eZG7NIeIhTP7rVP1by",["_commonBulletTime","_cannonBallMaxHeight","_upDurationRatio","__prefab","_tower","_shootVFXs","_bulletSpawnNode","_onShoot"],0,4,1,9,1,9],["0839b4XFnBGtI9sWdMf7EcQ",["_towerType","node","__prefab","_tower","_setDamage","_setShootFrequency","_setRange","_setExplosionRange","_setCCTargets","_setBurn"],2,1,4,1,9,9,9,9,9,9],["cc.Mask",["node","__prefab"],3,1,4],["d9b9bef0lhJPpkTK435/cg4",["node","__prefab"],3,1,4],["710b7Q048pC8YCG3KuHhukj",["node","__prefab","_hints"],3,1,4,9],["cc.SceneAsset",["_name"],2],["cc.Scene",["_name","_children","_prefab","_globals"],2,2,4,4],["cc.SceneGlobals",["ambient","shadows","_skybox","fog","octree"],3,4,4,4,4,4],["cc.AmbientInfo",["_skyIllumLDR","_skyColorHDR","_groundAlbedoHDR","_skyColorLDR","_groundAlbedoLDR"],2,5,5,5,5],["cc.ShadowsInfo",["_shadowColor","_size"],3,5,5],["cc.SkyboxInfo",["_useHDR","_envmapHDR","_envmapLDR"],2,6,6],["cc.FogInfo",[],3],["cc.OctreeInfo",[],3],["000c51TwuJO376hxWHMUlLQ",["node"],3,1],["62983V6q7JGY4d/T7hVoD1g",["_sceneLoaderEventId","node","_onEventRaised"],2,1,9],["c99ab4sHxBIBJG6xEOLqr69",["_description","node"],2,1],["d7a81e91EBDlImajYv5iUSd",["_levelOffset","node","_setLevelSize"],2,1,9],["326a1KkFqpHRqr1jwdngHKG",["node"],3,1],["93f08a/C8BE67WCaBfvDFAN",["_text","node"],2,1],["6b287l31gNFBaX7EFR/A6A6",["node"],3,1],["a244cA/M4JL4pS/9LzK/i0G",["node"],3,1],["e0caaBJSNhJLaMvEEEox6BD",["node","_colors","_camera","_worldSettingsPrefab"],3,1,12,1,6],["4e1b0GHVi1IfJ8x0OM8H5sb",["_raycastMask","node","_camera"],2,1,1],["89893HroElBZIX8W3bm42pq",["_cameras","node"],2,1],["08524cnmRxO0573l3kVRWOj",["node","__prefab","_gunTowers","_cannonTowers","_laserTowers"],3,1,4,9,9,9]],[[11,1],[92,0,2],[33,0,1,2,2],[11,2,2],[105,0,2],[21,1],[10,0,3,1,2,5],[20,0,1,3,3],[97,0,1,2],[60,0,1,3],[108,0,1,2,2],[10,0,3,3],[11,0,1,5,3],[26,0,1,2],[107,0,1,2,3],[98,0,1,2,1],[21,0,1,2],[62,1,2,3,4,1],[18,0,1,2,1],[37,2,3,4,5,6,1],[59,0,1,2],[61,1,2,3,4,1],[110,0,1,2,2],[11,0,4,3,4],[27,4,5,1],[58,1,1],[14,3,1],[36,2,3,4,1],[109,0,1,2,3],[23,0,2,4,3,2],[11,0,5,2],[7,10,1],[35,0,2,3,4,5,2],[34,0,1,1],[93,1],[0,0,8,9,7,2],[0,4,5,8,7,3],[34,1,1],[60,0,2],[0,0,1,8,6,7,3],[111,0,1,2,2],[10,0,3,1,4,2,5,7],[22,0,2,1,2],[26,0,2],[11,0,3,3],[10,0,1,4,2,5,6],[6,0,5,3,4,2],[0,0,9,7,2],[18,0,1,1],[35,2,3,4,5,1],[51,0,2],[5,0,5,7,8,6,2],[24,2,3,6,4,5,1],[0,0,8,6,7,11,12,2],[0,0,8,6,7,2],[55,0,1,1],[21,2,1],[95,0,1,2,3],[36,0,2,3,4,2],[6,0,5,3,4,10,2],[17,2,0,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,32,22,23,24,25,26,27,28,29,30,31,4],[29,0,2,4,3,1,2],[51,1],[25,2,1,0,4,4],[6,0,1,5,3,4,6,7,3],[150,0,2],[0,0,1,8,6,7,10,3],[121,0,1,1],[20,0,1,2,3,4],[22,0,2,3,1,2],[5,1,0,5,7,8,6,3],[151,0,1,2],[10,0,3,4,5,5],[3,2,0,1,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,4],[29,0,2,3,1,2],[76,0,1],[0,0,1,8,9,6,7,10,3],[7,2,10,2],[35,0,1,2,3,4,5,3],[24,0,2,3,6,4,5,2],[0,0,8,7,2],[0,0,2,8,9,7,3],[0,4,5,7,3],[11,1,2],[15,0,1,4,5,6,3],[0,0,1,8,9,6,7,3],[33,0,1,2,4,3,2],[26,1,1],[12,1,2,4,3,5,2],[0,0,8,7,10,2],[65,1,2,1],[149,0,2],[6,0,5,3,4,6,7,2],[134,0,1,2,3,3],[6,0,1,5,3,4,3],[18,0,1,2,3,1],[136,0,1,2,3,1],[3,2,0,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,3],[17,2,0,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,32,22,23,24,25,26,27,28,29,30,31,3],[14,0,2,3,3],[18,0,2,1],[71,1,0,2,3,3],[72,0,1,2,3,2],[135,0,1,1],[137,0,1,2,3,1],[0,0,2,8,6,7,13,3],[10,3,1,4,2,5,6],[7,0,4,10,3],[14,1],[7,0,2,1,3,5,10,11,6],[61,0,1,2,3,4,2],[11,0,1,6,7,3],[25,3,1,0,4,4],[75,0,2],[83,0,1,2,4,3,5,6],[0,0,6,7,2],[29,0,3,1,2],[73,3,0,1,2,1],[155,0,2],[26,1],[147,0,1,2,3,4,1],[148,0,1,1],[59,1,1],[27,2,0,1,4,5,4],[6,0,3,4,2],[16,0,2,4,3,2],[10,1,4,2,5,5],[34,0,1],[43,0,1,1],[0,0,8,6,2],[3,2,0,1,3,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,5],[170,0,1,2],[0,0,1,9,6,7,3],[0,0,1,9,6,7,10,3],[17,2,0,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,4],[11,0,2],[10,0,6,3,1,4,2,7],[10,0,6,3,1,2,5,7],[27,2,0,1,3,4,5,5],[45,0,1,2,1],[143,0,1,2,3,1],[39,1,3,2,1],[4,0,1,7,5,6,3],[112,0,1,2,2],[68,0,1,2,2],[30,1,3,2,1],[0,0,1,8,9,7,3],[37,1,0,2,3,4,5,6,3],[5,0,5,7,6,2],[146,0,1,1],[74,1,1],[0,0,8,9,6,7,13,2],[0,0,2],[20,0,1,3],[1,0,4,5,1,9,10,5],[8,0,1,2,4,3,9,10,11,12,6],[44,0,2,3,4,5,6,7,2],[81,1,1],[83,0,1,2,3,5,5],[4,0,1,7,5,6,9,3],[3,0,1,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,3],[11,2,1,3],[1,0,4,5,9,10,4],[0,0,1,8,6,7,10,11,12,3],[0,0,8,9,6,7,2],[53,2,3,7,4,3],[45,0,1,2,3,1],[0,0,1,8,6,7,10,13,3],[25,1,0,4,3],[28,0,2,4,3,2],[1,0,6,7,2,3,4,5,9,10,8],[22,0,1,2],[114,0,1,2,2],[5,0,2,5,7,8,6,3],[80,0,1,3],[87,0,1,4,2,5],[89,0,1,2,3,5,5],[0,0,1,6,7,3],[3,2,0,1,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,4],[44,0,1,2,3,4,5,6,7,3],[76,1],[81,0,1,2],[159,0,1,2],[0,0,1,8,6,7,13,3],[0,0,1,8,6,7,11,12,3],[52,0,1,2,3,2],[20,0,1,2,4],[7,0,2,6,1,3,5,10,11,7],[7,0,4,2,1,10,5],[10,0,1,2,4],[101,0,1,2,3,2],[144,0,1,2,1],[77,0,2,3,2],[156,0,1,2,3,2],[0,0,2,8,6,7,3],[0,0,9,7,10,2],[33,0,1,2,3,2],[96,0,1,2,3,4,1],[3,0,6,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,3],[3,1,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,2],[63,0,1,2,3,5,4,2],[63,0,1,2,3,4,2],[65,0,1,2,2],[74,0,1,2],[89,0,1,2,3,4,5,6],[0,0,2,1,8,6,7,4],[0,0,2,1,8,9,6,7,4],[4,0,1,8,5,6,3],[7,0,4,2,6,1,10,6],[18,0,1],[1,0,2,1,9,10,4],[1,0,9,10,2],[29,0,2,1,2],[40,0,1,2,3,3],[5,1,0,5,7,6,3],[141,0,1,1],[157,0,2],[0,0,9,6,7,2],[0,0,8,9,6,2],[0,0,1,8,6,10,3],[4,0,1,7,5,6,10,3],[6,0,2,1,5,3,4,4],[24,0,1,2,3,4,5,3],[55,0,1],[3,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,1],[3,11,2,0,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,4],[57,0,1,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,3],[37,0,2,3,4,5,6,2],[14,0,2],[1,0,3,1,9,10,4],[1,0,6,7,2,3,4,5,9,8],[5,1,0,5,8,6,3],[8,0,1,2,5,6,9,10,11,6],[44,0,1,2,3,4,5,6,3],[73,0,1,2,1],[49,1,0,3],[0,0,2,1,8,9,6,7,10,4],[0,0,1,8,9,6,3],[0,0,1,8,6,3],[0,0,1,8,6,10,11,12,3],[6,0,5,3,4,8,6,7,2],[6,0,5,3,4,8,2],[54,0,1,2,2],[14,0,3,2],[1,0,4,1,9,10,4],[12,0,2,4,3,2],[9,0,1,3,4,5,3],[41,0,2,3,2],[118,0,1,1],[122,0,1,1],[139,0,1,2,3,2],[78,0,1],[161,0,1,2,1],[87,0,1,3,2,5],[227,0,1,2],[0,0,2,1,8,6,7,13,4],[4,0,7,8,5,6,10,2],[16,0,1,2,4,3,3],[64,0,1,1],[12,0,2,4,3,5,2],[66,0,1,2],[9,2,0,1,3,4,5,8,7,6,9,10,11,4],[9,0,3,4,5,8,7,6,9,10,11,2],[8,0,1,2,4,5,3,9,10,11,7],[129,0,1,2,3,2],[43,0,1],[15,0,4,5,2],[79,0,1,2,4],[173,0,1,1],[0,0,1,9,6,7,10,11,12,3],[0,0,8,9,6,7,10,2],[0,0,1,8,7,3],[0,0,4,1,8,6,7,4],[0,0,1,8,9,6,10,3],[4,0,1,7,8,5,6,3],[20,1],[17,0,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,32,22,23,24,25,26,27,28,29,30,31,3],[21,0,3,4,2],[21,0,5,6,2],[58,0,1,2],[27,0,1,3,4,5,4],[28,1,0,2,3,3],[38,1,2,1],[1,0,2,3,5,9,10,11,5],[1,0,1,9,10,3],[12,0,2,2],[39,0,1,3,2,2],[5,5,7,8,6,1],[5,2,5,7,8,6,2],[5,0,5,6,2],[41,0,2,2],[8,0,1,2,4,3,9,11,12,6],[70,0,1,3,2,2],[70,0,1,2,2],[47,1,0,2,3,4,3],[153,0,1,2,3,4,1],[185,0,1,2],[0,0,2,1,9,6,7,10,11,12,4],[0,0,2,1,8,6,7,10,4],[0,0,2,1,8,6,7,10,11,12,4],[0,0,1,6,7,10,3],[0,0,8,9,7,13,2],[0,0,8,7,10,11,12,2],[0,0,1,9,6,10,11,12,3],[0,0,3,8,9,3],[16,0,5,2,3,2],[53,0,1,5,6,4,3],[23,0,2,3,2],[91,0,1,2,3,4,2],[7,0,1,3,5,10,13,11,5],[62,0,1,2,3,4,2],[1,0,6,7,2,3,4,5,1,9,10,9],[1,0,6,2,1,9,10,5],[13,4,0,8,9,2,13,14,6],[12,1,4,3,5,2],[12,0,1,2,4,3,5,3],[12,2,4,3,5,1],[116,0,1,2,1],[9,0,3,5,8,7,6,9,10,11,2],[5,4,0,5,7,6,3],[5,5,7,6,1],[5,1,0,2,5,7,8,6,4],[5,0,5,8,6,2],[41,1,0,2,3],[8,0,1,2,4,3,9,10,11,6],[8,0,1,2,4,6,3,9,10,11,12,7],[8,0,1,2,4,3,9,10,6],[8,0,1,2,4,5,3,9,10,7],[71,0,2,3,2],[15,0,2,1,4,5,6,4],[15,0,4,5,6,2],[15,1,4,5,6,2],[77,0,1,2,3,3],[47,0,2,3,4,2],[47,2,3,4,1],[154,0,1,1],[48,0,2],[168,0,1,2,3,4,5,6,7,5],[171,0,1,2,3,1],[195,0,1,2],[86,0,1,2],[226,0,1,2,2],[88,0,1,3,3],[88,2,0,1,3,4],[230,0,1,2],[0,0,2,1,8,9,6,7,10,13,4],[0,0,1,8,9,6,7,10,11,12,3],[0,0,2,8,9,6,7,3],[0,0,2,8,6,7,10,13,3],[0,0,1,8,6,7,10,11,13,12,3],[0,0,9,7,10,11,12,2],[0,0,8,9,7,10,2],[0,0,2,8,9,6,7,13,3],[0,0,1,8,9,7,10,3],[0,0,8,6,7,10,13,2],[0,0,2,1,8,9,7,4],[0,0,1,8,9,6,10,11,12,3],[0,0,2,6,3],[0,0,6,2],[0,0,1,8,6,11,12,3],[4,0,1,8,5,6,9,3],[4,0,7,8,5,6,2],[16,0,5,2,4,3,2],[16,0,2,3,2],[23,0,2,4,5,3,2],[54,0,1,3,2,2],[3,2,12,3,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,4],[3,1,7,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,3],[3,2,7,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,3],[3,10,2,0,1,4,5,3,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,8],[57,2,3,0,4,5,6,1,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,8],[7,0,2,6,1,3,5,10,7],[7,0,2,1,3,5,10,6],[10,0,4,5,4],[36,0,1,2,3,4,3],[14,0,1,4,3,3],[28,1,0,2,4,3,3],[28,0,2,3,2],[103,0,1,2,3,3],[1,0,3,9,10,3],[1,0,2,3,5,1,9,10,11,6],[1,0,2,3,9,10,4],[1,0,4,9,10,3],[1,0,2,1,9,4],[1,0,4,9,3],[22,0,2,4,1,2],[22,0,2,4,3,1,2],[113,0,1,2,2],[13,1,10,5,3,13,14,5],[13,1,0,2,13,14,4],[13,1,0,3,11,12,13,14,6],[12,2,4,3,1],[9,3,4,5,7,1],[9,0,1,3,4,5,8,7,6,9,10,11,3],[9,0,1,3,4,6,3],[9,0,3,4,8,7,6,9,10,11,2],[40,0,1,2,3],[5,1,0,2,5,7,6,4],[5,2,5,8,6,2],[67,0,1,2,2],[67,0,1,2],[117,0,1,1],[30,0,1,3,2,4,2],[30,0,1,3,2,2],[8,0,7,1,2,4,3,9,10,11,7],[8,0,1,2,4,5,6,3,9,10,11,12,8],[31,0,2,4,3,2],[133,0,1,2,2],[145,0,1,2,3,4,3],[75,1],[78,1,0,2,1],[79,0,3,1,2,5],[48,1,2],[158,0,1,1],[82,0,2,3,4,2],[164,0,1,2,3,2],[49,1,2],[84,0,1,2,3,4,3],[200,0,1,2,2],[85,1,2,0,4],[86,0,2],[0,0,1,9,6,7,10,13,3],[0,0,2,1,9,6,7,10,13,4],[0,0,9,6,7,10,2],[0,0,2,1,9,6,7,10,4],[0,0,1,9,6,7,11,13,12,3],[0,0,2,6,7,3],[0,0,2,6,7,10,11,13,12,3],[0,0,2,6,7,10,13,3],[0,0,2,1,9,6,7,4],[0,0,8,6,7,13,2],[0,0,6,7,10,13,2],[0,0,2,1,9,7,10,4],[0,0,1,8,7,10,11,12,3],[0,0,8,6,7,11,13,12,2],[0,0,9,7,11,12,2],[0,0,3,9,3],[0,0,2,1,9,6,4],[0,0,2,1,9,6,10,4],[0,0,1,9,6,10,3],[0,0,2,3,8,9,6,4],[0,0,2,8,6,3],[0,0,3,8,9,6,3],[0,0,1,9,6,3],[0,0,8,6,10,2],[0,0,8,9,2],[0,0,8,6,10,11,12,2],[4,0,1,5,6,11,10,12,3],[4,0,2,1,8,5,6,9,4],[4,0,1,7,8,5,6,9,3],[4,0,1,5,6,9,3],[4,3,7,6,13,2],[4,0,1,8,5,6,10,3],[4,0,1,8,5,6,11,10,12,3],[4,0,2,1,7,5,6,10,4],[4,0,1,5,6,3],[4,0,7,5,6,2],[4,0,4,8,5,9,11,12,3],[4,0,1,5,9,3],[6,0,1,5,9,3,4,3],[6,0,1,9,3,4,6,7,3],[6,0,1,5,9,3,4,6,7,3],[6,0,5,9,3,4,6,7,2],[6,0,9,3,4,8,2],[6,0,1,9,3,4,8,3],[6,0,1,3,4,8,6,7,3],[6,0,1,5,3,4,8,6,7,3],[16,0,1,2,4,3,6,3],[52,0,4,1,2,3,5,2],[23,0,1,5,3],[90,0,1,2,3,4,3],[24,0,1,2,3,6,4,5,3],[94,0,1,2,2],[25,0,4,2],[56,0,2,1,4],[56,0,1,3],[3,2,0,1,4,5,9,6,38,13,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,8],[3,2,0,1,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,4],[3,1,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,2],[3,7,3,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,3],[3,0,1,38,13,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,3],[3,2,0,1,4,5,3,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,7],[3,0,1,4,5,9,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,6],[3,8,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,2],[3,10,2,0,1,3,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,6],[3,8,2,0,1,3,38,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,39,27,28,29,30,31,32,33,34,35,36,6],[3,8,0,6,13,37,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,4],[17,3,4,2,0,1,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,32,22,23,24,25,26,27,28,29,30,31,7],[17,1,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,2],[7,0,2,1,3,10,5],[7,0,2,1,3,5,10,13,11,6],[7,0,4,1,10,4],[7,0,4,6,1,7,10,12,6],[7,0,1,3,5,10,5],[7,0,4,6,8,9,10,12,6],[7,0,4,2,10,12,4],[14,0,1,4,3],[99,0,1,2,3,4,5,3],[100,0,1,2,3,4,5,4],[18,1,1],[102,0,1,2,3,1],[38,0,1,2,2],[38,1,1],[1,0,2,3,4,5,9,10,6],[1,0,7,2,8,1,9,10,6],[1,0,6,2,1,9,10,11,5],[1,9,10,1],[1,0,7,3,1,9,10,5],[1,0,6,7,3,9,10,5],[1,0,4,5,1,9,5],[1,0,1,9,3],[1,0,4,5,9,4],[64,0,1],[104,0,1,2,2],[106,0,1,2,3],[13,0,2,3,6,7,13,14,6],[13,4,1,0,2,13,14,5],[13,1,0,5,3,13,14,5],[13,1,0,2,13,4],[12,0,2,3,2],[115,0,1,2,2],[39,0,1,2,2],[66,0,2],[9,3,4,5,1],[9,0,1,3,4,5,6,3],[9,3,4,5,6,1],[9,0,1,3,4,5,7,3],[40,0,2,3,2],[5,0,2,5,7,6,3],[5,1,0,3,5,7,8,6,4],[5,1,0,3,5,7,8,4],[5,5,8,6,1],[68,0,1,2],[30,1,2,1],[119,0,1,2,3,4,5,1],[120,0,1,2,3,4,1],[123,0,1],[8,0,1,2,3,9,10,11,12,5],[8,0,1,3,9,10,11,4],[8,0,8,1,2,4,5,3,9,10,11,8],[8,0,7,1,2,4,5,6,3,9,10,11,9],[8,0,7,8,1,2,4,5,3,9,10,11,9],[8,0,1,2,4,5,6,3,9,10,11,8],[8,0,1,2,4,3,9,11,6],[124,0,1,2,3,1],[125,0,1,2,3,4,5,6,7,1],[126,0,1,2,3,4,1],[42,1,2,0,1],[42,2,0,1],[42,1,0,1],[69,0,1,3,2,2],[69,0,1,2,2],[127,0,1,2,2],[128,0,1,2,3,1],[130,0,1,2,3,2],[131,0,1,2,3,2],[132,0,1,2,3,2],[19,1,2,5,6,7,8,3],[19,1,2,5,6,7,3],[19,0,5,6,7,2],[19,0,3,4,5,6,7,4],[19,0,5,6,2],[19,0,3,4,5,6,4],[31,1,0,2,4,3,3],[31,0,2,3,2],[31,1,0,2,3,3],[43,0,1,2,1],[72,0,1,2,4,2],[45,0,1,4,2,1],[138,0,1,2,3,4,5,6,7,8,9,10,1],[140,0,1,2,1],[142,0,1,2,1],[15,0,1,4,5,3],[15,0,1,3,4,5,6,4],[46,0,1,2,3,4,6,7,5,8,2],[46,0,1,2,3,4,5,8,2],[46,0,1,2,9,3,4,6,7,5,10,11,12,13,14,15,2],[152,0,1,2,3,4,5,6,7,8,9,10,11,4],[48,1],[80,0,2],[82,0,1,2,3,4,3],[160,0,1,2,3,4,5,2],[162,0,1,2,3,4,5,6,1],[163,0,1,2,1],[165,0,1,2,3,4,5,6,7,8,9,10,11,12,6],[166,1],[167,0,1,2,1],[169,0,1,2,3,4,5,1],[172,0,1,2,3,4,4],[174,0,1,2,3,4,5,6,7,8,9,10,11,2],[175,0,1,2,3,4,4],[176,0,1,2,1],[177,0,1,2,3,4,1],[178,0,1,1],[179,0,1,2,3,4,5,1],[49,0,2],[180,0,1,2,3,4,5,6,3],[181,0,1,2,2],[182,0,1,1],[183,0,1,1],[184,0,1,2,3,4,5,1],[186,0,1,2,3,4,5,6,7,1],[187,0,1,2,1],[188,0,1,2,3,2],[189,0,1,2,3,1],[190,0,1,2,3,4,1],[191,0,1,2,3,1],[192,0,1,2,3,4,4],[193,0,1,1],[194,0,1,2,3,4,1],[196,0,1,1],[197,0,1,2,2],[198,0,1,2,3,1],[199,0,1,1],[50,2,1,1],[50,3,2,4,1,1],[50,0,3,4,1,2],[84,0,1,5,2,6,3,4,3],[201,0,1,2,3,4,5,6,2],[202,0,1,2,3,2],[203,0,1,2,3,4,5,6,3],[204,0,1,2,3,4,5,6,7,8,9,10,11,5],[205,0,1,2,3,2],[206,0,1,2,3,4,5,6,2],[207,0,1,2,3,4,5,6,7,1],[208,0,1,2,1],[85,0,2],[209,0,1,2,3,4,5,6,7,8,9,1],[210,0,1,3],[211,0,1,2,3,4,5,6,7,8,9,10,11,5],[212,0,1,2,3,4,5,6,7,4],[213,0,1,2,3,4,5,6,7,8,9,2],[214,0,1,1],[215,0,1,1],[216,0,1,2,1],[217,0,2],[218,0,1,2,3,2],[219,0,1,2,3,4,1],[220,0,1,2,3,4,2],[221,0,1,1],[222,0,1,2,2],[223,1],[224,1],[225,0,1],[228,0,1,2,2],[32,0,5,6,2],[32,3,4,1,0,5,6,5],[32,2,1,0,5,6,4],[32,2,1,0,5,4],[229,0,1],[231,0,1],[232,0,1],[233,0,1,2,3,1],[234,0,1,2,2],[235,0,1,2],[236,0,1,2,3,4,1]],[[[[50,"SM_TowerOmegaBeamBody_01"],[47,"SM_TowerOmegaBeamBody_01",[-2],[2,"a8rRRSGbdZ75rtdYdCxXvt",-1,0]],[53,"SM_TowerOmegaBeamBody_01",1,[[52,-3,[1,"ebLTCL4wZWyoex5cTjGOhH"],[0],[34],1]],[2,"39Vq44EYlYEbQuQOG7elsR",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[1,96]],[[[50,"P-Freeze-RewardedAdsBonus"],[217,"P-Freeze-RewardedAdsBonus",[-3,-4],[[472,20,-2,[1,"88GsfAF85P9IcFS34cG0Dl"]]],[2,"80fcPs02lOuKj5k9FDAJ+8",-1,0]],[54,"On Key Down",1,[[365,32,-7,[1,"34SR2rZ05HGahfTlbjED9/"],[[7,"17bd6e7Ug9Jf40Gp1zz8+EI","startFreeze",1],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",-5],[7,"99672sUg5NFw4x7bEPAiyHE","activate",-6]]],[55,-8,[1,"10NIkB/PlJu7HAmdLTrpX5"]]],[2,"68gUZjRrhJE5uDhRG2qpEj",1,0]],[194,"On Key Down Back",false,1,[[365,32,-10,[1,"88swSBzzFJl4LNxDUzulG4"],[[7,"17bd6e7Ug9Jf40Gp1zz8+EI","endFreeze",1],[7,"99672sUg5NFw4x7bEPAiyHE","activate",2],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",-9]]],[55,-11,[1,"13YT/m5YRMXLijAHiLT492"]]],[2,"6fHvTFnzVMH4gVqAgXxMOq",1,0]]],0,[0,2,1,0,0,1,0,-1,2,0,-2,3,0,3,2,0,3,3,0,0,2,0,0,2,0,3,3,0,0,3,0,0,3,0,9,1,11],[],[],[]],[[[57,".bin",2004275656,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7680,"length":1728,"count":432,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7680,"count":160,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3311835825443268,-0.33062636852264404,0.6501219272613525],"maxPosition",8,[1,0.3303724229335785,0.33056652545928955,0.7618473172187805]]],-1],0,0,[],[],[]],[[[62],[47,"SM_CubeDetail_02",[-2],[2,"69vp2YjNJakaIDVHGspGD6",-1,0]],[53,"SM_CubeDetail_02",1,[[52,-3,[1,"01NEcE4CpQBazU43NjyQzP"],[0],[34],1]],[2,"c9ucpxjKVRCIO4qU72PVxG",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[209,210]],[[[63,"SM_CubeDetail_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[50,"P-GunTower-Bullet"],[132,"P-GunTower-Bullet",32,[-9,-10,-11,-12,-13,-14],[[197,-8,[1,"beD6AbwclCQbdYQiBsHcVK"],[[7,"12ea43w32ZDAL2+IVCNZlsZ","play",-7]],[[7,"cc.ParticleSystem","play",-3],[7,"12ea43w32ZDAL2+IVCNZlsZ","play",-4],[7,"cc.ParticleSystem","play",-5],[7,"cc.ParticleSystem","play",-6]],[-2]]],[2,"e8sP6FFh9D17STW5Nbkx1m",-1,0]],[220,"Projectile",32,1,[[[222,"Quad<ModelComponent>",false,-15,[1,"0bELSWeDdO65djlx1RiPJl"],[34],7],-16,-17],4,1,1],[2,"caJ4o2c5FOda7/HE7o5QFR",1,0],[1,0.15,0.15,1]],[64,"Bullet_Burst_Flash",512,1,[-18],[2,"8awZgQiLFMo788WeoWcrPq",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[130,0.5,false,false,1,3,[1,"807LSdEE5OBp7IMkuUEYXk"],[[0,null],6,0],[5],[3,1],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[0],[3,0.15],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[119],[13,0.05357142857142855,[4,4292723871]],[13,1,[4,4284358679]]],[[38,255],[9,255,0.6026785714285714],[9,0,1]]]]],[77,0,[3,1]],[32,true,[30,1,[8,[0,0.1794871794871795,0.7538461538461538,0.9794871794871794],[[6,2,0.6148148148148148,1.8227513227513228,1.8227513227513228],[6,2,0.8814814814814815,0.9950617283950617,0.9950617283950617],[6,2,0.6962962962962963,-1.4444444444444435,-1.4444444444444435],[189,2,-4.6222222222222245,-4.6222222222222245]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-19],[26,1]],[64,"Bullet_Burst_Square",32,1,[-20],[2,"29U8hsJUlB8JTNpooxjqiO",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[64,"Bullet_Burst_Fragments",32,1,[-21],[2,"5f4rBTIrlFLIY0/YUL0d89",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[221,"Bullet_Trail",false,512,1,[-22,-23],[2,"4b8ydGY/tOzKGDYewdhT94",1,0]],[146,"Temporary",32,1,[-24,-25],[2,"c5GgaVw6FFeY9mnByY+aKX",1,0]],[39,"Projectile Collision Fade Out",32,8,[[200,0.2,-26,[1,"19qrhSA9JAiY0e2WHN8oh5"],2,[1,1,1,1],[1,0,0,0]]],[2,"f0ugCEKBdHQ6kkJpq8eD1a",1,0]],[39,"Projectile Fade In",32,8,[[201,0,-27,[1,"efl6QMDlhPKIhp/XlQhmzg"],2,[1,0.15,0.15,1]]],[2,"7eZgQmg7BJiKSV6+V3wpmf",1,0]],[130,0.25,false,false,1,5,[1,"2b2XIBV3ZD/r5Jd0n4bDrC"],[[2,null],6,0],[5],[3,0.8],[0],[0],[0],[0],[0],[23,3,0.7853981633974483,0.7853981633974483],[0],[3,0.24],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[87,[4,33554431]],[13,0.044642857142857144,[4,32281173]],[13,0.8191964285714286,[4,22023713]]],[[38,255],[9,255,0.18749999999999997],[9,0,1]]]]],[31,[0]],[32,true,[12,1,1.5,[8,[0,0.30256410256410254,1],[[6,2,0.09629629629629628,2.7575757575757573,2.7575757575757573],[6,2,0.7777777777777778,0.9883040935672519,0.9883040935672519],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-28],[26,3]],[73,0.5,false,false,6,[1,"bem915BoBG47GEjN4PVAEW"],[[4,null],6,0],[5],[23,3,0.05,0.15],[0],[0],[23,3,0.2,0.8],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.2,0.4],[0],[0],[0],[[25,[23,3,4,8]]],[20,true,[16,1,[33,[[13,0.026785714285714315,[4,4293187241]],[13,0.14732142857142858,[4,4291465556]],[13,0.7142857142857143,[4,4282851095]]],[[9,255,0.12946428571428573],[9,0,1]]]]],[208,true,3,2,true,0.25,[0]],[32,true,[30,1,[8,[0,1],[[41,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[41,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[21,[3,6],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,40,[8,[0,1],[[126,1,1,1,1],[106,1,1,1,1,1]]]]],[138,true,2,2,1,[83,4],[44,3,2]],[19,[0],[0],[5],[5],-29],[108]],[198,false,0,7,[1,"6dAiuo47BO6rg9Yf8NI3vX"],[[5,null],6,0],[56,[4,2412752452]],[23,3,0.05,0.1],[0],[0],[3,1],[0],[0],[44,3,6.283185307179586],[0],[23,3,1,1],[0],[0],[3,2],[20,true,[16,1,[33,[[13,0.026785714285714315,[4,4293187241]],[13,0.2767857142857143,[4,4291465556]],[13,1,[4,4282851095]]],[[9,255,0.12946428571428573],[9,0,1]]]]],[187,true,2,true,0.1,1,0.17453292519943295,[0],[1,0,180,0]],[49,[30,1,[8,[0,1],[[41,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[41,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[21,[3,6],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[12,1,40,[8,[0,1],[[126,1,1,1,1],[106,1,1,1,1,1]]]]],[138,true,2,2,1,[83,4],[44,3,2]],[19,[0],[0],[5],[5],-30],[108]],[224,7,[1,"02KzFZOkpHzqdL7Lhw+09B"],[[null,6],0,6],[5],[3,1],[0],[0],[3,5],[0],[0],[0],[0],[3,5],[0],[0],[0],[[25,[3,1]]],[122,[5]],[31,[0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[147,true,false,[3,1],[3,3],[16,1,[127,[[87,[4,4294287463]],[13,1,[4,4283307025]]]]],[5],-31],[108]],[225,0,0.5,false,2,[1,"02KzFZOkpHzqdL7Lhw+09B"],[[null,8],0,6],[56,[4,16777215]],[0],[0],[0],[0],[0],[0],[0],[0],[3,5],[0],[0],[0],[[25,[3,1]]],[122,[5]],[31,[0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[147,true,false,[3,0.2],[3,0.5],[16,1,[127,[[87,[4,4294287463]],[13,1,[4,4283307025]]]]],[5],-32],[108]],[226,1,[null,null],2,[1,"e6875CztlE0JXWurEQgEej"],[5],[3,1],[0],[0],[0],[0],[0],[0],[0],[3,1],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[127,[[119],[13,0.49999999999999994,[4,4293381654]],[43,1]]]]],[31,[0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[227,false,[0],[0],[5],[5],-33],[228,2]]],0,[0,2,1,0,-1,4,0,3,3,0,3,9,0,3,5,0,3,6,0,3,10,0,0,1,0,-1,3,0,-2,5,0,-3,6,0,-4,7,0,-5,2,0,-6,8,0,0,2,0,-2,15,0,-3,16,0,-1,4,0,4,4,0,-1,11,0,-1,12,0,-1,13,0,-2,14,0,-1,9,0,-2,10,0,0,9,0,0,10,0,4,11,0,4,12,0,4,13,0,4,14,0,4,15,0,4,16,0,9,1,33],[0,0,0,0,0,0,0,0,0],[-1,5,-1,5,-1,-1,-2,10,-2],[48,44,42,39,10,10,31,49,31]],[[[168,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainColor",8,[4,4294311224]]],11]]],0,0,[0],[12],[34]],[[[50,"P-EnergySystem"],[217,"P-EnergySystem",[-3],[[498,2,[0.2,0.3,0.4,0.5,0.6,0.7],[4,5,6,7,8,10],-2,[1,"37gZdiDRRLp461ECx2nX/u"],0]],[2,"984XA+aJRLtqRQQNLDETJ9",-1,0]],[35,"Events",1,[-4,-5,-6,-7],[2,"9f8q54wE1LRYxz/GE4XQf/",1,0]],[54,"On Game Started",2,[[169,1,-8,[1,"21XIer/xhIDIUEz+MN35Ws"],[[7,"ca75cIVvLBMl7Ykys8006FJ","activate",1]]]],[2,"88Kpm3aFxDaqYtAbwbC/i6",1,0]],[54,"On Game Defeat",2,[[169,4,-9,[1,"a3zUMEQgVC9poxNz6YgfEm"],[[7,"ca75cIVvLBMl7Ykys8006FJ","deactivate",1]]]],[2,"474RatdMdGvrad/BrkaDAG",1,0]],[54,"On Game Victory",2,[[169,3,-10,[1,"3dayK0riRE+5TzpO3jYZim"],[[7,"ca75cIVvLBMl7Ykys8006FJ","deactivate",1]]]],[2,"973zhlTNBAlawvRQfLc/Uq",1,0]],[54,"On Tower Destroyed",2,[[190,11,-11,[1,"65G+RbidxGM7Ldk+TqnYgR"],[[7,"ca75cIVvLBMl7Ykys8006FJ","towerDestroyed",1]]]],[2,"968hJd/R1I47wKZNOyV/iM",1,0]]],0,[0,2,1,0,0,1,0,-1,2,0,-1,3,0,-2,4,0,-3,5,0,-4,6,0,0,3,0,0,4,0,0,5,0,0,6,0,9,1,11],[0],[39],[45]],[[[112,"0",[{"rasterizerState":{},"depthStencilState":{"depthTest":false},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4294967295]]],11]]],0,0,[0],[12],[25]],[[[50,"Enemies Holder"],[447,"Enemies Holder",8388608,[[[48,-2,[1,"87LB7sm/BL5aImv6f8bkEK"]],-3,[500,-5,[1,"be/6Of8Z5IcrtZCfJL6G+j"],[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28],-4]],4,1,4],[2,"feXYlDJrhOiIHGtymY3yxW",-1,0],[3,0.23911761839433449,-0.09904576054128762,-0.3696438106143861,0.8923991008325228],[1,60,60,60.00000000000001],[1,30,0,-45]],[378,true,true,1,[1,"38JEqV6MtBrIIB0I78QUIw"]]],0,[0,2,1,0,0,1,0,-2,2,0,47,2,0,0,1,0,9,1,5],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29],[97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125]],[[[50,"Game_Canvas"],[133,"Game_Canvas",33554432,[-86,-87,-88,-89,-90,-91,-92],[[18,-82,[1,"39YbcMoONPnqpEYIvfvLdK"],[5,414,896]],[282,-83,[1,"3emJQGNNNCgKZTM9PDiHF9"]],[503,45,-5.684341886080802e-14,-5.684341886080802e-14,414,896,-84,[1,"1cPLaltcNBeqjAoq8eDZ0T"]],[258,-85,[1,"66oqUtOZZPhJfhG2s8pKUM"]]],[86,"c46/YsCPVOJYA4mWEpNYRx",-81,0,[[61,["_enemyModels","0","enemyNode"],-24,[4,["fcglxwqyJPLImoJ297eYFo"]],-23,[4,["7e5RAOazJDUoqdJyOb9q5f"]]],[61,["_enemyModels","1","enemyNode"],-26,[4,["fcglxwqyJPLImoJ297eYFo"]],-25,[4,["02tfv4BbdAxpSCsGntWHOx"]]],[61,["_enemyModels","2","enemyNode"],-28,[4,["fcglxwqyJPLImoJ297eYFo"]],-27,[4,["a86TWrORNDdonkl8tekAPI"]]],[61,["_enemyModels","3","enemyNode"],-30,[4,["fcglxwqyJPLImoJ297eYFo"]],-29,[4,["ab+gkUD2pBFJNP5SgZltSD"]]],[61,["_enemyModels","4","enemyNode"],-32,[4,["fcglxwqyJPLImoJ297eYFo"]],-31,[4,["29iYbQ/FJGBb/hqN0z9DZm"]]],[61,["_enemyModels","5","enemyNode"],-34,[4,["fcglxwqyJPLImoJ297eYFo"]],-33,[4,["ebk8B9FqtJ56e1xPxl/Tpg"]]],[61,["_enemyModels","6","enemyNode"],-36,[4,["fcglxwqyJPLImoJ297eYFo"]],-35,[4,["310L5OB6VHzbFd+EzwX1YG"]]],[61,["_enemyModels","7","enemyNode"],-38,[4,["fcglxwqyJPLImoJ297eYFo"]],-37,[4,["5cKF4dTqVIJ5L7VSbllisq"]]],[61,["_enemyModels","8","enemyNode"],-40,[4,["fcglxwqyJPLImoJ297eYFo"]],-39,[4,["1cE/3a3NhIspuSjA4NYPQj"]]],[61,["_enemyModels","9","enemyNode"],-42,[4,["fcglxwqyJPLImoJ297eYFo"]],-41,[4,["ecTABl1IJJ1KhKpjMdPvkX"]]],[61,["_enemyModels","10","enemyNode"],-44,[4,["fcglxwqyJPLImoJ297eYFo"]],-43,[4,["4aGaO5twNItJ9FFcSTgTAh"]]],[61,["_enemyModels","11","enemyNode"],-46,[4,["fcglxwqyJPLImoJ297eYFo"]],-45,[4,["c0iyYl2rBHx5TfkU/oItpZ"]]],[61,["_enemyModels","12","enemyNode"],-48,[4,["fcglxwqyJPLImoJ297eYFo"]],-47,[4,["5bIlpMottGHbAEAGkT0PlM"]]],[61,["_enemyModels","13","enemyNode"],-50,[4,["fcglxwqyJPLImoJ297eYFo"]],-49,[4,["ccjJGYo+JJ3Zdhg0WkW3HB"]]],[61,["_enemyModels","14","enemyNode"],-52,[4,["fcglxwqyJPLImoJ297eYFo"]],-51,[4,["f9xH5AXxtFdLZihQRnUi9e"]]],[61,["_enemyModels","15","enemyNode"],-54,[4,["fcglxwqyJPLImoJ297eYFo"]],-53,[4,["c8sIcAK59EqJbrDB5pLFfn"]]],[61,["_enemyModels","16","enemyNode"],-56,[4,["fcglxwqyJPLImoJ297eYFo"]],-55,[4,["f0XmGFRx9F74rNFCRis9jR"]]],[61,["_enemyModels","17","enemyNode"],-58,[4,["fcglxwqyJPLImoJ297eYFo"]],-57,[4,["52LbepvlBDTZU7uCBwPrnh"]]],[61,["_enemyModels","18","enemyNode"],-60,[4,["fcglxwqyJPLImoJ297eYFo"]],-59,[4,["39fj1OoStFnJ+G91QAvHk2"]]],[61,["_enemyModels","19","enemyNode"],-62,[4,["fcglxwqyJPLImoJ297eYFo"]],-61,[4,["fdmaT7GbJBHqo2JsEOdVP5"]]],[61,["_enemyModels","20","enemyNode"],-64,[4,["fcglxwqyJPLImoJ297eYFo"]],-63,[4,["8a8fEgx9FOVaZbVsegsAbV"]]],[61,["_enemyModels","21","enemyNode"],-66,[4,["fcglxwqyJPLImoJ297eYFo"]],-65,[4,["54TnVpzZ1JxKQgwWdIkLZ+"]]],[61,["_enemyModels","22","enemyNode"],-68,[4,["fcglxwqyJPLImoJ297eYFo"]],-67,[4,["3aSaHn47VG4LAW7+nTRFc6"]]],[61,["_enemyModels","23","enemyNode"],-70,[4,["fcglxwqyJPLImoJ297eYFo"]],-69,[4,["1d8gqqvh9HnrYEbHds5dbn"]]],[61,["_enemyModels","24","enemyNode"],-72,[4,["fcglxwqyJPLImoJ297eYFo"]],-71,[4,["26gvRVhA1NMojbSmcu0Ni3"]]],[61,["_enemyModels","25","enemyNode"],-74,[4,["fcglxwqyJPLImoJ297eYFo"]],-73,[4,["f4bjzu+j1Lf5KG0Gxo3jIR"]]],[61,["_enemyModels","26","enemyNode"],-76,[4,["fcglxwqyJPLImoJ297eYFo"]],-75,[4,["d6YcNMfGdIl7HbFCcdLOY0"]]],[61,["_enemyModels","27","enemyNode"],-78,[4,["fcglxwqyJPLImoJ297eYFo"]],-77,[4,["8eaPRwQy9MWKNAx+nIaefe"]]],[61,["_enemyModels","28","enemyNode"],-80,[4,["fcglxwqyJPLImoJ297eYFo"]],-79,[4,["c7tyKdOsROLIgx/j5t56bv"]]]],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22]],[1,207,447.99999999999994,0]],[82,0,{},[29,"feXYlDJrhOiIHGtymY3yxW",-98,[42,"4bbjznBsZOa5a9i8ALge3c",1,[[14,"Enemies Holder",["_name"],-93],[10,["_lpos"],-94,[1,0,0,227.162]],[10,["_lrot"],-95,[3,0.0805214068653804,0.3812272063696535,-0.03335305878500261,0.9203638919632243]],[10,["_euler"],-96,[1,10,45,0]],[10,["_lscale"],-97,[1,130,130,130]],[28,false,["_active"],[4,["7e5RAOazJDUoqdJyOb9q5f"]]],[28,false,["_active"],[4,["02tfv4BbdAxpSCsGntWHOx"]]]]],60]],[133,"Life_Holder",33554432,[-103,-104,-105,-106,-107,-108,-109,-110,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122],[[18,-99,[1,"79xl/wLMpN4JZ/fDGejyym"],[5,360,72]],[515,3,6.6,6,2,10,-100,[1,"90u8x4vddET5er+9N6RR1a"]],[379,4,26,-101,[1,"a9izopV3BH+oU4gC9o6jcs"]],[90,-102,[1,"f3BpkvCy5J46Ag2CvlteTz"]]],[2,"077TOWP9ZBcKlau9bmd+dc",1,0],[1,0,12,0]],[274,"Content Holder_Game",33554432,1,[-134,-135,-136,-137],[[[18,-123,[1,"04UahlQ19MrrcYxMIvXv1N"],[5,414,896]],[154,45,100,100,1,-124,[1,"02vyDRRm1OFY2VKm2zlqtg"]],[259,false,-125,[1,"1dQMMVG7ZHhJgKqbSbK+wW"],[264,265,266,267,268,269],270],-126,[141,-128,[1,"e49pXbr9lPr4LxKwSBiyaH"],-127],[317,-133,[1,"56Au2zLO9LZJ9IQ5TCmCSC"],[[260,"AE_Victory",[[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","victory",-129]]],[260,"AE_ShowCubeHP",[[7,"2e422rMyxhPNoAP/9tU8bNO","showHPUI",-130]]],[260,"AE_Defeat",[[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","defeat",-131]]],[260,"AE_WaveAnnouncementFinished",[[7,"09fd5YmvChK1qMRLrEa1jkX","raise",-132]]]]]],4,4,4,1,4,4],[2,"ddKGi6x+1G/b3lO10Aw/fr",1,0]],[274,"Content Holder_IntroPause",33554432,1,[-146,-147,-148,-149,-150],[[[18,-138,[1,"6cj4+UyDZAm5y/Y4ZTISSK"],[5,414,896]],[154,45,100,100,1,-139,[1,"0aDUE+LS5DhJHGluhPLG4I"]],[245,false,-140,[1,"bbMEYqPB1CXo90VI5Rt0PA"],[230,231,232]],-141,[141,-143,[1,"basZfXQS1NZYeDfZI9bJ9F"],-142],[90,-144,[1,"11K5ONqSRLP6LZzIEUEfHi"]],[317,-145,[1,"fcGWFNnUROx7R5GIAX6Pb2"],[[260,"AE_PlayClicked",[[68,"2022ebMdchE2pNL1SpqTm8g","setBool","inScene,true",4]]]]]],4,4,4,1,4,4,4],[2,"fcJel8rm9PjpE6wSmC6xSq",1,0]],[274,"Content Holder_Rewards",33554432,1,[-158,-159,-160,-161,-162],[[[18,-151,[1,"40/IHCEfFBA5Hf2iMv1fSS"],[5,414,896]],[154,45,100,100,1,-152,[1,"a7JwuFollFyL3dNTdJlrv0"]],[259,false,-153,[1,"2cT+Os6rRDDoZ4oOe5bxLe"],[149,150,151,152],153],-154,[55,-155,[1,"baQe2Gjc1O459RmIcZh8ZD"]],[141,-157,[1,"c0aaThuG9DBLc+6PrqGh+g"],-156]],4,4,4,1,4,4],[2,"4cl5imHU5LX7DmMQPwqat4",1,0]],[360,"Button_TimeScale to x2",33554432,[-178,-179,-180,-181],[[[18,-163,[1,"76u8UZxIhJ96+yfZ0l9pWi"],[5,32,32]],[55,-164,[1,"118Z8E901N855i7XheF7Xg"]],[392,-171,[1,"cebSv9cAdNp5DL7LLOv5wK"],[[7,"eb61d1BRKpDnpWImZxs1KwG","raise",-166],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",-167],[7,"99672sUg5NFw4x7bEPAiyHE","activate",-168],[7,"ac879rTendCEbpZWFz/jexs","playSFX",-169],[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","intro",-170]],-165],[90,-172,[1,"23n+8Wr4FLN6QstG2ggoXm"]],[213,3,"2",-173,[1,"caU2mqt5dI5IeKXg8CVf57"]],[259,false,-174,[1,"2bJWDwroxKDbqGA7EtcznX"],[260,261,262],263],-175,[141,-177,[1,"02PtS15TRIUrpFxdOoipld"],-176]],4,4,4,4,4,4,1,4],[2,"251QMu+W1J6oXVPZc9DKzc",1,0],[1,129.722,-52,0]],[448,"Button_TimeScale to x1",false,33554432,[-194,-195,-196,-197],[[[18,-182,[1,"3b3eybR/pL2JEzhPW9sxui"],[5,32,32]],[55,-183,[1,"6dieNIvWJJbKACFL6i5IVY"]],[523,-187,[1,"cdo7EGxHdD86OOHkg8m4Xg"],[[7,"eb61d1BRKpDnpWImZxs1KwG","raise",-184],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",-185],[7,"99672sUg5NFw4x7bEPAiyHE","activate",7],[7,"ac879rTendCEbpZWFz/jexs","playSFX",-186],[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","intro",7]]],[90,-188,[1,"87DdceRR9Gf59VAcr6L3+V"]],[213,3,"1",-189,[1,"3bNN1aulpLy6vAxM1O84Iy"]],[259,false,-190,[1,"b8gqzvYadBz7DGoK+b3vTA"],[258],259],-191,[141,-193,[1,"1feaQE/jtDBLnbo7FT8nKC"],-192]],4,4,4,4,4,4,1,4],[2,"3e/8MR9u5Bv5xRBBxPeQp/",1,0],[1,129.722,-52,0]],[133,"Panel_BG",33554432,[-202,-203,-204,-205,-206,-207,-208,-209,-210,-211],[[95,-198,[1,"e6TdhLZ45Ndrm5PNq2H5PT"],[5,266,32],[0,0,0.5]],[51,0,-199,[1,"ed2sMbtzVLOoieQSRZrFBC"],[4,4282712119],12],[311,45,3,3,3,3,272,36,1,-200,[1,"4eTBnVFcdMEZxz0/aWRGRs"]],[313,false,1,4.5,5,4.1,-201,[1,"7aZCRv1PNPm6sGlZTDX7vP"]]],[2,"c2hyooaShJ2Y/WAKYp9+Lc",1,0],[1,-133,0,0]],[133,"Panel_Shadow",33554432,[-215,-216,-217,-218,-219,-220,-221,-222,-223,-224],[[95,-212,[1,"147gjrveVCIL3t7v48BJhT"],[5,266,32],[0,0,0.5]],[311,45,3,3,3,3,272,36,1,-213,[1,"4eTBnVFcdMEZxz0/aWRGRs"]],[313,false,1,4.5,5,4.1,-214,[1,"7aZCRv1PNPm6sGlZTDX7vP"]]],[2,"96F77oR3ZIQLz48o2C2S5t",1,0],[1,-133,0,0]],[133,"Panel_Locked",33554432,[-228,-229,-230,-231,-232,-233,-234,-235,-236,-237],[[95,-225,[1,"4ftWnPcUVHc460IeMLs9yo"],[5,266,32],[0,0,0.5]],[311,45,3,3,3,3,272,36,1,-226,[1,"41qtGYqClGbIyEUwR1oWUb"]],[313,false,1,4.5,5,4.1,-227,[1,"d4A1F6HgtOd7RcaLo/8zj6"]]],[2,"01sa8N1EdNNrGcO4CVQWaV",1,0],[1,-133,0,0]],[76,"TopPanel",33554432,4,[-241,-242,-243,-244,-245,7,8,-246],[[18,-238,[1,"d0Xv1zbLFOd6TxVvkjz0Oy"],[5,414,100]],[244,41,100,1,-239,[1,"f5uNDwnTpEXJ6RW7aKfj9i"]],[90,-240,[1,"97YNxt8d5LqYe9osfFeEpc"]]],[2,"939ao4QRtJRaDKWBd5sT4d",1,0],[1,0,398,0]],[269,"Button_Play",33554432,[-257,-258,-259],[[18,-247,[1,"6fX60JuQlJCbvduZZvhM0K"],[5,110,110]],[393,3,0.9,-252,[1,"13e2h8B75E05uv2KUJ8S5J"],[[68,"2022ebMdchE2pNL1SpqTm8g","setBool","inScene,false",5],[68,"2022ebMdchE2pNL1SpqTm8g","setBool","paused,false",5],[7,"51cbayfFYRI0b4PXBU6JCiq","raise",-249],[7,"eb61d1BRKpDnpWImZxs1KwG","raise",-250],[7,"ac879rTendCEbpZWFz/jexs","playSFX",-251]],[4,4292269782],-248,205,206,207,208],[229,4,150,1,-253,[1,"2b9g1qXCpCSbF/4WZ59f5E"]],[90,-254,[1,"10HAL4lX9AY4TbC3LAiorB"]],[399,5,-255,[1,"e0I+wZ+TBF37KtaZP3Ig3j"]],[213,3,"1",-256,[1,"7aaYEWzV1HPIexPtke0N8D"]]],[2,"1dypAxc/5AFYHm8WxESVDL",1,0],[1,0,-243,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[177,"Generic Click SFX",33554432,[[48,-260,[1,"008glGt/BAVqvQFC4CeTL7"]],[144,"sfx-ui-gametap",-261,[1,"88DxMoobVBHr0AGWIDI2Ai"]]],[2,"37pFtjXlFJEJHWrJ43HhlU",1,0]],[132,"Button_Ad",33554432,[-267,-268,-269,-270,-271],[[18,-262,[1,"e8YUVmEVxG6Jbutwu0K+//"],[5,60,32]],[246,3,0.9,-264,[1,"bfd69CdahHMbZB5Xh6w2Dv"],[[68,"2022ebMdchE2pNL1SpqTm8g","setBool","adInScene,true",4],[7,"eb61d1BRKpDnpWImZxs1KwG","raise",-263]]],[88,true,-265,[1,"deOpblAAVJCrDvw/oFScsw"],[202,203],204],[213,3,"0",-266,[1,"04Po729+1AC7uKAupYVmKA"]]],[2,"3bmScq/+tM/p3slh6o4fpu",1,0]],[297,"Button_PlayPause",false,33554432,[-281,-282,-283],[[18,-272,[1,"4ew6qy7tJEy77/PZ1ekIFq"],[5,110,110]],[393,3,0.9,-276,[1,"e4JK0aJntK3pWVUhglA5iS"],[[68,"2022ebMdchE2pNL1SpqTm8g","setBool","inScene,false",5],[68,"2022ebMdchE2pNL1SpqTm8g","setBool","paused,false",5],[7,"51cbayfFYRI0b4PXBU6JCiq","raise",-274],[7,"eb61d1BRKpDnpWImZxs1KwG","raise",-275],[7,"ac879rTendCEbpZWFz/jexs","playSFX",14]],[4,4292269782],-273,212,213,214,215],[229,4,150,1,-277,[1,"4a2r5J6+9By7TCN5ve5lAa"]],[90,-278,[1,"76Su8BRHtOVq8A+AOA31Cf"]],[399,5,-279,[1,"96VR17d7ZJurqcyKKpL3rs"]],[213,5,"1",-280,[1,"dekUJrBEVHm6qJZeKixNo7"]]],[2,"eaE8J2qfFEnrJTc/6w63v9",1,0],[1,0,-243,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[421,"Holder_Victory",33554432,[-286,-287,-288,-289,-290,-291,-292,-293],[[18,-284,[1,"93554m5WRI2oi1Q2CTx5aL"],[5,200,100]],[55,-285,[1,"55qHDAme9Ha7EIVB/VRq5Y"]]],[2,"07KtQMg0VCc7/aZYZrETLe",1,0],[1,0,100,0],[1,1.2,1.2,1]],[297,"Button_MenuPause",false,33554432,[-303,-304,-305],[[18,-294,[1,"33waElfHhMcIb9OE7GJvFS"],[5,68,68]],[261,false,3,0.9,-299,[1,"34Mm768+pAWbKPucIHb5sy"],[[7,"a2b25EHeuNHtrhlTfnn9xoq","raise",-296],[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","clickMenu",6],[7,"ac879rTendCEbpZWFz/jexs","playSFX",14],[7,"3ee1589zapM9JITH6e5vok4","sendGameOver",-297],[7,"99672sUg5NFw4x7bEPAiyHE","activate",-298]],[4,4292269782],-295,219,220,221,222],[229,4,70,1,-300,[1,"9bUPc3v5VEJIuFfWA43lBN"]],[247,"GameScene_GoToMenu",-301,[1,"4822qS88NO4aHjE+fnhPnd"]],[401,-302,[1,"85zNKM7VJHZ4fCUA7QMEeq"]]],[2,"8dUbfoBkdEYY4WZ/vp1qyz",1,0],[1,-65,-344,0],[3,0,0,0.38268343236508984,0.9238795325112867],[1,0,0,45.000000000000014]],[132,"Button_Ad",33554432,[-311,-312,-313,-314,-315],[[18,-306,[1,"00rpplDm5IK6zIsNs9/41H"],[5,60,32]],[246,3,0.9,-308,[1,"e7UHLKhP9HO4VLMyURGIyZ"],[[68,"2022ebMdchE2pNL1SpqTm8g","setBool","adInScene,true",4],[7,"eb61d1BRKpDnpWImZxs1KwG","raise",-307]]],[88,true,-309,[1,"e8LAayS1JMcajKBADqQ8kX"],[239],240],[213,3,"0",-310,[1,"49/wIZlM1Pi5+eoNNNbQ4d"]]],[2,"04WDb5mtRGGpfMyqoB0Xxf",1,0]],[85,"Scripts",33554432,1,[-317,-318,-319,-320,-321,-322,-323,-324],[[48,-316,[1,"c4YwpP+tZLnqIX8rT5HHIX"]]],[2,"7ahvJtTTtN/YaLpPue2xFq",1,0]],[422,"Holder_Victory",false,33554432,[-326,-327,-328,-329,-330,-331,-332,-333],[[18,-325,[1,"59WGsxtmNHe5h3fPye/9LG"],[5,200,100]]],[2,"7dgcCQ95xMTJi5Vos54HyN",1,0],[1,0,100,0],[1,1.2,1.2,1]],[205,"Input Blocker",false,33554432,1,[[18,-334,[1,"56SGKfCcRPP6raFnYsqd8Z"],[5,414,896]],[248,-335,[1,"d0rLN063NO/ae6mkHmN3rP"]],[162,45,100,100,-336,[1,"7dgIC4D7BKU7CQgPEr96c1"]],[55,-337,[1,"4bqvp8rk1M47ICr6I3LT6S"]]],[2,"8brabWNaREYoOwEBzQ1huz",1,0]],[269,"Button_Play",33554432,[-345,-346,-347],[[18,-338,[1,"9aC28Xi5NG6qfn7vwjatTH"],[5,110,110]],[261,false,3,0.9,-341,[1,"64bPB4hX9LFpcoXHoeZaUB"],[[7,"a2b25EHeuNHtrhlTfnn9xoq","raise",-340],[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","clickPlay",6],[7,"ac879rTendCEbpZWFz/jexs","playSFX",14],[7,"99672sUg5NFw4x7bEPAiyHE","activate",22]],[4,4292269782],-339,145,146,147,148],[229,4,175,1,-342,[1,"084kiwaUFBX7NgUqmH4p/v"]],[55,-343,[1,"e3evqFw8BKTIGdW4hcCJr0"]],[247,"GameScene_PlayNextLevel",-344,[1,"59USWk1ARLWqJIgrylJ+4r"]]],[2,"10q1g0d6VImZnLWjHqcQqV",1,0],[1,-1.3959999999999866,180,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[132,"Button_No",33554432,[-354,-355,-356],[[18,-348,[1,"68LwQ+UExIqLCOELpSgACf"],[5,56,40]],[51,0,-349,[1,"061FWOyrlNv7xgCe/zQ6/v"],[4,4283302143],180],[524,3,0.9,-351,[1,"0cn4kR+sFDBbUL2fIU1P3G"],[[68,"2022ebMdchE2pNL1SpqTm8g","setBool","adInScene,false",4],[7,"eb61d1BRKpDnpWImZxs1KwG","raise",-350]],181],[88,true,-352,[1,"caQ746MzpFKK+cn4SC8vnm"],[182],183],[527,5,-353,[1,"7fSHka5SBDIIYoD5Ew+WnC"]]],[2,"25pEdep0JAoJ/H6iVS4Df0",1,0]],[297,"Button_PlayAgainPause",false,33554432,[-364,-365,-366,-367],[[18,-357,[1,"1cxnoQGHlAkKNKuCDOZ4tQ"],[5,68,68]],[261,false,3,0.9,-361,[1,"83oL3YYVRH9JZyu5BqriZW"],[[7,"a2b25EHeuNHtrhlTfnn9xoq","raise",-359],[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","clickReplay",6],[7,"ac879rTendCEbpZWFz/jexs","playSFX",14],[7,"3ee1589zapM9JITH6e5vok4","sendGameOver",-360],[7,"99672sUg5NFw4x7bEPAiyHE","activate",22]],[4,4292269782],-358,226,227,228,229],[229,4,70,1,-362,[1,"7fmnVZCG1FtK3oc22P/zlw"]],[247,"GameScene_ReplayLevel",-363,[1,"8ckeNVdIFHhZIcKdjrKNiw"]]],[2,"03s8v+YQxNk4LtDMvQseS7",1,0],[1,65,-344,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[132,"Button_Ad",33554432,[-373,-374,-375,-376],[[18,-368,[1,"53sRdAbQNMkajjaDhfIp5k"],[5,60,32]],[246,3,0.9,-370,[1,"04GCnu83FIdolv2p+/0v6x"],[[68,"2022ebMdchE2pNL1SpqTm8g","setBool","adInScene,true",4],[7,"eb61d1BRKpDnpWImZxs1KwG","raise",-369]]],[88,true,-371,[1,"5cTHyuTrdNl5VDJz6YuJLP"],[246],247],[213,3,"0",-372,[1,"430J17U0FF46DmQtnSOqMl"]]],[2,"7cJbaBvVZCRqFgXCsoKqkN",1,0]],[132,"BG Image",33554432,[-382,-383],[[18,-377,[1,"96uIMPkEFGMoXHKWJq088Z"],[5,414,896]],[148,0,-378,[1,"eanDS7G0lBXrgxJqPFgGVr"],272],[162,45,414,896,-379,[1,"876YFhlqhNNpY+RJlcsZ84"]],[55,-380,[1,"f1ezQpek1ADoLw9QV81VIX"]],[202,0,-381,[1,"c4OwXbPsZNWoUudtiJD5Fz"]]],[2,"98bH1qNPBKRJHtgTkStvtX",1,0]],[269,"Button_Menu",33554432,[-390,-391,-392],[[18,-384,[1,"d9lkXBtz5Doq2VTSxajAYS"],[5,68,68]],[261,false,3,0.9,-387,[1,"07T//hyuxBCZMooRuDb/Bl"],[[7,"a2b25EHeuNHtrhlTfnn9xoq","raise",-386],[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","clickMenu",6],[7,"ac879rTendCEbpZWFz/jexs","playSFX",14],[7,"99672sUg5NFw4x7bEPAiyHE","activate",22]],[4,4292269782],-385,131,132,133,134],[229,4,107,1,-388,[1,"fdDVb5y7ZJ9Kkdl2vJabkn"]],[247,"GameScene_GoToMenu",-389,[1,"39iFuiislIvbE95UgGMVtC"]]],[2,"b52w7twLFOxZFOOoXwks4T",1,0],[1,-65,91,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[269,"Button_PlayAgain",33554432,[-399,-400,-401],[[18,-393,[1,"c7xMCTpG1K54vDRKllxiaN"],[5,68,68]],[261,false,3,0.9,-396,[1,"32Edni2PhPzoMet7Za1ysA"],[[7,"a2b25EHeuNHtrhlTfnn9xoq","raise",-395],[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","clickReplay",6],[7,"ac879rTendCEbpZWFz/jexs","playSFX",14],[7,"99672sUg5NFw4x7bEPAiyHE","activate",22]],[4,4292269782],-394,138,139,140,141],[229,4,107,1,-397,[1,"1fKdG5wrhKv78xuyVLDrxZ"]],[247,"GameScene_ReplayLevel",-398,[1,"7a4fCSkVNHh65I/ZKcHnB1"]]],[2,"b9f7dlNs5Pgo2yiHnr787w",1,0],[1,65,91,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[207,"Star_Outline 01",33554432,[-408,-409],[[[18,-402,[1,"dbnWJrzeBGw68OJNYuw/67"],[5,96,96]],[51,0,-403,[1,"d73ATB6RpH3LE65GWFgTeS"],[4,4281532425],158],[245,false,-404,[1,"40Uy/NPO1HsIpNLyJ9Vl5B"],[159,160]],-405,-406,[202,0,-407,[1,"f117j3fJ9HYK5t+bfN/aTw"]]],4,4,4,1,1,4],[2,"b47t9qx9FOTa3x3+4kHAgp",1,0]],[133,"Panel_Color",33554432,[-413,-414,-415],[[18,-410,[1,"5cnL5sK6tNeJIEezDvH9oW"],[5,330,124]],[51,0,-411,[1,"abVPD534xPw5gPECKWeNbD"],[4,4293450459],176],[388,1,8,8,2,-412,[1,"72Gvwlt59G9pHQs1LWzL5u"]]],[2,"5deYAH3y5GTaLYt5wxSpbH",1,0],[1,0,17,0]],[85,"Holder_Snow Front",33554432,15,[-417,-418,-419,-420,-421,-422,-423],[[48,-416,[1,"9a8iE/UqBIXp7VOOz+uVmL"]]],[2,"54O8ip80dE2a0/hXdZ7GAo",1,0]],[85,"Events",33554432,1,[-425,-426,-427,-428,-429,-430,-431],[[48,-424,[1,"7bOBkv3SZJIImJFw8HfVAR"]]],[2,"adTzem2fpHcKe2FR3OkwK9",1,0]],[274,"Content Holder_Freeze",33554432,1,[27],[[[18,-432,[1,"b86c4TViNDUI3OhEAK8pfv"],[5,414,896]],[162,45,100,100,-433,[1,"d09JpTu6RCtYNjwZm4VCR5"]],[391,-434,[1,"c2Qo21cIZNYJsbc012lGWr"],[271]],-435,[141,-437,[1,"2d3t06wzZEyLLEtfIJaD/S"],-436]],4,4,4,1,4],[2,"d2z2sk+ilKSZaI9H0szJaw",1,0]],[76,"Button_Pause",33554432,12,[-445],[[18,-438,[1,"63hFmQ5PNI8afEk5fVsfHT"],[5,50,50]],[504,17,4,26.5,178.47,1,-439,[1,"725YWij05Ic6QO9t8KyOdM"]],[392,-442,[1,"b95b+fcF9Fz4Pza6y6bFcO"],[[7,"eb61d1BRKpDnpWImZxs1KwG","raise",-441],[68,"2022ebMdchE2pNL1SpqTm8g","setBool","paused,true",5],[7,"ac879rTendCEbpZWFz/jexs","playSFX",14]],-440],[90,-443,[1,"3fTAs8umtOHJdxeInAUNX+"]],[213,3,"0",-444,[1,"11fVBLO11ICLQHUE8FncI8"]]],[2,"b5wW2uS75Gcrcv1B4GlOOZ",1,0],[1,178.47,-1.5,0]],[85,"MidPanel",33554432,5,[13,16,18,25],[[18,-446,[1,"fb1v5cKHlK1ouNRSKjY4T5"],[5,414,896]],[154,45,100,100,1,-447,[1,"5bVCEqzXVFN66iCggAhJHw"]],[90,-448,[1,"9cNjNIiVxGV5s8782hOoqP"]]],[2,"be/BJ2jGtBoYjUGoMnFRCo",1,0]],[132,"Panel_Color",33554432,[-452,-453],[[18,-449,[1,"5atHkERQdLi4z3Adn4r8GR"],[5,330,64]],[51,0,-450,[1,"d58XVBg/BLvbuMNIsvwumr"],[4,4281556991],127],[388,1,8,8,2,-451,[1,"26fI6NLUFD87B8ZmtiELYf"]]],[2,"ebD33eM6dL7o29vda2BZWm",1,0]],[207,"Star_Outline 02",33554432,[-459,-460],[[[18,-454,[1,"5bWwOtFSxLurI4JB2z5rwr"],[5,96,96]],[51,0,-455,[1,"eeBo2Kco5CWbDg+ys+jOkS"],[4,4281532425],163],-456,-457,[202,0,-458,[1,"2fceo593dJQZ/95SE2hJOY"]]],4,4,1,1,4],[2,"458u487txFQJRe0CyGVT7k",1,0]],[207,"Star_Outline 03",33554432,[-466,-467],[[[18,-461,[1,"70SijXTbRGIKOFlQXMYPm3"],[5,96,96]],[51,0,-462,[1,"e61irwKlVKGreA6RXRp68M"],[4,4281532425],166],-463,-464,[202,0,-465,[1,"e9FIy6bYROg78niGiwrwkh"]]],4,4,1,1,4],[2,"76yxNwg39PNZFbHEenzt17",1,0]],[207,"Button_Yes",33554432,[-472,-473,-474],[[[18,-468,[1,"78ZsGovKpEJouOaqbw5EkA"],[5,112,40]],[51,0,-469,[1,"faUwDHnLdE7YCuLIrdntKv"],[4,4283033344],187],-470,[88,true,-471,[1,"8f0asi9ZxOn6tmEPYoxnID"],[188],189]],4,4,1,4],[2,"b5Xnz6EKhJWZEOqYO3qYZz",1,0]],[133,"Panel_Outline",33554432,[9,10,11,-477],[[18,-475,[1,"866Td8rd5GYo09RQt+Ku13"],[5,272,38]],[51,0,-476,[1,"29J0XzsWhIrLqvhAKDkmVg"],[4,4294174947],43]],[2,"fbfBNrGr5Jrbc6fpGvP1mP",1,0],[1,13.819,0,0]],[76,"TopPanel",33554432,5,[-481,-482,-483],[[18,-478,[1,"c2l2HwlRdKjZp8JzykoODX"],[5,414,100]],[244,41,100,1,-479,[1,"4a4+XlaU5Ji6kcE4IBec88"]],[90,-480,[1,"66zD7MUApCH7ZfK4u1EFb5"]]],[2,"2bHbcyDxJHJpF4cz0aKl5i",1,0],[1,0,398,0]],[449,"Text_Stage Number",33554432,42,[-490],[[[18,-484,[1,"19MlS1yQ9E5o/RulyVYdCl"],[5,95.16,50.4]],-485,[402,"Stage ",-488,[1,"b9WeavmTlMJ5WJ477Wtf31"],-487,-486],-489],4,1,4,1],[2,"2er0kucK1GpZjtvFTe8ztD",1,0],[1,0,-15.254999999999882,0]],[39,"Cube Tower HP UI",33554432,20,[[48,-491,[1,"39Lb091rxDGoZ9mX+xlb9l"]],[534,-512,[1,"dcxufK/0VC3JY7X1of5j2J"],[-492,-493,-494,-495,-496,-497,-498,-499,-500,-501,-502,-503,-504,-505,-506,-507,-508,-509,-510,-511],[[275]],[[275]],[[275]]]],[2,"49d4+RqQ9GF7qxUAyGXDMI",1,0]],[76,"BotPanel",33554432,4,[-516,-517,3],[[18,-513,[1,"6blJ6ukAVKKYyVpH0nj4sA"],[5,414,100]],[244,44,100,1,-514,[1,"e3giGaYNpMS44czGAuKlfS"]],[202,0,-515,[1,"edxDZnBV9CiafE2frUPKiY"]]],[2,"f7zvnB7f5I1J6JDxy+modA",1,0],[1,0,-398,0]],[76,"Separator",33554432,45,[-520,-521,-522,-523],[[18,-518,[1,"8bF33IUOZBNJxBtSHPUpSD"],[5,0,3]],[51,0,-519,[1,"fcOawCy8xNOpxzNfv8iHYQ"],[4,4294174947],71]],[2,"e6r3/oPj9K/bxl2xF+QYx2",1,0],[1,0,55.729,0]],[133,"Texts_Holder",33554432,[-527,-528,-529],[[18,-524,[1,"a5A1AXQflM6Ir4pcQgrqXo"],[5,155.71,66]],[389,1,1,2,-525,[1,"1cNxXbJLdM357XB/ew3qxz"]],[90,-526,[1,"admQHNyG5MBaAdrxB3Tbd2"]]],[2,"3aypqNswRGOasYgr/79cup",1,0],[1,-1.168,3.504,0]],[85,"MidPanel",33554432,4,[-533,21,-534],[[18,-530,[1,"06zRYavfhAkbZlZ3RJfaEP"],[5,414,896]],[154,45,100,100,1,-531,[1,"69a6ik6PtIHK0Oaq3D7p9N"]],[90,-532,[1,"95n/QgvsFFg7dmTgw5Gt2D"]]],[2,"0dajiuehJKAY6NGi/qi06k",1,0]],[133,"Stars_Holder",33554432,[-538,-539,-540],[[18,-535,[1,"d8k7djqcdEB5ce9C9VLGvh"],[5,312,100]],[210,1,128,1,-536,[1,"50QaNhxptPo46bRiAX3ETw"]],[516,false,1,1,12,-537,[1,"35LaDwYWNA0J4kKisMYEwV"]]],[2,"52IW0PS3lBWpXnD5DV8bS5",1,0],[1,0,-128,0]],[76,"Energy_Holder",33554432,12,[41,-544],[[18,-541,[1,"7eANxaE0pCOIiYswrDzvtb"],[5,296,38]],[210,1,32,1,-542,[1,"3dCnvdZ01Nu4XSrbS4kfkd"]],[90,-543,[1,"f1mo0AHyNElrg6sR7GyCjx"]]],[2,"d7iVc1atpLIadbU2ouzi81",1,0],[1,0,-1,0]],[76,"Holder_Lock 01",33554432,11,[-547,-548],[[18,-545,[1,"76JEEV8StOEK5lvHrKoBe0"],[5,22,22]],[90,-546,[1,"07qFBrITpPBKbIvzuLOD6d"]]],[2,"bb80MsTbNMEqr55ap8h3Hm",1,0],[1,15.5,0,0]],[76,"Holder_Lock 02",33554432,11,[-551,-552],[[18,-549,[1,"38JgbmXj9KOJY2kKCPFnEP"],[5,22,22]],[90,-550,[1,"5504J3AeFFe5z5XfU/dAtj"]]],[2,"ec9n9ITfNK2JYJNhbKYEy9",1,0],[1,41.6,0,0]],[76,"Holder_Lock 03",33554432,11,[-555,-556],[[18,-553,[1,"ber4KoUHFL4JjHIspmh0d/"],[5,22,22]],[90,-554,[1,"5egY7RaWZM0JpYl5Mfot7e"]]],[2,"c23wtes3RFUowrK/zzWVwH",1,0],[1,67.7,0,0]],[76,"Holder_Lock 04",33554432,11,[-559,-560],[[18,-557,[1,"d0wZry9qhIXIO1q6mmzLoU"],[5,22,22]],[90,-558,[1,"e9Uq7ZCn1GV4lKB2ZwPgTy"]]],[2,"1e7YKWXolPDqsDfaxtB2zx",1,0],[1,93.8,0,0]],[76,"Holder_Lock 05",33554432,11,[-563,-564],[[18,-561,[1,"38EEOGURxA6aKf4n6uKJhr"],[5,22,22]],[90,-562,[1,"8f1JYWWDJBta57CrvbR6z6"]]],[2,"d5L3xcBFlC06ObWGEhfzu6",1,0],[1,119.89999999999999,0,0]],[76,"Holder_Lock 06",33554432,11,[-567,-568],[[18,-565,[1,"e6BNluzhVCLY07qwByLEdK"],[5,22,22]],[90,-566,[1,"02fBqMfV9BOLOjGBqYH4rR"]]],[2,"ddfacMMP1CYLMMZxNr+o53",1,0],[1,145.99999999999997,0,0]],[76,"Holder_Lock 07",33554432,11,[-571,-572],[[18,-569,[1,"06uycXeL5Jy5arcGJQ4Pvt"],[5,22,22]],[90,-570,[1,"96KGxi2RlMq4mpLlIIDIra"]]],[2,"47qh4mv7hG3aFQmnyvU6M8",1,0],[1,172.09999999999997,0,0]],[76,"Holder_Lock 08",33554432,11,[-575,-576],[[18,-573,[1,"f12dN4kPNJvrHpp5u908BN"],[5,22,22]],[90,-574,[1,"dax+6x6RRNAKIPV88EWuux"]]],[2,"10qNw07JtDn4N11pOKvx6+",1,0],[1,198.19999999999996,0,0]],[76,"Holder_Lock 09",33554432,11,[-579,-580],[[18,-577,[1,"aeKeHG9RFClJrGybwGYTf4"],[5,22,22]],[90,-578,[1,"a4yDLg06RI6JmAy9wqy5Np"]]],[2,"d5iuWH8ulEx7/fFhQ6usn9",1,0],[1,224.29999999999995,0,0]],[76,"Holder_Lock 10",33554432,11,[-583,-584],[[18,-581,[1,"42yLLZsalBdICI9ZD8JxzR"],[5,22,22]],[90,-582,[1,"1dO+8sf/BEw4mHLvchDPyb"]]],[2,"cfLsKUx3tCopm/TJHV/rZk",1,0],[1,250.39999999999995,0,0]],[76,"StageInfo_Holder",33554432,42,[-588,-589],[[18,-585,[1,"6emLd80R1K97tUVY09BiPB"],[5,260,280]],[319,false,0,-586,[1,"bd5icFkCZDFbPPW9CZsm//"],62],[90,-587,[1,"54HTKoGHFGo5PiP+rCbDCP"]]],[2,"6dGahrvXBI57nBLACe9LMN",1,0],[1,0,-248.81799999999998,0]],[76,"Notification_Holder",33554432,48,[-592,47,-593],[[48,-590,[1,"d8fTlyUNZJtbeIZtI94Hkk"]],[202,0,-591,[1,"b1QxUZKXxJTaPASTaxJAh4"]]],[2,"0aaUZ1wahEJpNc887VLlEN",1,0],[1,0,226,0]],[76,"Outline",33554432,62,[-596,-597,-598],[[95,-594,[1,"cfa6a6JwFOaoyzzZg3J+r1"],[5,240,83],[0,1,0]],[70,1,0,-595,[1,"14iHd2WxZG0YN5J68OiLub"],[4,4292928274],107]],[2,"bbcDanNAxDmI5+2+L/2tBO",1,0],[1,126,-37,0]],[450,"Text_Stage Level",33554432,[[[18,-599,[1,"ddpbdg7uxF1KTwVDOEF1w6"],[5,90.4,47.88]],-600,[402,"Stage ",-603,[1,"2fBXmkpO5NXp0J0tvc4Gyv"],-602,-601],-604],4,1,4,1],[2,"b2ajJhW9lIyqgPtkEPSyzq",1,0],[1,0,-15.888,0]],[236,"TopPanel",false,33554432,6,[-607,49,64],[[18,-605,[1,"e8lZrkqBxCIqfSbPGUJIa9"],[5,414,100]],[244,41,100,1,-606,[1,"10yRoX5kROha5Ok/ZnrjrT"]]],[2,"08CJV7oFBDzbLTlCsttEOk",1,0],[1,0,398,0]],[206,"MidPanel",false,33554432,6,[17,-610,-611],[[18,-608,[1,"06Y9dVHBlOOp8+6l090Fcy"],[5,414,896]],[154,45,100,100,1,-609,[1,"c07NEJWuNJDLHQr5cETXOh"]]],[2,"dd8OClWH9M9Z4g8UH8KFh/",1,0]],[133,"Bar_Left",33554432,[-615,-616],[[18,-612,[1,"529gFYiohJv42bUOAKiQPF"],[5,2,78]],[51,0,-613,[1,"9cGKRH5XpBnL0/OJdNsCes"],[4,4284216710],123],[283,5,-7,-7,172,-614,[1,"096+c1t7ZPB5f+edr5mfxM"],37]],[2,"d0nBmh72FCf7hgfaeKweie",1,0],[1,-170,53.120000000000005,0]],[133,"Bar_Right",33554432,[-620,-621],[[18,-617,[1,"7blS28ccFHNZaY5X+mNeO1"],[5,2,78]],[51,0,-618,[1,"26UtrGJ8tDyYdQGE5sw38h"],[4,4284216710],126],[283,5,-7,-7,172,-619,[1,"5fH6pRfgBAu57wiXAS8f0P"],37]],[2,"feIxOwV8FFr4ZWdPPOsqSu",1,0],[1,170,53.120000000000005,0]],[236,"BotPanel",false,33554432,6,[28,29,23],[[18,-622,[1,"04x5fWg65GTbFmVrMNx3tR"],[5,414,100]],[244,44,100,1,-623,[1,"83bHC6ZZ5K7KvZKZkiSjrF"]]],[2,"574t6jf8VBNbF/ECbBtvyx",1,0],[1,0,-398,0]],[132,"Holder_Ad Confirmation",33554432,[-626,-627,-628],[[48,-624,[1,"d1vzDd9v1HRIrpV1tNkLTy"]],[55,-625,[1,"73DzpC4yZB5LwPtEcJI6gd"]]],[2,"99eYW9441IQImTrdpVcKfG",1,0]],[133,"Bar_Left",33554432,[-632,-633],[[18,-629,[1,"a0+cZ3XFlMnLIhPo4TNBfo"],[5,2,138]],[51,0,-630,[1,"a5izxG4wlJZIzq02LqoHkK"],[4,4284216710],172],[283,5,-7,-7,172,-631,[1,"ddYjVaEntBKpmB4WbJRYdP"],31]],[2,"3faZcQCcZJcaJYKLfiD+cF",1,0],[1,-170,53.120000000000005,0]],[133,"Bar_Right",33554432,[-637,-638],[[18,-634,[1,"728nLTRi9GzJtSkbAnwSQc"],[5,2,138]],[51,0,-635,[1,"74Bq2XFuJMZJHXP8+7UZSN"],[4,4284216710],175],[283,5,-7,-7,172,-636,[1,"ca4XGH2hJKo7GnOtnFHzjt"],31]],[2,"c0mgFYTdJBea/4a2bkOlIk",1,0],[1,170,53.120000000000005,0]],[76,"Square_Holder",33554432,12,[-641,-642],[[48,-639,[1,"7bnX4buzROo5b3r2EdvdLC"]],[210,1,-29.999999999999996,1,-640,[1,"c833AUePVH67WsP399FXiG"]]],[2,"42mHyfmpNPqaKQn+Fp0oII",1,0],[1,0,30,0]],[76,"Energy Numbers_Holder",33554432,41,[-645,-646],[[18,-643,[1,"aaoakzP5xCnbVStC/8dPJ3"],[5,80,80]],[90,-644,[1,"dcARwsJOJP4aLWt1KB8X24"]]],[2,"ddVzP6vGpFfL/gj9q6J4Kb",1,0],[1,-142.292,-17.15599999999995,0]],[159,"Text_Current Energy",33554432,74,[[[95,-647,[1,"f0D7eudXpGapNTsS7n/boV"],[5,40.56,110.88],[0,1,0.5]],-648,[145,-650,[1,"47G6skn6JE4YQIxzfS0nhx"],-649]],4,1,4],[2,"5fk8MuD5ZGT4jnVDBTiQe8",1,0],[1,-0.419,2.363,0]],[159,"Text_Total Energy",33554432,74,[[[95,-651,[1,"e4sPgEnl1Nd40SGQUgf0+q"],[5,34.37,37.8],[0,1,0.5]],-652,[403,"/",-654,[1,"65Sncik95PM7hCy8eO8vEB"],-653]],4,1,4],[2,"7dpjIsNz9MnbipLja4uc5e",1,0],[1,40.698,-18.887,0]],[85,"Overlay",33554432,5,[-658],[[18,-655,[1,"b2cTEyFexNZ5fssjNc6ysC"],[5,414,896]],[51,0,-656,[1,"9bbfgEqBFFAqa4Hl4n+LiM"],[4,3358785545],47],[162,45,40,36,-657,[1,"5fSax9rO1IjIhadUgz0QVt"]]],[2,"81ElX3LmlEG60SbfRx51Hh",1,0]],[76,"Square_Holder",33554432,42,[-661,-662],[[48,-659,[1,"beuttpYwJEeZ1KBB8NvCS7"]],[210,1,-29.999999999999996,1,-660,[1,"4andvVKepFmq2Mz+ZidEYc"]]],[2,"fcqc8za/FPXKblpXqBUdSU",1,0],[1,0,30,0]],[76,"Icon_TowerMob Space",33554432,61,[-665,2],[[18,-663,[1,"a7/yV42NBF8K7lGbF/s+YM"],[5,44,44]],[319,false,0,-664,[1,"9eNmjWLgVPiJysvVJvBB5H"],61]],[2,"bdHVRwUz1M35gM11LVk9KE",1,0],[1,0,90,0]],[4,["feXYlDJrhOiIHGtymY3yxW"]],[159,"Text_Stage Info",33554432,61,[[[18,-666,[1,"5a3/59oLlNr7+vC9kEwLiW"],[5,200,170]],-667,[145,-669,[1,"6apQwLZbJL3akk8f9FMFXM"],-668]],4,1,4],[2,"d1XJBv4oBCtpyUzGYzEmo3",1,0],[1,0,-45.444,0]],[159,"Text_Current Wave",33554432,47,[[[18,-670,[1,"d3MKsXmCdJX5/K5LM6RlBu"],[5,11.27,60.48]],-671,[145,-673,[1,"8d0eOJd7FMx5CwPmfdXQQ9"],-672]],4,1,4],[2,"85/2sIiHdI+5CeJ7Gddt1C",1,0],[1,26.79,0,0]],[345,"Holder_Defeat",false,33554432,48,[-675,-676,-677],[[18,-674,[1,"04YVKQAUtFK7gjIzq4zgdi"],[5,200,100]]],[2,"11wkCLlPJOSrMgszxDX0+w",1,0],[1,0,100,0],[1,1.2,1.2,1]],[159,"Text_Total Waves",33554432,47,[[[18,-678,[1,"9fuBtiH5hCxpdxUWNMzYa3"],[5,43.43,60.48]],-679,[403,"/",-681,[1,"f4RKnyWWJKMLAqCSxs98ZP"],-680]],4,1,4],[2,"7952zDG4tIi62NWqHN2ywz",1,0],[1,56.14,0,0]],[205,"Overlay",false,33554432,6,[[18,-682,[1,"c55ActcnlKvLYlFKH7BYlH"],[5,414,896]],[51,0,-683,[1,"54RihCqeBN26P74nliSDV/"],[4,3342345],111],[154,45,40,36,1,-684,[1,"6bc5ZpVVFBhp7SeBt/qsA3"]],[248,-685,[1,"59PEy9xBRJw6rmQCnxU8HA"]]],[2,"bdD8FaL3pFLI+KDp/zpQNk",1,0]],[132,"Holder_Info Panel",33554432,[-688,-689],[[48,-686,[1,"75J7W3mfdI86SXKgEaAJSA"]],[55,-687,[1,"305QLuLupLlYFwnKG8Hxp/"]]],[2,"edzatnPqFKdIitKQzStgVX",1,0]],[39,"Button_Color",33554432,28,[[18,-690,[1,"8fJyVSipZIp6/cu+KgJLTZ"],[5,66,66]],[70,1,0,-691,[1,"6dcNtn78pLh7lgR0UA6xbI"],[4,4294174947],128],[170,45,1,1,1,1,108,108,-692,[1,"43pyyQdFxL74JH3H6Z3+py"]]],[2,"cfeFKoYbtGOIsIxqe5bdT0",1,0]],[39,"Button_Color",33554432,29,[[18,-693,[1,"82kZSfuOdClJ5PCR2828uJ"],[5,66,66]],[70,1,0,-694,[1,"179vlNZm1KUqn+R8wLon2H"],[4,4281556991],135],[170,45,1,1,1,1,108,108,-695,[1,"bcqKyeGU5GLpd+Cp19Uvvs"]]],[2,"5b38LzKK1OhZnFrLEEoPMq",1,0]],[76,"Square_Holder",33554432,65,[-698,-699],[[48,-696,[1,"cc8SSQyb1L/Ltwk6GJUWqP"]],[210,1,-29.999999999999996,1,-697,[1,"1fraD0+shFu71iJ8xfn0Ft"]]],[2,"e15tjXtQ5Cz4ZdU+PbUAMl",1,0],[1,0,30,0]],[177,"Level Completed UI",33554432,[[48,-700,[1,"b6xvlNNMxBXIXFLuAuoT1Q"]],[535,-704,[1,"184CIpXJJMf5iKyyNpNEc2"],[-701,-702,-703],167,168]],[2,"50Eja1z5hNZpnUs5MRvwhw",1,0]],[206,"AdPanel",false,33554432,4,[-707,70],[[18,-705,[1,"a5zWyUec1P3K9J/anSRc+D"],[5,414,896]],[154,45,100,100,1,-706,[1,"d3kFeMjRRJm6zDi+Vid6GY"]]],[2,"56vZfvQ1xHk5CEspGacUfx",1,0]],[205,"Overlay",false,33554432,91,[[18,-708,[1,"54VlU+tTdIVZRdRYKAKWud"],[5,414,896]],[51,0,-709,[1,"46/y4TTv5LRLMKwGAfogeo"],[4,3342345],169],[162,45,40,36,-710,[1,"86aur+4vBEj60mQY62OawU"]],[248,-711,[1,"d7NKBAPIBMpbpA3K8x4YOl"]]],[2,"31Kmah7FpGma7pWCcf+209",1,0]],[39,"Button_Color",33554432,18,[[18,-712,[1,"39sJPPCaJPA5zSoyRrZk/f"],[5,66,66]],[70,1,0,-713,[1,"a8tGesnrdLnILrRpmSh093"],[4,4294174947],216],[170,45,1,1,1,1,108,108,-714,[1,"03hcyLs79NfIkKJ7qGV3pH"]]],[2,"9fL4uQPqpMKYMkPch6sWb8",1,0]],[39,"Button_Color",33554432,25,[[18,-715,[1,"04HRB9kkdGC53eh20zYrGp"],[5,66,66]],[70,1,0,-716,[1,"64TWXeno1Bl4ZktxybBh0l"],[4,4281556991],223],[170,45,1,1,1,1,108,108,-717,[1,"8ePc8xDXNJJJtgemmw+awu"]]],[2,"dens+xYw1BnoCNL00NPclL",1,0]],[66,"Energy Cube 01",33554432,9,[[95,-718,[1,"47r75ln1FCUbkyZMk2xY4I"],[5,22,22],[0,0,0.5]],[51,0,-719,[1,"ealQFfGaFGLrnI0FEDrCjT"],[4,4291874560],2]],[2,"8eVMMyTAhHTrxdUCI00RNH",1,0],[1,4.5,0,0]],[167,"Energy Cube 02",33554432,9,[[95,-720,[1,"1fzfIfIthPJ5lsvfEETxzP"],[5,22,22],[0,0,0.5]],[51,0,-721,[1,"41yEi5YV5N6rl22Vs19aqY"],[4,4291874560],3]],[2,"d7ZEjS/RNNcpxy6bensm5T",1,0],[1,30.6,0,0],[1,0,1,1]],[167,"Energy Cube 03",33554432,9,[[95,-722,[1,"a3wUjzxAxBlpZXtGBF+l6s"],[5,22,22],[0,0,0.5]],[51,0,-723,[1,"cbNMyotjdMBJsHidydOUUw"],[4,4291874560],4]],[2,"7fzNbEGA5C7LBeU+6/kk0+",1,0],[1,56.7,0,0],[1,0,1,1]],[167,"Energy Cube 04",33554432,9,[[95,-724,[1,"71VhLgkvVLoa3iWqD0mcX/"],[5,22,22],[0,0,0.5]],[51,0,-725,[1,"64L6PUmptEHaMWVbn77MKY"],[4,4291874560],5]],[2,"a4dr5gBqVD8KmMo9U690pe",1,0],[1,82.8,0,0],[1,0,1,1]],[167,"Energy Cube 05",33554432,9,[[95,-726,[1,"fafyeZQtZJmLW/fpFHzjJ3"],[5,22,22],[0,0,0.5]],[51,0,-727,[1,"e6Ll82vcRN1Lhbx193nyiZ"],[4,4291874560],6]],[2,"2cz2kVPWpBaYfDUmpze4C2",1,0],[1,108.89999999999999,0,0],[1,0,1,1]],[167,"Energy Cube 06",33554432,9,[[95,-728,[1,"fdp8O0CEVNc4znVVbFzuVp"],[5,22,22],[0,0,0.5]],[51,0,-729,[1,"c3NBP66PpD04XdMYscArOm"],[4,4291874560],7]],[2,"32GQvJZZ1CfL8jE0XAQI7p",1,0],[1,134.99999999999997,0,0],[1,0,1,1]],[167,"Energy Cube 07",33554432,9,[[95,-730,[1,"15C8PrDjNE15INoBRjQNEd"],[5,22,22],[0,0,0.5]],[51,0,-731,[1,"2e/BYGfUpHEbP6MzNngPTO"],[4,4291874560],8]],[2,"8bn6okF5BG6Jaim8hBAiyD",1,0],[1,161.09999999999997,0,0],[1,0,1,1]],[167,"Energy Cube 08",33554432,9,[[95,-732,[1,"845GGcqwBNoryas9x4gpVR"],[5,22,22],[0,0,0.5]],[51,0,-733,[1,"931LD/CQ9K7axm26MZaiXw"],[4,4291874560],9]],[2,"cf12Kt7l1LELKFSPjDHbWy",1,0],[1,187.19999999999996,0,0],[1,0,1,1]],[167,"Energy Cube 09",33554432,9,[[95,-734,[1,"260FbFY0hL04Kny8SSU9u3"],[5,22,22],[0,0,0.5]],[51,0,-735,[1,"685Vk8LIxBfrhcygMgQS9Q"],[4,4291874560],10]],[2,"f1J1aAxmpPvoc5FGVdqMEx",1,0],[1,213.29999999999995,0,0],[1,0,1,1]],[167,"Energy Cube 10",33554432,9,[[95,-736,[1,"99pc0X8XlFjLiJ623BO/ZO"],[5,22,22],[0,0,0.5]],[51,0,-737,[1,"272pp15w5PwJu9uk6hc55H"],[4,4291874560],11]],[2,"d1aI9zoc9M0ZqlDjUrVkW1",1,0],[1,239.39999999999995,0,0],[1,0,1,1]],[39,"Icon_Pause",33554432,35,[[18,-738,[1,"853FcTywZNn7js4B8Q/ajC"],[5,16,24]],[320,-739,[1,"0eQZZjF9lBQKAbMv5CvbEH"],45]],[2,"5eLZf7et1BaoBeC4tAbRXN",1,0]],[205,"Block Inputs",false,33554432,77,[[48,-740,[1,"a6pDMXWINEz4c3jEU/90+t"]],[248,-741,[1,"38nA9WuSpLY6r/aSHZbYaR"]],[154,45,100,100,1,-742,[1,"09QXhY7+NAt5haDCrcKLVZ"]]],[2,"e86uFWJqFEn61f5p+Qwnyh",1,0]],[36,0,{},79,[29,"1ewdi1di5LRLRsG+guCXmn",-743,[69,"d9tGO7SQVHyKtk8xv4bAe7",1,[[67,[4,["85jNnU/YRG9K6jK+eX2Jg2"]],[[314,true,[1,"598F9AzsZPQaOOG6jwFk71"],[52],53]]],[67,[4,["a9mWnA5y9CzYM22Pg4Fdy/"]],[[314,true,[1,"598F9AzsZPQaOOG6jwFk71"],[54,55],56]]],[67,[4,["b15KtkCcVGNZ/SKlExOmSz"]],[[314,true,[1,"598F9AzsZPQaOOG6jwFk71"],[57,58],59]]],[67,[4,["a36salOGtLo6f8GG9HKczL","40sd+ebzdfxaPzPgpSi8i0"]],[[536,[1,"f6uaQGK/RN9a37oRJnpj80"]],[499,[1,"c0bC1IuXtHwIZwBqkGIV5B"]]]]],[[28,"Towers Holder",["_name"],[4,["1ewdi1di5LRLRsG+guCXmn"]]],[22,["_lpos"],[4,["1ewdi1di5LRLRsG+guCXmn"]],[1,0,-35,227.162]],[22,["_lrot"],[4,["1ewdi1di5LRLRsG+guCXmn"]],[3,0.15304591873303092,0.6903455270798547,0.15304591873303094,0.6903455270798549]],[22,["_euler"],[4,["1ewdi1di5LRLRsG+guCXmn"]],[1,0,90,25]],[22,["_contentSize"],[4,["b3s3iwIk5GWLlMpTf30EX5"]],[5,1.3,1.3]],[22,["_lscale"],[4,["1ewdi1di5LRLRsG+guCXmn"]],[1,110,110,110]],[28,false,["_active"],[4,["a36salOGtLo6f8GG9HKczL","1bEwzooBRYiLITAV26DhPq"]]],[28,true,["_active"],[4,["e4HIGTcO5FNoojPDW7FkT0","52Wr8elKJczKH4c2zJXMeu"]]],[28,false,["_active"],[4,["e4HIGTcO5FNoojPDW7FkT0","a6UoiMmTtU6YsbaNPx5rqf"]]],[22,["_lscale"],[4,["e4HIGTcO5FNoojPDW7FkT0","a6UoiMmTtU6YsbaNPx5rqf"]],[1,0.6,0.6,0.6]]]],51]],[39,"Button_Color",33554432,13,[[18,-744,[1,"a4/fQFrkFHDrf47jztRtPF"],[5,108,108]],[70,1,0,-745,[1,"2f9HGTRLZAlY9CLAfjEVqD"],[4,4292928274],63]],[2,"8eLggjorhEIr3xF4IjNE8D",1,0]],[177,"Play Clcked SFX",33554432,[[48,-746,[1,"9cNwge9U1MBosft455Eph4"]],[144,"sfx-ui-playstartlevel",-747,[1,"035y6mUZNALKzfpDv9znSH"]]],[2,"a99B4CNHxIM4Lm1a5rcHRY",1,0]],[85,"Audio",33554432,20,[14,109],[[48,-748,[1,"27nysJmChLJLSjVGM3pVrh"]]],[2,"9dvKC8PQhIvL+T0QMVgydk",1,0]],[36,0,{},3,[29,"2fFGF3dqxMNKSC0hr3+Zvd",-749,[42,"095/3h0rhKTrx79A3GWOco",1,[[28,"LifeCube_Holder",["_name"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-165,21,0]],[22,["_lrot"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[22,["_euler"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],91]],[66,"Text_Life",33554432,45,[[95,-750,[1,"22ylIKCHRLz5jqiOxHBQhm"],[5,33.58,40.32],[0,0.5,0]],[155,"life",32,32,32,false,-751,[1,"44nkIIC+VPLbcAsSYWkmPz"],[4,15984867],66],[379,4,97.5,-752,[1,"54HW/ZyddPK61phSHL6Ks3"]]],[2,"c44S47FFxO/qd9YQoHqN2n",1,0],[1,0,47.5,0]],[36,0,{},3,[29,"2fFGF3dqxMNKSC0hr3+Zvd",-753,[42,"7cNem45h9DQZzm6etDeVan",1,[[28,"LifeCube_Holder-001",["_name"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-128.4,21,0]],[22,["_lrot"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[22,["_euler"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],72]],[36,0,{},3,[29,"2fFGF3dqxMNKSC0hr3+Zvd",-754,[42,"02WKp1aaZM5JahQG4GQFOT",1,[[28,"LifeCube_Holder-002",["_name"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-91.80000000000001,21,0]],[22,["_lrot"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[22,["_euler"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],73]],[36,0,{},3,[29,"2fFGF3dqxMNKSC0hr3+Zvd",-755,[42,"66QmLgfF9LxJdx0wLt8UTM",1,[[28,"LifeCube_Holder-003",["_name"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-55.20000000000001,21,0]],[22,["_lrot"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[22,["_euler"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],74]],[36,0,{},3,[29,"2fFGF3dqxMNKSC0hr3+Zvd",-756,[42,"b4G0BDxa1KEYbReDXot7x5",1,[[28,"LifeCube_Holder-004",["_name"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-18.60000000000001,21,0]],[22,["_lrot"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[22,["_euler"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],75]],[36,0,{},3,[29,"2fFGF3dqxMNKSC0hr3+Zvd",-757,[42,"06B8cO2XxB9p2K43Z/q+wo",1,[[28,"LifeCube_Holder-005",["_name"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,17.999999999999993,21,0]],[22,["_lrot"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[22,["_euler"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],76]],[36,0,{},3,[29,"2fFGF3dqxMNKSC0hr3+Zvd",-758,[42,"13eIwjQGNOtI2Ma49UBtLG",1,[[28,"LifeCube_Holder-006",["_name"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,54.599999999999994,21,0]],[22,["_lrot"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[22,["_euler"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],77]],[36,0,{},3,[29,"2fFGF3dqxMNKSC0hr3+Zvd",-759,[42,"cf05UvdYhAJZYNkQcMyV5L",1,[[28,"LifeCube_Holder-007",["_name"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,91.19999999999999,21,0]],[22,["_lrot"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[22,["_euler"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],78]],[36,0,{},3,[29,"2fFGF3dqxMNKSC0hr3+Zvd",-760,[42,"a2CnGIgYNF1549oF7vSBXk",1,[[28,"LifeCube_Holder-008",["_name"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,127.79999999999998,21,0]],[22,["_lrot"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[22,["_euler"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],79]],[36,0,{},3,[29,"2fFGF3dqxMNKSC0hr3+Zvd",-761,[42,"bbmhP8kNNFHYhDHE6osOGC",1,[[28,"LifeCube_Holder-009",["_name"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,164.39999999999998,21,0]],[22,["_lrot"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[22,["_euler"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],80]],[36,0,{},3,[29,"2fFGF3dqxMNKSC0hr3+Zvd",-762,[42,"5blYx2mgNGB4CSEcuOc88D",1,[[28,"LifeCube_Holder-010",["_name"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-165,-15,0]],[22,["_lrot"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[22,["_euler"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],81]],[36,0,{},3,[29,"2fFGF3dqxMNKSC0hr3+Zvd",-763,[42,"4fQFdgr01LDbnqUBek4oiG",1,[[28,"LifeCube_Holder-011",["_name"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-128.4,-15,0]],[22,["_lrot"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[22,["_euler"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],82]],[36,0,{},3,[29,"2fFGF3dqxMNKSC0hr3+Zvd",-764,[42,"adaCthYBFOLYNMtCicsIHG",1,[[28,"LifeCube_Holder-012",["_name"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-91.80000000000001,-15,0]],[22,["_lrot"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[22,["_euler"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],83]],[36,0,{},3,[29,"2fFGF3dqxMNKSC0hr3+Zvd",-765,[42,"e0fyMWYtJBbZHqGdMEB7n6",1,[[28,"LifeCube_Holder-013",["_name"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-55.20000000000001,-15,0]],[22,["_lrot"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[22,["_euler"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],84]],[36,0,{},3,[29,"2fFGF3dqxMNKSC0hr3+Zvd",-766,[42,"f8T8TRrL5IL6mxmSyfR6X3",1,[[28,"LifeCube_Holder-014",["_name"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-18.60000000000001,-15,0]],[22,["_lrot"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[22,["_euler"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],85]],[36,0,{},3,[29,"2fFGF3dqxMNKSC0hr3+Zvd",-767,[42,"0aHbmObZBPJbGalTEfX6Dg",1,[[28,"LifeCube_Holder-015",["_name"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,17.999999999999993,-15,0]],[22,["_lrot"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[22,["_euler"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],86]],[36,0,{},3,[29,"2fFGF3dqxMNKSC0hr3+Zvd",-768,[42,"39ydII2U1C04Ew6G7nhJ7h",1,[[28,"LifeCube_Holder-016",["_name"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,54.599999999999994,-15,0]],[22,["_lrot"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[22,["_euler"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],87]],[36,0,{},3,[29,"2fFGF3dqxMNKSC0hr3+Zvd",-769,[42,"fcTfiIOR9Pf4i37khI4GUN",1,[[28,"LifeCube_Holder-017",["_name"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,91.19999999999999,-15,0]],[22,["_lrot"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[22,["_euler"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],88]],[36,0,{},3,[29,"2fFGF3dqxMNKSC0hr3+Zvd",-770,[42,"6a9la9eQ1M44Civqhp+e5M",1,[[28,"LifeCube_Holder-018",["_name"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,127.79999999999998,-15,0]],[22,["_lrot"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[22,["_euler"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],89]],[36,0,{},3,[29,"2fFGF3dqxMNKSC0hr3+Zvd",-771,[42,"a1My+52mNMd6m/8VuXt47Y",1,[[28,"LifeCube_Holder-019",["_name"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,164.39999999999998,-15,0]],[22,["_lrot"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[3,0,0,0,1]],[22,["_euler"],[4,["2fFGF3dqxMNKSC0hr3+Zvd"]],[1,0,0,0]]]],90]],[39,"Waves UI",33554432,20,[[48,-772,[1,"daYJDLQF1J+4hoJewrsDWB"]],[544,-773,[1,"11nA6bV1dHrq1ZgHBcnFpW"],[[7,"c4d68jIEQZKZ5AKzGQQzzsP","setText",82]],[[7,"c4d68jIEQZKZ5AKzGQQzzsP","setText",84]]]],[2,"bcBe8EgHVEhrgb9T+2a4Wc",1,0]],[66,"Square_Detail 01",33554432,63,[[18,-774,[1,"2au3z3oyRCGp8Tbojv2UrY"],[5,8,8]],[70,1,0,-775,[1,"03u/nsfFJE1IWkz0eLB9nD"],[4,4292928274],104],[312,9,-11.175000000000011,3.5279999999999987,1,-776,[1,"54PGsKZDdHH4vRpOD6lkpg"]]],[2,"ecQBpVZJNJ4bDMzJNvIaZC",1,0],[1,-247.175,75.47200000000001,0]],[66,"Square_Detail 02",33554432,63,[[18,-777,[1,"82dovEHetLUJb3zpe5AFbv"],[5,8,8]],[70,1,0,-778,[1,"80g+8BRzJM76jJMhmbwKq4"],[4,4292928274],105],[312,9,-0.41200000000000614,-11.325000000000003,1,-779,[1,"3bgDohEGlE06jvSojjcxse"]]],[2,"d9g06R0y1KgJlD9A7Ely+0",1,0],[1,-236.412,90.325,0]],[66,"Square_Detail 03",33554432,63,[[18,-780,[1,"dbw8gbU6lCVZvzNl4/iRGX"],[5,4,4]],[70,1,0,-781,[1,"e0mRmO14lC/YsXhJHlsHTs"],[4,4292928274],106],[312,9,-7.2379999999999995,-2.2209999999999965,1,-782,[1,"cfVUmspF1FqZIoj/DXG9EU"]]],[2,"86kMi+WgtEb4R+S+lkcfC6",1,0],[1,-245.238,83.221,0]],[39,"Energy UI",33554432,20,[[48,-783,[1,"fez/VmKWRGJpPg8tIUX+8R"]],[545,-784,[1,"0bTAqGdDhHLrdmB0N8yYpS"],[95,96,97,98,99,100,101,102,103,104],[51,52,53,54,55,56,57,58,59,60],[[7,"c4d68jIEQZKZ5AKzGQQzzsP","setText",75]],[[7,"c4d68jIEQZKZ5AKzGQQzzsP","setText",76]],[[68,"2022ebMdchE2pNL1SpqTm8g","setBool","energyFull,true",4]],[[68,"2022ebMdchE2pNL1SpqTm8g","setBool","energyFull,false",4]]]],[2,"c2HUXnxKNEmIwgLEb2D+GZ",1,0]],[39,"Level Hints UI",33554432,20,[[48,-785,[1,"97/wX2cN5Dk67ZVua5NjZw"]],[546,-786,[1,"1bbyZfUKNDE6R+F7Clk2Fd"],[[7,"c4d68jIEQZKZ5AKzGQQzzsP","setText",81]],[[7,"34d5dMnUohLwIpOOtI38H+y","showTower",107],[7,"26530mDlypKVbgkyPCFjn/T","showEnemy",2]],109]],[2,"a6zjjTIYNAIba23CRNlZ90",1,0]],[85,"On Start",33554432,20,[-790],[[48,-787,[1,"6fdbRA8itLEJfTP3t+rUU5"]],[547,-789,[1,"80ck1Oq9dLDYM39c+e4dZV"],[[7,"0ca47t6TKlPq7GfoQTtu5fu","getCurrentLevelData",-788]]]],[2,"92v+TIF4lHY6NEI8xhMXFP",1,0]],[39,"Get Level ID",33554432,138,[[48,-791,[1,"52Oer4vchC7I4bnIJCGpIK"]],[550,1,-792,[1,"fbluvLtG5JtIFnR7mBEKHu"],[[7,"c4d68jIEQZKZ5AKzGQQzzsP","setText",43],[7,"c4d68jIEQZKZ5AKzGQQzzsP","setText",64],[7,"38246A7yIhB9pH55CZX1oMb","setHints",137]]]],[2,"86f0FJJsVIqJWs/vEiFczt",1,0]],[159,"Text_Title",33554432,86,[[[18,-793,[1,"18S6uqNJNOdYJf7dsxpyIx"],[5,230.96,25.2]],-794,[145,-796,[1,"6etoqzTthMRqhmUTr1RjNC"],-795]],4,1,4],[2,"bdnovZyKBC7LpQ5Kl+Nd7O",1,0],[1,0,32.088,0]],[76,"Holder_Panel",33554432,86,[37],[[18,-797,[1,"73LsTPf+FH2IQS7islcmZe"],[5,360,80]],[90,-798,[1,"93wB0TUOxAnIj3A6w0ae/0"]]],[2,"2cKVViiphCX47j3qAnh+r5",1,0],[1,0,-15.074,0]],[142,"Text_Fluff",33554432,37,[[[18,-799,[1,"087wCLpHhKspU73DhIWr7D"],[5,266,72]],-800,[145,-802,[1,"4aeAfyiVtE3IrI0f63kNYz"],-801]],4,1,4],[2,"7fd4u/ZXFCCITM5Vr7B5PG",1,0]],[76,"Holder_Lines",33554432,37,[67,68],[[18,-803,[1,"1ehOxFdixLo7UN4d6G1aRo"],[5,0,0]]],[2,"eaayoytCdFc4/YfqRYdzDM",1,0],[1,0,-53.120000000000005,0]],[66,"Top_Bar",33554432,67,[[95,-804,[1,"6dQiTgqSFLeLpXHwxbIWAs"],[5,8,2],[0,0,0.5]],[51,0,-805,[1,"bfzkJ7jBlDVauR8Ewx/pbS"],[4,4284216710],121],[211,1,-806,[1,"74pkl8t15OBZOIom24Hhoo"]]],[2,"46sJ7KxAxHr5cYhWfJmM0i",1,0],[1,0,38,0]],[66,"Bot_Bar",33554432,67,[[95,-807,[1,"b0y9AeQSRFs4EBAWaTDicT"],[5,8,2],[0,0,0.5]],[51,0,-808,[1,"7d3Ni8PWNKop2FfpH7h+1R"],[4,4284216710],122],[211,4,-809,[1,"bdqsx8LllI7JzOpc0hOtSa"]]],[2,"4fGfqli0xMFqSpPJ92gdml",1,0],[1,0,-38,0]],[66,"Top_Bar",33554432,68,[[95,-810,[1,"1c5kzEkH9PjZlA/pksrCGd"],[5,8,2],[0,1,0.5]],[51,0,-811,[1,"15vxSUS6tHnLEErRfs7rXf"],[4,4284216710],124],[211,1,-812,[1,"18ZwN4IlxGu6hnxmkOjI9a"]]],[2,"46MnRt0l5BxoSgKLMJYHps",1,0],[1,0,38,0]],[66,"Bot_Bar",33554432,68,[[95,-813,[1,"aa6IiF07RBRIs8TWoRG9+C"],[5,8,2],[0,1,0.5]],[51,0,-814,[1,"78BM5PvJVAD5ibfD/0DJ9H"],[4,4284216710],125],[211,4,-815,[1,"ccu5dGm0NGiorAye2viX2Z"]]],[2,"e1MoV/tn5F0KbEWtmyeRfm",1,0],[1,0,-38,0]],[66,"Outline",33554432,28,[[18,-816,[1,"2aRmaAJERLo6189x8vTITV"],[5,68,68]],[70,1,0,-817,[1,"58FKCnTSlH96sqa2JCcjxH"],[4,4294174947],129],[170,45,-6,6,6,-6,108,108,-818,[1,"e8tiBi/fdDcKI+mZCkmgmf"]]],[2,"3cUKyzgXtEaqaOsIJ23+IK",1,0],[1,-6,-6,0]],[66,"Outline",33554432,29,[[18,-819,[1,"33jTgxFzdPvZq6S5l38re7"],[5,68,68]],[70,1,0,-820,[1,"adpVEcYTREJKseA65JZ6hC"],[4,4281556991],136],[170,45,-6,6,6,-6,108,108,-821,[1,"a8mTLqfyJM9okaLkx+41Y7"]]],[2,"56kIOy35JE3KsFQ0aIhctU",1,0],[1,-6,-6,0]],[39,"Button_Color",33554432,23,[[18,-822,[1,"3fd0E5yCRGrYB3jHFOekHV"],[5,108,108]],[70,1,0,-823,[1,"f2IpVWpmlBuJFTgtLl3dGL"],[4,4292928274],142]],[2,"95523b/ChPVacj+erIHaYO",1,0]],[76,"Holder_Panel",33554432,70,[31],[[18,-824,[1,"52sP79LahIn6XPS7/edIgk"],[5,360,80]],[90,-825,[1,"120QMoBoRF859UZgjnnETD"]]],[2,"25FwW/HthB07G3rtM/Jwmp",1,0],[1,0,0.174,0]],[159,"Text_Title",33554432,31,[[[18,-826,[1,"18XJYVdihKo6t5c/04a6L1"],[5,230.96,32.76]],-827,[145,-829,[1,"fcxUeXyPpFTrCHqjuNJHcR"],-828]],4,1,4],[2,"69ZJ+wN1hMtqIonch6wTlc",1,0],[1,0,40.71,0]],[159,"Text_Fluff",33554432,31,[[[18,-830,[1,"c4eW3pvFRAo47Yf865qeTq"],[5,266,72]],-831,[145,-833,[1,"1543uSsxlCOqBuBHmf7idp"],-832]],4,1,4],[2,"9672yJuK5NGbVWZF+lVrmF",1,0],[1,0,-15.120000000000001,0]],[76,"Holder_Lines",33554432,31,[71,72],[[18,-834,[1,"e5yDdAuOpLtoc4KIvReg1F"],[5,0,0]]],[2,"891JHMBdxLjaiB02wsQkM0",1,0],[1,0,-53.120000000000005,0]],[66,"Top_Bar",33554432,71,[[95,-835,[1,"b5aQSDhPlKWqJtzmM9cBnq"],[5,8,2],[0,0,0.5]],[51,0,-836,[1,"d5tBqhD/BDk4d6baTwDmh7"],[4,4284216710],170],[211,1,-837,[1,"65xOgnR1tHq5QfmUNuf21s"]]],[2,"2dZ00aCqlI8L3lKA/Eiqrw",1,0],[1,0,68,0]],[66,"Bot_Bar",33554432,71,[[95,-838,[1,"09doZlbxBKPZFgdnJ0i2hH"],[5,8,2],[0,0,0.5]],[51,0,-839,[1,"01j5mdXeFHoYZKMR8SIyST"],[4,4284216710],171],[211,4,-840,[1,"16segjbG1J6JtAWxzcol2g"]]],[2,"0aL7JT/jJETJVShI3JNwdw",1,0],[1,0,-68,0]],[66,"Top_Bar",33554432,72,[[95,-841,[1,"85w0I7RoBOzI3wLAD476Mm"],[5,8,2],[0,1,0.5]],[51,0,-842,[1,"ebvAnlLnZAAqp88fCXlzuO"],[4,4284216710],173],[211,1,-843,[1,"8a5XlglP1GQKf1I0nnBQ/W"]]],[2,"efM3CrdCdGObRi6nNUi58z",1,0],[1,0,68,0]],[66,"Bot_Bar",33554432,72,[[95,-844,[1,"05/VkhtLJPb65DS/4f76wB"],[5,8,2],[0,1,0.5]],[51,0,-845,[1,"ccV25wFOlI/Y8BGuboI44U"],[4,4284216710],174],[211,4,-846,[1,"09iIEr2hJKsrFfVVc35zc8"]]],[2,"38J++ydV5OGL/whBXtDjcz",1,0],[1,0,-68,0]],[76,"Holder_Ad Button v3",33554432,12,[15],[[18,-847,[1,"b67ycjfDRNHLBg2VrSazw0"],[5,60,32]],[90,-848,[1,"15juFGDUJMKK9jnVwzYWQm"]]],[2,"faFimRjVRCRa+lj6G7Su7Z",1,0],[1,69.717,-52,0]],[85,"Group_Glow",33554432,15,[-850,-851],[[48,-849,[1,"b8YwEF4g9HWZ7ySsb6kZJz"]]],[2,"bb6ea71hdEg61DfZR8U1Rv",1,0]],[39,"Button_Color",33554432,16,[[18,-852,[1,"974M8kJLlOno4xg61kQvYd"],[5,108,108]],[70,1,0,-853,[1,"0cX6kQOg1DC7DSLkMzq4PR"],[4,4280250623],209]],[2,"79b88GncRDpbJuCmou2OVk",1,0]],[66,"Outline",33554432,18,[[18,-854,[1,"799mbLIcdFgbvLBOzTSOG1"],[5,68,68]],[70,1,0,-855,[1,"d8/VT0QZZFq5OtxXVJBx4k"],[4,4294174947],217],[170,45,-6,6,6,-6,108,108,-856,[1,"74ZhmVbidH45lPVP9vywFm"]]],[2,"e9ICe3MsdN+a3N6PRWI9S7",1,0],[1,-6,-6,0]],[66,"Outline",33554432,25,[[18,-857,[1,"10j2Zd2IRGeae80rDZfsn6"],[5,68,68]],[70,1,0,-858,[1,"70s83CMaJGoamPKy49NxWD"],[4,4281556991],224],[170,45,-6,6,6,-6,108,108,-859,[1,"76Xy1ee+BImJwZqpIUm5jv"]]],[2,"91JEBzFkJNBbsAL3Xjf0UM",1,0],[1,-6,-6,0]],[39,"Raise Game Over GS Event",33554432,25,[[48,-860,[1,"1dfB/qcIpGBIM5ltEr+7xD"]],[401,-861,[1,"a7Wu9C6R1L/Y3g9QkK65Lo"]]],[2,"3a0x2PVylMOrUxd8zVwjnv",1,0]],[236,"Holder_Ad Button",false,33554432,12,[19],[[18,-862,[1,"1bP89+oYVIvLzFjZeAsuCs"],[5,60,32]],[90,-863,[1,"4bnUr4eiJF7bXmZB3DT0wZ"]]],[2,"a76jv30b1CcZoxethOLO9i",1,0],[1,69.717,-52,0]],[85,"Group_Glow",33554432,19,[-865,-866],[[48,-864,[1,"69iA2TNCZFiZzpfI2PdeCR"]]],[2,"2a9BJjKXVJoJ68Uszpp+U7",1,0]],[236,"Holder_Ad Button-001",false,33554432,12,[26],[[18,-867,[1,"cdgNBU6XRIAYbB75kBRrXx"],[5,70,70]],[90,-868,[1,"c8fxUK5BdEwYP2tCaRBgZi"]]],[2,"01lJpCDOxOariilDPVbvqe",1,0],[1,-87.624,-115.114,0]],[85,"Group_Glow",33554432,26,[-870,-871],[[48,-869,[1,"331UuJn1FMjI4BBMr2L4FE"]]],[2,"becbdYuRhJzIU5+XkUZ9Ze",1,0]],[85,"Group_Glow",33554432,7,[-873,-874],[[48,-872,[1,"5ana7HIJREwKlV1ibckcu9"]]],[2,"c4urjvrjFLqqurzX1rYZAB",1,0]],[39,"Color",33554432,7,[[18,-875,[1,"eeTGlXJGVJKp2R2CLmfVyK"],[5,32,32]],[51,0,-876,[1,"a3tPsLhmJL/ZoO7wD/00B5"],[4,4784195],250]],[2,"1baTLrN1ZHkpTm+MMbfWqj",1,0]],[85,"Group_Glow",33554432,8,[-878,-879],[[48,-877,[1,"7djmuFbBtBx5z1DVzij1UR"]]],[2,"d2+lMHVwJKdIKLLZjSOSk6",1,0]],[177,"Annoucement Finished",33554432,[[48,-880,[1,"96W490h6BJFqOb1mafaNS6"]],[552,5,-881,[1,"34APirnblPqaGfbe9G6Rk/"]]],[2,"f7H+rSHuhBcrjr9r8NxqPj",1,0]],[85,"Wave",33554432,33,[-883,172],[[48,-882,[1,"39j9TK4PJFNZrSZrxj6SyR"]]],[2,"1d+2Wt5x1NHpMCXnJ10iXO",1,0]],[85,"Cube Tower HP",33554432,33,[-885,-886],[[48,-884,[1,"2fSPXDtOhLAKWuuw3BxyDU"]]],[2,"29oN+GuGVFoKtF9yCPmqUz",1,0]],[85,"Game Flow",33554432,33,[-888,-889],[[48,-887,[1,"f7LxDQU11N04qYk4qK8REH"]]],[2,"d3Ov/jJS5KFLnkoCsGfV1Q",1,0]],[85,"Rewarded Ads Freeze",33554432,33,[-891,-892],[[48,-890,[1,"fab+rjiu1Gvo1i7K6650oN"]]],[2,"ecV/nbRkRLYZ9nNrn+ynHs",1,0]],[163,"Square_Outline",33554432,73,[[18,-893,[1,"751Jxs7hhFmY7zJSB6nP0r"],[5,220,220]],[70,1,0,-894,[1,"fbEzh/hiJKpLq7B6Tmp1BF"],[4,4294174947],0]],[2,"56F80fvnhKBKbxGoB5bxYr",1,0],[1,0,61,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[163,"Square_Color",33554432,73,[[18,-895,[1,"1aS3EsBlVCXqMlj+QYJzbf"],[5,200,200]],[148,0,-896,[1,"50Mxwd8xhMr4zSnRnu8N17"],1]],[2,"65lhlOpA1IOqeMRWnRAxk0",1,0],[1,0,61,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[66,"Energy Cube 01",33554432,10,[[95,-897,[1,"f76EOjX3NKx5HJ2pxHPHGG"],[5,22,22],[0,0,0.5]],[51,0,-898,[1,"bcjfZ92T9HzpWRktoYFstM"],[4,1355861760],13]],[2,"0axfYOGJ9KIpwnZnDqgaBm",1,0],[1,4.5,0,0]],[66,"Energy Cube 02",33554432,10,[[18,-899,[1,"7fyVD95sxLcpdL5pcIzuH7"],[5,22,22]],[51,0,-900,[1,"f4JXWR63NFvoDQaZ5n+tzm"],[4,1355861760],14]],[2,"53HN9ngBFPwIoXt0tubF9k",1,0],[1,41.6,0,0]],[66,"Energy Cube 03",33554432,10,[[18,-901,[1,"d0Vr2EFfBG8ZmVXOnq0zyN"],[5,22,22]],[51,0,-902,[1,"69pNpI1edJ4K5KQV2QBHj7"],[4,1355861760],15]],[2,"c2M0agW91M9LnjfWAKWt7r",1,0],[1,67.7,0,0]],[66,"Energy Cube 04",33554432,10,[[18,-903,[1,"b8qrYyE6xHX4QDFv0oivuA"],[5,22,22]],[51,0,-904,[1,"212fChd2RG6I9BwR/11Yg9"],[4,1355861760],16]],[2,"01ffODeyhP/4KgJPoDRwfM",1,0],[1,93.8,0,0]],[66,"Energy Cube 05",33554432,10,[[18,-905,[1,"02iAvz7qZCzqWRAmy1d5Of"],[5,22,22]],[51,0,-906,[1,"defqe6RuVGday5/ncO/yz7"],[4,1355861760],17]],[2,"b7Jgl14dxLzKKEB3XSS3ej",1,0],[1,119.89999999999999,0,0]],[66,"Energy Cube 06",33554432,10,[[18,-907,[1,"226lIeBiNACqq2uc2H7Wr6"],[5,22,22]],[51,0,-908,[1,"01HB30IOZFmpr5ph4p2Jck"],[4,1355861760],18]],[2,"51U0ikYrVBMpFfaWahlqGV",1,0],[1,145.99999999999997,0,0]],[66,"Energy Cube 07",33554432,10,[[18,-909,[1,"10+DbdToJOBr6Ke0l38a/4"],[5,22,22]],[51,0,-910,[1,"ee2m/GSF5L77vgs/xAG+yV"],[4,1355861760],19]],[2,"c3mnqxREVDdqeDtBJOq0J+",1,0],[1,172.09999999999997,0,0]],[66,"Energy Cube 08",33554432,10,[[18,-911,[1,"5e4Vdh445MjaAjKTG7MgSe"],[5,22,22]],[51,0,-912,[1,"c80/94Zg9PW602TEXracUb"],[4,1355861760],20]],[2,"9a+qH8Q7ZAoowWqHZ6iGr6",1,0],[1,198.19999999999996,0,0]],[66,"Energy Cube 09",33554432,10,[[18,-913,[1,"f1KSIgzslKxKbbWg9NGAlV"],[5,22,22]],[51,0,-914,[1,"01TsDgDdlMbqEcugaHbKM9"],[4,1355861760],21]],[2,"5fdgPWM4RJ5oImY3BOlnT2",1,0],[1,224.29999999999995,0,0]],[66,"Energy Cube 10",33554432,10,[[18,-915,[1,"d1fkRx67hKpIl7X++ehk1s"],[5,22,22]],[51,0,-916,[1,"b0GOLiLelG9ZBHsQk7I+bz"],[4,1355861760],22]],[2,"1d7JAlIBpFbYQ00E+ylGdn",1,0],[1,250.39999999999995,0,0]],[39,"Energy Cube 01",33554432,51,[[18,-917,[1,"6ct1Vh0PpG3acjCkxmA0aO"],[5,22,22]],[51,0,-918,[1,"88YHcVdSFKlLdFuyzdGg4W"],[4,2027800766],23]],[2,"37NAPNjdJMSaUzzOwwlrtO",1,0]],[183,"Icon_Locked",33554432,51,[[18,-919,[1,"86X8FLAqlC2Ljmjfd2uHAv"],[5,16,20]],[173,0,false,-920,[1,"6eYCH7CvVIxo1JHwqEO8SJ"],[4,2027800766],24]],[2,"1aiKBkk+tFJpdGA+GWo+g6",1,0],[1,0.8,0.8,1]],[39,"Energy Cube 01",33554432,52,[[18,-921,[1,"e4qSNHt6BCcqTIfikgNWCH"],[5,22,22]],[51,0,-922,[1,"72bDN43wJItoK3FuLhER9f"],[4,2027800766],25]],[2,"9fzrn3d9hIV5PEwuNmsFbT",1,0]],[183,"Icon_Locked",33554432,52,[[18,-923,[1,"88pphmbCNH/b9y5EsiWXV8"],[5,16,20]],[173,0,false,-924,[1,"67J+N+ypBBLKvG4VQY3Qfb"],[4,2027800766],26]],[2,"0bRZVbG3VK5aUERKjalhg5",1,0],[1,0.8,0.8,1]],[39,"Energy Cube 01",33554432,53,[[18,-925,[1,"1cMxU3ka5HFrQHv/AlyBsm"],[5,22,22]],[51,0,-926,[1,"92Utv7o1dGDoJ75NCjXJfH"],[4,2027800766],27]],[2,"20qjyWMzRHpbkfHCMgTXaA",1,0]],[183,"Icon_Locked",33554432,53,[[18,-927,[1,"c5zwYew/ZL46AQFVkg7Fg1"],[5,16,20]],[173,0,false,-928,[1,"523BF5/J5PGqBkLSC9s85m"],[4,2027800766],28]],[2,"e28BcgHqdHFah8GNdhsMey",1,0],[1,0.8,0.8,1]],[39,"Energy Cube 01",33554432,54,[[18,-929,[1,"de9DLRnytJsqfv5euMxlZu"],[5,22,22]],[51,0,-930,[1,"f5c6ikpSpAKq7uGhrecEmx"],[4,2027800766],29]],[2,"d1NQnxteVOVpt0g4vmzj1e",1,0]],[183,"Icon_Locked",33554432,54,[[18,-931,[1,"73QQ7yK9pLCb9LtGzxk+Gt"],[5,16,20]],[173,0,false,-932,[1,"97NXfDYxZCfou6WQ2+0XdS"],[4,2027800766],30]],[2,"0fLV4PvtFHlZKP++uSTG1V",1,0],[1,0.8,0.8,1]],[39,"Energy Cube 01",33554432,55,[[18,-933,[1,"2fgbFGTpBFNJuwiutaH/18"],[5,22,22]],[51,0,-934,[1,"5fb/R585BPvJt17T22Y/at"],[4,2027800766],31]],[2,"87r0j2xS1EFq4sxo43rqDo",1,0]],[183,"Icon_Locked",33554432,55,[[18,-935,[1,"0eaO3RooVLzbwTfE9ER0Ik"],[5,16,20]],[173,0,false,-936,[1,"09frqn83VBo6Hv+5StW1Wk"],[4,2027800766],32]],[2,"a2Cagj/rRMLYfWpY570abg",1,0],[1,0.8,0.8,1]],[39,"Energy Cube 01",33554432,56,[[18,-937,[1,"baklbTKRhPDYqUTOBxeXSp"],[5,22,22]],[51,0,-938,[1,"54aFRtKrxCa5gaMNOkIzRi"],[4,2027800766],33]],[2,"36g1h3o+VBsYtuzVfbhM8X",1,0]],[183,"Icon_Locked",33554432,56,[[18,-939,[1,"1cmhhko1FEQpstzmlj30Ib"],[5,16,20]],[173,0,false,-940,[1,"52ok8I+9JAi5Hb0dGe2ShT"],[4,2027800766],34]],[2,"f82pUV9SlIbJzH+MoyQQIc",1,0],[1,0.8,0.8,1]],[39,"Energy Cube 01",33554432,57,[[18,-941,[1,"10B/YfNfhBLbZimNYxkQXB"],[5,22,22]],[51,0,-942,[1,"14grZ5rVxADY/UxChqRKQ8"],[4,2027800766],35]],[2,"9776Kco0hIwKncHloA6XyJ",1,0]],[183,"Icon_Locked",33554432,57,[[18,-943,[1,"3a3Q5Mlj5JaZE3MMMd9kly"],[5,16,20]],[173,0,false,-944,[1,"a6yM3tO0NP357SqHuJ5tla"],[4,2027800766],36]],[2,"9aCdMYufxHUYRAcMUQ4zkt",1,0],[1,0.8,0.8,1]],[39,"Energy Cube 01",33554432,58,[[18,-945,[1,"4eUEuixR1K9qe9WO0ZhZyN"],[5,22,22]],[51,0,-946,[1,"8cGjl3ctxHfrloGVVk064P"],[4,2027800766],37]],[2,"675DLsx+hLXrVy+nj+AT6K",1,0]],[183,"Icon_Locked",33554432,58,[[18,-947,[1,"3erwz2cOZGTanNCgCPnCbs"],[5,16,20]],[173,0,false,-948,[1,"4dIxCbblNBK5tOVnEq4uw9"],[4,2027800766],38]],[2,"c25CeNbS1JHb6QL9d+S7z7",1,0],[1,0.8,0.8,1]],[39,"Energy Cube 01",33554432,59,[[18,-949,[1,"658UhTNY9G+axM3JmtAmiW"],[5,22,22]],[51,0,-950,[1,"4eziJ/qbtM9r/8FlNMDYvc"],[4,2027800766],39]],[2,"a3KAHiludC5bI2AZbmUW66",1,0]],[183,"Icon_Locked",33554432,59,[[18,-951,[1,"98cMWt7wtDHbkIb6y47AKy"],[5,16,20]],[173,0,false,-952,[1,"d9L1H605FJK7N4zSXumtRL"],[4,2027800766],40]],[2,"acmrTcXkdMp62EdG7ytL8z",1,0],[1,0.8,0.8,1]],[39,"Energy Cube 01",33554432,60,[[18,-953,[1,"23Gtn5rtBAbJIXrzU24y57"],[5,22,22]],[51,0,-954,[1,"0aoa5B02tARIlQCfDId4SD"],[4,2027800766],41]],[2,"a0Kpn4fApEcozqA5B/if7U",1,0]],[183,"Icon_Locked",33554432,60,[[18,-955,[1,"20Vl5jltdNb6Qd0dcikaQC"],[5,16,20]],[173,0,false,-956,[1,"62XZgUa3xKpoIt8SIqmWfX"],[4,2027800766],42]],[2,"b75R7qaw9HRYjV23JE+5Al",1,0],[1,0.8,0.8,1]],[66,"Text_Energy",33554432,50,[[18,-957,[1,"2ai87Oku1AKaJWPEwYXgrq"],[5,57.13,50.4]],[537,"energy",24,24,false,-958,[1,"e0XuVXCYtGy4V7WYBhRMmm"],[4,4281532425],44]],[2,"0dm2eouiJMApnIG6hrYxax",1,0],[1,0,34.68,0]],[255,"Reference Image-PauseIntro",false,33554432,5,[[18,-959,[1,"3aFrpkrWhEQJZ8XtgnPVxP"],[5,840,960]],[320,-960,[1,"dctgYSfFFBEJSqGvuNWRtT"],46]],[2,"777Hf4O4BCgbGhRrakZdui",1,0],[1,0.934,0.934,1]],[163,"Square_Outline",33554432,78,[[18,-961,[1,"a2zSBbf1lGYqXqpFG7plHw"],[5,850,850]],[70,1,0,-962,[1,"5a+W4zAXhDZo9f43oe63+3"],[4,4294174947],48]],[2,"1dDWc+qM9Pw4nnfIVduvKV",1,0],[1,0,61,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[163,"Square_Color",33554432,78,[[18,-963,[1,"4br8XdFkFCOo6ePjcfBDg/"],[5,840,840]],[148,0,-964,[1,"0fyD/+uXZMz43Ss+ONqvWM"],49]],[2,"42yD/DDSVHdLOvmbrazXlD",1,0],[1,0,61,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[298,"Text_Pause",false,33554432,43,[[18,-965,[1,"bbmDMRahVNFqhik1klmS6V"],[5,72.76,30.24]],[155,"- pause -",24,24,24,false,-966,[1,"083pT4zpxLAbSmkdHnXMY7"],[4,4278867936],50]],[2,"c2UM6kBRRHiI6o0xzCeNdF",1,0],[1,0,-32,0]],[66,"Outline",33554432,13,[[18,-967,[1,"9eLsTD32RFZYPLDORWdeOo"],[5,108,108]],[70,1,0,-968,[1,"87g031pqZM8oawqBacIBTQ"],[4,4292928274],64]],[2,"bfr0QevGdPlow2J71Qahfm",1,0],[1,-6,-6,0]],[163,"Icon_Play",33554432,13,[[18,-969,[1,"c408Pshj5GKpChNMcvlQ/O"],[5,48,64]],[287,-970,[1,"21SXgacExGapPzuXpMmUw+"],[4,4281532425],65]],[2,"28JX5rJrtH0J9wsV4jfZOa",1,0],[1,9.047,-5.829,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[66,"Square_Detail 01",33554432,46,[[18,-971,[1,"80y6oacWpBzqb3r466wosJ"],[5,5,5]],[51,0,-972,[1,"5d1bZFA/RFlIR2AebMkxbq"],[4,15984867],67]],[2,"72ITTXs85CDqK0FFU0Jrrc",1,0],[1,-27.141,6.28,0]],[66,"Square_Detail 02",33554432,46,[[18,-973,[1,"5ap7xeIShGiJkNrCOrzaTu"],[5,3,3]],[51,0,-974,[1,"ceNTbbVktAT6b0TL7R/Jx1"],[4,15984867],68]],[2,"086oYh7jJBs60J33QNB7t8",1,0],[1,-26.11,12.277,0]],[66,"Square_Detail 03",33554432,46,[[95,-975,[1,"9agxqoNwdIeKV3iPPgFEO0"],[5,5,5],[0,0.5,0]],[51,0,-976,[1,"6bOLheF8JNuraXkq42bngB"],[4,15984867],69]],[2,"c8oiatvxtGs4YR8+pGLbNo",1,0],[1,26.57,3.384,0]],[66,"Square_Detail 04",33554432,46,[[95,-977,[1,"bcmvpYwtVJT4WlHR6nfiLg"],[5,3,3],[0,0.5,0]],[51,0,-978,[1,"b1eAwd6T5LbIFLOEhnigfr"],[4,15984867],70]],[2,"016TJkE1hOx4J2+e9fYggm",1,0],[1,32.229,3.384,0]],[66,"Text_Clear",33554432,21,[[95,-979,[1,"c0T1MV+QNPvoNKLeQusDBa"],[5,184.26,113.4],[0,0,0.5]],[155,"Clear!",90,90,90,false,-980,[1,"955G9vK3xGi7xKICxoIqeK"],[4,4294174947],92]],[2,"27/+u8X/VF/ZWsvtPdldCa",1,0],[1,-92,0,0]],[66,"Square_Detail 01",33554432,21,[[18,-981,[1,"eaECD3gvRHDru26ZvjeAGl"],[5,10,10]],[70,1,0,-982,[1,"5cXybZ961LQLV7ImgAUO3j"],[4,4294174947],93]],[2,"e0y8k+Et1IHI5rNRBhX77I",1,0],[1,-100,-28,0]],[66,"Square_Detail 02",33554432,21,[[18,-983,[1,"4fFdjptZNCj7cQccRRFcv/"],[5,5,5]],[70,1,0,-984,[1,"08nwrdCnlCT4pa43TZKuz8"],[4,4294174947],94]],[2,"dbXoVlZZdE5JLFAok+zHTl",1,0],[1,-97.48,-18,0]],[66,"Square_Detail 03",33554432,21,[[18,-985,[1,"4b8nLKeNFPAJiH/jPwO/Kz"],[5,5,5]],[70,1,0,-986,[1,"43mu4kNfBEp5i99ruutkyz"],[4,4294174947],95]],[2,"3fcsHtO9NEgLdjRBcMPBc+",1,0],[1,-26.26599999999999,16.458999999999946,0]],[66,"Square_Detail 04",33554432,21,[[18,-987,[1,"1e5H4xlZ1Egoo7R4L3upzM"],[5,8,8]],[70,1,0,-988,[1,"6bHRmGBNtIVIy9MtX13MXz"],[4,4294174947],96]],[2,"d8tfuxPEFHp4hrPz0yLRjQ",1,0],[1,32.32,-40.564,0]],[66,"Square_Detail 05",33554432,21,[[18,-989,[1,"22e5SlzKVAWq5xgxu3Cn/7"],[5,8,8]],[70,1,0,-990,[1,"1d8hfmkz9H9YViI0GAsRay"],[4,4294174947],97]],[2,"45CbS3SFZKxYCYymn27WBH",1,0],[1,47.141,17.264,0]],[66,"Square_Detail 06",33554432,21,[[18,-991,[1,"2aJnaBMaJHpKSFKHmu7+0d"],[5,4,4]],[70,1,0,-992,[1,"1eIrq7O+RK9b5pM+YhaxqI"],[4,4294174947],98]],[2,"9b6Z0rwKhDG4IMzNuWcApw",1,0],[1,55.693,15.228,0]],[66,"Square_Detail 07",33554432,21,[[18,-993,[1,"91OfI/VVFMpoaE+j2eX6eQ"],[5,5,5]],[70,1,0,-994,[1,"f6ZiT+6jZB1If14+6jDNKG"],[4,4294174947],99]],[2,"5eCdLrcLpAaJd/WdEZ5AZN",1,0],[1,93.577,-30.883,0]],[39,"Text_Defeat",33554432,83,[[18,-995,[1,"569hvmW1xI9Zs768M0kk8t"],[5,231.11,113.4]],[155,".Defeat.",90,90,90,false,-996,[1,"e6w8v72aRAFYbG0gVkJ3aF"],[4,4281556991],100]],[2,"a5SVco3tlAa4sv9UmVXgnj",1,0]],[39,"Square_Explode",33554432,83,[[18,-997,[1,"dcYXVYteZLBr3bwcufwK8e"],[5,30,30]],[70,1,0,-998,[1,"46xqyb4BVGPZiyGrrcZSBj"],[4,4294174947],101]],[2,"43wKVsld1PO4nFYmhu8Dfa",1,0]],[39,"Square_Outline",33554432,83,[[18,-999,[1,"4axRTIsNdDU62GxM1PsPXq"],[5,38,38]],[70,1,0,-1000,[1,"253aXI+HtIuIiW5TLGaw3m"],[4,4294174947],102]],[2,"0fwO18uOdHnqNLughyJXFU",1,0]],[66,"Panel_Color",33554432,62,[[95,-1001,[1,"27V3kMgipBgYtdlCh/VQdS"],[5,240,80],[0,0,1]],[148,0,-1002,[1,"e6QqHJC2VA9ZE9bYCvwKrA"],103]],[2,"4eAXTL+2RHPaifX7Qzd7hp",1,0],[1,-120,40,0]],[66,"Text_Wave",33554432,47,[[18,-1003,[1,"9e2/FChzlILZgkCJiRWb/+"],[5,97.01,60.48]],[155,"Wave ",48,48,48,false,-1004,[1,"82fB4FNSZIL54I4WINdEg1"],[4,4281532425],108]],[2,"22AI187bdJUJ6J+Dfz8YEB",1,0],[1,-29.35,0,0]],[255,"Reference Image",false,33554432,6,[[18,-1005,[1,"b1hCi8Sq5LK6hKkyO3CR1b"],[5,841,960]],[320,-1006,[1,"ab42Hys9pKqK02umUgT4kL"],110]],[2,"b9EfvjyIpK/6vAVlHgvBCZ",1,0],[1,0.934,0.934,1]],[39,"Text_Clear",33554432,17,[[18,-1007,[1,"d6y01MZh1DwK2sfQRxhFZ3"],[5,184.26,113.4]],[155,"Clear!",90,90,90,false,-1008,[1,"23hwXaSoNL87erpIdbV5QA"],[4,4294174947],112]],[2,"7b7e8SxJFCl6Q1qDhRySxO",1,0]],[66,"Square_Detail 01",33554432,17,[[18,-1009,[1,"53Gn03F/tHp6+9YvpTpi7v"],[5,10,10]],[70,1,0,-1010,[1,"bbRew4+qRPxKKbrsS5llAN"],[4,4294174947],113]],[2,"d61rSCMTRAq5kjpMu6hA2u",1,0],[1,-100,-28,0]],[66,"Square_Detail 02",33554432,17,[[18,-1011,[1,"d3Ahy4oGpLCZ1YXoO8LnoN"],[5,5,5]],[70,1,0,-1012,[1,"5108DC1odDAafVmQ6sRfWX"],[4,4294174947],114]],[2,"22pxLzOFhLWqEP7B3d4kum",1,0],[1,-97.48,-18,0]],[66,"Square_Detail 03",33554432,17,[[18,-1013,[1,"72GWROmOVEg5AT8dchsWTZ"],[5,5,5]],[70,1,0,-1014,[1,"d2aTNQY2RCBZfoTpUSgRdb"],[4,4294174947],115]],[2,"48lkPX6ZtDR4eYueV3yoC9",1,0],[1,-26.26599999999999,16.458999999999946,0]],[66,"Square_Detail 04",33554432,17,[[18,-1015,[1,"17UwhAfwxBVq4Ud7odqRKJ"],[5,8,8]],[70,1,0,-1016,[1,"02cra57HZPmYJJpm7dW7fy"],[4,4294174947],116]],[2,"c0Uc/DQ6BE0by12JhQ38FZ",1,0],[1,32.32,-40.564,0]],[66,"Square_Detail 05",33554432,17,[[18,-1017,[1,"642oOrU/RBj5dLbMKdJnIX"],[5,8,8]],[70,1,0,-1018,[1,"54uKiH+ppOBbwxe47oBnPX"],[4,4294174947],117]],[2,"31xJctj4xK0IY/HXY3tYv5",1,0],[1,47.141,17.264,0]],[66,"Square_Detail 06",33554432,17,[[18,-1019,[1,"38eZoH+7ZLgZo8ry+N6hOt"],[5,4,4]],[70,1,0,-1020,[1,"bfw0byHFZNSZ0Ul1EqBqnA"],[4,4294174947],118]],[2,"15Y0A3E6NN66tonTfdnxNo",1,0],[1,55.693,15.228,0]],[66,"Square_Detail 07",33554432,17,[[18,-1021,[1,"eaUFWQUWVIap1s8cdHOo2P"],[5,5,5]],[70,1,0,-1022,[1,"a1sSezh+dLJbbLxW72dyZ2"],[4,4294174947],119]],[2,"7aY8yAuYFNUYwNdISN+GKU",1,0],[1,93.577,-30.883,0]],[345,"Holder_Defeat",false,33554432,66,[-1024],[[18,-1023,[1,"d8aM7jMbpPLLUw5xf9F19x"],[5,200,100]]],[2,"29GjEWaLdNDKHr8iShBkqt",1,0],[1,0,100,0],[1,1.2,1.2,1]],[39,"Text_Defeat",33554432,242,[[18,-1025,[1,"27SpoT+PFPp4tVNdZ+QNs8"],[5,231.11,113.4]],[155,".Defeat.",90,90,90,false,-1026,[1,"bbcoSeySJFHaTa5E/ljPNZ"],[4,4281556991],120]],[2,"eey2LrWq5PYYXnckexCsGo",1,0]],[76,"Holder_Defeat Panel",33554432,66,[86],[[48,-1027,[1,"26uCa/UvhAeJUQKWvEcdOJ"]]],[2,"3fTW624+JGLqBnzseXi9zo",1,0],[1,0,-44.814,0]],[184,"Icon_Menu",33554432,28,[[18,-1028,[1,"5c0+/xMQdDMI/oXMGSgwf8"],[5,40,40]],[288,false,-1029,[1,"6aYpmQCf1DEbLWOldjtM/3"],[4,4281532425],130]],[2,"53yFgldllLnK03yOMyadgK",1,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[184,"Icon_PlayAgain",33554432,29,[[18,-1030,[1,"b6rbLNO1xNC63wZeaHngnO"],[5,46,48]],[288,false,-1031,[1,"e5LlMs91JKlaZ8sjnbW5aV"],[4,4281532425],137]],[2,"38lAxgHWBHfqzCDb8yT/Rf",1,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[66,"Outline",33554432,23,[[18,-1032,[1,"c7MzUUx2VN4YBxHI/lhuMP"],[5,108,108]],[70,1,0,-1033,[1,"65W7vIp6RNkrppGgPAYrgD"],[4,4292928274],143]],[2,"0ckD2HFMtMp6fbdQ5jt9R7",1,0],[1,-6,-6,0]],[163,"Icon_Play",33554432,23,[[18,-1034,[1,"e932D1PyJINpV4pSkknZfb"],[5,48,64]],[287,-1035,[1,"ba3prrwZlG9q+Vg/glxzeV"],[4,4281532425],144]],[2,"4a+1HQ3ldP1IJRQ07XMr+M",1,0],[1,9.047,-5.829,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[163,"Square_Outline",33554432,89,[[18,-1036,[1,"26Mt5FQ09AZ7TJLHQOolSK"],[5,720,720]],[70,1,0,-1037,[1,"76nHWjArpI4rjXKnt+nBNI"],[4,4294174947],154]],[2,"c4pRndqgJNh5P95a+LivmT",1,0],[1,0,230,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[163,"Square_Color",33554432,89,[[18,-1038,[1,"d4y5oRGhhKqLLpW02fKYhw"],[5,720,720]],[148,0,-1039,[1,"3csRl7YNdNjprSoDMDq0Hz"],155]],[2,"8e0S2XptdOG7C1FbVp9ysJ",1,0],[1,0,244,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[346,"Holder_Star01",33554432,49,[30],[[18,-1040,[1,"dedRt420RLa7XZSOu+OML6"],[5,96,96]]],[2,"7amibyu3hAxYAWEdLkinoB",1,0],[1,-108,-15.533,0],[3,0,0,0.5591929034707469,0.8290375725550416],[1,0,0,68]],[39,"Star_Icon",33554432,30,[[18,-1041,[1,"f1V6jzU7xGTI797sN19VtD"],[5,84,84]],[148,0,-1042,[1,"a0kUq7DFZO6qxCSktx4wDc"],156]],[2,"a9euNRbDlJT5Cw1zx+/hUy",1,0]],[299,"Text_%",false,33554432,30,[[18,-1043,[1,"535NW2NTVN7rwy2wS4O+aN"],[5,11.97,25.2]],[155,">1",20,20,20,false,-1044,[1,"eb3dMAurtIQJcCLj3e90E/"],[4,4286215282],157]],[2,"42qb0z1bVFHYCiXjGijT8S",1,0],[1,-54.298,-15.379,0],[3,0,0,-0.6115270401858311,0.79122353296749],[1,0,0,-75.4]],[346,"Holder_Star 02",33554432,49,[38],[[18,-1045,[1,"568bw550BIt6jC4Nahwf7P"],[5,96,96]]],[2,"d7G6RwY/1DD4KCaZLXn6/d",1,0],[1,0,1.392,0],[3,0,0,0.3090169943749474,0.9510565162951535],[1,0,0,36]],[39,"Star_Icon",33554432,38,[[18,-1046,[1,"e1oHXP5pRG3IEky5G5XT5+"],[5,84,84]],[148,0,-1047,[1,"c7tKpMEbhMuLiHBnyPF7++"],161]],[2,"d63ckYv05Oxbhyw/kZxKEc",1,0]],[299,"Text_%",false,33554432,38,[[18,-1048,[1,"169pVQnUpCX68qxVPSo+cC"],[5,16.36,25.2]],[155,">5",20,20,20,false,-1049,[1,"d1nt2zEvJIgb5bLMyDGhHm"],[4,4286215282],162]],[2,"29/UfiUMZMnZI9/1VssNxe",1,0],[1,-43.845,-56.026,0],[3,0,0,-0.3090169943749474,0.9510565162951535],[1,0,0,-36]],[76,"Holder_Star 03",33554432,49,[39],[[18,-1050,[1,"baUtcfGQlFSpcbQALzdi1Z"],[5,96,96]]],[2,"feQHhOz/ZAvLGPQk4IFDwz",1,0],[1,108,-14.376,0]],[39,"Star_Icon",33554432,39,[[18,-1051,[1,"11yrqbJH9IO5t6nVaz7vPk"],[5,84,84]],[148,0,-1052,[1,"f8YqMHET5EtYzpQclEzhMJ"],164]],[2,"8fCseJeUNDVbYT1LnzgmaY",1,0]],[299,"Text_%",false,33554432,39,[[18,-1053,[1,"34aFtaEO1FGreMzzGbj4q4"],[5,21.31,25.2]],[155,">10",20,20,20,false,-1054,[1,"5bWW0UGGBBEa5lw/6Mccpo"],[4,4286215282],165]],[2,"88xNgmY7BNhYZ+MnAzPzk7",1,0],[1,-1.229,-57.292,0],[3,0,0,0.0558215049931638,0.998440764181981],[1,0,0,6.4]],[85,"Rewards",33554432,20,[90],[[48,-1055,[1,"42QbcOZ0lCdar+VP97a8Ft"]]],[2,"6eVL61KN1M6YK1tpccm+1F",1,0]],[85,"Ads",33554432,20,[-1057],[[48,-1056,[1,"6fndjF5CVJ1LWnL8ezWRXA"]]],[2,"dcQOj0hCRIZLuwL8skKmJO",1,0]],[39,"Ads UI",33554432,261,[[48,-1058,[1,"5dTu+ZGhZDr4zklIxsWvgn"]],[553,-1060,[1,"8bWSeF6uJOiL0K6y7+XIT9"],-1059,15]],[2,"ccW7XrcjRMjJ8cHAjlrlBc",1,0]],[76,"Holder_Yes",33554432,70,[40],[[18,-1061,[1,"d5oD1LHa5PoLpqea1BcFnK"],[5,60,40]]],[2,"7awyEUzaxIVp/TGndMg7qG",1,0],[1,50,-87.204,0]],[76,"Holder_No",33554432,70,[24],[[18,-1062,[1,"75O5ve25hBYbpEKrncsFnH"],[5,60,40]]],[2,"8ao+LGOoNGqKJ5zPLeAQK6",1,0],[1,-70,-87.204,0]],[39,"Outline 01",33554432,24,[[18,-1063,[1,"59JUqDyMdG9ZAHswkBCi07"],[5,62,46]],[70,1,0,-1064,[1,"3df0350bVHGa0XdD+PkP6I"],[4,2521694463],177]],[2,"730cmC6b1LyZJS7LhWLuyO",1,0]],[39,"Outline 02",33554432,24,[[18,-1065,[1,"110EKRIB5ATra6jOKuN+Cv"],[5,68,51]],[70,1,0,-1066,[1,"e3rcCJ0wBAC6Pi9eZ+tolv"],[4,1347289343],178]],[2,"4f1L68mVhMS5Qy7yEle1M1",1,0]],[66,"Text_No",33554432,24,[[18,-1067,[1,"46t9Idhg5BqoOSxBgojn6X"],[5,24.77,35.28]],[155,"No",28,28,28,false,-1068,[1,"eev9x29sVJHLR6eq91uZiG"],[4,4279764543],179]],[2,"99lEo0x6dLlrP25KF54WCM",1,0],[1,-0.448,1.157,0]],[39,"Outline 01",33554432,40,[[18,-1069,[1,"baMwizmfJDWJ7jHumGeTN5"],[5,118,46]],[70,1,0,-1070,[1,"8eje7++zhEZpE3FyQsgCNd"],[4,2521425664],184]],[2,"20GEbGv7JBf4m8GNksgM3T",1,0]],[39,"Outline 02",33554432,40,[[18,-1071,[1,"5dFrVas0JB5az0vOHBOgf4"],[5,123,51]],[70,1,0,-1072,[1,"79/A9nDQ9JvJ6VxKtCh/2Z"],[4,1347020544],185]],[2,"09OAYL4odAg6Tv2cbnwfxr",1,0]],[66,"Text_Yes",33554432,40,[[18,-1073,[1,"cbBnAEBMVKwql9KUuM614K"],[5,93.38,35.28]],[155,"Watch ad!",28,28,28,false,-1074,[1,"26Rt5m8ZlB5b1Neos2jTAC"],[4,4279976969],186]],[2,"f5SgpE4XtH2rmSb2lBxtic",1,0],[1,-0.448,1.157,0]],[39,"Outline 01",33554432,160,[[18,-1075,[1,"adujPXcfdGaKfPpDBd17UV"],[5,50,36]],[70,1,0,-1076,[1,"a0lO6WqZ1F96bbCX9lMQPV"],[4,1693706467],190]],[2,"de+7ehB+lEPL14d+NlgL8d",1,0]],[39,"Outline 02",33554432,160,[[18,-1077,[1,"b47VCM+iVCkpzsIQpKXPYh"],[5,54,40]],[321,1,0,false,-1078,[1,"bcGOQ31u5CVLDfPL6STRS8"],[4,1022617827],191]],[2,"89quMykB9AFIyP7jnqXPSk",1,0]],[39,"Color",33554432,15,[[18,-1079,[1,"46+mdLXShHR6eDt69YZASv"],[5,46,32]],[51,0,-1080,[1,"3bZs5r5PxNca67ZJVEpF6o"],[4,4292928274],192]],[2,"cbL8N2xNJJqoBUAyMoiNqW",1,0]],[39,"Edge White",33554432,15,[[18,-1081,[1,"73h1qEPyNCdqKh15xtVEC5"],[5,46,32]],[70,1,0,-1082,[1,"86dONd59ZKYoEpaxw4kPF4"],[4,4294174947],193]],[2,"f0yTfRTzFPR6r/vvnCfxfU",1,0]],[167,"Icon_Ad",33554432,15,[[18,-1083,[1,"5cu12Ln/1Lzp4B6H4GROmY"],[5,44,68]],[51,0,-1084,[1,"81+42BGVFOurWdhrxtB9NS"],[4,4281532425],194]],[2,"16NaybWPhA8Lg7fxsca6q+",1,0],[1,0.815,-0.136,0],[1,0.3,0.3,1]],[163,"Snow 01",33554432,32,[[18,-1085,[1,"b570WhWJBHrKLQu9QCq6u7"],[5,16,16]],[148,0,-1086,[1,"77UcP8oXdGq7o0jM+HQnOV"],195]],[2,"4bPoQqFVpC9K/jgia23Lgl",1,0],[1,19.651,12.376,0],[3,0,0,-0.08715574274765817,0.9961946980917455],[1,0,0,-10]],[66,"Snow 02",33554432,32,[[18,-1087,[1,"48Og0B4gVB95TvsN7RAlsN"],[5,15,15]],[148,0,-1088,[1,"f4XofCcIBCPa+REYWR3rHP"],196]],[2,"2bbq0ZJOZFXJi1q1G+36kv",1,0],[1,-10,13.803,0]],[66,"Snow 03",33554432,32,[[18,-1089,[1,"75KVkaEpNEiqro4h2u36rw"],[5,12,12]],[148,0,-1090,[1,"b3VKXxosVBMoiLPx6wOnxe"],197]],[2,"c92dvmPKVHErzVZL7iLDd2",1,0],[1,-22.808,6.966,0]],[66,"Snow 04",33554432,32,[[18,-1091,[1,"46jszHTrNO/qwqqPQYZmjB"],[5,6,6]],[148,0,-1092,[1,"4a1HGcBq5PCYc72VR2t45r"],198]],[2,"d6uStvyO9J26nl52xIQrl8",1,0],[1,-22.477,-8.99,0]],[66,"Snow 05",33554432,32,[[18,-1093,[1,"cbnTPX2r9FJa868ugEKThW"],[5,8,8]],[148,0,-1094,[1,"07y4Iw/alF84AVcCjFtuTM"],199]],[2,"e1mTdN9h1PSJ6u1zK1CCKq",1,0],[1,-16.477,-12.415,0]],[66,"Snow 06",33554432,32,[[18,-1095,[1,"12qqA4LHFDh7vf9RwDfMAt"],[5,6,6]],[148,0,-1096,[1,"97UaizxAVMF6AyQ4Kze4NI"],200]],[2,"8fwgz4Q6hBD4nHmc3joft1",1,0],[1,22.242,-14.774,0]],[66,"Snow 07",33554432,32,[[18,-1097,[1,"58yP6zlBlKtKXO4F8xSIqs"],[5,8,8]],[148,0,-1098,[1,"f0OuAOpT5L55sdb4DJeFXa"],201]],[2,"47VrRB4fZPkZnCdjjHZ0Uk",1,0],[1,17.202,-8.473,0]],[66,"Outline",33554432,16,[[18,-1099,[1,"0a6TK26lFN370moKWWKVT3"],[5,108,108]],[70,1,0,-1100,[1,"12dNSJwU9GPZZsvDgxnBhd"],[4,4292928274],210]],[2,"e70QIFnfVLwL0q99sASGSN",1,0],[1,-6,-6,0]],[163,"Icon_Play",33554432,16,[[18,-1101,[1,"73GABEU09LL64hBfRh6JJS"],[5,48,64]],[287,-1102,[1,"64Z4sf0ApEWasYU0MbP4M5"],[4,4281532425],211]],[2,"40ixQ6LspKG7FzW/tZU5mX",1,0],[1,9.047,-5.829,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[184,"Icon_Menu",33554432,18,[[18,-1103,[1,"24K1r3K39DLJD2OBMjIFrc"],[5,40,40]],[288,false,-1104,[1,"06kUVyxstKlaPegDQCF8OA"],[4,4281532425],218]],[2,"daLFda4J1NsLPVRLVxMb3F",1,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[184,"Icon_PlayAgain",33554432,25,[[18,-1105,[1,"e61c/bSj9DCKftlYxLOtAY"],[5,46,48]],[288,false,-1106,[1,"2ahyekERZOPr5DcfFda38w"],[4,4281532425],225]],[2,"20S/Yg+XVE4ol5Wx6iH271",1,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[66,"BotPanel",33554432,5,[[18,-1107,[1,"83I7RExM9ICZyucmNc5kTZ"],[5,414,100]],[244,44,100,1,-1108,[1,"a62j+XOcpA8YxOCJ2gdpxc"]]],[2,"738isYwCdIQIlnsZPLtJRG",1,0],[1,0,-398,0]],[39,"Outline 01",33554432,166,[[18,-1109,[1,"bdptdTAuNIhbTDDqqzBtyu"],[5,50,36]],[70,1,0,-1110,[1,"abZGz6t9VOfqSzq7r0qb3f"],[4,1693706467],233]],[2,"61ahCfqERDyK2p+gbDwyX9",1,0]],[39,"Outline 02",33554432,166,[[18,-1111,[1,"4aHmMVxOxD2aVKnF001kE4"],[5,54,40]],[321,1,0,false,-1112,[1,"71M8M+4PpF7ZwGBpFSNg5W"],[4,1022617827],234]],[2,"75q9Oj469NJrrnGfYarsfJ",1,0]],[205,"Edge Color",false,33554432,19,[[18,-1113,[1,"6bbZpBwfFF+LFRYCEy7moE"],[5,68,34]],[51,0,-1114,[1,"9eReLciotNxr7NY8K6RdEP"],[4,4281532425],235]],[2,"87sgS8ZNBNM7bWWdvmg1rS",1,0]],[39,"Color",33554432,19,[[18,-1115,[1,"9f/hxKbR9HF4oV7lZYaPnp"],[5,46,32]],[51,0,-1116,[1,"63UKSvJC9DXL3OZTisSw2P"],[4,4292928274],236]],[2,"35IMB/BgxDuqW5PmIQmiY3",1,0]],[39,"Edge White",33554432,19,[[18,-1117,[1,"bfZ1du1zZGa61m1uL7o9+7"],[5,46,32]],[70,1,0,-1118,[1,"44GkWo8eJI24enfKXSVq2t"],[4,4294174947],237]],[2,"3aSPxHoapPyY4ZYe1CDYaT",1,0]],[39,"Icon_Ad",33554432,19,[[18,-1119,[1,"b7+HTKIxVIpY3ubMMk8fjK"],[5,44,30]],[51,0,-1120,[1,"ffHz4cQUNAZZi+JjHvlVSb"],[4,4281532425],238]],[2,"6dezga5MhCNLcGRLmUg0si",1,0]],[39,"Outline 01",33554432,168,[[18,-1121,[1,"a4/jfbLcNAaYTVsM+ujLzJ"],[5,50,36]],[70,1,0,-1122,[1,"6fv2u+UgJDBKgS2HhJdxxy"],[4,1693706467],241]],[2,"b8AZ4W6lpPZqI+yh8tb16x",1,0]],[39,"Outline 02",33554432,168,[[18,-1123,[1,"69Hdhc4R5L86Ljg2WdbJRk"],[5,54,40]],[321,1,0,false,-1124,[1,"5eWyqHENhBG491BrAEKLtM"],[4,1022617827],242]],[2,"e41DS0jwdAJYob+ZP8ZkS4",1,0]],[39,"Color",33554432,26,[[18,-1125,[1,"b6SwI2lD9Hp6wABc/kqK/E"],[5,46,32]],[51,0,-1126,[1,"dex4Hv+SxGwo+vrEqK/94l"],[4,4292928274],243]],[2,"91xqjxKv1CvYTL+zCYCr0G",1,0]],[39,"Edge White",33554432,26,[[18,-1127,[1,"faIGjjv9hLM707TDspd0MH"],[5,46,32]],[70,1,0,-1128,[1,"abE+RBnedBxYFn6oURZGBd"],[4,4294174947],244]],[2,"14FMlfdWpMWZKeNXMz/yos",1,0]],[39,"Icon_Ad",33554432,26,[[18,-1129,[1,"a9hSqXK7JG5bja3cMcwXRk"],[5,44,30]],[51,0,-1130,[1,"4eYvKIQoJCB6Ci7RuauUtd"],[4,4281532425],245]],[2,"d8lhYOwahIa7gwlCQlJypX",1,0]],[39,"Outline 01",33554432,169,[[18,-1131,[1,"f7bKNNP3RBSaWmkNJMKQwG"],[5,37,37]],[70,1,0,-1132,[1,"0fPW04729BsY7DPtcwMsSz"],[4,1694498815],248]],[2,"6bhsPSGi5CSrXvAxtT4BNJ",1,0]],[39,"Outline 02",33554432,169,[[18,-1133,[1,"4f2g2ZyMNInoIag/JWnCaF"],[5,41,41]],[70,1,0,-1134,[1,"156l+nRrVPN7RSnsbft6ba"],[4,1023410175],249]],[2,"63tWjjs/1PapD24+5YsJ21",1,0]],[39,"Edge White",33554432,7,[[18,-1135,[1,"521WfJwydP9pbCLz5reVkC"],[5,32,32]],[214,1,0,-1136,[1,"81Ab1AwsBNELRUHLEb9l+s"],251]],[2,"b52qyl/AFBcZCmegcPjtC7",1,0]],[66,"Icon_SpeedUp",33554432,7,[[18,-1137,[1,"8cDDaWn0hLma1EANXelMvF"],[5,16,20]],[51,0,-1138,[1,"fdzYZi52NB34GMpOo7y9Ns"],[4,4292724926],252]],[2,"5d6j4n4mBCQpzSerYvNOAh",1,0],[1,0.955,-0.019,0]],[39,"Outline 01",33554432,171,[[18,-1139,[1,"a3cupFBmpDc4WLX3X/ejuf"],[5,37,37]],[70,1,0,-1140,[1,"80PUW7eEBPsbzUDhW4gthP"],[4,1692459794],253]],[2,"b8EHN5AQNCw7ORw+T79XGT",1,0]],[39,"Outline 02",33554432,171,[[18,-1141,[1,"cbtSmwWd9IVKuCpIy2oDLR"],[5,41,41]],[70,1,0,-1142,[1,"68c1AxAj1E8oNcL/enBU+5"],[4,1021371154],254]],[2,"011dRuXAVL16tU5TstJeQ0",1,0]],[39,"Color",33554432,8,[[18,-1143,[1,"4cdlpICC1Cdp6WabrP5LFZ"],[5,32,32]],[51,0,-1144,[1,"8cBKopyS9N0aKTSiJdmnCD"],[4,4281532425],255]],[2,"36cvKdBo9HvJAIvsDuc8OE",1,0]],[39,"Edge White",33554432,8,[[18,-1145,[1,"5fcEHndLFD8KV6tcCU7nnA"],[5,32,32]],[70,1,0,-1146,[1,"cansD5/ONI94o4C8J/Ab2T"],[4,4292928274],256]],[2,"be3kQqwmdHM6Wi0bs/AF0A",1,0]],[39,"Icon_SpeedUp",33554432,8,[[18,-1147,[1,"d4MyQJ/A5Kbb8/S0/YGc91"],[5,26,26]],[173,0,false,-1148,[1,"73jRKURYRIH7If/uVk4GwC"],[4,4292928274],257]],[2,"f6AY+h9t9F1aJFb5VqR6dX",1,0]],[39,"Update Cube Tower HP Listener",33554432,174,[[48,-1149,[1,"cfL+UyopNI+olJ3IWT49qb"]],[264,1,-1150,[1,"76mmwkogRCapI2Nkx6uNQa"],[[7,"2e422rMyxhPNoAP/9tU8bNO","animateCubeTowerHP",44]]]],[2,"08f7qOFsRHoYbNWT40AA4S",1,0]],[39,"Set Cube Tower HP Listener",33554432,174,[[48,-1151,[1,"aeXKxRNlxMwYxzy338Ilsc"]],[264,2,-1152,[1,"48Ur7vYM5KtJmcHl745Rap"],[[7,"2e422rMyxhPNoAP/9tU8bNO","setCubeTowerHP",44]]]],[2,"e38J0ZWhtEZ4DJmNBUa+6P",1,0]],[85,"Energy",33554432,33,[-1154],[[48,-1153,[1,"3d/G8lTu9DEaKFFDjIWyuD"]]],[2,"934SfSvz5DFpd5IJIO8lwZ",1,0]],[39,"Energy Values Changed Listener",33554432,310,[[48,-1155,[1,"f1MqtyiuhOI4v21KugElgR"]],[554,1,-1156,[1,"4b5uJFKtNBVrc/LNeKr6Id"],[[7,"826172kECFGjq4DVDVtJUzR","setEnergyData",136]]]],[2,"eeC+cOUPtMOa3oULfBE2vk",1,0]],[39,"On Victory Listener",33554432,175,[[48,-1157,[1,"21rF06+4BO26NqZNxHBqgy"]],[376,0.5,3,-1158,[1,"48jMyrh55ByqDeksuP6NtR"],[[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","victory",4],[7,"2e422rMyxhPNoAP/9tU8bNO","hideHPUI",44]]]],[2,"47/e8YnJRAFrN1Rp5NDYvU",1,0]],[39,"On Defeat Listener",33554432,175,[[48,-1159,[1,"8dNU7UJrJK4r8uHqi+CUqY"]],[376,0.5,4,-1160,[1,"1b954v2h1F0qForIAKqVyu"],[[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","defeat",4],[68,"48f99m4mrhOfJj9PX5MTE9r","setLevelStars","0",90]]]],[2,"2eC20sZHtDpZ/wqZ+jxNlL",1,0]],[85,"Loading",33554432,33,[-1162],[[48,-1161,[1,"c0B3tgzKtE1pXgSr+wq7oe"]]],[2,"10TIs6m4dHhJOAvVVxecWP",1,0]],[39,"Hide Finished",33554432,314,[[48,-1163,[1,"6206nMvstLKbqAUCTu/tTD"]],[555,3,-1164,[1,"c2zthsLzNPeaDuIkfXH+o5"],[[68,"2022ebMdchE2pNL1SpqTm8g","setBool","inScene,true",5]]]],[2,"b0hBlaqY9DPqa9wWKdV7v2",1,0]],[39,"Level Completed Stars",33554432,33,[[48,-1165,[1,"b0+libQ35GQqDOrhUcTXHT"]],[556,1,-1166,[1,"6exXGZVkpJLa0FqUE0c/uK"],[[7,"48f99m4mrhOfJj9PX5MTE9r","setLevelStars",90]]]],[2,"51EOzJJ59CZaj7t/Sc0EHm",1,0]],[39,"On Freeze Start",33554432,176,[[48,-1167,[1,"f3lSgm+p1IBb4Eo+uH2rWp"]],[292,"FreezeEnemiesStart",-1169,[1,"7dbA3hethJEZpxGG+8m6AB"],[[7,"1eddcq+dFJL6Kd35j8xBAOw","play",-1168]]]],[2,"51xvMoaTZDUIUOVSCMDPuO",1,0]],[39,"FadeIn",33554432,27,[[557,13,true,-1170,[1,"f8+6EQwkdIMZMKI1atsOax"],27,[[68,"2022ebMdchE2pNL1SpqTm8g","setBool","isPlaying,true",34]]]],[2,"8eUetZpEtFgac/yTZv3YTL",1,0]],[39,"FadeOut",33554432,27,[[558,13,true,-1171,[1,"398TTLPmpGsZgPjxbJnjAE"],27]],[2,"3eDwQw0PBHTY1J2dOdN4eI",1,0]],[39,"On Freeze End",33554432,176,[[48,-1172,[1,"d811zE0PRIT5absQUMXIfT"]],[292,"FreezeEnemiesEnd",-1173,[1,"411uKzs/FKrJ9RMzB7Flic"],[[7,"1eddcq+dFJL6Kd35j8xBAOw","playReverse",319],[68,"2022ebMdchE2pNL1SpqTm8g","setBool","isPlaying,false",34]]]],[2,"88fD9+Iv1E6aKjw24VNJor",1,0]],[39,"On Wave Start",33554432,173,[[48,-1174,[1,"b0Wsv4/npOi6eR/F88SDfY"]],[406,1,-1175,[1,"6e6GTMI7BFeLZacDSQRWyp"],[[7,"bf1ee1D121LrYfqbYo8LfSs","setCurrentWaveValue",132],[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","showWave",4]]]],[2,"9fSubkS7xLnIsWPeRVNrrV",1,0]],[404,"6",2,88,88,88,false,75,[1,"882KTUBtFFjbah+S7vH9wr"],[4,4292928274]],[404,"/10",2,30,30,30,false,76,[1,"4eQLYxU05JeryH8k9Riq1m"],[4,4294174947]],[538,"Stage 1",40,false,43,[1,"7f0+61Dd1Ke6H6F/NYD6vQ"],[4,4281532425]],[407,2,43,[1,"b8CviDKBlKA7h+wJteNxQJ"]],[539,"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy nibh euismod tincidunt ut laoreet ",0,22,21,21,2,false,81,[1,"91pH6InwJEraZF7jrxC98l"],[4,4281532425]],[324,"/6",48,48,48,false,84,[1,"5dzT2r00xO+4dwRYaMLjtV"],[4,4281532425]],[324,"1",48,48,48,false,82,[1,"2dnlR/dG9DkavFrgosU5MU"],[4,4281532425]],[263,"- Reminder -",20,20,20,3,false,140,[1,"d7r+tsE5FAkq8vHcBpLyvU"],[4,4294174947]],[263,"You can buy upgrades at the Shop!\nCheck it out at the main menu!",22,22,22,1,false,142,[1,"a9A5+gZV5EG40ky+m5ger5"],[4,4278456641]],[128,6,[1,"bc8RoToydJnIHl5TS1gHUH"]],[128,30,[1,"c5ytloSU5FpL04PWXkxgGj"]],[286,true,30,[1,"02DvXj81ZNUKzG4yFwDZPG"],332],[128,38,[1,"69sJkvu1JHDZI6zGslDzRh"]],[286,true,38,[1,"c4Q8dSWgNH46vSGgZTvrqv"],334],[128,39,[1,"313MqOYzpB8rC/J8IUTfcs"]],[286,true,39,[1,"9dLrCZwZlA5rWoCmsVBgUh"],336],[324,"Stage 1",38,38,38,false,64,[1,"6eCut74/1LEKCWWZ0IuLm5"],[4,4281532425]],[407,2,64,[1,"63XyAgBWZMh517ySzB9+ZR"]],[246,3,0.9,40,[1,"acI9fPFjZIT4u5kPguoAHU"],[[68,"2022ebMdchE2pNL1SpqTm8g","setBool","adInScene,false",4]]],[263,"- Got overwhelmed?! -",26,26,26,3,false,152,[1,"bbp7vA+0BAGKPNP+Fd0F7J"],[4,4228991970]],[263,"Watch an ad to release the Cube's secret power and freeze all your enemies to the ground!",22,22,22,1,false,153,[1,"dcYuX9vXxOV5eK43Cf2ZZx"],[4,4281545523]],[128,5,[1,"abnB3RetdAwoDT1D84ucis"]],[128,8,[1,"31nkO6pFhIlYOw4KoI+zzM"]],[128,7,[1,"08XjF56rpOrqmCS/pKJ2w7"]],[128,4,[1,"deMqwBB9hM9q7ROt0zyrx9"]],[128,34,[1,"7dkRomnIRGC68OLv+YySSx"]]],0,[0,-1,111,0,-2,113,0,-3,114,0,-4,115,0,-5,116,0,-6,117,0,-7,118,0,-8,119,0,-9,120,0,-10,121,0,-11,122,0,-12,123,0,-13,124,0,-14,125,0,-15,126,0,-16,127,0,-17,128,0,-18,129,0,-19,130,0,-20,131,0,-21,107,0,-22,2,0,3,2,0,13,2,0,3,2,0,13,2,0,3,2,0,13,2,0,3,2,0,13,2,0,3,2,0,13,2,0,3,2,0,13,2,0,3,2,0,13,2,0,3,2,0,13,2,0,3,2,0,13,2,0,3,2,0,13,2,0,3,2,0,13,2,0,3,2,0,13,2,0,3,2,0,13,2,0,3,2,0,13,2,0,3,2,0,13,2,0,3,2,0,13,2,0,3,2,0,13,2,0,3,2,0,13,2,0,3,2,0,13,2,0,3,2,0,13,2,0,3,2,0,13,2,0,3,2,0,13,2,0,3,2,0,13,2,0,3,2,0,13,2,0,3,2,0,13,2,0,3,2,0,13,2,0,3,2,0,13,2,0,3,2,0,13,2,0,3,2,0,13,2,0,2,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,4,0,-2,5,0,-3,6,0,-4,34,0,-5,20,0,-6,33,0,-7,22,0,1,80,0,1,80,0,1,80,0,1,80,0,1,80,0,2,2,0,0,3,0,0,3,0,0,3,0,0,3,0,-1,111,0,-2,113,0,-3,114,0,-4,115,0,-5,116,0,-6,117,0,-7,118,0,-8,119,0,-9,120,0,-10,121,0,-11,122,0,-12,123,0,-13,124,0,-14,125,0,-15,126,0,-16,127,0,-17,128,0,-18,129,0,-19,130,0,-20,131,0,0,4,0,0,4,0,0,4,0,-4,346,0,33,346,0,0,4,0,3,6,0,3,44,0,3,6,0,3,172,0,0,4,0,-1,12,0,-2,48,0,-3,45,0,-4,91,0,0,5,0,0,5,0,0,5,0,-4,343,0,33,343,0,0,5,0,0,5,0,0,5,0,-1,210,0,-2,77,0,-3,42,0,-4,36,0,-5,287,0,0,6,0,0,6,0,0,6,0,-4,331,0,0,6,0,33,331,0,0,6,0,-1,233,0,-2,85,0,-3,65,0,-4,66,0,-5,69,0,0,7,0,0,7,0,17,170,0,3,7,0,3,7,0,3,8,0,3,14,0,3,8,0,0,7,0,0,7,0,0,7,0,0,7,0,-7,345,0,33,345,0,0,7,0,-1,169,0,-2,170,0,-3,301,0,-4,302,0,0,8,0,0,8,0,3,8,0,3,8,0,3,14,0,0,8,0,0,8,0,0,8,0,0,8,0,-7,344,0,33,344,0,0,8,0,-1,171,0,-2,305,0,-3,306,0,-4,307,0,0,9,0,0,9,0,0,9,0,0,9,0,-1,95,0,-2,96,0,-3,97,0,-4,98,0,-5,99,0,-6,100,0,-7,101,0,-8,102,0,-9,103,0,-10,104,0,0,10,0,0,10,0,0,10,0,-1,179,0,-2,180,0,-3,181,0,-4,182,0,-5,183,0,-6,184,0,-7,185,0,-8,186,0,-9,187,0,-10,188,0,0,11,0,0,11,0,0,11,0,-1,51,0,-2,52,0,-3,53,0,-4,54,0,-5,55,0,-6,56,0,-7,57,0,-8,58,0,-9,59,0,-10,60,0,0,12,0,0,12,0,0,12,0,-1,73,0,-2,50,0,-3,35,0,-4,165,0,-5,167,0,-8,159,0,0,13,0,17,108,0,3,13,0,3,13,0,3,109,0,0,13,0,0,13,0,0,13,0,0,13,0,0,13,0,-1,108,0,-2,214,0,-3,215,0,0,14,0,0,14,0,0,15,0,3,15,0,0,15,0,0,15,0,0,15,0,-1,160,0,-2,273,0,-3,274,0,-4,275,0,-5,32,0,0,16,0,17,161,0,3,16,0,3,16,0,0,16,0,0,16,0,0,16,0,0,16,0,0,16,0,-1,161,0,-2,283,0,-3,284,0,0,17,0,0,17,0,-1,234,0,-2,235,0,-3,236,0,-4,237,0,-5,238,0,-6,239,0,-7,240,0,-8,241,0,0,18,0,17,93,0,3,18,0,3,18,0,3,22,0,0,18,0,0,18,0,0,18,0,0,18,0,-1,93,0,-2,162,0,-3,285,0,0,19,0,3,19,0,0,19,0,0,19,0,0,19,0,-1,166,0,-2,290,0,-3,291,0,-4,292,0,-5,293,0,0,20,0,-1,44,0,-2,132,0,-3,136,0,-4,137,0,-5,138,0,-6,260,0,-7,110,0,-8,261,0,0,21,0,-1,220,0,-2,221,0,-3,222,0,-4,223,0,-5,224,0,-6,225,0,-7,226,0,-8,227,0,0,22,0,0,22,0,0,22,0,0,22,0,0,23,0,17,150,0,3,23,0,0,23,0,0,23,0,0,23,0,0,23,0,-1,150,0,-2,247,0,-3,248,0,0,24,0,0,24,0,3,24,0,0,24,0,0,24,0,0,24,0,-1,265,0,-2,266,0,-3,267,0,0,25,0,17,94,0,3,25,0,3,164,0,0,25,0,0,25,0,0,25,0,-1,94,0,-2,163,0,-3,286,0,-4,164,0,0,26,0,3,26,0,0,26,0,0,26,0,0,26,0,-1,168,0,-2,296,0,-3,297,0,-4,298,0,0,27,0,0,27,0,0,27,0,0,27,0,0,27,0,-1,318,0,-2,319,0,0,28,0,17,87,0,3,28,0,0,28,0,0,28,0,0,28,0,-1,87,0,-2,148,0,-3,245,0,0,29,0,17,88,0,3,29,0,0,29,0,0,29,0,0,29,0,-1,88,0,-2,149,0,-3,246,0,0,30,0,0,30,0,0,30,0,-4,332,0,-5,333,0,0,30,0,-1,252,0,-2,253,0,0,31,0,0,31,0,0,31,0,-1,152,0,-2,153,0,-3,154,0,0,32,0,-1,276,0,-2,277,0,-3,278,0,-4,279,0,-5,280,0,-6,281,0,-7,282,0,0,33,0,-1,174,0,-2,173,0,-3,310,0,-4,175,0,-5,314,0,-6,316,0,-7,176,0,0,34,0,0,34,0,0,34,0,-4,347,0,33,347,0,0,34,0,0,35,0,0,35,0,17,105,0,3,35,0,0,35,0,0,35,0,0,35,0,-1,105,0,0,36,0,0,36,0,0,36,0,0,37,0,0,37,0,0,37,0,-1,142,0,-2,143,0,0,38,0,0,38,0,-3,334,0,-4,335,0,0,38,0,-1,255,0,-2,256,0,0,39,0,0,39,0,-3,336,0,-4,337,0,0,39,0,-1,258,0,-2,259,0,0,40,0,0,40,0,-3,340,0,0,40,0,-1,268,0,-2,269,0,-3,270,0,0,41,0,0,41,0,-4,74,0,0,42,0,0,42,0,0,42,0,-1,78,0,-2,43,0,-3,61,0,0,43,0,-2,324,0,48,325,0,29,324,0,0,43,0,-4,325,0,-1,213,0,0,44,0,-1,111,0,-2,113,0,-3,114,0,-4,115,0,-5,116,0,-6,117,0,-7,118,0,-8,119,0,-9,120,0,-10,121,0,-11,122,0,-12,123,0,-13,124,0,-14,125,0,-15,126,0,-16,127,0,-17,128,0,-18,129,0,-19,130,0,-20,131,0,0,44,0,0,45,0,0,45,0,0,45,0,-1,112,0,-2,46,0,0,46,0,0,46,0,-1,216,0,-2,217,0,-3,218,0,-4,219,0,0,47,0,0,47,0,0,47,0,-1,232,0,-2,82,0,-3,84,0,0,48,0,0,48,0,0,48,0,-1,62,0,-3,83,0,0,49,0,0,49,0,0,49,0,-1,251,0,-2,254,0,-3,257,0,0,50,0,0,50,0,0,50,0,-2,209,0,0,51,0,0,51,0,-1,189,0,-2,190,0,0,52,0,0,52,0,-1,191,0,-2,192,0,0,53,0,0,53,0,-1,193,0,-2,194,0,0,54,0,0,54,0,-1,195,0,-2,196,0,0,55,0,0,55,0,-1,197,0,-2,198,0,0,56,0,0,56,0,-1,199,0,-2,200,0,0,57,0,0,57,0,-1,201,0,-2,202,0,0,58,0,0,58,0,-1,203,0,-2,204,0,0,59,0,0,59,0,-1,205,0,-2,206,0,0,60,0,0,60,0,-1,207,0,-2,208,0,0,61,0,0,61,0,0,61,0,-1,79,0,-2,81,0,0,62,0,0,62,0,-1,231,0,-3,63,0,0,63,0,0,63,0,-1,133,0,-2,134,0,-3,135,0,0,64,0,-2,338,0,48,339,0,29,338,0,0,64,0,-4,339,0,0,65,0,0,65,0,-1,89,0,0,66,0,0,66,0,-2,242,0,-3,244,0,0,67,0,0,67,0,0,67,0,-1,144,0,-2,145,0,0,68,0,0,68,0,0,68,0,-1,146,0,-2,147,0,0,69,0,0,69,0,0,70,0,0,70,0,-1,151,0,-2,263,0,-3,264,0,0,71,0,0,71,0,0,71,0,-1,155,0,-2,156,0,0,72,0,0,72,0,0,72,0,-1,157,0,-2,158,0,0,73,0,0,73,0,-1,177,0,-2,178,0,0,74,0,0,74,0,-1,75,0,-2,76,0,0,75,0,-2,322,0,29,322,0,0,75,0,0,76,0,-2,323,0,29,323,0,0,76,0,0,77,0,0,77,0,0,77,0,-1,106,0,0,78,0,0,78,0,-1,211,0,-2,212,0,0,79,0,0,79,0,-1,107,0,0,81,0,-2,326,0,29,326,0,0,81,0,0,82,0,-2,328,0,29,328,0,0,82,0,0,83,0,-1,228,0,-2,229,0,-3,230,0,0,84,0,-2,327,0,29,327,0,0,84,0,0,85,0,0,85,0,0,85,0,0,85,0,0,86,0,0,86,0,-1,140,0,-2,141,0,0,87,0,0,87,0,0,87,0,0,88,0,0,88,0,0,88,0,0,89,0,0,89,0,-1,249,0,-2,250,0,0,90,0,-1,333,0,-2,335,0,-3,337,0,0,90,0,0,91,0,0,91,0,-1,92,0,0,92,0,0,92,0,0,92,0,0,92,0,0,93,0,0,93,0,0,93,0,0,94,0,0,94,0,0,94,0,0,95,0,0,95,0,0,96,0,0,96,0,0,97,0,0,97,0,0,98,0,0,98,0,0,99,0,0,99,0,0,100,0,0,100,0,0,101,0,0,101,0,0,102,0,0,102,0,0,103,0,0,103,0,0,104,0,0,104,0,0,105,0,0,105,0,0,106,0,0,106,0,0,106,0,2,107,0,0,108,0,0,108,0,0,109,0,0,109,0,0,110,0,2,111,0,0,112,0,0,112,0,0,112,0,2,113,0,2,114,0,2,115,0,2,116,0,2,117,0,2,118,0,2,119,0,2,120,0,2,121,0,2,122,0,2,123,0,2,124,0,2,125,0,2,126,0,2,127,0,2,128,0,2,129,0,2,130,0,2,131,0,0,132,0,0,132,0,0,133,0,0,133,0,0,133,0,0,134,0,0,134,0,0,134,0,0,135,0,0,135,0,0,135,0,0,136,0,0,136,0,0,137,0,0,137,0,0,138,0,3,139,0,0,138,0,-1,139,0,0,139,0,0,139,0,0,140,0,-2,329,0,29,329,0,0,140,0,0,141,0,0,141,0,0,142,0,-2,330,0,29,330,0,0,142,0,0,143,0,0,144,0,0,144,0,0,144,0,0,145,0,0,145,0,0,145,0,0,146,0,0,146,0,0,146,0,0,147,0,0,147,0,0,147,0,0,148,0,0,148,0,0,148,0,0,149,0,0,149,0,0,149,0,0,150,0,0,150,0,0,151,0,0,151,0,0,152,0,-2,341,0,29,341,0,0,152,0,0,153,0,-2,342,0,29,342,0,0,153,0,0,154,0,0,155,0,0,155,0,0,155,0,0,156,0,0,156,0,0,156,0,0,157,0,0,157,0,0,157,0,0,158,0,0,158,0,0,158,0,0,159,0,0,159,0,0,160,0,-1,271,0,-2,272,0,0,161,0,0,161,0,0,162,0,0,162,0,0,162,0,0,163,0,0,163,0,0,163,0,0,164,0,0,164,0,0,165,0,0,165,0,0,166,0,-1,288,0,-2,289,0,0,167,0,0,167,0,0,168,0,-1,294,0,-2,295,0,0,169,0,-1,299,0,-2,300,0,0,170,0,0,170,0,0,171,0,-1,303,0,-2,304,0,0,172,0,0,172,0,0,173,0,-1,321,0,0,174,0,-1,308,0,-2,309,0,0,175,0,-1,312,0,-2,313,0,0,176,0,-1,317,0,-2,320,0,0,177,0,0,177,0,0,178,0,0,178,0,0,179,0,0,179,0,0,180,0,0,180,0,0,181,0,0,181,0,0,182,0,0,182,0,0,183,0,0,183,0,0,184,0,0,184,0,0,185,0,0,185,0,0,186,0,0,186,0,0,187,0,0,187,0,0,188,0,0,188,0,0,189,0,0,189,0,0,190,0,0,190,0,0,191,0,0,191,0,0,192,0,0,192,0,0,193,0,0,193,0,0,194,0,0,194,0,0,195,0,0,195,0,0,196,0,0,196,0,0,197,0,0,197,0,0,198,0,0,198,0,0,199,0,0,199,0,0,200,0,0,200,0,0,201,0,0,201,0,0,202,0,0,202,0,0,203,0,0,203,0,0,204,0,0,204,0,0,205,0,0,205,0,0,206,0,0,206,0,0,207,0,0,207,0,0,208,0,0,208,0,0,209,0,0,209,0,0,210,0,0,210,0,0,211,0,0,211,0,0,212,0,0,212,0,0,213,0,0,213,0,0,214,0,0,214,0,0,215,0,0,215,0,0,216,0,0,216,0,0,217,0,0,217,0,0,218,0,0,218,0,0,219,0,0,219,0,0,220,0,0,220,0,0,221,0,0,221,0,0,222,0,0,222,0,0,223,0,0,223,0,0,224,0,0,224,0,0,225,0,0,225,0,0,226,0,0,226,0,0,227,0,0,227,0,0,228,0,0,228,0,0,229,0,0,229,0,0,230,0,0,230,0,0,231,0,0,231,0,0,232,0,0,232,0,0,233,0,0,233,0,0,234,0,0,234,0,0,235,0,0,235,0,0,236,0,0,236,0,0,237,0,0,237,0,0,238,0,0,238,0,0,239,0,0,239,0,0,240,0,0,240,0,0,241,0,0,241,0,0,242,0,-1,243,0,0,243,0,0,243,0,0,244,0,0,245,0,0,245,0,0,246,0,0,246,0,0,247,0,0,247,0,0,248,0,0,248,0,0,249,0,0,249,0,0,250,0,0,250,0,0,251,0,0,252,0,0,252,0,0,253,0,0,253,0,0,254,0,0,255,0,0,255,0,0,256,0,0,256,0,0,257,0,0,258,0,0,258,0,0,259,0,0,259,0,0,260,0,0,261,0,-1,262,0,0,262,0,52,340,0,0,262,0,0,263,0,0,264,0,0,265,0,0,265,0,0,266,0,0,266,0,0,267,0,0,267,0,0,268,0,0,268,0,0,269,0,0,269,0,0,270,0,0,270,0,0,271,0,0,271,0,0,272,0,0,272,0,0,273,0,0,273,0,0,274,0,0,274,0,0,275,0,0,275,0,0,276,0,0,276,0,0,277,0,0,277,0,0,278,0,0,278,0,0,279,0,0,279,0,0,280,0,0,280,0,0,281,0,0,281,0,0,282,0,0,282,0,0,283,0,0,283,0,0,284,0,0,284,0,0,285,0,0,285,0,0,286,0,0,286,0,0,287,0,0,287,0,0,288,0,0,288,0,0,289,0,0,289,0,0,290,0,0,290,0,0,291,0,0,291,0,0,292,0,0,292,0,0,293,0,0,293,0,0,294,0,0,294,0,0,295,0,0,295,0,0,296,0,0,296,0,0,297,0,0,297,0,0,298,0,0,298,0,0,299,0,0,299,0,0,300,0,0,300,0,0,301,0,0,301,0,0,302,0,0,302,0,0,303,0,0,303,0,0,304,0,0,304,0,0,305,0,0,305,0,0,306,0,0,306,0,0,307,0,0,307,0,0,308,0,0,308,0,0,309,0,0,309,0,0,310,0,-1,311,0,0,311,0,0,311,0,0,312,0,0,312,0,0,313,0,0,313,0,0,314,0,-1,315,0,0,315,0,0,315,0,0,316,0,0,316,0,0,317,0,3,318,0,0,317,0,0,318,0,0,319,0,0,320,0,0,320,0,0,321,0,0,321,0,9,1,2,7,79,3,7,45,7,7,12,8,7,12,9,7,41,10,7,41,11,7,41,13,7,36,14,7,110,15,7,159,16,7,36,17,7,66,18,7,36,19,7,165,21,7,48,23,7,69,24,7,264,25,7,36,26,7,167,27,7,34,28,7,69,29,7,69,30,7,251,31,7,151,37,7,141,38,7,254,39,7,257,40,7,263,41,7,50,47,7,62,49,7,65,64,7,65,67,7,143,68,7,143,70,7,91,71,7,154,72,7,154,86,7,244,90,7,260,109,7,110,172,7,173,1175],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,322,323,324,326,327,328,329,330,331,332,334,336,338,341,342,340,343,344,345,346,347],[6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,19,6,6,6,6,6,19,8,-1,18,-1,-2,18,-1,-2,18,8,6,6,6,6,6,19,6,6,6,6,6,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,8,19,6,6,6,6,6,6,6,19,6,6,6,6,6,6,6,19,53,6,6,19,6,6,6,6,6,6,6,19,6,6,6,6,6,6,6,6,6,6,25,35,36,37,6,6,6,25,35,36,37,6,6,6,25,35,36,37,-1,-2,-3,-4,18,6,6,6,19,6,-1,-2,6,19,6,6,19,6,54,55,6,6,6,6,6,6,6,6,6,6,19,6,25,-1,18,6,6,19,6,-1,18,6,6,6,6,6,6,6,6,6,6,6,6,-1,-2,18,25,35,36,37,6,6,6,25,35,36,37,6,6,6,25,35,36,37,6,6,6,25,35,36,37,-1,-2,-3,6,6,6,6,6,6,-1,18,6,6,6,6,6,-1,18,6,6,6,6,6,6,6,6,6,6,-1,18,-1,-2,-3,18,-1,-2,-3,-4,-5,-6,18,-1,6,19,19,19,19,19,19,19,19,26,26,26,26,19,19,19,25,26,26,26,26,26],[22,59,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,40,22,40,22,40,22,40,22,40,22,40,22,40,22,40,22,40,22,40,0,8,211,212,0,21,59,8,213,60,60,60,126,126,60,127,127,128,214,0,0,21,55,8,0,0,0,0,0,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,23,8,0,0,0,0,0,0,0,8,0,22,215,0,0,0,22,8,216,217,0,8,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,0,21,75,0,17,27,28,0,21,76,0,17,27,28,0,21,55,0,17,27,28,129,130,77,78,77,21,59,46,8,56,131,132,46,8,56,46,8,56,46,218,0,0,0,0,0,0,0,0,21,21,8,0,0,61,61,21,21,8,0,61,61,26,26,0,26,55,50,50,50,50,50,50,50,47,133,133,0,17,27,28,0,21,55,0,17,27,28,0,21,75,0,17,27,28,0,21,76,0,17,27,28,134,135,136,26,26,0,0,26,137,47,47,26,26,0,26,137,47,47,26,26,0,26,55,26,26,0,26,219,62,62,220,62,47,47,138,139,140,78,141,79,79,142,221,8,8,8,8,8,8,8,8,222,80,80,80,8,8,8,0,223,143,143,224,225]],[[[62],[47,"SM_BlockSlot_02",[-2],[2,"b2NVzD9jpfBKZ43/7JApbk",-1,0]],[53,"SM_BlockSlot_02",1,[[52,-3,[1,"34IQ6xxWhUH7mqUbH//+fB"],[0],[34],1]],[2,"37mZW2bwxaSagLv3W02SBX",1,0],[3,-2.6692540190908936e-8,0.707106781186547,0.707106781186547,2.6692538414552064e-8],[1,-90,179.99999567428884,-1.4393547659025915e-13]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[226,227]],[[[57,".bin",3132816399,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":21888,"length":5736,"count":1434,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":21888,"count":456,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.480355829000473,-0.4800005257129669,-0.5042211413383484],"maxPosition",8,[1,0.480355829000473,0.4799993336200714,0.7500349879264832]]],-1],0,0,[],[],[]],[[[63,"SM_BlockSlot_02__0.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[50,"P-Tank-0"],[125,"P-Tank-0",[[-16,-17,[80,"Events",-19,[2,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[156,"Tank-0",-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[55,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[164,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[2,"4505kBZFlJebjm5k8fm2Li",1,0]],[124,"Movement",[-26],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,2,[29,"e2Vx3eAWdfubrymQP2YNGI",-32,[69,"e3W5lzh8hCH7eruj3pDf6w",1,[[67,[4,["e2Vx3eAWdfubrymQP2YNGI"]],[[55,-31,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[14,"SM_Model",["_name"],-27],[10,["_lpos"],-28,[1,0,-0.156,0.096]],[10,["_lrot"],-29,[3,0,0,0,1]],[10,["_euler"],-30,[1,0,0,0]],[40,["_materials","0"],[4,["bboftuCNdUUatqfu6RAfMf"]],3],[28,"SM_Model",["_name"],[4,["b9niJVKBFTDZ9RF32cDoT7"]]]]],2]],[35,"Scripts",1,[3,-33,-34,-35],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[4,["e2Vx3eAWdfubrymQP2YNGI"]],[35,"VFX",2,[-36,-37,-38],[2,"d9ZkpoC2pJn7w3gewNith6",1,0]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-46,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[14,"P-HP-Bar",["_name"],-39],[10,["_lpos"],-40,[1,207,448.00000000000006,0]],[10,["_lrot"],-41,[3,0,0,0,1]],[10,["_euler"],-42,[1,0,0,0]],[14,"Art",["_name"],-43],[10,["_lpos"],-44,[1,0,0,0]]]],15]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Death_Erupt",7,[-47],[2,"16FZkL9M9HpLq2tUizS4F2",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,10,[1,"707ZSkI/hJHJfqatLGBCvg"],[4],[5],[3,0.4],[0],[0],[0],[0],[0],[0],[0],[3,0.16],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.3169642857142857],[13,0.4575892857142857,[4,4294938922]],[13,1,[4,4289817645]]],[[9,255,0.5736607142857143],[9,0,1]]]]],[31,[0]],[78,true,true,[111,2,2,[8,[0,1],[[6,2,0.02962962962962963,1.913888888888889,1.913888888888889],[11,2,1]]],[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-48],[26,5]],[59,"VFX_Death_Shards",7,[-49],[2,"8dXqS4IgNPyIvfggW4YmMe",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,12,[1,"b6osVoOgZBY5gXrp1M8qF3"],[6],[5],[23,3,0.05,0.1],[0],[0],[23,3,3,5],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.3,0.8],[3,1],[0],[0],[[25,[23,3,5,7]]],[20,true,[16,1,[33,[[43,0.16964285714285715],[13,0.33035714285714285,[4,4294938368]],[13,0.7991071428571429,[4,4284748062]]],[[9,255,0.23883928571428573],[9,0,1]]]]],[109,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-8.726646259971647,8.726646259971647]],[123,true,2,2,[0],[0]],[19,[0],[0],[5],[5],-50],[26,7]],[59,"VFX_Spawn",7,[-51,-52],[2,"eaQFxBWKJLVIAuQg4qVQ1E",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[46,"HP Controller",5,[-53],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[139,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[7,"cc.ParticleSystem","play",10],[7,"cc.ParticleSystem","play",12],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[54,"On Death VFX Finished",5,[[96,-55,[1,"86i+Vo7X9GnKjybtt3kN7h"],[11,13],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"0feJLVPKNM6oTxb+tw2csn",1,0]],[105,"Temp-Model",false,2,[[79,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",2,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,14,[1,"bfR5CqSi9Ij5TM6aedXZ5y"],[8],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-57],[26,9]],[97,0.3,false,14,[1,"28soN4/3dCSrvESRPhLG3V"],[[10,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-58],[26,11]],[104,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[46,"Stun",5,[-59],[2,"f3ZDQ6ZzNAmKD4x1E2LdXE",1,0]],[117,23,[1,"bdJ8lagfFD1IRl0AvbP5/K"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[35,"UI",1,[8],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,3,8,0,13,16,0,2,1,0,20,24,0,27,22,0,28,16,0,3,3,0,3,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,2,1,0,7,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,6,0,1,6,0,1,6,0,1,6,0,0,4,0,2,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,17,19,0,2,8,0,-1,11,0,4,11,0,-1,13,0,4,13,0,-1,20,0,-2,21,0,-1,16,0,3,17,0,0,17,0,0,18,0,4,20,0,4,21,0,-1,24,0,9,1,3,7,5,8,7,25,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,-2,18,8],[14,13,228,1,20,19,10,18,4,3,11,9,5,15,5,16]],[[[57,".bin",3202047423,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":22080,"length":2832,"count":708,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":22080,"count":460,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3262602686882019,-0.49553847312927246,-0.014412163756787777],"maxPosition",8,[1,0.3262602686882019,0.30453139543533325,0.47115495800971985]]],-1],0,0,[],[],[]],[[[62],[47,"SM_EnemyShielder_02",[-2],[2,"6aGvFRzrhcy6Pvc0BNb/OY",-1,0]],[53,"SM_EnemyShielder_02",1,[[52,-3,[1,"b1gGjB+ixTeo5mURKnQwqu"],[0],[34],1]],[2,"cdMyiT4ZBYyoo8D8TLDR7U",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[229,230]],[[[63,"SM_EnemyShielder_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[112,"3",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[30,12],[9,25]],[[[50,"P-Tutorial-UI"],[423,"P-Tutorial-UI",[-7,-8,-9],[[18,-3,[1,"20iBUCHDJJaYQCiL1tSooD"],[5,414,896]],[282,-4,[1,"6aiasFkepOaYk1YQ/gCYUV"]],[258,-5,[1,"45m/6LdalCvo22uLCjt9fA"]],[162,45,414,896,-6,[1,"22Xw9nRWFGYaCj97/+beLa"]]],[196,"c6vKOiB3JG7pMlMy/WnSzq",-2,0,[-1]],[1,207,448,0]],[347,"Content Holder",false,1,[-13],[[18,-10,[1,"63YMPCN7lM/qS+yhx3+4Cy"],[5,414,896]],[154,45,100,100,1,-11,[1,"f0M65yzA5H6L2WYXJlVgK7"]],[55,-12,[1,"ceV3TSRWpDjalilR3uwTZW"]]],[2,"f31x3WssNLGZIb8Xrl5akp",1,0]],[115,"Tutorial UI",[[48,-14,[1,"b1Iu1iRYBNhInUyEDuuK3D"]],[569,-16,[1,"e7G1zfGztLdIt2yoXd1fvh"],2,-15,[1,0,20,0],[[7,"99672sUg5NFw4x7bEPAiyHE","activate",2]],[[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",2]],[1,-120,11,0],[1,-120,8,0],[1,2,2,2],[1,1.5,1.5,1.5]]],[2,"cbIpdvwERK8algjbr0/o02",1,0]],[151,"Pointer Pivot",2,[-18],[[48,-17,[1,"b9PfOAZgFN6p0BKEDc5YB7"]]],[2,"e6ZP+HlqdMZquKrpM++xVu",1,0],[1,2,2,2]],[164,"Events",1,[-20,-21],[[48,-19,[1,"3bWbuz9u1G/YJ2TR9LhQOs"]]],[2,"54Wma65O1M9ZaIzAoWYNV7",1,0]],[36,0,{},4,[29,"a6yEVxZJJG26dGeFT9ITlD",-22,[42,"8240yl+fRK3aHsoQVsnuWy",1,[[28,"Holder_TutorialPointer",["_name"],[4,["a6yEVxZJJG26dGeFT9ITlD"]]],[22,["_lpos"],[4,["a6yEVxZJJG26dGeFT9ITlD"]],[1,0,0,0]],[22,["_lrot"],[4,["a6yEVxZJJG26dGeFT9ITlD"]],[3,0,0,0,1]],[22,["_euler"],[4,["a6yEVxZJJG26dGeFT9ITlD"]],[1,0,0,0]],[22,["_lscale"],[4,["a6yEVxZJJG26dGeFT9ITlD"]],[1,1.5,1.5,1.5]]]],0]],[164,"Scripts",1,[3],[[48,-23,[1,"bcFwnByXBIna9Kd8GCksym"]]],[2,"e1H7ux78JAu7clj4rkATlA",1,0]],[54,"On Show Tutorial UI",5,[[48,-24,[1,"56B548PaVCYZOxB6hvr4Mc"]],[250,1,-25,[1,"6fBIEnxvdFfpxLEG7ablfr"],[[7,"4dee2eFUPZHNKQRW/WBo2uh","showTutorial",3]]]],[2,"d5d2lANblAzrPWadEMemjp",1,0]],[54,"On Hide Tutorial UI",5,[[48,-26,[1,"7faaFayKBGtqYjWbnl58RV"]],[250,2,-27,[1,"e8HDWETpNKeoHVW4ud4H+1"],[[7,"4dee2eFUPZHNKQRW/WBo2uh","hideTutorial",3]]]],[2,"2dkYEJp55Ieo9V5OTl3vpR",1,0]]],0,[0,-1,6,0,2,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,7,0,-3,5,0,0,2,0,0,2,0,0,2,0,-1,4,0,0,3,0,56,4,0,0,3,0,0,4,0,-1,6,0,0,5,0,-1,8,0,-2,9,0,2,6,0,0,7,0,0,8,0,0,8,0,0,9,0,0,9,0,9,1,3,7,7,27],[0],[8],[231]],[[[62],[47,"SM_BlockHigh_01",[-2],[2,"4fecgAd2JbDKVfOw0g/xbW",-1,0]],[53,"SM_BlockHigh_01",1,[[52,-3,[1,"14k8y0SLpdaroj+3hWQPNc"],[0],[34],1]],[2,"70Ylc7qvBfZ5AmY0ZQiblV",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[232,233]],[[[63,"SM_BlockHigh_01__0.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",96772131,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":960,"length":360,"count":90,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":960,"count":20,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.48000001907348633,-0.47999992966651917,-0.5],"maxPosition",8,[1,0.47999992966651917,0.48000001907348633,0.699999988079071]]],-1],0,0,[],[],[]],[[[50,"P-Charger-0"],[125,"P-Charger-0",[[-17,-18,[80,"Events",-20,[2,"d95EadoVJHU5W5txftTQiE",-19,0]],-21],1,1,4,1],[[156,"Charger-0",-12,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-10],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",-11]],-9,-8,-7],[55,-13,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-14,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-15,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-16,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[86,"c46/YsCPVOJYA4mWEpNYRx",-6,0,[[116,["_uiFillbar"],-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]],[74,["_uiFillbar"],-5,-4,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[151,"Art",1,[-23,-24,-25,-26],[[88,true,-22,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[2,"4505kBZFlJebjm5k8fm2Li",1,0],[1,0.8,0.8,0.9]],[124,"Movement",[-27],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,2,[29,"47/vCPei5Z0pNlzjcP769r",-33,[69,"2dWvjB8YBKI6kYyQUD7vy6",1,[[67,[4,["47/vCPei5Z0pNlzjcP769r"]],[[55,-32,[1,"2ajwjctx5IW6AMGuVyRmVa"]]]]],[[14,"SM_Model",["_name"],-28],[10,["_lpos"],-29,[1,0,-0.2,0]],[10,["_lrot"],-30,[3,0,0,0,1]],[10,["_euler"],-31,[1,0,0,0]],[40,["_materials","0"],[4,["f9Xsbslq5Th7Btq+30Q0l1"]],3],[28,"SM_Model",["_name"],[4,["477ZEAbpBWqKxecVErE+OB"]]]]],2]],[35,"Scripts",1,[3,-34,-35,-36],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-44,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-43]]]],[[14,"P-HP-Bar",["_name"],-37],[10,["_lpos"],-38,[1,207,448.00000000000006,0]],[10,["_lrot"],-39,[3,0,0,0,1]],[10,["_euler"],-40,[1,0,0,0]],[14,"Art",["_name"],-41],[10,["_lpos"],-42,[1,0,0,0]]]],15]],[4,["47/vCPei5Z0pNlzjcP769r"]],[35,"VFX",2,[-45,-46,-47],[2,"a1ot4e1udAXrTsrBjAKrTt",1,0]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Death_Erupt",8,[-48],[2,"daLZ/hXbJJfoy4KXFSWLws",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,10,[1,"d8lsEeiDVGfruo9NRiUWPg"],[4],[5],[3,0.4],[0],[0],[0],[0],[0],[0],[0],[3,0.16],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.3169642857142857],[13,0.4575892857142857,[4,4294938922]],[13,1,[4,4289817645]]],[[9,255,0.5736607142857143],[9,0,1]]]]],[31,[0]],[78,true,true,[111,2,2,[8,[0,1],[[6,2,0.02962962962962963,1.913888888888889,1.913888888888889],[11,2,1]]],[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-49],[26,5]],[59,"VFX_Death_Shards",8,[-50],[2,"93bHCeswpBF66BwRmxKjg9",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,12,[1,"3d1PiZ1VZCyImTxi34Pepd"],[6],[5],[23,3,0.05,0.1],[0],[0],[23,3,3,5],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.3,0.8],[3,1],[0],[0],[[25,[23,3,5,7]]],[20,true,[16,1,[33,[[43,0.16964285714285715],[13,0.33035714285714285,[4,4294938368]],[13,0.7991071428571429,[4,4284748062]]],[[9,255,0.23883928571428573],[9,0,1]]]]],[109,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-8.726646259971647,8.726646259971647]],[123,true,2,2,[0],[0]],[19,[0],[0],[5],[5],-51],[26,7]],[59,"VFX_Spawn",8,[-52,-53],[2,"c5td+BlsVEq7jToHuvGjRi",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[46,"HP Controller",5,[-54],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[139,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-55],[7,"cc.ParticleSystem","play",10],[7,"cc.ParticleSystem","play",12],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[54,"On Death VFX Finished",5,[[96,-56,[1,"c9l4cVkoZLpIyzBWz0xc39"],[11,13],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"b5CNz8jTJAIYV5ToU8oUC7",1,0]],[105,"Temp-Model",false,2,[[79,"Sphere<ModelComponent>",-57,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",2,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,14,[1,"5cG8W8SMpPF7FiZNr7D3mx"],[8],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-58],[26,9]],[97,0.3,false,14,[1,"e6vX5qL8tOJ7te2Ox7sEXm"],[[10,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-59],[26,11]],[104,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[46,"Stun",5,[-60],[2,"99I1Zo/vdAm7/Bx4k/FYm1",1,0]],[117,23,[1,"85A7cGTX9EdKy+E/GhQIgm"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[35,"UI",1,[6],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,6,0,3,6,0,3,6,0,13,16,0,2,1,0,20,24,0,27,22,0,28,16,0,3,3,0,3,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,2,1,0,7,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,8,0,-1,22,0,1,7,0,1,7,0,1,7,0,1,7,0,0,4,0,2,4,0,-2,15,0,-3,23,0,-4,17,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,17,19,0,2,6,0,-1,10,0,-2,12,0,-3,14,0,-1,11,0,4,11,0,-1,13,0,4,13,0,-1,20,0,-2,21,0,-1,16,0,3,17,0,0,17,0,0,18,0,4,20,0,4,21,0,-1,24,0,9,1,3,7,5,6,7,25,60],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,-2,18,8],[14,13,234,1,20,19,10,18,4,3,11,9,5,15,5,16]],[[[50,"01-Spawn-Block"],[257,"01-Spawn-Block",1,[[-18,-19,[80,"Events",-21,[2,"17hZ64eStLi5TsnqtqoZ+k",-20,0]]],1,1,4],[[570,-17,[1,"d7yKZ8K6pLkpamQxPVZaFc"],[[7,"cc.ParticleSystem","stop",-11],[7,"cc.ParticleSystem","stop",-12],[7,"cc.ParticleSystem","play",-13],[7,"cc.ParticleSystem","play",-14],[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","spawn",-15],[7,"b6b88lnaNhOIYa+C0LFNa5B","play",-16]]]],[86,"48QkzTb+tG8q5w9MSR0TZW",-10,0,[[61,["_trailModule","_particleSystem"],-7,[4,["f0+hCeEKVE6J/NoOq2mqJ/"]],-6,[4,["f0+hCeEKVE6J/NoOq2mqJ/"]]],[61,["_trailModule","_particleSystem"],-9,[4,["99xgn7dCNMd7AAcAtPwKYN"]],-8,[4,["99xgn7dCNMd7AAcAtPwKYN"]]]],[-1,-2,-3,-4,-5]]],[82,0,null,[29,"8eEEusTA5fJb9F/OdJ08Sj",-29,[385,"30AJDJEdRB/bM2FB/7+HFH",1,[[215,[4,["8eEEusTA5fJb9F/OdJ08Sj"]],[-26,-27,-28]]],[[28,"SM_Portal_01",["_name"],[4,["8eEEusTA5fJb9F/OdJ08Sj"]]],[22,["_lpos"],[4,["8eEEusTA5fJb9F/OdJ08Sj"]],[1,0,0.2,0]],[22,["_lrot"],[4,["8eEEusTA5fJb9F/OdJ08Sj"]],[3,0,1,0,6.123233995736766e-17]],[22,["_euler"],[4,["8eEEusTA5fJb9F/OdJ08Sj"]],[1,0,180,0]],[40,["_materials","0"],[4,["63JiEgzJZUH4IaEhPAqvsa"]],15],[14,true,["_active"],-22],[10,["_lrot"],-23,[3,-4.329780281177467e-17,0.7071067811865475,0.7071067811865476,4.329780281177466e-17]],[10,["_euler"],-24,[1,-90.00000000000001,180,0]],[10,["_lscale"],-25,[1,0.9,0.9,0.9]]]],8]],[361,"Art",1,[-34,-35,-36,-37,2],[[[315,false,true,-30,[1,"9cuWZkrJ1BxIisMD4JDLco"],[16,17],18],-31,[141,-33,[1,"01MV2X6LRGLZ2koUqTZyzO"],-32]],4,1,4],[2,"291Y8lpGJN47v3TqcDCU5K",1,0]],[217,"Spawn Audio Controller",[-42,-43,-44],[[571,-41,[1,"5fAzjd81xCZYRANE9WeBiB"],[-38,-39,-40]]],[2,"95iJyKE3BM9rFDxFVa+pt0",1,0]],[4,["38TprYPCRWppYLEJoooZq3"]],[4,["fefPIkSBJemp8PPyjHLGkW"]],[4,["e9QGVwjwRRNYH2wTOhd0ZX"]],[240,"VFX_Portal_Pulse",2,[-45],[2,"04MDWxsSpCML6vdXcYligV",1,0],[1,0,0.6665253933427757,-0.09312840613506823],[3,4.246831410616657e-18,0.9975919719272859,-0.06935602025944895,-6.108489076379235e-17],[1,7.953999999999998,-180,9.709583258330843e-16]],[240,"VFX_Portal_Burst",2,[-46],[2,"0d1ckjLnlCmqS65tdqkXTY",1,0],[1,0,0.6665253933427757,-0.09312840613506823],[3,4.246831410616657e-18,0.9975919719272859,-0.06935602025944895,-6.108489076379235e-17],[1,7.953999999999998,-180,9.709583258330843e-16]],[451,0,2,[29,"60ciIzpkBUBJz6DMJ4URqe",-48,[385,"ebyePzCbNPnpeGKPAc8jnb",2,[[215,[4,["60ciIzpkBUBJz6DMJ4URqe"]],[-47]]],[[22,["_lpos"],[4,["60ciIzpkBUBJz6DMJ4URqe"]],[1,0,0.624,0.121]],[28,"SM_PortalVFX",["_name"],[4,["60ciIzpkBUBJz6DMJ4URqe"]]],[22,["_lrot"],[4,["60ciIzpkBUBJz6DMJ4URqe"]],[3,-4.329780281177466e-17,0.7071067811865476,0.7071067811865475,4.329780281177467e-17]],[22,["_euler"],[4,["60ciIzpkBUBJz6DMJ4URqe"]],[1,-90,180,0]],[40,["_materials","0"],[4,["62L0kXUTlVnL/DCq3Kmz1z"]],14],[22,["_lrot"],[4,["6ftKokXEVS274EdU6PgUr7"]],[3,0,0,0,1]],[22,["_euler"],[4,["6ftKokXEVS274EdU6PgUr7"]],[1,0,0,0]],[28,true,["_active"],[4,["6ftKokXEVS274EdU6PgUr7"]]]]],11],[{},"mountedRoot",1,2]],[4,["25hFHXaUhVr4TfyO0rKYFI"]],[35,"1",3,[-49],[2,"a9wIVIeLdHC72VuFsucL4d",1,0]],[36,0,null,12,[29,"38TprYPCRWppYLEJoooZq3",-50,[42,"e6Ja9u9X1PWrl/bQJ+zFkk",1,[[14,"SM_BlockPath_01",["_name"],5],[10,["_lpos"],5,[1,0,0,0]],[10,["_lrot"],5,[3,0,0,0,1]],[10,["_euler"],5,[1,0,0,0]],[40,["_materials","0"],[4,["c6ETENbq5XL5UBZI2bIgRH"]],3]]],2]],[81,"2",false,3,[-51],[2,"02iRx/50BKW48FNNNNZ9sY",1,0]],[36,0,null,14,[29,"fefPIkSBJemp8PPyjHLGkW",-52,[42,"a60e7dRVpKCr6z5+YRyT10",1,[[14,"SM_BlockPath_02",["_name"],6],[10,["_lpos"],6,[1,0,0,0]],[10,["_lrot"],6,[3,0,0,0,1]],[10,["_euler"],6,[1,0,0,0]],[40,["_materials","0"],[4,["c2E9Ka2cRe7YGAxkqvC+yR"]],5]]],4]],[81,"3",false,3,[-53],[2,"55a9BlQBxGq4FzBA8+oxFP",1,0]],[36,0,null,16,[29,"e9QGVwjwRRNYH2wTOhd0ZX",-54,[42,"e8Mbi12ZpCy7PtlgJh3/Nc",1,[[14,"SM_BlockPath_03",["_name"],7],[10,["_lpos"],7,[1,0,0,0]],[10,["_lrot"],7,[3,0,0,0,1]],[10,["_euler"],7,[1,0,0,0]],[40,["_materials","0"],[4,["0fKTIDFQVVW7qzAtQnZb77"]],7]]],6]],[35,"Scripts",1,[-55,-56],[2,"d6exBUN41Ctqdb8i/hFGhH",1,0]],[194,"TEMP-Model",false,3,[[79,"Cube<ModelComponent>",-57,[1,"dao43H3BBPYq0RywEDIi8I"],[0],[34],1]],[2,"24gMl5J9RC56CYwns4cJxH",1,0]],[487,true,true,0.05,false,false,0,8,[1,"f0+hCeEKVE6J/NoOq2mqJ/"],[9],[56,[4,4060086271]],[3,1.2],[3,1.2],[3,1.2],[0],[3,-1.7453292519943295],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]],[279,0.03,[3,1]],[279,0.04,[3,1]]],[20,true,[16,1,[33,[[43,0.09598214285714286],[13,0.16964285714285715,[4,4294135103]],[13,0.5178571428571428,[4,4293005769]],[13,1,[4,4294377541]]],[[38,255],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,0.27692307692307694,0.9974358974358974],[[41,2,0.3037037037037037,1.7814814814814819,1,1.7814814814814819,1],[6,2,0.7037037037037037,0.6230936819172115,0.6230936819172115],[72,2,0.8777777777777778,1,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-58],[496,4,0,10]],[476,0.05,false,false,13.252995296045448,12.965953036697236,15.941608469635835,0,9,[1,"99xgn7dCNMd7AAcAtPwKYN"],[277,2,[4,4294901882],[4,4293836223]],[23,3,0.03,0.1],[0],[0],[3,3],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.2,0.4],[3,0.2],[0],[0],[[25,[3,10]]],[20,true,[16,1,[37,[[9,255,0.46205357142857145],[9,0,1]]]]],[109,true,0,0.5,1,0.6108652381980153,[0],[1,160,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-10.471975511965978,10.471975511965978]],[24,[0],[0]],[19,[0],[0],[5],[5],-59],[108]],[348,"SM_PortalVFX-001",false,10,[[52,-60,[1,"85d6KfV4NO8b72iG5Dh5z3"],[12],[34],13]],[2,"93q8JwKwNNu6eJz1j4Nvnk",1,0],[1,0,-0.033,0],[1,2.392,2.392,2.392]],[128,3,[1,"91L+1LnzVFRZHUVhgkDwBf"]],[35,"Audio",18,[4],[2,"37lWiHH/dCrZ8zrzjQlci9",1,0]],[46,"Tier 1 Spawn VFX",4,[-61],[2,"56cbUMq3tI97wmuvHb/xUZ",1,0]],[144,"sfx-enemy-t1spawned",25,[1,"77nUvyv8hJU6ctVvrMU9Pi"]],[46,"Tier 2 Spawn VFX",4,[-62],[2,"5aM+qfOsZI27RTQvzC1JST",1,0]],[144,"sfx-enemy-t2spawned",27,[1,"ceFqnnWJdB/6o0yn+w/U3t"]],[46,"Tier 3 Spawn VFX",4,[-63],[2,"97rpc/palP8IDVSgy+RICU",1,0]],[144,"sfx-enemy-t3spawned",29,[1,"a6ctwwbCtFuorL55SFoavM"]],[54,"Theme Model Chooser",18,[[140,-64,[1,"e2NYiRZ3JOW45cXUVm/O4w"],[12,14,16],19]],[2,"7dvjDmznBEuotGxoEH8QM/",1,0]]],0,[0,-1,13,0,-2,15,0,-3,17,0,-4,2,0,-5,10,0,3,2,0,13,2,0,3,2,0,13,2,0,2,1,0,3,8,0,3,9,0,3,8,0,3,9,0,3,3,0,3,4,0,0,1,0,-1,3,0,-2,18,0,2,1,0,7,1,0,1,11,0,1,11,0,1,11,0,1,11,0,-1,8,0,-2,9,0,-3,10,0,2,2,0,0,3,0,-2,23,0,33,23,0,0,3,0,-1,19,0,-2,12,0,-3,14,0,-4,16,0,-1,26,0,-2,28,0,-3,30,0,0,4,0,-1,25,0,-2,27,0,-3,29,0,-1,20,0,-1,21,0,-1,22,0,2,10,0,-1,13,0,2,13,0,-1,15,0,2,15,0,-1,17,0,2,17,0,-1,24,0,-2,31,0,0,19,0,4,20,0,4,21,0,0,22,0,-1,26,0,-1,28,0,-1,30,0,0,31,0,9,1,2,7,3,4,7,24,64],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23],[-1,10,8,11,8,11,8,11,8,-1,10,8,-1,10,11,11,-1,-2,18,34,26],[235,32,63,1,81,12,82,12,236,237,83,238,239,83,240,1,84,85,84,24,241]],[[[50,"SM_TowerPulsarBody_01"],[47,"SM_TowerPulsarBody_01",[-2],[2,"27Yce2+45c87fcrQ+S23Kt",-1,0]],[53,"SM_TowerPulsarBody_01",1,[[52,-3,[1,"c1qYGglmVbiJ63kvX3SnJg"],[0],[34],1]],[2,"72+J2CTu9RoYwXYPv5sSUS",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[1,144]],[[[62],[47,"SM_EnemyOvercharger_02",[-2],[2,"7862h+dgVbk5QFM+q8blZa",-1,0]],[53,"SM_EnemyOvercharger_02",1,[[52,-3,[1,"33p2XKWl9b4LU6vlryeMiU"],[0],[34],1]],[2,"29mesNITFSQo4+2eDCD29U",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[242,243]],[[[63,"SM_EnemyOvercharger_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",1537439293,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9216,"length":1344,"count":336,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9216,"count":192,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.30566802620887756,-0.2593323588371277,-0.09883619844913483],"maxPosition",8,[1,0.3056679964065552,0.5301661491394043,0.3970951735973358]]],-1],0,0,[],[],[]],[[[50,"P-Breeder"],[185,"P-Breeder",[[-12,-13,[80,"Events",-15,[2,"d95EadoVJHU5W5txftTQiE",-14,0]],-16],1,1,4,1],[[-7,[55,-8,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-9,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-10,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-11,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],1,4,4,4,4],[86,"c46/YsCPVOJYA4mWEpNYRx",-6,0,[[116,["_uiFillbar"],-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]],[74,["_uiFillbar"],-5,-4,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[47,"VFX",[-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29],[2,"c5rhX95KFBXIpHLlo3ruG3",1,0]],[468,"Art",1,[[-34,-35,-36,2,[89,"Enemies Spawn Position",-37,[2,"e0bNsYvSRDwaKMS8olrA8Z",1,0],[1,0,0,0.419]]],1,1,1,1,4],[[[88,true,-30,[1,"16mUt5j0BPfLyhp6c95pwE"],[32,33,34],35],-31,[141,-33,[1,"d7QMGjhZxNUp3OSUF+ad5b"],-32]],4,1,4],[2,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[35,"Scripts",1,[-38,-39,-40,-41,-42,-43],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[46,"Movement",4,[-44],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-52,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-51]]]],[[14,"P-HP-Bar",["_name"],-45],[10,["_lpos"],-46,[1,207,448.00000000000006,0]],[10,["_lrot"],-47,[3,0,0,0,1]],[10,["_euler"],-48,[1,0,0,0]],[14,"Art",["_name"],-49],[10,["_lpos"],-50,[1,0,0,0]]]],36]],[36,0,null,3,[29,"b6WuSZggVbVqyZ36EcrJAQ",-58,[69,"38F42bNgBIqLLMRqoYEjVo",1,[[67,[4,["b6WuSZggVbVqyZ36EcrJAQ"]],[[55,-57,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[14,"SM_Model",["_name"],-53],[10,["_lpos"],-54,[1,0,0,0]],[10,["_lrot"],-55,[3,0,0,0,1]],[10,["_euler"],-56,[1,0,0,0]],[40,["_materials","0"],[4,["14dCZuzQ5ZrYZb8GT6TPbg"]],3],[28,"SM_Model",["_name"],[4,["eaqOmHLtpfApf7fFMjgxn8"]]]]],2]],[4,["b6WuSZggVbVqyZ36EcrJAQ"]],[115,"Spawn Enemies",[[191,-60,[1,"87jCA6gT5DX6gWR4NOT2E4"],-59]],[2,"ffxZLVqW5MV7VDXxqA7RNt",1,0]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Spawn",2,[-61,-62],[2,"7b89QRo8RNgaZeJfQZUoep",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[94,"VFX-BossExplosion",512,2,[-63],[2,"71YNHxOytCdIEz/LHuCbi3",1,0]],[73,0.2,false,false,12,[1,"16JAXOnPFDC6opJukLvOdu"],[[8,null],6,0],[5],[3,3],[0],[0],[0],[0],[0],[135,3],[3,1.8],[3,0.2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.08258928571428571],[13,0.9241071428571428,[4,4289835441]],[13,0.9620535714285714,[4,4281084972]]],[[9,255,0.6004464285714286],[9,0,1]]]]],[31,[0]],[78,true,true,[12,1,20,[8,[0,0.6948717948717948,1],[[45,2,2.839080459770115,1,2.839080459770115,1],[6,2,0.9333333333333333,0.4622222222222221,0.4622222222222221],[72,2,1,1,1]]]],[12,1,6,[8,[0,0.7974358974358975],[[136,2,2,0.05925925925925926,-0.015204678362573122,0.09771705989047173,-0.015204678362573122],[137,2,1,0.9962962962962963,0.0288636426001776,0.0288636426001776,0.09792722000142738]]]],[12,1,5,[8,[0,0.8051282051282052],[[136,2,2,1,-0.015285126396237575,0.09720572269540514,-0.015285126396237575],[137,2,1,0.03333333333333333,-0.007150715071507141,-0.007150715071507141,0.10365593276852825]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-64],[26,9]],[64,"VFX-Flash",512,2,[-65],[2,"d8pZWR01RM67gZJRq1ErT6",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[73,0.2,false,false,14,[1,"914AUJ9atDnq2dmKuv82i3"],[[10,null],6,0],[5],[3,1.5],[0],[0],[0],[0],[0],[0],[3,1.7],[3,0.2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.44642857142857145],[9,0,1]]]]],[77,0,[3,1]],[32,true,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-66],[26,11]],[64,"VFX_SprayOut",512,2,[-67],[2,"0e+3DrbrBOS4qLMrGvcUxv",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,1,false,false,16,[1,"e53gSY1WxNUaRUYP7ZwS2f"],[12],[5],[23,3,0.1,0.4],[0],[0],[23,3,2,10],[0],[0],[0],[3,1.7],[3,1],[0],[83,80],[0],[[25,[3,50]]],[20,true,[16,1,[37,[[38,255],[9,255,0.22767857142857142],[9,0,1]]]]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[110,true,[0],[0],[0],[30,1,[8,[0,1],[[11,2,1],[6,2,0.037037037037037035,-1.54074074074074,-1.54074074074074]]]]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-68],[99,1,0.1,13]],[94,"VFX_Explosion2",512,2,[-69],[2,"d9IcX2zsdJZa1o8hcb8dq7",1,0]],[73,1.5,false,false,18,[1,"45NKNvw2BEIrB9DmBsQ8ZO"],[[14,null],6,0],[56,[4,4294506744]],[3,1],[0],[0],[0],[0],[0],[135,3],[3,2],[3,1.5],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.033482142857142856],[43,0.078125],[13,0.18973214285714285,[4,4288716960]],[13,0.8459821428571428,[4,4280624421]]],[[9,255,0.1049107142857143],[9,255,0.21651785714285715],[9,0,1]]]]],[31,[0]],[32,true,[12,1,20,[8,[0,0.38461538461538464,1],[[45,2,6.259259259259259,1,6.259259259259259,1],[6,2,0.9148148148148149,0.4622222222222221,0.4622222222222221],[72,2,1,1,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-70],[26,15]],[64,"VFX_SprayOut2",512,2,[-71],[2,"f8yaGBbX5JxozcDFq7/A5r",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,6,false,false,20,[1,"c0RxASv7hHM468k7mlZvEh"],[16],[5],[23,3,0.1,0.4],[0],[0],[23,3,10,50],[0],[0],[0],[3,2],[3,1],[0],[83,80],[0],[[25,[3,50]]],[20,true,[16,1,[37,[[38,255],[9,255,0.22767857142857142],[9,0,1]]]]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[110,true,[0],[0],[0],[30,1,[8,[0,0.27708427247702977,0.5230769230769231,1],[[11,2,1],[6,2,0.30922275440798175,-2.3928348401596575,-2.3928348401596575],[6,2,0.05925925925925926,-0.21802935010482188,-0.21802935010482188],[11,2,0.020792806452028488]]]]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-72],[99,1,0.1,17]],[64,"VFX-ScreenTone",512,2,[-73],[2,"f5IF//ylBCgYBzZlM/MNQm",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[160,false,false,22,[1,"c6djGwZhFMGoMdP5TFP5yl"],[[18,null],6,0],[56,[4,1811939327]],[3,100],[0],[0],[0],[0],[0],[0],[3,2],[3,1],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.44642857142857145],[9,0,1]]]]],[77,0,[3,1]],[49,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-74],[26,19]],[94,"VFX-CircleIn",512,2,[-75],[2,"fdTyQ03h9EgbCn6pM6YNXR",1,0]],[73,0.4,false,false,24,[1,"fahkQLtKtO8re8woeBCI7I"],[[20,null],6,0],[5],[3,0.5],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[3,0.1],[3,0.4],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[13,0.12946428571428564,[4,4280229663]],[13,0.7745535714285714,[4,4289703855]],[43,0.9464285714285714]],[[38,0],[9,255,0.5357142857142858],[9,255,1]]]]],[31,[0]],[32,true,[12,1,20,[8,[0,1],[[41,2,0.9703703703703702,0.050682261208577085,1,0.050682261208577085,1],[45,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-76],[26,21]],[94,"VFX-RingIn",512,2,[-77],[2,"9a+bAL/V1EXJYP0Hb0youI",1,0]],[73,0.4,false,false,26,[1,"a3/zpCDI9JvYsHpTrFodvM"],[[22,null],6,0],[5],[3,1.5],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[3,0.35],[3,0.4],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[13,0.12276785714285714,[4,4280887593]],[13,0.7745535714285714,[4,4290032820]],[43,0.9464285714285714]],[[38,0],[9,34,0.34151785714285715],[9,255,0.6941964285714286],[9,255,1]]]]],[31,[0]],[32,true,[12,1,8,[8,[0,1],[[41,2,0.9703703703703703,0.05068226120857707,1,0.05068226120857707,1],[45,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-78],[26,23]],[64,"VFX_SprayIn",512,2,[-79],[2,"0aAXxcWj1DtoISSbe8pmGb",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[134,1.2,false,false,28,[1,"ebC240/PdJz6/cRw49cINI"],[24],[5],[3,0.2],[0],[0],[3,5],[0],[0],[0],[0],[3,0.1],[0],[12,1,80,[8,[0,0.7333333333333333],[[6,2,0.05555555555555556,2.781893004115226,2.781893004115226],[11,2,0.9925925925925926]]]],[0],[122,[5]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-80],[99,1,0.5,25]],[64,"VFX-ChargeFlash",512,2,[-81],[2,"44zx5OYIhC74qftA8/mDPp",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,2,false,false,30,[1,"1ce66jhulC9rH1jDVFuF5w"],[26],[5],[3,0.6],[0],[0],[0],[0],[0],[0],[3,0.3],[3,2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.8191964285714286],[9,0,1]]]]],[77,0,[3,1]],[32,true,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-82],[26,27]],[64,"VFX-Sparkle",512,2,[-83],[2,"e97fkrhtNOlKyP86WbN+7T",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[178,0.7,false,false,32,[1,"71viSxu+9EK6N8gQYYAezO"],[[28,null],6,0],[16,4,[33,[[87,[4,4294926764]],[13,0.3169642857142857,[4,4294943343]],[13,0.6517857142857143,[4,4292278146]],[13,1,[4,4284279807]]],[[38,255]]]],[23,3,0.1,1.2],[0],[0],[3,0.1],[0],[0],[0],[3,1],[3,0.15],[0],[161,30,30],[0],[20,true,[16,1,[37,[[38,0],[9,255,0.12723214285714285],[9,255,0.2879464285714286],[9,0,1]]]]],[188,true,3,2,1.2,[3,1]],[32,true,[12,1,2,[8,[0,0.12307692307692308,0.3128205128205128,0.9974358974358974],[[11,2,0.48518518518518516],[6,2,1,0.18055555555555491,0.18055555555555491],[11,2,0.5074074074074074],[11,2,0.4962962962962963]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-84],[26,29]],[64,"VFX_LightRay",512,2,[-85],[2,"91Gr8WwsJEy5OnRKUu9OoQ",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[134,1,false,false,34,[1,"deB2xqb3ZIy4ssqAOPdP/s"],[30],[5],[12,1,4,[8,[0,1],[[6,2,0.48148148148148145,1.0000000000000002,1.0000000000000002],[11,2,1]]]],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[0],[3,1],[0],[12,1,10,[8,[0,1],[[6,2,0.3555555555555555,1.9740740740740748,1.9740740740740748],[11,2,1]]]],[0],[20,true,[16,1,[37,[[38,0],[9,133,0.09375],[9,255,0.15401785714285715],[9,153,0.24330357142857142],[9,0,1]]]]],[77,0,[3,1]],[78,true,true,[0],[30,1,[8,[0,0.2717948717948718,1],[[6,2,1,-3.2828282828282838,-3.2828282828282838],[6,2,0.45925925925925926,-1.155555555555555,-1.155555555555555],[6,2,0.16666666666666666,0.03073286052009456,0.03073286052009456]]]],[12,1,2,[8,[0,0.2717948717948718,0.9923076923076923],[[6,2,0.5,2.4246031746031744,2.4246031746031744],[6,2,0.8814814814814815,0.36111111111111127,0.36111111111111127],[11,2,1]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-0.17453292519943295,0.17453292519943295]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-86],[26,31]],[46,"HP Controller",4,[-87],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[166,36,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-88],[7,"cc.ParticleSystem","play",12],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",5],[7,"cc.ParticleSystem","play",14],[7,"cc.ParticleSystem","play",16],[7,"cc.ParticleSystem","play",18],[7,"cc.ParticleSystem","play",20],[7,"cc.ParticleSystem","play",22],[7,"cc.ParticleSystem","play",24],[7,"cc.ParticleSystem","play",26],[7,"cc.ParticleSystem","play",28],[7,"cc.ParticleSystem","play",30],[7,"cc.ParticleSystem","play",32],[7,"cc.ParticleSystem","play",34],[68,"2022ebMdchE2pNL1SpqTm8g","setBool","isDead,true",3]],1],[54,"On Death VFX Finished",4,[[96,-89,[1,"1c94P/9eNOnKMdwedezrwP"],[13,15,17,19,21,23,25,27,31,33,35,29],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"abDul2IhJLE7TbKPJWRI9/",1,0]],[105,"Temp-Model",false,3,[[79,"Sphere<ModelComponent>",-90,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",3,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,11,[1,"9eCkO4cvtOB4cvAvF666O9"],[4],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-91],[26,5]],[97,0.3,false,11,[1,"c0IiSJ1zZFTpYrxDRtxE+K"],[[6,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-92],[26,7]],[128,3,[1,"00dGFwSCpHFoeOaaN9KBHL"]],[104,5,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[46,"Stun",4,[-93],[2,"28wv4th1pNs6qDNkpOR9dx",1,0]],[117,45,[1,"92X5rq9oNDNouphSNFIziH"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",5]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",5]]],[35,"Specials",4,[9],[2,"2ebRPuFe1B9YasOeQWQ5E4",1,0]],[179,"Breeder",2,1,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",5],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",36],[7,"71b59j50pJOQYyfqjE0LpJs","initialize",9]],37,44,46],[54,"Timer",4,[[408,true,3,-94,[1,"25JVNzj3tNd6zm9dbqCyu7"],[[7,"71b59j50pJOQYyfqjE0LpJs","spawnEnemies",9]]]],[2,"4c2cpRnkxGibiOVX7ehJoZ",1,0]],[35,"UI",1,[6],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,7,0,-2,6,0,3,6,0,3,6,0,13,37,0,2,1,0,-1,48,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-2,4,0,2,1,0,7,1,0,-4,50,0,-1,11,0,-2,12,0,-3,14,0,-4,16,0,-5,18,0,-6,20,0,-7,22,0,-8,24,0,-9,26,0,-10,28,0,-11,30,0,-12,32,0,-13,34,0,0,3,0,-2,43,0,33,43,0,0,3,0,-1,39,0,-2,40,0,-3,7,0,7,3,0,-1,5,0,-2,36,0,-3,45,0,-4,38,0,-5,47,0,-6,49,0,-1,44,0,1,10,0,1,10,0,1,10,0,1,10,0,1,51,0,1,51,0,17,40,0,2,6,0,1,8,0,1,8,0,1,8,0,1,8,0,0,7,0,2,7,0,38,48,0,0,9,0,-1,41,0,-2,42,0,-1,13,0,4,13,0,-1,15,0,4,15,0,-1,17,0,4,17,0,-1,19,0,4,19,0,-1,21,0,4,21,0,-1,23,0,4,23,0,-1,25,0,4,25,0,-1,27,0,4,27,0,-1,29,0,4,29,0,-1,31,0,4,31,0,-1,33,0,4,33,0,-1,35,0,4,35,0,-1,37,0,3,38,0,0,38,0,0,39,0,4,41,0,4,42,0,-1,46,0,0,49,0,9,1,2,7,3,6,7,50,9,7,47,94],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,-2,-3,18,8,26],[14,13,244,1,4,3,11,9,4,3,7,6,7,6,4,3,7,6,7,6,4,3,11,9,7,6,7,6,33,29,43,41,5,15,51,5,16,57]],[[[50,"P-BossTank2"],[125,"P-BossTank2",[[-16,-17,[80,"Events",-19,[2,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[179,"BossTank2",2,-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[55,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[47,"VFX",[-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33],[2,"699XV1OrFNZLhs0FweW8lS",1,0]],[256,"Art",1,[-38,-39,-40,2],[[[88,true,-34,[1,"16mUt5j0BPfLyhp6c95pwE"],[32,33,34],35],-35,[141,-37,[1,"a6M9UNipdEC4E8dSeBHiBA"],-36]],4,1,4],[2,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[124,"Movement",[-41],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[35,"Scripts",1,[4,-42,-43,-44],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[36,0,null,3,[29,"35q+F/UKRcsrrmbxiyg3c7",-50,[69,"2588HRIAVG9ZxDU4J9u1qL",1,[[67,[4,["35q+F/UKRcsrrmbxiyg3c7"]],[[55,-49,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[14,"SM_Model",["_name"],-45],[10,["_lpos"],-46,[1,0,0,0]],[10,["_lrot"],-47,[3,0,0,0,1]],[10,["_euler"],-48,[1,0,0,0]],[40,["_materials","0"],[4,["e04xugrldTnbXkchKrSM5C"]],3],[28,"SM_Model",["_name"],[4,["34TgPiyp5WOaPkHMnfYRpy"]]]]],2]],[4,["35q+F/UKRcsrrmbxiyg3c7"]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-58,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-57]]]],[[14,"P-HP-Bar",["_name"],-51],[10,["_lpos"],-52,[1,207,448,0]],[10,["_lrot"],-53,[3,0,0,0,1]],[10,["_euler"],-54,[1,0,0,0]],[14,"Art",["_name"],-55],[10,["_lpos"],-56,[1,0,0,0]]]],36]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Spawn",2,[-59,-60],[2,"23y5FPp6VKcLsZqzoLeVvG",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[94,"VFX-BossExplosion",512,2,[-61],[2,"01pJEDG/xDzLRr3Ai9gG1y",1,0]],[73,0.2,false,false,11,[1,"ffYdtNZDtM16sbxGuhKDZL"],[[8,null],6,0],[5],[3,3],[0],[0],[0],[0],[0],[135,3],[3,1.8],[3,0.2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.08258928571428571],[13,0.9241071428571428,[4,4289835441]],[13,0.9620535714285714,[4,4281084972]]],[[9,255,0.6004464285714286],[9,0,1]]]]],[31,[0]],[78,true,true,[12,1,20,[8,[0,0.6948717948717948,1],[[45,2,2.839080459770115,1,2.839080459770115,1],[6,2,0.9333333333333333,0.4622222222222221,0.4622222222222221],[72,2,1,1,1]]]],[12,1,6,[8,[0,0.7974358974358975],[[136,2,2,0.05925925925925926,-0.015204678362573122,0.09771705989047173,-0.015204678362573122],[137,2,1,0.9962962962962963,0.0288636426001776,0.0288636426001776,0.09792722000142738]]]],[12,1,5,[8,[0,0.8051282051282052],[[136,2,2,1,-0.015285126396237575,0.09720572269540514,-0.015285126396237575],[137,2,1,0.03333333333333333,-0.007150715071507141,-0.007150715071507141,0.10365593276852825]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-62],[26,9]],[64,"VFX-Flash",512,2,[-63],[2,"21pA0RXCFDT6WsEsTcPM5W",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[73,0.2,false,false,13,[1,"afBu2SQ+9BSbMEYTmM99XJ"],[[10,null],6,0],[5],[3,1.5],[0],[0],[0],[0],[0],[0],[3,1.7],[3,0.2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.44642857142857145],[9,0,1]]]]],[77,0,[3,1]],[32,true,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-64],[26,11]],[64,"VFX_SprayOut",512,2,[-65],[2,"a5cr3TWQVA0aAvslUhCl6p",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,1,false,false,15,[1,"59k834I0hKXbjWk5tw2gM6"],[12],[5],[23,3,0.1,0.4],[0],[0],[23,3,2,10],[0],[0],[0],[3,1.7],[3,1],[0],[83,80],[0],[[25,[3,50]]],[20,true,[16,1,[37,[[38,255],[9,255,0.22767857142857142],[9,0,1]]]]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[110,true,[0],[0],[0],[30,1,[8,[0,1],[[11,2,1],[6,2,0.037037037037037035,-1.54074074074074,-1.54074074074074]]]]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-66],[99,1,0.1,13]],[94,"VFX_Explosion2",512,2,[-67],[2,"3dWb3WoAVOAJoyqCrlJkpw",1,0]],[73,1.5,false,false,17,[1,"28Ug5IJKxMF68Hxk7Zg8O+"],[[14,null],6,0],[56,[4,4294506744]],[3,1],[0],[0],[0],[0],[0],[135,3],[3,2],[3,1.5],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.033482142857142856],[43,0.078125],[13,0.18973214285714285,[4,4288716960]],[13,0.8459821428571428,[4,4280624421]]],[[9,255,0.1049107142857143],[9,255,0.21651785714285715],[9,0,1]]]]],[31,[0]],[32,true,[12,1,20,[8,[0,0.38461538461538464,1],[[45,2,6.259259259259259,1,6.259259259259259,1],[6,2,0.9148148148148149,0.4622222222222221,0.4622222222222221],[72,2,1,1,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-68],[26,15]],[64,"VFX_SprayOut2",512,2,[-69],[2,"debU/jCEtFR46DqrrpXM1N",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,6,false,false,19,[1,"c51jOelidHuI39HJd2fRlX"],[16],[5],[23,3,0.1,0.4],[0],[0],[23,3,10,50],[0],[0],[0],[3,2],[3,1],[0],[83,80],[0],[[25,[3,50]]],[20,true,[16,1,[37,[[38,255],[9,255,0.22767857142857142],[9,0,1]]]]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[110,true,[0],[0],[0],[30,1,[8,[0,0.27708427247702977,0.5230769230769231,1],[[11,2,1],[6,2,0.30922275440798175,-2.3928348401596575,-2.3928348401596575],[6,2,0.05925925925925926,-0.21802935010482188,-0.21802935010482188],[11,2,0.020792806452028488]]]]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-70],[99,1,0.1,17]],[64,"VFX-ScreenTone",512,2,[-71],[2,"44N+I9A9BNg5uw/Yz/EiZ4",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[160,false,false,21,[1,"afHJgRKV9JXYipVuRb4OSF"],[[18,null],6,0],[56,[4,1811939327]],[3,100],[0],[0],[0],[0],[0],[0],[3,2],[3,1],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.44642857142857145],[9,0,1]]]]],[77,0,[3,1]],[49,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-72],[26,19]],[94,"VFX-CircleIn",512,2,[-73],[2,"92v2LEe/dNaY6lEUqGs2/Z",1,0]],[73,0.4,false,false,23,[1,"17fGuSOFxIjo4rnLb98qf9"],[[20,null],6,0],[5],[3,0.5],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[3,0.1],[3,0.4],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[13,0.12946428571428564,[4,4280229663]],[13,0.7745535714285714,[4,4289703855]],[43,0.9464285714285714]],[[38,0],[9,255,0.5357142857142858],[9,255,1]]]]],[31,[0]],[32,true,[12,1,20,[8,[0,1],[[41,2,0.9703703703703702,0.050682261208577085,1,0.050682261208577085,1],[45,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-74],[26,21]],[94,"VFX-RingIn",512,2,[-75],[2,"a0BlRHDJVFD7Zy8pe8Skri",1,0]],[73,0.4,false,false,25,[1,"81JlmZFbxNOItcuiC+KhwX"],[[22,null],6,0],[5],[3,1.5],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[3,0.35],[3,0.4],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[13,0.12276785714285714,[4,4280887593]],[13,0.7745535714285714,[4,4290032820]],[43,0.9464285714285714]],[[38,0],[9,34,0.34151785714285715],[9,255,0.6941964285714286],[9,255,1]]]]],[31,[0]],[32,true,[12,1,8,[8,[0,1],[[41,2,0.9703703703703703,0.05068226120857707,1,0.05068226120857707,1],[45,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-76],[26,23]],[64,"VFX_SprayIn",512,2,[-77],[2,"fbaSzTlZlL9Yn0S/aSr2kf",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[134,1.2,false,false,27,[1,"2fzs9K8+hEybHk6iJ8rgdx"],[24],[5],[3,0.2],[0],[0],[3,5],[0],[0],[0],[0],[3,0.1],[0],[12,1,80,[8,[0,0.7333333333333333],[[6,2,0.05555555555555556,2.781893004115226,2.781893004115226],[11,2,0.9925925925925926]]]],[0],[122,[5]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-78],[99,1,0.5,25]],[64,"VFX-ChargeFlash",512,2,[-79],[2,"f2Cen87MFBOL/r/97g+5qo",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,2,false,false,29,[1,"80TvbPBWpFeJQVbabs1aUk"],[26],[5],[3,0.6],[0],[0],[0],[0],[0],[0],[3,0.3],[3,2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.8191964285714286],[9,0,1]]]]],[77,0,[3,1]],[32,true,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-80],[26,27]],[64,"VFX-Sparkle",512,2,[-81],[2,"5146BkGclCHLT92ykkH6XI",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[178,0.7,false,false,31,[1,"48usYlBqVOO45owholDhue"],[[28,null],6,0],[16,4,[33,[[87,[4,4294926764]],[13,0.3169642857142857,[4,4294943343]],[13,0.6517857142857143,[4,4292278146]],[13,1,[4,4284279807]]],[[38,255]]]],[23,3,0.1,1.2],[0],[0],[3,0.1],[0],[0],[0],[3,1],[3,0.15],[0],[161,30,30],[0],[20,true,[16,1,[37,[[38,0],[9,255,0.12723214285714285],[9,255,0.2879464285714286],[9,0,1]]]]],[188,true,3,2,1.2,[3,1]],[32,true,[12,1,2,[8,[0,0.12307692307692308,0.3128205128205128,0.9974358974358974],[[11,2,0.48518518518518516],[6,2,1,0.18055555555555491,0.18055555555555491],[11,2,0.5074074074074074],[11,2,0.4962962962962963]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-82],[26,29]],[64,"VFX_LightRay",512,2,[-83],[2,"9c1ViIpeFJXY3WtG2uz/80",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[134,1,false,false,33,[1,"7fEUaj2SxAi7jgXUyN+tXm"],[30],[5],[12,1,4,[8,[0,1],[[6,2,0.48148148148148145,1.0000000000000002,1.0000000000000002],[11,2,1]]]],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[0],[3,1],[0],[12,1,10,[8,[0,1],[[6,2,0.3555555555555555,1.9740740740740748,1.9740740740740748],[11,2,1]]]],[0],[20,true,[16,1,[37,[[38,0],[9,133,0.09375],[9,255,0.15401785714285715],[9,153,0.24330357142857142],[9,0,1]]]]],[77,0,[3,1]],[78,true,true,[0],[30,1,[8,[0,0.2717948717948718,1],[[6,2,1,-3.2828282828282838,-3.2828282828282838],[6,2,0.45925925925925926,-1.155555555555555,-1.155555555555555],[6,2,0.16666666666666666,0.03073286052009456,0.03073286052009456]]]],[12,1,2,[8,[0,0.2717948717948718,0.9923076923076923],[[6,2,0.5,2.4246031746031744,2.4246031746031744],[6,2,0.8814814814814815,0.36111111111111127,0.36111111111111127],[11,2,1]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-0.17453292519943295,0.17453292519943295]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-84],[26,31]],[46,"HP Controller",5,[-85],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[166,35,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-86],[7,"cc.ParticleSystem","play",11],[7,"cc.ParticleSystem","play",13],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",4],[7,"cc.ParticleSystem","play",15],[7,"cc.ParticleSystem","play",17],[7,"cc.ParticleSystem","play",19],[7,"cc.ParticleSystem","play",21],[7,"cc.ParticleSystem","play",23],[7,"cc.ParticleSystem","play",25],[7,"cc.ParticleSystem","play",27],[7,"cc.ParticleSystem","play",29],[7,"cc.ParticleSystem","play",31],[7,"cc.ParticleSystem","play",33],[68,"2022ebMdchE2pNL1SpqTm8g","setBool","isDead,true",3]],1],[54,"On Death VFX Finished",5,[[96,-87,[1,"9beIaB7L5Bwaf2xJd0ETgz"],[12,14,16,18,20,22,24,26,28,30,32,34],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"0dt6HJEJdEqrN4OypjakbW",1,0]],[105,"Temp-Model",false,3,[[79,"Sphere<ModelComponent>",-88,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",3,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,10,[1,"1djSG9rQ1PRKaSRPX7pCzT"],[4],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-89],[26,5]],[97,0.3,false,10,[1,"8fyg3bwUdIbKCfUKpuxnO5"],[[6,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-90],[26,7]],[128,3,[1,"edsi93K0hIHKnwFLPDFS3E"]],[104,4,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[46,"Stun",5,[-91],[2,"28wv4th1pNs6qDNkpOR9dx",1,0]],[117,44,[1,"92X5rq9oNDNouphSNFIziH"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",4]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",4]]],[35,"UI",1,[8],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,6,0,-2,8,0,3,8,0,13,36,0,2,1,0,20,45,0,27,43,0,28,36,0,3,4,0,3,35,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-2,5,0,2,1,0,7,1,0,-4,46,0,-1,10,0,-2,11,0,-3,13,0,-4,15,0,-5,17,0,-6,19,0,-7,21,0,-8,23,0,-9,25,0,-10,27,0,-11,29,0,-12,31,0,-13,33,0,0,3,0,-2,42,0,33,42,0,0,3,0,-1,38,0,-2,39,0,-3,6,0,-1,43,0,-2,35,0,-3,44,0,-4,37,0,1,7,0,1,7,0,1,7,0,1,7,0,0,6,0,2,6,0,1,9,0,1,9,0,1,9,0,1,9,0,1,47,0,1,47,0,17,39,0,2,8,0,-1,40,0,-2,41,0,-1,12,0,4,12,0,-1,14,0,4,14,0,-1,16,0,4,16,0,-1,18,0,4,18,0,-1,20,0,4,20,0,-1,22,0,4,22,0,-1,24,0,4,24,0,-1,26,0,4,26,0,-1,28,0,4,28,0,-1,30,0,4,30,0,-1,32,0,4,32,0,-1,34,0,4,34,0,-1,36,0,3,37,0,0,37,0,0,38,0,4,40,0,4,41,0,-1,45,0,9,1,2,7,3,4,7,5,8,7,46,91],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,42],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,-2,-3,18,8,26],[14,13,245,1,4,3,11,9,4,3,7,6,7,6,4,3,7,6,7,6,4,3,11,9,7,6,7,6,33,29,43,41,5,15,51,5,16,57]],[[[50,"P-CannonTower-Bullet-H3ll"],[132,"P-CannonTower-Bullet-H3ll",32,[-15,-16,-17],[[197,-14,[1,"2eB6S5fH9Gpa6sXL5ogwek"],[[7,"12ea43w32ZDAL2+IVCNZlsZ","play",-13]],[[7,"cc.ParticleSystem","play",-7],[7,"12ea43w32ZDAL2+IVCNZlsZ","play",-8],[7,"cc.ParticleSystem","play",-9],[7,"cc.ParticleSystem","play",-10],[7,"cc.ParticleSystem","play",-11],[7,"cc.ParticleSystem","play",-12]],[-2,-3,-4,-5,-6]]],[2,"e8sP6FFh9D17STW5Nbkx1m",-1,0]],[459,"VFX_Impact_Dome",32,1,[-19,-20,-21,-22],[-18],[2,"dbNSZnMP9Hz5h3LhBCiqQe",1,0]],[94,"Projectile",32,1,[-23,-24],[2,"4c76lXNq1MwbnUAT2P0rBZ",1,0]],[146,"Temporary",32,1,[-25,-26],[2,"7fW+IqqY1ABJgKtUjCjEXf",1,0]],[39,"Projectile Collision Fade Out",32,4,[[200,0.1,-27,[1,"53h3MEGrZHta1cWZlDZLcs"],3,[1,0.6,0.6,1],[1,0,0,0]]],[2,"91TFzB1KFDqo3PcLpjArLT",1,0]],[39,"Projectile Fade In",32,4,[[201,0,-28,[1,"eeNRsynBJH3YmBnheBo7iv"],3,[1,0.6,0.6,1]]],[2,"983Y4rFE1Er5oETxRL2kPn",1,0]],[94,"Bullet_Burst_Erupt",32,2,[-29],[2,"69u0dSlAVMIakyexU9DQSA",1,0]],[130,0.3,false,false,5,7,[1,"9a2SFfb2pD36rtEHfSlLe1"],[[4,null],6,0],[5],[3,2.5],[0],[0],[0],[0],[0],[0],[0],[3,0.4],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[119],[13,0.14285714285714285,[4,4282313980]],[13,0.4330357142857143,[4,4282652310]]],[[38,255],[9,0,1]]]]],[31,[0]],[78,true,true,[0],[30,1,[8,[0,0.14358974358974358,0.9948717948717949],[[6,2,0.8074074074074075,-3.0044444444444456,-3.0044444444444456],[6,2,0.4925925925925926,-1.4814814814814814,-1.4814814814814814],[6,2,0.07777777777777778,0.09219858156028381,0.09219858156028381]]]],[12,1,1.5,[8,[0,0.3,1],[[6,2,0.24814814814814815,3.3703703703703707,3.3703703703703707],[6,2,0.8148148148148148,0.6098765432098767,0.6098765432098767],[11,2,1]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-30],[26,5]],[64,"Bullet_Burst_Fragments",32,2,[-31],[2,"a4cMVywfFDpKx1g/RzcNTz",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[73,0.5,false,false,9,[1,"67jTHfBghAQ4VWX4TpejZT"],[[6,null],6,0],[5],[23,3,0.05,0.2],[0],[0],[3,5],[0],[0],[0],[0],[23,3,0.3,1],[3,1.5],[0],[0],[[25,[23,3,8,16]]],[20,true,[16,1,[33,[[13,0.026785714285714315,[4,4292667901]],[13,0.14732142857142858,[4,4284257511]],[13,0.49776785714285715,[4,4283972592]]],[[9,255,0.12946428571428573],[9,0,1]]]]],[371,true,0,true,0.4,0.5,0.6981317007977318,[0]],[32,true,[30,1,[8,[0,1],[[41,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[41,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[110,true,[0],[0],[83,3],[30,1,[8,[0,0.4897435897435897,1],[[11,2,1],[6,2,0.34814814814814815,-1.1446540880503149,-1.1446540880503149],[11,2,0.14814814814814814]]]]],[15,[0],[0],[0]],[310,0,[12,1,5,[8,[0,1],[[126,1,1,1,1],[106,1,1,1,1,1]]]],[12,1,5,[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,5,[8,[0,0.14102564102564102],[[106,-0.007407407407407407,-1,1,-1,1],[106,1,7.143434343434343,1,7.143434343434343,1]]]],[0]],[58,true,[0],[0],[12,1,40,[8,[0,1],[[126,1,1,1,1],[106,1,1,1,1,1]]]]],[138,true,2,2,1,[83,4],[44,3,3]],[19,[0],[0],[5],[5],-32],[26,7]],[94,"Bullet_Burst_Crossflash",32,2,[-33],[2,"de1W2FzAVHnqAB3dLU5VZo",1,0]],[130,0.3,false,false,5,11,[1,"213oYTNXdPtbAntojni1LN"],[[8,null],6,0],[5],[3,2.5],[0],[0],[0],[0],[0],[0],[0],[3,0.4],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.07589285714285715],[13,0.14285714285714285,[4,4281308376]],[13,0.4330357142857143,[4,4279965508]]],[[38,255],[9,0,1]]]]],[31,[0]],[32,true,[30,1,[8,[0.10512820512820513,0.4205128205128205,1],[[41,2,1,-2.6093189964157695,1,-2.6093189964157695,1],[6,2,0.3296296296296296,-1.148148148148149,-1.148148148148149],[373,2,1,1]]]],[30,1,[8,[0,0.14358974358974358,0.9948717948717949],[[6,2,0.8074074074074075,-3.0044444444444456,-3.0044444444444456],[6,2,0.4925925925925926,-1.4814814814814814,-1.4814814814814814],[6,2,0.07777777777777778,0.09219858156028381,0.09219858156028381]]]],[12,1,1.5,[8,[0,0.3,1],[[6,2,0.24814814814814815,3.3703703703703707,3.3703703703703707],[6,2,0.8148148148148148,0.6098765432098767,0.6098765432098767],[11,2,1]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-34],[26,9]],[64,"VFX_SparkBurst",32,2,[-35],[2,"desQDpe4lBLqWK3BNIZBp4",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[276,false,false,13,[1,"50drXVBB9KapaBE7bV53yq"],[10],[5],[23,3,0.02,0.05],[0],[0],[23,3,8,15],[0],[0],[0],[0],[23,3,0.3,0.5],[3,4],[0],[0],[[25,[3,15]]],[20,true,[16,1,[33,[[119],[43,0.03794642857142857],[13,0.1361607142857143,[4,4282507775]],[13,0.5602678571428571,[4,4281278615]],[13,0.9017857142857142,[4,4280098096]]],[[38,255],[9,255,0.9352678571428571],[9,0,1]]]]],[489,true,0,0.3,1,[3,1]],[32,true,[30,1,[8,[0,0.6820512820512821,1],[[11,2,1],[6,2,0.6,-1.4130434782608698,-1.4130434782608698],[189,2,-2.143369175627239,-2.143369175627239]]]],[0],[0],[0]],[110,true,[0],[0],[0],[30,1,[8,[0,0.6282051282051282,1],[[11,2,1],[6,2,0.11851851851851852,-0.5502645502645503,-0.5502645502645503],[11,2,0.02962962962962963]]]]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[123,true,2,2,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-36],[99,1,0.1,11]],[370,true,true,0.5,false,false,5,[null,null],2,[1,"5a1EuyI+lGkLpq702tZQ64"],[5],[3,6],[3,6],[3,6],[0],[3,-1.5707963267948966],[0],[0],[0],[3,0.4],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.08258928571428571],[13,0.1383928571428572,[4,4278245119]],[13,0.5066964285714286,[4,4280953577]],[13,0.859375,[4,4281542722]]],[[9,255,0.1294642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,10,[8,[0,0.27692307692307694,1],[[41,2,0.45555555555555555,1.805555555555556,1,1.805555555555556,1],[6,2,0.8148148148148149,0.741741741741742,0.741741741741742],[72,2,1,1,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[374,true,true,[83,20],[83,180],[161,10.471975511965978,180]],[24,[0],[0]],[19,[0],[0],[5],[5],-37],[375,4,0,12,13]],[366,1,4,2,3,[1,"ffWXc2J3FFyrXI/OfIDjKi"],[[0,null],6,0],[5],[3,1],[0],[0],[0],[0],[0],[0],[0],[3,1],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[119],[13,0.5245535714285714,[4,4294946672]],[43,1]],[[38,255]]]]],[31,[0]],[32,true,[30,1,[8,[0,0.5076923076923077,1],[[41,2,1,-0.07222222222222197,1,-0.07222222222222197,1],[11,2,0.8518518518518519],[72,2,1,1,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[3,-6.283185307179586]],[24,[0],[0]],[147,true,false,[3,5],[3,0.7],[56,[4,4294901974]],[16,1,[33,[[87,[4,4293656746]],[13,0.6383928571428572,[4,4284226069]]],[[9,255,0.8883928571428572],[9,0,1]]]],-38],[26,1]],[198,false,0,3,[1,"70B49ajw5HRbjd0cdxJEoh"],[[2,null],6,0],[56,[4,4294963651]],[23,3,0.05,0.1],[0],[0],[3,1],[0],[0],[44,3,6.283185307179586],[0],[23,3,1,1],[0],[0],[3,5],[20,true,[16,1,[33,[[13,0.026785714285714315,[4,4291435445]],[13,0.2767857142857143,[4,4285071381]],[13,1,[4,4282851095]]],[[9,255,0.4888392857142857],[9,0,1]]]]],[187,true,0,true,0.1,1,0.17453292519943295,[0],[1,0,180,0]],[49,[30,1,[8,[0,1],[[41,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[41,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[21,[3,6],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[12,1,40,[8,[0,1],[[126,1,1,1,1],[106,1,1,1,1,1]]]]],[138,true,2,2,1,[83,4],[44,3,2]],[19,[0],[0],[5],[5],-39],[26,3]]],0,[0,2,1,0,-1,15,0,-2,8,0,-3,10,0,-4,12,0,-5,14,0,3,2,0,3,5,0,3,7,0,3,9,0,3,11,0,3,13,0,3,6,0,0,1,0,-1,3,0,-2,4,0,-3,2,0,-1,15,0,-1,7,0,-2,9,0,-3,11,0,-4,13,0,-1,16,0,-2,17,0,-1,5,0,-2,6,0,0,5,0,0,6,0,-1,8,0,4,8,0,-1,10,0,4,10,0,-1,12,0,4,12,0,-1,14,0,4,14,0,4,15,0,4,16,0,4,17,0,9,1,39],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,10,5],[145,86,4,3,20,19,10,18,33,29,10,18,146,147]],[[[149,[[150,[120,[-8,-9,-10,-11,-12],[[121,-5,-4],[84,0,false,-7,-6,[[91,"intro"]]]],-3,-2,-1]],[203,"Glow",[120,[-18,-19,-20,-21],[[121,-17,-16]],-15,-14,-13]]],[{},"intro",4,[113,2]]],[65,"Entry"],[65,"Any"],[65,"Entry"],[65,"Exit"],[71,"SpeedUp_Intro",[75,0]],[71,"Empty",[180]],[65,"Exit"],[65,"Any"],[71,"Button_Glow",[75,1]]],0,[0,22,2,0,23,4,0,24,1,0,14,6,0,15,1,0,14,5,0,15,2,0,-1,1,0,-2,4,0,-3,2,0,-4,5,0,-5,6,0,22,8,0,23,7,0,24,3,0,14,9,0,15,3,0,-1,3,0,-2,7,0,-3,8,0,-4,9,21],[0,0],[16,16],[62,47]],[[[50,"P-GunTower-Bullet-BullzI"],[132,"P-GunTower-Bullet-BullzI",32,[-9,-10,-11,-12,-13,-14],[[197,-8,[1,"beD6AbwclCQbdYQiBsHcVK"],[[7,"12ea43w32ZDAL2+IVCNZlsZ","play",-7]],[[7,"cc.ParticleSystem","play",-3],[7,"12ea43w32ZDAL2+IVCNZlsZ","play",-4],[7,"cc.ParticleSystem","play",-5],[7,"cc.ParticleSystem","play",-6]],[-2]]],[2,"e8sP6FFh9D17STW5Nbkx1m",-1,0]],[220,"Projectile",32,1,[[[222,"Quad<ModelComponent>",false,-15,[1,"0bELSWeDdO65djlx1RiPJl"],[34],7],-16,-17],4,1,1],[2,"caJ4o2c5FOda7/HE7o5QFR",1,0],[1,0.15,0.15,1]],[64,"Bullet_Burst_Flash",512,1,[-18],[2,"8awZgQiLFMo788WeoWcrPq",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[130,0.5,false,false,1,3,[1,"807LSdEE5OBp7IMkuUEYXk"],[[0,null],6,0],[5],[3,1],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[0],[3,0.15],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[119],[13,0.05357142857142855,[4,4292723871]],[13,1,[4,4284358679]]],[[38,255],[9,255,0.6026785714285714],[9,0,1]]]]],[77,0,[3,1]],[32,true,[30,1,[8,[0,0.1794871794871795,0.7538461538461538,0.9794871794871794],[[6,2,0.6148148148148148,1.8227513227513228,1.8227513227513228],[6,2,0.8814814814814815,0.9950617283950617,0.9950617283950617],[6,2,0.6962962962962963,-1.4444444444444435,-1.4444444444444435],[189,2,-4.6222222222222245,-4.6222222222222245]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-19],[26,1]],[64,"Bullet_Burst_Square",32,1,[-20],[2,"29U8hsJUlB8JTNpooxjqiO",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[64,"Bullet_Burst_Fragments",32,1,[-21],[2,"5f4rBTIrlFLIY0/YUL0d89",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[221,"Bullet_Trail",false,512,1,[-22,-23],[2,"4b8ydGY/tOzKGDYewdhT94",1,0]],[146,"Temporary",32,1,[-24,-25],[2,"c5GgaVw6FFeY9mnByY+aKX",1,0]],[39,"Projectile Collision Fade Out",32,8,[[200,0.2,-26,[1,"19qrhSA9JAiY0e2WHN8oh5"],2,[1,1,1,1],[1,0,0,0]]],[2,"f0ugCEKBdHQ6kkJpq8eD1a",1,0]],[39,"Projectile Fade In",32,8,[[201,0,-27,[1,"efl6QMDlhPKIhp/XlQhmzg"],2,[1,0.15,0.15,1]]],[2,"7eZgQmg7BJiKSV6+V3wpmf",1,0]],[130,0.25,false,false,1,5,[1,"2b2XIBV3ZD/r5Jd0n4bDrC"],[[2,null],6,0],[5],[3,0.8],[0],[0],[0],[0],[0],[23,3,0.7853981633974483,0.7853981633974483],[0],[3,0.24],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[87,[4,33554431]],[13,0.044642857142857144,[4,32281173]],[13,0.8191964285714286,[4,22023713]]],[[38,255],[9,255,0.18749999999999997],[9,0,1]]]]],[31,[0]],[32,true,[12,1,1.5,[8,[0,0.30256410256410254,1],[[6,2,0.09629629629629628,2.7575757575757573,2.7575757575757573],[6,2,0.7777777777777778,0.9883040935672519,0.9883040935672519],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-28],[26,3]],[73,0.5,false,false,6,[1,"bem915BoBG47GEjN4PVAEW"],[[4,null],6,0],[5],[23,3,0.05,0.15],[0],[0],[23,3,0.2,0.8],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.2,0.4],[0],[0],[0],[[25,[23,3,4,8]]],[20,true,[16,1,[33,[[13,0.026785714285714315,[4,4293187241]],[13,0.14732142857142858,[4,4291465556]],[13,0.7142857142857143,[4,4282851095]]],[[9,255,0.12946428571428573],[9,0,1]]]]],[208,true,3,2,true,0.25,[0]],[32,true,[30,1,[8,[0,1],[[41,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[41,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[21,[3,6],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,40,[8,[0,1],[[126,1,1,1,1],[106,1,1,1,1,1]]]]],[138,true,2,2,1,[83,4],[44,3,2]],[19,[0],[0],[5],[5],-29],[108]],[198,false,0,7,[1,"6dAiuo47BO6rg9Yf8NI3vX"],[[5,null],6,0],[56,[4,2412752452]],[23,3,0.05,0.1],[0],[0],[3,1],[0],[0],[44,3,6.283185307179586],[0],[23,3,1,1],[0],[0],[3,2],[20,true,[16,1,[33,[[13,0.026785714285714315,[4,4293187241]],[13,0.2767857142857143,[4,4291465556]],[13,1,[4,4282851095]]],[[9,255,0.12946428571428573],[9,0,1]]]]],[187,true,2,true,0.1,1,0.17453292519943295,[0],[1,0,180,0]],[49,[30,1,[8,[0,1],[[41,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[41,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[21,[3,6],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[12,1,40,[8,[0,1],[[126,1,1,1,1],[106,1,1,1,1,1]]]]],[138,true,2,2,1,[83,4],[44,3,2]],[19,[0],[0],[5],[5],-30],[108]],[224,7,[1,"02KzFZOkpHzqdL7Lhw+09B"],[[null,6],0,6],[5],[3,1],[0],[0],[3,5],[0],[0],[0],[0],[3,5],[0],[0],[0],[[25,[3,1]]],[122,[5]],[31,[0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[147,true,false,[3,1],[3,3],[16,1,[127,[[87,[4,4294287463]],[13,1,[4,4283307025]]]]],[5],-31],[108]],[225,0,0.5,false,2,[1,"02KzFZOkpHzqdL7Lhw+09B"],[[null,8],0,6],[56,[4,16777215]],[0],[0],[0],[0],[0],[0],[0],[0],[3,5],[0],[0],[0],[[25,[3,1]]],[122,[5]],[31,[0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[147,true,false,[3,0.2],[3,0.5],[16,1,[127,[[87,[4,4285082325]],[13,1,[4,4286930909]]]]],[5],-32],[108]],[226,1,[null,null],2,[1,"e6875CztlE0JXWurEQgEej"],[5],[3,1],[0],[0],[0],[0],[0],[0],[0],[3,1],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[127,[[119],[13,0.49999999999999994,[4,4285082325]],[43,1]]]]],[31,[0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[227,false,[0],[0],[5],[5],-33],[228,2]]],0,[0,2,1,0,-1,4,0,3,3,0,3,9,0,3,5,0,3,6,0,3,10,0,0,1,0,-1,3,0,-2,5,0,-3,6,0,-4,7,0,-5,2,0,-6,8,0,0,2,0,-2,15,0,-3,16,0,-1,4,0,4,4,0,-1,11,0,-1,12,0,-1,13,0,-2,14,0,-1,9,0,-2,10,0,0,9,0,0,10,0,4,11,0,4,12,0,4,13,0,4,14,0,4,15,0,4,16,0,9,1,33],[0,0,0,0,0,0,0,0,0],[-1,5,-1,5,-1,-1,-2,10,-2],[48,44,42,39,10,10,31,49,31]],[[[50,"SM_TowerLaserBody_01"],[47,"SM_TowerLaserBody_01",[-2],[2,"c3aOBtjPNU96Ex7+KDGHdh",-1,0]],[53,"SM_TowerLaserBody_01",1,[[52,-3,[1,"c79Byda9tSsLPjCdZFbGni"],[0],[34],1]],[2,"99ijk+7RNW9aCPpwsQ5cLp",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[1,148]],[[[57,".bin",3429205708,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":72464,"length":28560,"count":7140,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":72464,"count":1294,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.49748557806015015,-0.5,-0.4989933371543884],"maxPosition",8,[1,0.49949654936790466,0.5,0.49899348616600037]]],-1],0,0,[],[],[]],[[[57,".bin",850226558,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14560,"length":1536,"count":384,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14560,"count":260,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-1,-0.5],"maxPosition",8,[1,0.5,1,0.5]]],-1],0,0,[],[],[]],[[[57,".bin",3434579268,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1344,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1344,"count":24,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,-0.5],"maxPosition",8,[1,0.5,0.5,0.5]]],-1],0,0,[],[],[]],[[[57,".bin",3383603168,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":224,"length":24,"count":6,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":224,"count":4,"stride":56},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_texCoord1","format":21,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,0],"maxPosition",8,[1,0.5,0.5,0]]],-1],0,0,[],[],[]],[[[57,".bin",1556490249,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":18720,"length":2328,"count":582,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":18720,"count":390,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3769160509109497,-0.5744736194610596,2.0313144943884254e-8],"maxPosition",8,[1,0.3769153356552124,0.5935848951339722,0.6603884100914001]]],-1],0,0,[],[],[]],[[[62],[47,"SM_EnemyMamooth_01",[-2],[2,"cd95syhwpUepqE3C3l751A",-1,0]],[53,"SM_EnemyMamooth_01",1,[[52,-3,[1,"e25UQYor5ZNbIp+/V5aQLy"],[0],[34],1]],[2,"8fxyDu/BpQqqQZ5UcV64Vs",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[246,247]],[[[63,"SM_EnemyMamooth_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[112,"0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTiling_Offset",8,[2,1,2,0,0],"tintColor",8,[4,4294967295],"mainTexture",6,0]],11]]],0,0,[0,0],[30,12],[19,25]],[[[50,"SM_TowerCometTBody_01"],[47,"SM_TowerCometTBody_01",[-2],[2,"93NMATgvJXN5P2Z0Pbx6xd",-1,0]],[53,"SM_TowerCometTBody_01",1,[[52,-3,[1,"36LCcIeKVRp7Mac4l4WlzY"],[0],[34],1]],[2,"b1ynI0NRlTcr9Bc5g2lJQg",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[1,149]],[[{"name":"Icon_Currency Yellow 100","rect":{"x":0,"y":0,"width":92,"height":92},"offset":{"x":0,"y":0},"originalSize":{"width":92,"height":92},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[21],[248]],[[[50,"Holder_TowerUpgradeMenu"],[452,"Holder_TowerUpgradeMenu",33554432,[-13,-14,-15,-16,-17,-18,-19],[[[18,-5,[1,"feTD25fIdBUJ5FKqoR7YZF"],[5,220,220]],[90,-6,[1,"18PnzBvKpPm5jHmDihqUZ9"]],[245,false,-7,[1,"3d8TODryFLQKtlwniudDAF"],[59,60,61]],-8,[141,-10,[1,"ffZ2Ct4zBH+Zt94rHKmSpg"],-9],[317,-11,[1,"99UzDZa6pHQ4VtG5vEXqut"],[[522,"AE_FinishedExit"]]],[55,-12,[1,"d9fh88t6RN+rL3kvYn5R3E"]]],4,4,4,1,4,4,4],[196,"46k0m6lkdE7LjR/vInpkl2",-4,0,[-1,-2,-3]],[1,1.2,1.2,1]],[207,"Holder_LevelUp Button",33554432,[-37,-38,-39,-40,-41],[[[18,-20,[1,"44xZ20LKBKuq/Fx0W3Wsmh"],[5,70,70]],[245,false,-21,[1,"59zRGpNq9MBJQHbD03Bifu"],[40,41,42,43,44]],-22,[574,1,-34,[1,"97UEfLZFtJwb/OHVDl/s3H"],[[7,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-32],[7,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-33]],-31,[[68,"b2629pBo9BDtrAXL8hN6QoS","setInteractable","true",-28],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",-29],[68,"2022ebMdchE2pNL1SpqTm8g","setBool","hasEnergy,true",-30]],[[68,"b2629pBo9BDtrAXL8hN6QoS","setInteractable","false",-25],[7,"99672sUg5NFw4x7bEPAiyHE","activate",-26],[68,"2022ebMdchE2pNL1SpqTm8g","setBool","hasEnergy,false",-27]],[[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",-24]],[[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exitClicked",-23]]],[286,true,-36,[1,"82+Qldi0dJcJTsSoTpzmOs"],-35]],4,4,1,4,4],[2,"175KhMRQRDzrwjR+Y/XD8F",1,0]],[207,"Holder_Destroy Button",33554432,[-52,-53,-54,-55],[[[18,-42,[1,"a8t4CAjStKZ7bw9sbDN8W9"],[5,70,70]],[259,false,-43,[1,"5egN2yUedMtbS2pcEBCAbj"],[55,56,57],58],-44,[575,1,-49,[1,"13JiA8f5JNnJCW4z2ax6z3"],[[7,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-48]],-47,[[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",-46]],[[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exitClicked",-45]]],[141,-51,[1,"99AQyBFexBdqAz+WiT48yy"],-50]],4,4,1,4,4],[2,"basO3xNKRMubx47MkKLOyR",1,0]],[424,"Panel_Color",false,33554432,[-59,-60,-61,-62,-63],[[95,-56,[1,"7bXwnyxAhB4aX3qjxTGhLy"],[5,200,95.88],[0,0.5,0]],[51,0,-57,[1,"84pelSshJM/oKL/JsKOT35"],[4,4293450459],23],[517,1,2,6,3,-58,[1,"a5qWAEpTdJbI47FYckepiQ"]]],[2,"37Eb9ZL+JM5azHm5AEqitc",1,0],[1,0,-50,0]],[76,"Holder_Stats",33554432,4,[-69,-70,-71],[[95,-64,[1,"13XyMRHdVLQIvI+P8s5AK2"],[5,154,30],[0,0.5,1]],[389,1,1,32,-65,[1,"fcMuesJMtISpiD46EkllZo"]],[90,-66,[1,"6eV5ccgJ9N+KR7mkl6SOk4"]],[55,-67,[1,"3cr5ZP96tKW5Va7MruvXjo"]],[319,false,0,-68,[1,"918uPUE1lI4JKcElTdrzx3"],16]],[2,"00F6e/jqNJ/4guBTYLh37Z",1,0],[1,0,39,0]],[236,"Holder_Energy Cost (NotEnough)",false,33554432,2,[-75,-76,-77],[[18,-72,[1,"07dTvsP8BLhqn+uWb/Lifq"],[5,44,44]],[51,0,-73,[1,"9fcaP+hWJBIZJg/WV8vny1"],[4,4282974275],39],[55,-74,[1,"6aYoqxCg9P65/f88PWOcwe"]]],[2,"f70HYrixNJO4nwASG1ZutW",1,0],[1,0.729,-20.353,0]],[205,"Exit_Overlay",false,33554432,1,[[18,-78,[1,"40G84+UctAU629wttly9ve"],[5,30000,30000]],[51,0,-79,[1,"a0g/WKr/9Is4sQhLqQrCIi"],[4,16777215],0],[525,-81,[1,"1ayGJX7NFLw4ZV5ksbBfGW"],[[7,"cd32dlNM6hEkokUGHlLV8y+","raise",-80],[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",1]],1],[248,-82,[1,"cbZcJ/uFpCl77aeMGsOhD5"]],[192,3,-83,[1,"2dmSthkmBFhqDzGkvuZcgk"]]],[2,"559OljkmVJbb40T1JglvS/",1,0]],[85,"Holder_Build_TierUp",33554432,1,[-87,-88,-89],[[48,-84,[1,"07Hix++0FChJt1CK1BGJzq"]],[202,0,-85,[1,"25OwO8VUVOGJ6dBp2oN5Or"]],[55,-86,[1,"4bTNnTJ7hAs4zW4ZMRJNla"]]],[2,"165POIGiVCTbJeF4ypPaek",1,0]],[142,"Button_Color",33554432,2,[[[18,-90,[1,"d4LfLKWjlEJY6W2JpIeBGY"],[5,70,70]],[51,0,-91,[1,"8esM/JTn9B7YbGHX7fq3AA"],[4,4287102766],32],-92,[410,-94,[1,"87gw6T4BxNh5dYJse8gt5P"],-93]],4,4,1,4],[2,"72SQCf7T1AzY8DVNIrLRbf",1,0]],[76,"Holder_Energy Cost",33554432,3,[-97,-98,-99,-100],[[18,-95,[1,"7aSgJMZq1BYqsli3WlOVyC"],[5,44,44]],[51,0,-96,[1,"e0uqqVXL9Fh7G+Ri+Q2Dkk"],[4,4282974275],54]],[2,"63Mb7uazZCLJFZSURy1+Xa",1,0],[1,0.729,-20.353,0]],[85,"Holder_Panel",33554432,1,[-102,-103,-104,-105],[[48,-101,[1,"60YTC0scBNvY8ijv7+lrvd"]]],[2,"b0BnCnappBA6FDTZpeO6Zd",1,0]],[76,"Stats 01",33554432,5,[-108,-109,-110],[[18,-106,[1,"fczN2XfJREX4Hhukn01kDz"],[5,30,30]],[210,1,18,1,-107,[1,"fbt1T5BvZPFYyAKTfg4gNB"]]],[2,"cdN/iXwS9EWaea7ROuvyKb",1,0],[1,-62,-33,0]],[76,"Stats 02",33554432,5,[-113,-114,-115],[[18,-111,[1,"1cGEoxqEdBuoIi8pQKidnI"],[5,30,30]],[210,1,18,1,-112,[1,"fbt1T5BvZPFYyAKTfg4gNB"]]],[2,"0325m7PSVKEJgP6FqjArxY",1,0],[1,0,-33,0]],[76,"Stats 03",33554432,5,[-118,-119,-120],[[18,-116,[1,"32ucnWLLRB54Rvoqj7OGDZ"],[5,30,30]],[210,1,18,1,-117,[1,"fbt1T5BvZPFYyAKTfg4gNB"]]],[2,"35oTOUcq5LW6sLAKY0sSNr",1,0],[1,62,-33,0]],[133,"LeftLimit_Bar",33554432,[-124,-125],[[18,-121,[1,"221k4fo6FOlacpqtXy02KU"],[5,2,109.88]],[51,0,-122,[1,"f3YxgrjCdOprm/6AiycAMU"],[4,4281242111],19],[380,5,-7,-7,112,1,-123,[1,"1dA5uK9RVP1JAsEfI8Ih4g"],4]],[2,"c8jDI6C/pHrJ11x+wmVo/Q",1,0],[1,-105,41.94,0]],[133,"RightLimit_Bar",33554432,[-129,-130],[[18,-126,[1,"cbl1hOOtxGh6bfnYXUV61p"],[5,2,109.88]],[51,0,-127,[1,"e9AOdaBVVEaYXynU8UjbWH"],[4,4281242111],22],[380,5,-7,-7,112,1,-128,[1,"1dA5uK9RVP1JAsEfI8Ih4g"],4]],[2,"6aFr9scUxMZoHr8tWuSoZn",1,0],[1,105,41.94,0]],[206,"Holder_Upgrade",false,33554432,1,[-134,-135],[[48,-131,[1,"b3U/rEAQVLfLVSP4rhcy/Q"]],[90,-132,[1,"37+sWMnJ1Mi52Rn5c0dlQ5"]],[55,-133,[1,"dbREbEW9dLIbVcLN+6LToz"]]],[2,"34GO02mHFBr7SAk+hQxhbP",1,0]],[76,"Holder_Energy Cost",33554432,2,[-138,-139,-140],[[18,-136,[1,"afG8+EcnZD8KEJW6KGBu5G"],[5,44,44]],[51,0,-137,[1,"183OjHOgJJOa+pFiowVcXs"],[4,4282974275],36]],[2,"19ZqgPfa5OjLHSCLYS5Npq",1,0],[1,0.729,-20.353,0]],[142,"Text_Cost",33554432,18,[[[18,-141,[1,"12yJMaHNxFaLwswebaIqIy"],[5,30,30]],-142,[294,false,1,-143,[1,"57RJpKQDFP2JLo0LvnmXGV"],[4,4281532425]],[145,-145,[1,"ccFAQ4FMNNOqk2FPsUDchC"],-144]],4,1,4,4],[2,"6eRHsf4mFMMoj6fnBa25Mb",1,0]],[142,"Text_Cost",33554432,6,[[[18,-146,[1,"67yiIdZZNAR5VrI0bBa34y"],[5,30,30]],-147,[294,false,1,-148,[1,"c32gWcJ0NMGYXn8AX1x6Oc"],[4,4281532425]],[145,-150,[1,"f29Ko0SKZLqL7LWkQWWKOh"],-149]],4,1,4,4],[2,"eevTAbWt1MGLzXN5JU4lba",1,0]],[142,"Text_Cost",33554432,10,[[[18,-151,[1,"1c8w954HZOQbU1RFArhikS"],[5,30,30]],-152,[294,false,1,-153,[1,"fad93H3HJPcpYp4xRPkpEe"],[4,4281532425]],[145,-155,[1,"f9OptP9+pIPraBxOXfM1ry"],-154]],4,1,4,4],[2,"981uAWVvdMTLnwHqlxnhpO",1,0]],[76,"Holder_TowerInfo",33554432,1,[-163,4],[[18,-156,[1,"1bYEPoE0pG65LCqAUKntwF"],[5,220,100]],[577,"Destroy {data.name}","Destroy {data.name} to receive {data.value} of energy","Level up {data.name}",-162,[1,"1d2jF0vcxMGYvI/oGhONKZ"],[[7,"99672sUg5NFw4x7bEPAiyHE","activate",5]],[[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",5]],[[7,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-161]],[[7,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-160]],[[7,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-159]],[[7,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-158]],[[7,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-157]]]],[2,"bb7Kak23hMTYfuoFKHjabu",1,0],[1,0,130,0]],[159,"Text_TowerName",33554432,4,[[[95,-164,[1,"fc0HSpD75J25NzupQ23Ge1"],[5,120,25.2],[0,1,0.5]],-165,[145,-167,[1,"6eejTbgQRC7LrxKVI9MCdz"],-166]],4,1,4],[2,"23iu6lYIBHN6I4xCIJ8ybI",1,0],[1,90.364,83.28,0]],[159,"Text_Tower Info",33554432,4,[[[18,-168,[1,"cdQZe3PIlCRra+rHQEtWhd"],[5,170,22.68]],-169,[145,-171,[1,"43JTK5afpGCJuhF78cpDcm"],-170]],4,1,4],[2,"87A8IQyNFBc6ZZaI8HCJ/D",1,0],[1,0,53.34,0]],[142,"Text_Stats Number",33554432,12,[[[18,-172,[1,"d3XlAIH9hDTqGjzuV0WnKi"],[5,16.34,22.68]],-173,[145,-175,[1,"e7OPaJcT9EXqjVYHE/ayUw"],-174]],4,1,4],[2,"e4ePpX+8RNC4LpAVRdqVrK",1,0]],[142,"Text_Stats Number",33554432,13,[[[18,-176,[1,"8949iDq/JGbIy6ofY/9q+d"],[5,12.63,22.68]],-177,[145,-179,[1,"b8NnaKePhMf7V867NGsEO1"],-178]],4,1,4],[2,"e4HZJHQd9AC786QQGG8+fP",1,0]],[142,"Text_Stats Number",33554432,14,[[[18,-180,[1,"a1Yz/0pMJNxIDJ6ZzR3RCW"],[5,8.19,22.68]],-181,[145,-183,[1,"52JtB3ZvxDn59CLjLT66gr"],-182]],4,1,4],[2,"66KRUQl3REq4okC86oP4i9",1,0]],[4,["0fJEdVoOpA/qcZPGFboeiN"]],[4,["0fJEdVoOpA/qcZPGFboeiN"]],[4,["0fJEdVoOpA/qcZPGFboeiN"]],[85,"Select_VFX",33554432,2,[-186,-187],[[48,-184,[1,"b1qxcV+r1HqpS4C+OgXvwu"]],[90,-185,[1,"77+8YxrFNFOqyiPZmpCOES"]]],[2,"c5pBFHrvdJIpBwOcBI8/eD",1,0]],[85,"Select_VFX",33554432,3,[-190,-191],[[48,-188,[1,"ffIyiamz1KdLuAKXK+cvlX"]],[90,-189,[1,"9ayuDEovFB+4YgC+4Iaeze"]]],[2,"96uGZKxMZCWrelsR7NZWbB",1,0]],[205,"Input Blocker",false,33554432,1,[[18,-192,[1,"42Mnm1CQVE6a66Pf2UXLhd"],[5,220,220]],[162,45,100,100,-193,[1,"ceBbEgr19DVZTa7ciahN9I"]],[248,-194,[1,"145szD8V1JTZsbv3qb5dUN"]],[55,-195,[1,"a35tGHlbxLa6+mYj9G4Uj2"]]],[2,"c36qsQcKNFOp008oYX4pQh",1,0]],[425,"Dot_Color",33554432,[-198],[[18,-196,[1,"f2NarMN2lGZ5wm+/KlHQDS"],[5,16,16]],[51,0,-197,[1,"f1DI3Lk0JKW429WYv4DSf2"],[4,4281532425],3]],[2,"bdGaDp+OpMArSo8l+2WjJR",1,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,1],[1,0,0,45]],[39,"Dot_Outline",33554432,34,[[18,-199,[1,"4dDBbQBixH4ZrVY1qQCDXr"],[5,16,16]],[70,1,0,-200,[1,"24akuhbnZCdrkW9gD1egDi"],[4,4293450459],2],[162,45,32,32,-201,[1,"69w2t2jCFGFLaR7rW1KcA+"]]],[2,"fad6l15HhESar9QeacgpaJ",1,0]],[300,"Holder_Tower Model Position (PH)",33554432,[[95,-202,[1,"b3vBe4YtZLMqFUeV2RjGjk"],[5,40,40],[0,0.5,0]],[528,0,false,-203,[1,"48cwpYQSVIn6sJxj1YVTT1"],9],[505,9,17.5,-19.230000000000018,1,-204,[1,"c9BunKH0VCwbKj7JqvuMdx"],4]],[2,"13x/pFi2BJdIQIHpxB9t8j",1,0],[1,-62.5,7.430000000000007,0]],[66,"Text_Stats Name",33554432,12,[[18,-205,[1,"c5QOStT3tKrZazryWBdUyJ"],[5,29.9,16.58]],[325,"attack",14,14,13.95,false,false,-206,[1,"65Jio7tZdHj7CH2HbN6vmT"],[4,4282187811],10],[333,0.1,-207,[1,"23fidhJKBNGJepuMmH103h"],[4,4282187811]]],[2,"89DUJChihE1btBNNYNVN3U",1,0],[1,0,24.743,0]],[66,"Text_Stats Name",33554432,13,[[18,-208,[1,"2cceJPYfFPrJjtg9AO17zt"],[5,28.259999999999998,16.58]],[325,"speed",14,14,13.95,false,false,-209,[1,"a7vfOQBjdDUIrzJ6gxhsj1"],[4,4282187811],12],[333,0.1,-210,[1,"d0F8SyfbZK+bTpP5VqeSUz"],[4,4282187811]]],[2,"e2DWI4Mr5AkZSdVGzoQk4r",1,0],[1,0,24.743,0]],[66,"Text_Stats Name",33554432,14,[[18,-211,[1,"3cVue3OsxO9rbvQJD0zbX9"],[5,28.05,16.58]],[325,"range",14,14,13.95,false,false,-212,[1,"a6PJmwr2FDGILRwp79bfKw"],[4,4282187811],14],[333,0.1,-213,[1,"1fmfzVImVPII5FUJNWOvik"],[4,4282187811]]],[2,"09n7hSD2hPA7R1at268Dwa",1,0],[1,0,24.743,0]],[76,"Holder_Bars",33554432,4,[15,16],[[18,-214,[1,"33YAjLCdFJJ4zIiUKbQYb/"],[5,0,0]]],[2,"e3i6N3eR1D54zbrShPNd37",1,0],[1,0,6,0]],[66,"Top_Bar",33554432,15,[[18,-215,[1,"20LsKMYbBHeIpyWlLAdbvM"],[5,8,2]],[51,0,-216,[1,"62HxJA2aZBRrlxTcbDYBds"],[4,4281242111],17],[284,1,1,-217,[1,"35eW0mEzpB+Zfx5bNmz2Gg"]]],[2,"bdhGER8stMeJpmMRgWWZkf",1,0],[1,3.5,53.94,0]],[66,"Bot_Bar",33554432,15,[[18,-218,[1,"56xRi782xG0ZEhP11QDNKe"],[5,8,2]],[51,0,-219,[1,"980EC8q5JDyogCBo2KP5ti"],[4,4281242111],18],[284,4,1,-220,[1,"bfBhSskMhNMa/Q/935VRIo"]]],[2,"9cdBtqDClJtKZv1R3U6sEK",1,0],[1,3.5,-53.94,0]],[66,"Top_Bar",33554432,16,[[18,-221,[1,"bdYrUnbLNMN7sRLHCfn59X"],[5,8,2]],[51,0,-222,[1,"fcr39KHIxFDLaWLuhDruGq"],[4,4281242111],20],[284,1,1,-223,[1,"434NMcwoBHabhi1b3dheux"]]],[2,"67GXMOtwJM5JIU8jmlkB1v",1,0],[1,-3.5,53.94,0]],[66,"Bot_Bar",33554432,16,[[18,-224,[1,"a2kd/fTXdBPJHLpB/keZ/A"],[5,8,2]],[51,0,-225,[1,"d4dx+lyadM64YdyD3z/qxj"],[4,4281242111],21],[284,4,1,-226,[1,"54fBKrYItAgpXU9nhpQCyt"]]],[2,"cbCytPtmRP+60nn9I1nxxg",1,0],[1,-3.5,-53.94,0]],[4,["78bCuqtM5FvINnH01nOP6N"]],[4,["8bBj36fMNOUZFpmts6EkfF"]],[4,["78bCuqtM5FvINnH01nOP6N"]],[4,["78bCuqtM5FvINnH01nOP6N"]],[39,"Panel_Outline",33554432,18,[[18,-227,[1,"f268L6i8FIP4do3yeL2osi"],[5,44,44]],[51,0,-228,[1,"73K3Sb2CJGGZZQwJ5LMTss"],[4,4287102766],34],[162,45,20,20,-229,[1,"29loxa4cBEubWku8uJQOcm"]]],[2,"f4aAPf/BBL4Kb2cvFUfXTO",1,0]],[39,"Panel_Energy Color",33554432,18,[[18,-230,[1,"caXe/bdUVKQ7+QzUcPLQbW"],[5,34,34]],[51,0,-231,[1,"dcDZqBiO5AMagPetldnSC4"],[4,4291874560],35],[170,45,5,5,5,5,32,32,-232,[1,"c8DUe7PpxGVaWbwcSMtHwp"]]],[2,"c421MuK0hCQYeD7QCBYCnj",1,0]],[39,"Panel_Outline",33554432,6,[[18,-233,[1,"6cXPG3QT5CXrXvuXCO28bH"],[5,44,44]],[51,0,-234,[1,"47119cVGNJnKnvEWW2Qvfg"],[4,4287102766],37],[162,45,20,20,-235,[1,"55T27bMXpHKp3K5HIyU6zb"]]],[2,"d9pm5DyRlFyJdQP2IkbhvE",1,0]],[39,"Panel_Energy Color",33554432,6,[[18,-236,[1,"f5NOw8Ew5C8pNR9AklrdSG"],[5,34,34]],[51,0,-237,[1,"ed59hTxfxHrKQOHkOmxQuz"],[4,4289238409],38],[170,45,5,5,5,5,32,32,-238,[1,"b1fKh9zPBBYYZx4AiI7t3y"]]],[2,"4eVr6ou9VL7r9Sj/o4MQNb",1,0]],[39,"Button_Outline 2",33554432,32,[[18,-239,[1,"88vI5M78ZLg6uuUKBkySY/"],[5,84,84]],[70,1,0,-240,[1,"3eUI8GUgtDSbQwF3WRmGuY"],[4,1179260927],45],[394,3,0.9,-241,[1,"57di4HVghNeJGBLkz8Fsvn"],46]],[2,"56OGkAnUhGFKLIo+aImvvK",1,0]],[39,"Button_Outline 1",33554432,32,[[18,-242,[1,"29/S49pBFCHrC2dVMIYu0l"],[5,77,77]],[70,1,0,-243,[1,"31tfGPm8FEdoW4SckuHOuc"],[4,2018121727],47],[394,3,0.9,-244,[1,"7e2BcbXK9E74TrJ8GKlRrv"],48]],[2,"feDxvrELBIHLIZaoGg2x5s",1,0]],[142,"Button_Color",33554432,3,[[[18,-245,[1,"69YYGyojpAE4M78/n8RAIP"],[5,70,70]],[51,0,-246,[1,"fbsUlR5ntIG6xCKEMKMd8m"],[4,4283045887],49],-247],4,4,1],[2,"c4JryQ715OxZEXyEuY811m",1,0]],[39,"Panel_Outline",33554432,10,[[18,-248,[1,"adoEaVup9FYoYbCcTOiKkm"],[5,44,44]],[51,0,-249,[1,"d7qmYXokFJs4hEjurkYh8U"],[4,4293450459],51],[162,45,20,20,-250,[1,"6cUZHkc+ZC+pOx6EjS0pan"]]],[2,"2dAuOpQ9VGWKrMyIUUAOJd",1,0]],[39,"Panel_Energy Color",33554432,10,[[18,-251,[1,"46wQBvpZpKQK9V4ykz//Qg"],[5,34,34]],[51,0,-252,[1,"227KcsgcJPSKdY0MVUvh1k"],[4,4291874560],52],[170,45,5,5,5,5,32,32,-253,[1,"93VeTjUKtK/66b3gG8esO+"]]],[2,"71Yfx7jQFFq4FUYnzPgJQb",1,0]],[66,"Text_+",33554432,10,[[18,-254,[1,"24/P+0W7BO66meFcKBbHmk"],[5,15.38,34.239999999999995]],[155,"+",24,24,24,false,-255,[1,"329pLtgIFAIJLRbRoy9nia"],[4,4287102766],53],[334,-256,[1,"b7rOT+QuRAMoUaFcKbgGC9"],[4,4282974275]]],[2,"16Wd8SpVNDqpiKxVe287ei",1,0],[1,-18.862,-0.695,0]],[85,"Holder_DotConnect",33554432,1,[34],[[48,-257,[1,"f9MnC5GtJD84NPXtJygd2I"]]],[2,"d9MIFdngdIub5yL1KjIya7",1,0]],[163,"Panel_Outline 2",33554432,11,[[18,-258,[1,"651b0X23JG1pA0dt4ZQALZ"],[5,198,198]],[70,1,0,-259,[1,"7d3Hl6LclChJMWznaIeOSJ"],[4,3211267],4]],[2,"44kKMyzOtA7oEtYdnmQXjj",1,0],[1,0,-4,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[163,"Panel_Outline 1",33554432,11,[[18,-260,[1,"3eZ7Is5P9DWLnH88+K3POw"],[5,189,189]],[70,1,0,-261,[1,"4fpcf8EOFEGovyTwz10250"],[4,3211267],5]],[2,"73+gMDTyxEdZn+WD+E4yTK",1,0],[1,0,-4,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[349,"Panel_Color",33554432,11,[[18,-262,[1,"0cq2Kk4ctFjbWEIRFb0NOp"],[5,180,180]],[51,0,-263,[1,"b4cI+TGThGNLzQZJuBq6UV"],[4,2352021507],6]],[2,"d8wIZcPCxCe6YqAym6uwe7",1,0],[1,0,-4,0],[3,0,0,0.38268343236508984,0.9238795325112867],[1,0,0,1],[1,0,0,45.000000000000014]],[205,"Spacing",false,33554432,11,[[18,-264,[1,"62fo7lP+5ISbt1G/KF3n76"],[5,130,36]],[148,0,-265,[1,"9f+Pvl6blDi6l7Zqctf0cv"],7]],[2,"1a6xsD3k5N5aA9oKws8FTS",1,0]],[349,"Dot_Color",33554432,22,[[18,-266,[1,"65eqYF/8REMqPARqc83H9v"],[5,12,12]],[70,1,0,-267,[1,"58nPL8DDBEcqj/ddpQAgeX"],[4,4292724926],8]],[2,"6dNDNQ245IMIFYBXJ4+uuo",1,0],[1,0,-25,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,1],[1,0,0,45]],[76,"Holder_Tower Model",33554432,4,[36],[[18,-268,[1,"eb9DVEbOZBK6WruDrw8ry7"],[5,0,0]]],[2,"c8Chk5svFCtKIn7oyzefDv",1,0],[1,0,67.68,0]],[184,"Panel_Color",33554432,12,[[18,-269,[1,"91Pr0P8VlGx6jGHIGiK4KX"],[5,24,24]],[51,0,-270,[1,"b9LsN9g1hOLb+ACMoynF1G"],[4,4282187811],11]],[2,"22ZEfFUktNao6gesxX3hDL",1,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[184,"Panel_Color",33554432,13,[[18,-271,[1,"45rubzGYFIXZD+/IldMsj9"],[5,24,24]],[51,0,-272,[1,"adHUhdF/pI9r/0stkOsOIA"],[4,4282187811],13]],[2,"b6BgT3IzZK1aZ/qNaRNfs/",1,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[184,"Panel_Color",33554432,14,[[18,-273,[1,"3d23u5jT1E9b8aDKr8HWbe"],[5,24,24]],[51,0,-274,[1,"a73oyiXoFBA6w8K2I9IKEl"],[4,4282187811],15]],[2,"01GHlE7QdNJpaQ/i3l5xXn",1,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[76,"Holder_Button 01",33554432,8,[-276],[[48,-275,[1,"d1w3NYLFtD1YJ5nqyLYp81"]]],[2,"9brp44ZTtHTJA2qtLnxJLk",1,0],[1,-100,10,0]],[36,0,null,69,[29,"0fJEdVoOpA/qcZPGFboeiN",-287,[42,"74XRvRkuBPX6zuG43ddIDV",1,[[14,"Holder_Tower Button 01",["_name"],28],[10,["_lpos"],28,[1,0,0,0]],[10,["_lrot"],28,[3,0,0,0,1]],[10,["_euler"],28,[1,0,0,0]],[14,"Button_Color",["_name"],-277],[10,["_lpos"],-278,[1,0,0,0]],[14,"Button_Outline",["_name"],45],[10,["_lpos"],45,[1,0,0,0]],[10,["_lrot"],45,[3,0,0,0.3826834323650898,0.9238795325112867]],[10,["_euler"],45,[1,0,0,45]],[14,true,["_active"],28],[14,"Button_Outline 2",["_name"],-279],[10,["_lpos"],-280,[1,0,0,0]],[14,"Button_Outline 1",["_name"],-281],[10,["_lpos"],-282,[1,0,0,0]],[28,false,["_active"],[4,["e9EkiL/+1I4KWEMpMRNY1g"]]],[14,2,["_clips","length"],46],[143,["_clips","0"],46,25],[143,["_defaultClip"],46,26],[14,"Panel_Outline",["_name"],-283],[10,["_lpos"],-284,[1,0,0,0]],[14,"Panel_Energy Color",["_name"],-285],[10,["_lpos"],-286,[1,0,0,0]],[28,false,["_active"],[4,["07J8NL3JNE+J1JbZaH9Gkn"]]],[143,["_clips","1"],46,27]]],24]],[76,"Holder_Button 02",33554432,8,[-289],[[48,-288,[1,"f8O8Ltm49JZasciDJrY3Un"]]],[2,"72+RAMqD5D+ZAkzE6XGRXe",1,0],[1,100,10,0]],[36,0,null,71,[29,"0fJEdVoOpA/qcZPGFboeiN",-296,[42,"c1RSk6NUhFVYmVRsNR9Aqa",1,[[14,"Holder_Tower Button 02",["_name"],29],[10,["_lpos"],29,[1,0,0,0]],[10,["_lrot"],29,[3,0,0,0,1]],[10,["_euler"],29,[1,0,0,0]],[14,"Button_Color",["_name"],-290],[10,["_lpos"],-291,[1,0,0,0]],[14,"Button_Outline",["_name"],47],[10,["_lpos"],47,[1,0,0,0]],[10,["_lrot"],47,[3,0,0,0.3826834323650898,0.9238795325112867]],[10,["_euler"],47,[1,0,0,45]],[14,"Panel_Outline",["_name"],-292],[10,["_lpos"],-293,[1,0,0,0]],[14,"Panel_Energy Color",["_name"],-294],[10,["_lpos"],-295,[1,0,0,0]],[14,true,["_active"],29]]],28]],[76,"Holder_Button 03",33554432,8,[-298],[[48,-297,[1,"2dx5PXEzpBI5KC9wRC9mXE"]]],[2,"09zmwkls5LEIVLC0RgpBmF",1,0],[1,0,-96,0]],[36,0,null,73,[29,"0fJEdVoOpA/qcZPGFboeiN",-305,[42,"0aSc2CSmNOv7gy3zhm972w",1,[[14,"Holder_Tower Button 03",["_name"],30],[10,["_lpos"],30,[1,0,0,0]],[10,["_lrot"],30,[3,0,0,0,1]],[10,["_euler"],30,[1,0,0,0]],[14,"Button_Color",["_name"],-299],[10,["_lpos"],-300,[1,0,0,0]],[14,"Button_Outline",["_name"],48],[10,["_lpos"],48,[1,0,0,0]],[10,["_lrot"],48,[3,0,0,0.3826834323650898,0.9238795325112867]],[10,["_euler"],48,[1,0,0,45]],[14,"Panel_Outline",["_name"],-301],[10,["_lpos"],-302,[1,0,0,0]],[14,"Panel_Energy Color",["_name"],-303],[10,["_lpos"],-304,[1,0,0,0]],[14,true,["_active"],30]]],29]],[76,"Holder_Button 01",33554432,17,[2],[[48,-306,[1,"2dDONqE8pMOKELzJCPnoAC"]]],[2,"faoYrGrexMzqdzK6ckpRqZ",1,0],[1,-100,10,0]],[39,"Button_Outline 2",33554432,31,[[18,-307,[1,"5etth2jgxHjrHslvpb0JHZ"],[5,84,84]],[70,1,0,-308,[1,"6axzbCYi9GpIB4OPVxZYv0"],[4,1183317806],30]],[2,"464N+FPdxPeatXzlqh2uah",1,0]],[39,"Button_Outline 1",33554432,31,[[18,-309,[1,"b6fbb5JshFj6dheZNKNhl+"],[5,77,77]],[70,1,0,-310,[1,"edJFde/LtGq48sK6hM+X4B"],[4,2022178606],31]],[2,"9eLJ9iyQZBTYmwolqv/kvL",1,0]],[246,3,0.9,9,[1,"e0iQibPDNGYIKJsHwZFwIm"],[[7,"80495HhBfdC64qEifbVQrbr","onClicked",2]]],[66,"Text_Level Up",33554432,2,[[18,-311,[1,"0a4pMd11BFCavVU3OI4JBE"],[5,64,30]],[405,"Level Up",22,23,23,2,false,false,-312,[1,"90RXiPHQRMBqaEH4KzSfd9"],[4,4281532425],33]],[2,"e22qAiOShGu6dQkE5fyZRr",1,0],[1,0,17.208,0]],[76,"Holder_Button 02",33554432,17,[3],[[48,-313,[1,"d3lEazYatBHIQDgY9K4etq"]]],[2,"9eatkuECJPRJ35+eb2SpC3",1,0],[1,100,10,0]],[66,"Text_Level Up",33554432,3,[[18,-314,[1,"8basD3uGFCB7FDb9qtQE1A"],[5,64,30]],[405,"Destroy",21,21,23,2,false,false,-315,[1,"1ad0Za1JhBO63hooKktS7+"],[4,4281532425],50]],[2,"696IqbC2RE4Kiuu09+L7cE",1,0],[1,0,17.208,0]],[540,"Cube Tower",2,17,17,17,2,false,false,23,[1,"a8Mmtadr1Gta5v/USRbkki"],[4,4281532425]],[541,"Bla bla bla torre",0,0,18,18,18,3,false,24,[1,"97CNXOrzZFXo/biGRtb8yM"],[4,4286410600]],[326,"20",18,18,18,false,25,[1,"63MVNBAUtKOL2OGQSgZw0s"]],[326,"10",18,18,18,false,26,[1,"a9dgTO0WNOJokwuSG/Cyww"]],[326,"4",18,18,18,false,27,[1,"65dU0/QJJEhoz/5CwKPweZ"]],[4,["a6az63RfpIg6Gg/gQf45Dh"]],[4,["42ZSZDURBPuYxZbUVkytNk"]],[4,["64o7LRB4FEdaQLAV4SPsYe"]],[4,["b4p3nx06pA3q2OOmIuPIqT"]],[4,["a4xPBm209GU5Mh8eoXMqG3"]],[4,["a6az63RfpIg6Gg/gQf45Dh"]],[4,["b4p3nx06pA3q2OOmIuPIqT"]],[4,["a4xPBm209GU5Mh8eoXMqG3"]],[4,["a6az63RfpIg6Gg/gQf45Dh"]],[4,["b4p3nx06pA3q2OOmIuPIqT"]],[4,["a4xPBm209GU5Mh8eoXMqG3"]],[327,"2",33,32,28,2,false,19,[1,"483GC9xLRIq4d00HA1ej8J"]],[263,"2",33,32,28,2,false,20,[1,"ebZ4P+N9FOMLxNZcbgaRnm"],[4,4280616237]],[128,2,[1,"47yBIwvkZE2aGBAdlhkSNv"]],[246,3,0.9,55,[1,"50hrJYbf9IHLRR1ePLEmnJ"],[[7,"80495HhBfdC64qEifbVQrbr","onClicked",3]]],[327,"2",33,32,28,2,false,21,[1,"18eVL3suFL6KwyO4W6QX1Y"]],[128,3,[1,"56JKwaJhFDV5L2wgkKwUbU"]],[128,1,[1,"f13UGmbg5KLrhluQFmxr/w"]]],0,[0,-1,70,0,-2,72,0,-3,74,0,2,1,0,0,1,0,0,1,0,0,1,0,-4,104,0,33,104,0,0,1,0,0,1,0,0,1,0,-1,7,0,-2,59,0,-3,11,0,-4,22,0,-5,8,0,-6,17,0,-7,33,0,0,2,0,0,2,0,-3,100,0,3,2,0,3,2,0,3,9,0,3,6,0,3,2,0,3,9,0,3,6,0,3,2,0,41,78,0,3,19,0,3,20,0,0,2,0,33,100,0,0,2,0,-1,31,0,-2,9,0,-3,79,0,-4,18,0,-5,6,0,0,3,0,0,3,0,-3,103,0,3,3,0,3,3,0,41,101,0,3,21,0,0,3,0,33,103,0,0,3,0,-1,32,0,-2,55,0,-3,81,0,-4,10,0,0,4,0,0,4,0,0,4,0,-1,23,0,-2,65,0,-3,24,0,-4,5,0,-5,40,0,0,5,0,0,5,0,0,5,0,0,5,0,0,5,0,-1,12,0,-2,13,0,-3,14,0,0,6,0,0,6,0,0,6,0,-1,51,0,-2,52,0,-3,20,0,0,7,0,0,7,0,3,7,0,0,7,0,0,7,0,0,7,0,0,8,0,0,8,0,0,8,0,-1,69,0,-2,71,0,-3,73,0,0,9,0,0,9,0,-3,78,0,41,78,0,0,9,0,0,10,0,0,10,0,-1,56,0,-2,57,0,-3,21,0,-4,58,0,0,11,0,-1,60,0,-2,61,0,-3,62,0,-4,63,0,0,12,0,0,12,0,-1,37,0,-2,66,0,-3,25,0,0,13,0,0,13,0,-1,38,0,-2,67,0,-3,26,0,0,14,0,0,14,0,-1,39,0,-2,68,0,-3,27,0,0,15,0,0,15,0,0,15,0,-1,41,0,-2,42,0,0,16,0,0,16,0,0,16,0,-1,43,0,-2,44,0,0,17,0,0,17,0,0,17,0,-1,75,0,-2,80,0,0,18,0,0,18,0,-1,49,0,-2,50,0,-3,19,0,0,19,0,-2,98,0,0,19,0,29,98,0,0,19,0,0,20,0,-2,99,0,0,20,0,29,99,0,0,20,0,0,21,0,-2,102,0,0,21,0,29,102,0,0,21,0,0,22,0,3,27,0,3,26,0,3,25,0,3,24,0,3,23,0,0,22,0,-1,64,0,0,23,0,-2,82,0,29,82,0,0,23,0,0,24,0,-2,83,0,29,83,0,0,24,0,0,25,0,-2,84,0,29,84,0,0,25,0,0,26,0,-2,85,0,29,85,0,0,26,0,0,27,0,-2,86,0,29,86,0,0,27,0,0,31,0,0,31,0,-1,76,0,-2,77,0,0,32,0,0,32,0,-1,53,0,-2,54,0,0,33,0,0,33,0,0,33,0,0,33,0,0,34,0,0,34,0,-1,35,0,0,35,0,0,35,0,0,35,0,0,36,0,0,36,0,0,36,0,0,37,0,0,37,0,0,37,0,0,38,0,0,38,0,0,38,0,0,39,0,0,39,0,0,39,0,0,40,0,0,41,0,0,41,0,0,41,0,0,42,0,0,42,0,0,42,0,0,43,0,0,43,0,0,43,0,0,44,0,0,44,0,0,44,0,0,49,0,0,49,0,0,49,0,0,50,0,0,50,0,0,50,0,0,51,0,0,51,0,0,51,0,0,52,0,0,52,0,0,52,0,0,53,0,0,53,0,0,53,0,0,54,0,0,54,0,0,54,0,0,55,0,0,55,0,-3,101,0,0,56,0,0,56,0,0,56,0,0,57,0,0,57,0,0,57,0,0,58,0,0,58,0,0,58,0,0,59,0,0,60,0,0,60,0,0,61,0,0,61,0,0,62,0,0,62,0,0,63,0,0,63,0,0,64,0,0,64,0,0,65,0,0,66,0,0,66,0,0,67,0,0,67,0,0,68,0,0,68,0,0,69,0,-1,70,0,1,87,0,1,87,0,1,88,0,1,88,0,1,89,0,1,89,0,1,90,0,1,90,0,1,91,0,1,91,0,2,70,0,0,71,0,-1,72,0,1,92,0,1,92,0,1,93,0,1,93,0,1,94,0,1,94,0,2,72,0,0,73,0,-1,74,0,1,95,0,1,95,0,1,96,0,1,96,0,1,97,0,1,97,0,2,74,0,0,75,0,0,76,0,0,76,0,0,77,0,0,77,0,0,79,0,0,79,0,0,80,0,0,81,0,0,81,0,9,1,2,7,75,3,7,80,4,7,22,15,7,40,16,7,40,34,7,59,36,7,65,315],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,82,83,84,85,86,78,98,99,100,101,102,103,104],[6,25,6,6,6,6,6,6,6,6,19,6,19,6,19,6,6,6,6,6,6,6,6,6,8,11,11,11,8,8,6,6,6,19,6,6,6,6,6,6,-1,-2,-3,-4,-5,6,25,6,25,6,19,6,6,19,6,-1,-2,-3,18,-1,-2,-3,19,19,19,19,19,25,19,19,26,25,19,26,26],[0,0,22,0,22,22,0,249,22,46,8,0,8,0,8,0,0,0,0,0,0,0,0,0,30,35,35,52,30,30,21,21,0,8,22,0,0,22,0,0,150,151,152,153,154,21,21,21,21,0,8,22,0,8,0,87,155,156,87,157,158,159,8,8,8,8,8,0,8,8,250,0,8,251,252]],[[[267,"builtin-particle-trail",[{"hash":2502358098,"name":"builtin-particle-trail|particle-trail:vs_main|tinted-fs:add","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":44,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"vBarycentric","type":15,"count":1,"stageFlags":17,"location":2,"defines":["CC_DRAW_WIRE_FRAME"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision mediump float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec4 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  layout(location = 2) out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\n  precision mediump float;\n  layout(set = 0, binding = 0) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n  };\n  layout(set = 0, binding = 1) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  vec4 CCFragOutput (vec4 color) {\n    return color;\n  }\n  layout(location = 0) in vec2 uv;\n  layout(location = 1) in vec4 color;\n  #if CC_DRAW_WIRE_FRAME\n    layout(location = 2) in vec3 vBarycentric;\n  #endif\n  layout(set = 1, binding = 2) uniform sampler2D mainTexture;\n  layout(set = 1, binding = 1) uniform FragConstants {\n    vec4 tintColor;\n  };\n  vec4 add () {\n    vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n#if CC_DRAW_WIRE_FRAME\n    if (any(lessThan(vBarycentric, vec3(0.02)))) {\n        col = vec4(0., 1., 1., 1.);\n    }\n#endif\n    return CCFragOutput(col);\n  }\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl3":{"vert":"\nprecision mediump float;\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nin vec3 a_position;\nin vec4 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\n  precision mediump float;\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  vec4 CCFragOutput (vec4 color) {\n    return color;\n  }\n  in vec2 uv;\n  in vec4 color;\n  #if CC_DRAW_WIRE_FRAME\n    in vec3 vBarycentric;\n  #endif\n  uniform sampler2D mainTexture;\n  layout(std140) uniform FragConstants {\n    vec4 tintColor;\n  };\n  vec4 add () {\n    vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n#if CC_DRAW_WIRE_FRAME\n    if (any(lessThan(vBarycentric, vec3(0.02)))) {\n        col = vec4(0., 1., 1., 1.);\n    }\n#endif\n    return CCFragOutput(col);\n  }\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl1":{"vert":"\nprecision mediump float;\n   uniform vec4 mainTiling_Offset;\nuniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nattribute vec3 a_position;\nattribute vec4 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  varying vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\n  precision mediump float;\n  vec4 CCFragOutput (vec4 color) {\n    return color;\n  }\n  varying vec2 uv;\n  varying vec4 color;\n  #if CC_DRAW_WIRE_FRAME\n    varying vec3 vBarycentric;\n  #endif\n  uniform sampler2D mainTexture;\n      uniform vec4 tintColor;\n  vec4 add () {\n    vec4 col = 2.0 * color * tintColor * texture2D(mainTexture, uv);\n#if CC_DRAW_WIRE_FRAME\n    if (any(lessThan(vBarycentric, vec3(0.02)))) {\n        col = vec4(0., 1., 1., 1.);\n    }\n#endif\n    return CCFragOutput(col);\n  }\nvoid main() { gl_FragColor = add(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":53,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_DRAW_WIRE_FRAME","type":"boolean","defines":[]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]}]},{"hash":2543411830,"name":"builtin-particle-trail|particle-trail:vs_main|tinted-fs:multiply","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":44,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"vBarycentric","type":15,"count":1,"stageFlags":17,"location":2,"defines":["CC_DRAW_WIRE_FRAME"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision mediump float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec4 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  layout(location = 2) out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\n  precision mediump float;\n  layout(set = 0, binding = 0) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n  };\n  layout(set = 0, binding = 1) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  vec4 CCFragOutput (vec4 color) {\n    return color;\n  }\n  layout(location = 0) in vec2 uv;\n  layout(location = 1) in vec4 color;\n  #if CC_DRAW_WIRE_FRAME\n    layout(location = 2) in vec3 vBarycentric;\n  #endif\n  layout(set = 1, binding = 2) uniform sampler2D mainTexture;\n  layout(set = 1, binding = 1) uniform FragConstants {\n    vec4 tintColor;\n  };\n  vec4 multiply () {\n    vec4 col;\n    vec4 texColor = texture(mainTexture, uv);\n    col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n    col.a = (1.0 - texColor.a) * (tintColor.a * color.a * 2.0);\n#if CC_DRAW_WIRE_FRAME\n    if (any(lessThan(vBarycentric, vec3(0.02)))) {\n        col = vec4(0., 1., 1., col.a);\n    }\n#endif\n    return CCFragOutput(col);\n  }\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl3":{"vert":"\nprecision mediump float;\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nin vec3 a_position;\nin vec4 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\n  precision mediump float;\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  vec4 CCFragOutput (vec4 color) {\n    return color;\n  }\n  in vec2 uv;\n  in vec4 color;\n  #if CC_DRAW_WIRE_FRAME\n    in vec3 vBarycentric;\n  #endif\n  uniform sampler2D mainTexture;\n  layout(std140) uniform FragConstants {\n    vec4 tintColor;\n  };\n  vec4 multiply () {\n    vec4 col;\n    vec4 texColor = texture(mainTexture, uv);\n    col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n    col.a = (1.0 - texColor.a) * (tintColor.a * color.a * 2.0);\n#if CC_DRAW_WIRE_FRAME\n    if (any(lessThan(vBarycentric, vec3(0.02)))) {\n        col = vec4(0., 1., 1., col.a);\n    }\n#endif\n    return CCFragOutput(col);\n  }\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl1":{"vert":"\nprecision mediump float;\n   uniform vec4 mainTiling_Offset;\nuniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nattribute vec3 a_position;\nattribute vec4 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  varying vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\n  precision mediump float;\n  vec4 CCFragOutput (vec4 color) {\n    return color;\n  }\n  varying vec2 uv;\n  varying vec4 color;\n  #if CC_DRAW_WIRE_FRAME\n    varying vec3 vBarycentric;\n  #endif\n  uniform sampler2D mainTexture;\n      uniform vec4 tintColor;\n  vec4 multiply () {\n    vec4 col;\n    vec4 texColor = texture2D(mainTexture, uv);\n    col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n    col.a = (1.0 - texColor.a) * (tintColor.a * color.a * 2.0);\n#if CC_DRAW_WIRE_FRAME\n    if (any(lessThan(vBarycentric, vec3(0.02)))) {\n        col = vec4(0., 1., 1., col.a);\n    }\n#endif\n    return CCFragOutput(col);\n  }\nvoid main() { gl_FragColor = multiply(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":53,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_DRAW_WIRE_FRAME","type":"boolean","defines":[]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]}]},{"hash":1579485357,"name":"builtin-particle-trail|particle-trail:vs_main|no-tint-fs:addSmooth","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":44,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"vBarycentric","type":15,"count":1,"stageFlags":1,"location":2,"defines":["CC_DRAW_WIRE_FRAME"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision mediump float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec4 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  layout(location = 2) out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl3":{"vert":"\nprecision mediump float;\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nin vec3 a_position;\nin vec4 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl1":{"vert":"\nprecision mediump float;\n   uniform vec4 mainTiling_Offset;\nuniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nattribute vec3 a_position;\nattribute vec4 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  varying vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture2D(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = addSmooth(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":53,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":39}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_DRAW_WIRE_FRAME","type":"boolean","defines":[]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]}]},{"hash":2581776267,"name":"builtin-particle-trail|particle-trail:vs_main|no-tint-fs:premultiplied","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":44,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"vBarycentric","type":15,"count":1,"stageFlags":1,"location":2,"defines":["CC_DRAW_WIRE_FRAME"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision mediump float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec4 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  layout(location = 2) out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl3":{"vert":"\nprecision mediump float;\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nin vec3 a_position;\nin vec4 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl1":{"vert":"\nprecision mediump float;\n   uniform vec4 mainTiling_Offset;\nuniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nattribute vec3 a_position;\nattribute vec4 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  varying vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture2D(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = premultiplied(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":53,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":39}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_DRAW_WIRE_FRAME","type":"boolean","defines":[]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]}]}],[{"name":"add","passes":[{"program":"builtin-particle-trail|particle-trail:vs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"frameTile_velLenScale":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"alpha-blend","passes":[{"program":"builtin-particle-trail|particle-trail:vs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":4,"blendSrcAlpha":1,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"frameTile_velLenScale":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-multiply","passes":[{"program":"builtin-particle-trail|particle-trail:vs_main|tinted-fs:multiply","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":4,"blendSrcAlpha":1,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"frameTile_velLenScale":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-smooth","passes":[{"program":"builtin-particle-trail|particle-trail:vs_main|no-tint-fs:addSmooth","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":4,"blendSrcAlpha":1,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"frameTile_velLenScale":{"type":16,"value":[1,1,0,0]}}}]},{"name":"premultiply-blend","passes":[{"program":"builtin-particle-trail|particle-trail:vs_main|no-tint-fs:premultiplied","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":4,"blendSrcAlpha":1,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"frameTile_velLenScale":{"type":16,"value":[1,1,0,0]}}}]}]]],0,0,[],[],[]],[[{"name":"T_VFX_FreezeBorder","rect":{"x":0,"y":0,"width":414,"height":896},"offset":{"x":0,"y":0},"originalSize":{"width":414,"height":896},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[21],[253]],[[[112,"0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4294967295],"mainTexture",6,0]],11]]],0,0,[0,0],[30,12],[64,25]],[[[57,".bin",1014398668,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14688,"length":2160,"count":540,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14688,"count":306,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.27878057956695557,-0.2357182651758194,1.5832483768463135e-8],"maxPosition",8,[1,0.2783522307872772,0.6113547086715698,0.8522592782974243]]],-1],0,0,[],[],[]],[[[62],[47,"SM_EnemyBiker_01",[-2],[2,"94xHiK0AJcG7HhDtrTSJEu",-1,0]],[53,"SM_EnemyBiker_01",1,[[52,-3,[1,"b13/XLHw9X17XAy1C9bbJp"],[0],[34],1]],[2,"40xe0mc49a/5+K5jzHdd0S",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[254,255]],[[[63,"SM_EnemyBiker_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[112,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainColor",8,[4,2524364770]]],11]]],0,0,[0],[12],[34]],[[[267,"builtin-standard",[{"hash":4079105024,"name":"builtin-standard|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_NORMAL_MAP"]},{"name":"pbrMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_PBR_MAP"]},{"name":"metallicRoughnessMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_METALLIC_ROUGHNESS_MAP"]},{"name":"occlusionMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_OCCLUSION_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[{"name":"b_ccLightsBuffer","memoryAccess":1,"stageFlags":16,"binding":7,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightIndicesBuffer","memoryAccess":1,"stageFlags":16,"binding":8,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightGridBuffer","memoryAccess":1,"stageFlags":16,"binding":9,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":14,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":15,"defines":[]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":17,"location":0,"defines":["!CC_USE_ACCURATE_FOG"]},{"name":"v_shadowPos","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_color","type":16,"count":1,"stageFlags":17,"location":2,"defines":["USE_VERTEX_COLOR"]},{"name":"v_position","type":15,"count":1,"stageFlags":17,"location":3,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":17,"location":4,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":5,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":6,"defines":["HAS_SECOND_UV"]},{"name":"v_shadowBias","type":14,"count":1,"stageFlags":17,"location":7,"defines":["CC_RECEIVE_SHADOW"]},{"name":"v_tangent","type":16,"count":1,"stageFlags":17,"location":8,"defines":["USE_NORMAL_MAP"]},{"name":"v_luv","type":15,"count":1,"stageFlags":17,"location":9,"defines":["CC_USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":["CC_FORWARD_ADD"]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nlayout(location = 1) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 14) in vec4 a_color;\n  layout(location = 2) out lowp vec4 v_color;\n#endif\nlayout(location = 3) out vec3 v_position;\nlayout(location = 4) out mediump vec3 v_normal;\nlayout(location = 5) out vec2 v_uv;\n#if HAS_SECOND_UV\n  layout(location = 6) out mediump vec2 v_uv1;\n#endif\n#if CC_RECEIVE_SHADOW\n  layout(location = 7) out mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 8) out mediump vec4 v_tangent;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  layout(location = 15) in vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) in float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(normalBias > EPSILON_LOWP)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\nfloat CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n{\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n  }else {\n    return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n  }\n}\nfloat CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n{\n  float realtimeShadow = 1.0;\n  vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n  }else {\n    realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n  }\n  return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n}\n#endif\n#if CC_USE_IBL\n  layout(set = 0, binding = 4) uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    layout(set = 0, binding = 6) uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse / PI;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > EPSILON_LOWP) {\n      finalColor = diffuse * s.lightmap.rgb * shadow;\n    }\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(location = 1) in highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) in vec3 v_luv;\n  layout(set = 2, binding = 10) uniform sampler2D cc_lightingMap;\n#endif\nlayout(location = 3) in vec3 v_position;\nlayout(location = 5) in vec2 v_uv;\n#if HAS_SECOND_UV\n  layout(location = 6) in mediump vec2 v_uv1;\n#endif\nlayout(location = 4) in mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  layout(location = 7) in mediump vec2 v_shadowBias;\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 2) in lowp vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  layout(location = 8) in mediump vec4 v_tangent;\n  layout(set = 1, binding = 2) uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  layout(set = 1, binding = 3) uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  layout(set = 1, binding = 4) uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  layout(set = 1, binding = 5) uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  layout(set = 1, binding = 6) uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.specularIntensity = 0.5;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(set = 2, binding = 1) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(set = 1, binding = 7) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(set = 1, binding = 8) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(set = 1, binding = 9) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out lowp vec4 v_color;\n#endif\nout vec3 v_position;\nout mediump vec3 v_normal;\nout vec2 v_uv;\n#if HAS_SECOND_UV\n  out mediump vec2 v_uv1;\n#endif\n#if CC_RECEIVE_SHADOW\n  out mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  out mediump vec4 v_tangent;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\nprecision highp float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(normalBias > EPSILON_LOWP)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\nfloat CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n{\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n  }else {\n    return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n  }\n}\nfloat CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n{\n  float realtimeShadow = 1.0;\n  vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n  }else {\n    realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n  }\n  return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n}\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      return textureLod(tex, coord, lod);\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = texture(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse / PI;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > EPSILON_LOWP) {\n      finalColor = diffuse * s.lightmap.rgb * shadow;\n    }\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = texture(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nin highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  in vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nin vec3 v_position;\nin vec2 v_uv;\n#if HAS_SECOND_UV\n  in mediump vec2 v_uv1;\n#endif\nin mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  in mediump vec2 v_shadowBias;\n#endif\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  in mediump vec4 v_tangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.specularIntensity = 0.5;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  layout(std140) uniform CCForwardLight {\n    highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n    vec4 cc_lightColor[LIGHTS_PER_PASS];\n    vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n    vec4 cc_lightDir[LIGHTS_PER_PASS];\n  };\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  layout(std430, binding = 4) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  layout(std430, binding = 5) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  layout(std430, binding = 6) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    fragColorX = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  layout(location = 0) out vec4 fragColorX;\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    fragColorX = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  layout(location = 0) out vec4 fragColor0;\n  layout(location = 1) out vec4 fragColor1;\n  layout(location = 2) out vec4 fragColor2;\n  void main () {\n    StandardSurface s; surf(s);\n    fragColor0 = s.albedo;\n    fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    fragColor2 = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n  uniform highp vec4 cc_localShadowBias;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\nvec2 CCGetShadowBias()\n{\n  #if USE_INSTANCING\n    return vec2(a_localShadowBias.x + cc_shadowWHPBInfo.w, a_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #elif !USE_BATCHING\n    return vec2(cc_localShadowBias.x + cc_shadowWHPBInfo.w, cc_localShadowBias.y + cc_shadowLPNNInfo.z);\n  #else\n    return vec2(cc_shadowWHPBInfo.w, cc_shadowLPNNInfo.z);\n  #endif\n}\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying mediump vec3 v_normal;\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if USE_NORMAL_MAP\n  varying mediump vec4 v_tangent;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if CC_RECEIVE_SHADOW\n    v_shadowBias = CCGetShadowBias();\n  #endif\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent.xyz = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_tangent.w = In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if SAMPLE_FROM_RT\n    v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n  #endif\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv1 = cc_cameraPos.w > 1.0 ? vec2(v_uv1.x, 1.0 - v_uv1.y) : v_uv1;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\nprecision highp float;\nuniform highp mat4 cc_matView;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n  uniform mediump vec4 cc_viewPort;\n     uniform vec4 albedo;\n     uniform vec4 albedoScaleAndCutoff;\n     uniform vec4 pbrParams;\n     uniform vec4 emissive;\n     uniform vec4 emissiveScaleParam;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nuniform highp mat4 cc_matLightView;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nhighp float unpackHighpData (float mainPart, float modPart) {\n  highp float data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n  highp float data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n  highp float divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n  highp vec2 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n  highp vec2 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n  highp vec2 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n  highp vec3 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n  highp vec3 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n  highp vec3 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n  highp vec4 data = mainPart;\n  return data + modPart;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n  mainPart = fract(data);\n  modPart = data - mainPart;\n}\nhighp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n  highp vec4 data = mainPart * modValue;\n  return data + modPart * modValue;\n}\nvoid packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n  highp vec4 divide = data / modValue;\n  mainPart = floor(divide);\n  modPart = (data - mainPart * modValue) / modValue;\n}\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n  vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n  {\n    vec4 newShadowPos = shadowPos;\n    if(normalBias > EPSILON_LOWP)\n    {\n      vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n      if(viewNormal.z < 0.1)\n        newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n    }\n    return newShadowPos;\n  }\n  vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    vec3 viewSpacePos;\n    viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n    viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n    viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n    vec4 clipSpacePos;\n    clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n    clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n      clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n    }\n    return clipSpacePos;\n  }\n  vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n  {\n    float coeffA = cc_shadowProjDepthInfo.x;\n    float coeffB = cc_shadowProjDepthInfo.y;\n    float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n    viewSpacePos_z += viewspaceDepthBias;\n    vec4 result = shadowPos;\n    result.z = viewSpacePos_z * coeffA + coeffB;\n    return result;\n  }\n  float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n    }\n    shadow = step(clipPos.z, closestDepth);\n    return shadow;\n  }\n  float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float offsetDepth = clipPos.z;\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\n  float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float shadow = 0.0;\n    float closestDepth = 0.0;\n    float depth = clipPos.z;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n    } else {\n      closestDepth = texture2D(cc_spotLightingMap, clipPos.xy).x;\n    }\n    shadow = step(depth, closestDepth);\n    return shadow;\n  }\n  float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n    vec2 clipPos_offset = clipPos.xy + oneTap;\n    float block0, block1, block2, block3;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n    }\n    float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block2, block3, coefX);\n    float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n    return mix(resultX, resultY, coefY);\n  }\n  float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n    vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n    vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n    if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n        clipPos.y < 0.0 || clipPos.y > 1.0 ||\n        clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n    clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n    float depth = 0.0;\n    if (cc_shadowNFLSInfo.z > EPSILON) {\n      depth = CCGetLinearDepth(worldPos);\n    } else {\n      depth = clipPos.z;\n    }\n    vec2 mapSize = cc_shadowWHPBInfo.xy;\n    vec2 oneTap = 1.0 / mapSize;\n    float clipPos_offset_L = clipPos.x - oneTap.x;\n    float clipPos_offset_R = clipPos.x + oneTap.x;\n    float clipPos_offset_U = clipPos.y - oneTap.y;\n    float clipPos_offset_D = clipPos.y + oneTap.y;\n    float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n    if (cc_shadowLPNNInfo.y > EPSILON) {\n      block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block4 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block5 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block6 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block7 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      block8 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n    } else {\n      block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n      block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n      block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n      block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n      block4 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n      block5 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n      block6 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n      block7 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n      block8 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n    }\n    float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n    float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n    float shadow = 0.0;\n    float resultX = mix(block0, block1, coefX);\n    float resultY = mix(block3, block4, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block1, block2, coefX);\n    resultY = mix(block4, block5, coefX);\n    shadow += mix(resultX , resultY, coefY);\n    resultX = mix(block3, block4, coefX);\n    resultY = mix(block6, block7, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    resultX = mix(block4, block5, coefX);\n    resultY = mix(block7, block8, coefX);\n    shadow += mix(resultX, resultY, coefY);\n    return shadow * 0.25;\n  }\nfloat CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n{\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n  }else {\n    return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n  }\n}\nfloat CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n{\n  float realtimeShadow = 1.0;\n  vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n  float pcf = cc_shadowWHPBInfo.z;\n  if (pcf > 1.9) {\n    realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n  }else if (pcf > 0.9) {\n    realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n  }else {\n    realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n  }\n  return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n}\n#endif\n#if CC_USE_IBL\n  uniform samplerCube cc_environment;\n  vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return texture2DLodEXT(tex, coord, lod);\n      #else\n        return texture2D(tex, coord, lod);\n      #endif\n  }\n  vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n      #ifdef GL_EXT_shader_texture_lod\n        return textureCubeLodEXT(tex, coord, lod);\n      #else\n        return textureCube(tex, coord, lod);\n      #endif\n  }\n  vec3 unpackRGBE (vec4 rgbe) {\n    return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n  }\n  #if CC_USE_DIFFUSEMAP\n    uniform samplerCube cc_diffuseMap;\n  #endif\n#endif\nfloat GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n  vec3 NxH = cross(N, H);\n  float OneMinusNoHSqr = dot(NxH, NxH);\n  float a = roughness * roughness;\n  float n = NoH * a;\n  float p = a / (OneMinusNoHSqr + n * n);\n  return p * p;\n}\nfloat CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n  return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n}\nvec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n  const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n  const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n  vec4 r = roughness * c0 + c1;\n  float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n  vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n  AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n  return specular * AB.x + AB.y;\n}\n#if USE_REFLECTION_DENOISE\n  vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n    #if CC_USE_IBL\n    \tfloat mip = roughness * mipCount;\n    \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n    \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n    \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n     \tvec4 filtered = textureCube(cc_environment, R);\n      #if CC_USE_IBL == 2\n      \tbiased.rgb = unpackRGBE(biased);\n      \tfiltered.rgb = unpackRGBE(filtered);\n      #else\n      \tbiased.rgb = SRGBToLinear(biased.rgb);\n      \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n      #endif\n      return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n    #else\n      return vec3(0.0, 0.0, 0.0);\n    #endif\n  }\n#endif\nstruct StandardSurface {\n  vec4 albedo;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  vec3 position, position_fract_part;\n  #else\n  vec3 position;\n  #endif\n  vec3 normal;\n  vec3 emissive;\n  vec3 lightmap;\n  float lightmap_test;\n  float roughness;\n  float metallic;\n  float occlusion;\n  float specularIntensity;\n  #if CC_RECEIVE_SHADOW\n    vec2 shadowBias;\n  #endif\n};\nvec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n  vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n  vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n  vec3 position;\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  position = unpackHighpData(s.position, s.position_fract_part);\n  #else\n  position = s.position;\n  #endif\n  vec3 N = normalize(s.normal);\n  vec3 V = normalize(cc_cameraPos.xyz - position);\n  float NV = max(abs(dot(N, V)), 0.0);\n  specular = BRDFApprox(specular, s.roughness, NV);\n  vec3 L = normalize(-cc_mainLitDir.xyz);\n  vec3 H = normalize(L + V);\n  float NH = max(dot(N, H), 0.0);\n  float NL = max(dot(N, L), 0.0);\n  vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n  vec3 diffuseContrib = diffuse / PI;\n  vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n  vec3 dirlightContrib = (diffuseContrib + specularContrib);\n  float shadow = 1.0;\n  #if CC_RECEIVE_SHADOW\n    if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n      shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n    }\n  #endif\n  dirlightContrib *= shadow;\n  finalColor *= dirlightContrib;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    if (s.lightmap_test > EPSILON_LOWP) {\n      finalColor = diffuse * s.lightmap.rgb * shadow;\n    }\n  #endif\n  float fAmb = 0.5 - N.y * 0.5;\n  vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n  #if CC_USE_IBL\n    #if CC_USE_DIFFUSEMAP\n      vec4 diffuseMap = textureCube(cc_diffuseMap, N);\n      #if CC_USE_DIFFUSEMAP == 2\n        ambDiff = unpackRGBE(diffuseMap);\n      #else\n        ambDiff = SRGBToLinear(diffuseMap.rgb);\n      #endif\n    #endif\n    vec3 R = normalize(reflect(-V, N));\n    #if USE_REFLECTION_DENOISE\n      vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n    #else\n      vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n      #if CC_USE_IBL == 2\n        vec3 env = unpackRGBE(envmap);\n      #else\n        vec3 env = SRGBToLinear(envmap.rgb);\n      #endif\n    #endif\n    finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n  #endif\n  finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n  finalColor += s.emissive;\n  return vec4(finalColor, s.albedo.a);\n}\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nvarying highp vec4 v_shadowPos;\n#if CC_RECEIVE_SHADOW\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  uniform sampler2D cc_lightingMap;\n#endif\nvarying vec3 v_position;\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying mediump vec2 v_uv1;\n#endif\nvarying mediump vec3 v_normal;\n#if CC_RECEIVE_SHADOW\n  varying mediump vec2 v_shadowBias;\n#endif\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_NORMAL_MAP\n  varying mediump vec4 v_tangent;\n  uniform sampler2D normalMap;\n#endif\n#if USE_PBR_MAP\n  uniform sampler2D pbrMap;\n#endif\n#if USE_METALLIC_ROUGHNESS_MAP\n  uniform sampler2D metallicRoughnessMap;\n#endif\n#if USE_OCCLUSION_MAP\n  uniform sampler2D occlusionMap;\n#endif\n#if USE_EMISSIVE_MAP\n  uniform sampler2D emissiveMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvoid surf (out StandardSurface s) {\n  vec4 baseColor = albedo;\n  #if USE_VERTEX_COLOR\n    baseColor.rgb *= SRGBToLinear(v_color.rgb);\n    baseColor.a *= v_color.a;\n  #endif\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, ALBEDO_UV);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    baseColor *= texColor;\n  #endif\n  s.albedo = baseColor;\n  s.albedo.rgb *= albedoScaleAndCutoff.xyz;\n  #if USE_ALPHA_TEST\n    if (s.albedo.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n    s.lightmap = lightColor.xyz * v_luv.z;\n    s.lightmap_test = v_luv.z;\n  #endif\n  s.normal = v_normal;\n  #if CC_RECEIVE_SHADOW\n    s.shadowBias = v_shadowBias;\n  #endif\n  #if USE_NORMAL_MAP\n    vec3 nmmp = texture2D(normalMap, NORMAL_UV).xyz - vec3(0.5);\n    vec3 bitangent = cross(v_normal, v_tangent.xyz) * v_tangent.w;\n    s.normal =\n      (nmmp.x * emissiveScaleParam.w) * normalize(v_tangent.xyz) +\n      (nmmp.y * emissiveScaleParam.w) * normalize(bitangent) +\n      nmmp.z * normalize(s.normal);\n  #endif\n  #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n  packHighpData(s.position, s.position_fract_part, v_position);\n  #else\n  s.position = v_position;\n  #endif\n  vec4 pbr = pbrParams;\n  #if USE_PBR_MAP\n    vec4 res = texture2D(pbrMap, PBR_UV);\n    pbr.x *= res.r;\n    pbr.y *= res.g;\n    pbr.z *= res.b;\n    pbr.w *= res.a;\n  #endif\n  #if USE_METALLIC_ROUGHNESS_MAP\n    vec4 metallicRoughness = texture2D(metallicRoughnessMap, PBR_UV);\n    pbr.z *= metallicRoughness.b;\n    pbr.y *= metallicRoughness.g;\n  #endif\n  #if USE_OCCLUSION_MAP\n    pbr.x *= texture2D(occlusionMap, PBR_UV).r;\n  #endif\n  s.occlusion = pbr.x;\n  s.roughness = pbr.y;\n  s.specularIntensity = 0.5;\n  s.metallic = pbr.z;\n  s.emissive = emissive.rgb * emissiveScaleParam.xyz;\n  #if USE_EMISSIVE_MAP\n    s.emissive *= SRGBToLinear(texture2D(emissiveMap, EMISSIVE_UV).rgb);\n  #endif\n}\n#if CC_FORWARD_ADD\n  #if CC_PIPELINE_TYPE == 0\n    #define LIGHTS_PER_PASS 1\n  #else\n    #define LIGHTS_PER_PASS 10\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n  #endif\n  float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n    float factor = distSqr * invSqrAttRadius;\n    float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n    return smoothFactor * smoothFactor;\n  }\n  float GetDistAtt (float distSqr, float invSqrAttRadius) {\n    float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n    attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n    return attenuation;\n  }\n  float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n    float cd = dot(litDir, L);\n    float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n    return (attenuation * attenuation);\n  }\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n  vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n    for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n      if (i >= numLights) break;\n      vec3 SLU = cc_lightPos[i].xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.0);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = cc_lightSizeRangeAngle[i].x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n      float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (cc_lightPos[i].w > 0.0) {\n        float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n        float cosOuter = cc_lightSizeRangeAngle[i].z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = cc_lightColor[i].rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n  readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n  readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n  readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n  struct CCLight\n  {\n    vec4 cc_lightPos;\n    vec4 cc_lightColor;\n    vec4 cc_lightSizeRangeAngle;\n    vec4 cc_lightDir;\n  };\n  struct Cluster\n  {\n    vec3 minBounds;\n    vec3 maxBounds;\n  };\n  struct LightGrid\n  {\n    uint offset;\n    uint ccLights;\n  };\n  CCLight getCCLight(uint i)\n  {\n    CCLight light;\n    light.cc_lightPos = b_ccLights[4u * i + 0u];\n    light.cc_lightColor = b_ccLights[4u * i + 1u];\n    light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n    light.cc_lightDir = b_ccLights[4u * i + 3u];\n    return light;\n  }\n  LightGrid getLightGrid(uint cluster)\n  {\n    uvec4 gridvec = b_clusterLightGrid[cluster];\n    LightGrid grid;\n    grid.offset = gridvec.x;\n    grid.ccLights = gridvec.y;\n    return grid;\n  }\n  uint getGridLightIndex(uint start, uint offset)\n  {\n    return b_clusterLightIndices[start + offset];\n  }\n  uint getClusterZIndex(vec4 worldPos)\n  {\n    float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n    float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n    float eyeDepth = -(cc_matView * worldPos).z;\n    uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n    return zIndex;\n  }\n  uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n  {\n    uint zIndex = getClusterZIndex(worldPos);\n    float clusterSizeX = ceil(cc_viewPort.z / float(16));\n    float clusterSizeY = ceil(cc_viewPort.w / float(8));\n    uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n    uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n    return cluster;\n  }\n  vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 position;\n    #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n    position = unpackHighpData(s.position, s.position_fract_part);\n    #else\n    position = s.position;\n    #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.001);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 finalColor = vec3(0.0);\n    uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n    LightGrid grid = getLightGrid(cluster);\n    uint numLights = grid.ccLights;\n    for (uint i = 0u; i < 100u; i++) {\n      if (i >= numLights) break;\n      uint lightIndex = getGridLightIndex(grid.offset, i);\n      CCLight light = getCCLight(lightIndex);\n      vec3 SLU = light.cc_lightPos.xyz - position;\n      vec3 SL = normalize(SLU);\n      vec3 SH = normalize(SL + V);\n      float SNL = max(dot(N, SL), 0.001);\n      float SNH = max(dot(N, SH), 0.0);\n      float distSqr = dot(SLU, SLU);\n      float litRadius = light.cc_lightSizeRangeAngle.x;\n      float litRadiusSqr = litRadius * litRadius;\n      float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n      float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n      attRadiusSqrInv *= attRadiusSqrInv;\n      float att = GetDistAtt(distSqr, attRadiusSqrInv);\n      vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n      if (light.cc_lightPos.w > 0.0) {\n        float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n        float cosOuter = light.cc_lightSizeRangeAngle.z;\n        float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n        float litAngleOffset = -cosOuter * litAngleScale;\n        att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n      }\n      vec3 lightColor = light.cc_lightColor.rgb;\n      float shadow = 1.0;\n      #if CC_RECEIVE_SHADOW\n        if (light.cc_lightPos.w > 0.0) {\n          shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n        }\n      #endif\n      lightColor *= shadow;\n      finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n    }\n    return vec4(finalColor, 0.0);\n  }\n  #endif\n  void main () {\n    StandardSurface s; surf(s);\n    #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n    vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n    #else\n    vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n    #endif\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n  void main () {\n    StandardSurface s; surf(s);\n    vec4 color = CCStandardShadingBase(s, v_shadowPos);\n    CC_APPLY_FOG(color, s.position.xyz);\n    gl_FragData[0] = CCFragOutput(color);\n  }\n#elif CC_PIPELINE_TYPE == 1\n  vec2 signNotZero(vec2 v) {\n    return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n  }\n  vec2 float32x3_to_oct(in vec3 v) {\n    vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n    return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n  }\n  void main () {\n    StandardSurface s; surf(s);\n    gl_FragData[0] = s.albedo;\n    gl_FragData[1] = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n    gl_FragData[2] = vec4(s.emissive, s.occlusion);\n  }\n#endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["CC_USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":223,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":75}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_LIGHTMAP","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"USE_TWOSIDE","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":[]},{"name":"CC_USE_IBL","type":"number","defines":[],"range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","defines":[],"range":[0,2]},{"name":"USE_REFLECTION_DENOISE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"NORMAL_UV","type":"string","defines":["USE_NORMAL_MAP"],"options":["v_uv","v_uv1"]},{"name":"PBR_UV","type":"string","defines":[],"options":["v_uv","v_uv1"]},{"name":"USE_PBR_MAP","type":"boolean","defines":[]},{"name":"USE_METALLIC_ROUGHNESS_MAP","type":"boolean","defines":[]},{"name":"USE_OCCLUSION_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"EMISSIVE_UV","type":"string","defines":["USE_EMISSIVE_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":["CC_FORWARD_ADD"],"range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean","defines":["CC_FORWARD_ADD"]}]},{"hash":3928335406,"name":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"pbrParams","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"emissiveScaleParam","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_texCoord1","format":21,"location":14,"defines":[]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":1,"defines":["HAS_SECOND_UV"]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":17,"location":2,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":17,"location":3,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  layout(location = 14) in vec2 a_texCoord1;\n#endif\nlayout(location = 0) out vec2 v_uv;\n#if HAS_SECOND_UV\n  layout(location = 1) out vec2 v_uv1;\n#endif\nlayout(location = 2) out vec4 v_worldPos;\nlayout(location = 3) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 0) in vec2 v_uv;\n#if HAS_SECOND_UV\n  layout(location = 1) in vec2 v_uv1;\n#endif\nlayout(location = 2) in vec4 v_worldPos;\nlayout(location = 3) in float v_clip_depth;\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\n#if HAS_SECOND_UV\n  out vec2 v_uv1;\n#endif\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4 pbrParams;\n  vec4 emissive;\n  vec4 emissiveScaleParam;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nin vec2 v_uv;\n#if HAS_SECOND_UV\n  in vec2 v_uv1;\n#endif\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying vec2 v_uv1;\n#endif\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 albedo;\n   uniform vec4 albedoScaleAndCutoff;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nvarying vec2 v_uv;\n#if HAS_SECOND_UV\n  varying vec2 v_uv1;\n#endif\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_ALPHA_TEST\n#endif\nvec4 frag () {\n  vec4 baseColor = albedo;\n  #if USE_ALBEDO_MAP\n    baseColor *= texture2D(albedoMap, ALBEDO_UV);\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.ALPHA_TEST_CHANNEL < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":184,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":75}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"ALBEDO_UV","type":"string","defines":["USE_ALBEDO_MAP"],"options":["v_uv","v_uv1"]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r"]}]}],[{"name":"opaque","passes":[{"program":"builtin-standard|standard-vs|standard-fs","properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"specularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrength":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,5]},"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]},{"name":"transparent","passes":[{"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST","slide":true,"step":0.001,"range":[0,1]},"handleInfo":["albedoScaleAndCutoff",3,13]},"occlusion":{"type":13,"value":[1],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",0,13]},"roughness":{"type":13,"value":[0.8],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",1,13]},"metallic":{"type":13,"value":[0.6],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",2,13]},"specularIntensity":{"type":13,"value":[0.5],"editor":{"slide":true,"step":0.001,"range":[0,1]},"handleInfo":["pbrParams",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveScale":{"type":15,"value":[1,1,1],"handleInfo":["emissiveScaleParam",0,15]},"normalStrength":{"type":13,"value":[1],"editor":{"parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,5]},"handleInfo":["emissiveScaleParam",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"normalMap":{"value":"normal","type":28},"pbrMap":{"value":"grey","type":28},"metallicRoughnessMap":{"value":"grey","type":28},"occlusionMap":{"value":"white","type":28},"emissiveMap":{"value":"grey","type":28},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"pbrParams":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,0.8,0.6,0.5]},"emissiveScaleParam":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}},{"phase":"forward-add","propertyIndex":0,"program":"builtin-standard|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"builtin-standard|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[[63,"SM_EnemyMothership_01__0.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[62],[47,"SM_EnemyMothership_01",[-2],[2,"4e37O/SwtXH7ij3M5Kc8S1",-1,0]],[53,"SM_EnemyMothership_01",1,[[52,-3,[1,"3d+F2YkWVUE5dfeE39LNmH"],[0],[34],1]],[2,"53OMhPX+VYzZ+r1aj16Fsd",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[256,257]],[[[57,".bin",495361627,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":17712,"length":2256,"count":564,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":17712,"count":369,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.26215237379074097,-0.3705788254737854,-0.0040237754583358765],"maxPosition",8,[1,0.26215237379074097,0.36600902676582336,0.20196278393268585]]],-1],0,0,[],[],[]],[[[63,"SM_TowerCubeBase_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[62],[47,"SM_TowerCubeBase_01",[-2],[2,"2ftx87dFpbdKiqdLuVoOoe",-1,0]],[53,"SM_TowerCubeBase_01",1,[[52,-3,[1,"dbdV3sdgFULJOrqOS2M8DG"],[0],[34],1]],[2,"bbU+MnLS9Ry4NU6AjJZqVq",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[258,259]],[[[57,".bin",476204002,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10368,"length":2928,"count":732,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":10368,"count":216,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3708244562149048,-0.3708243668079376,7.450580596923828e-9],"maxPosition",8,[1,0.37082427740097046,0.37082439661026,0.14156852662563324]]],-1],0,0,[],[],[]],[[[62],[47,"SM_BlockSlot_01",[-2],[2,"9ea1IJXwxR8LDyOJtyJFa5",-1,0]],[53,"SM_BlockSlot_01",1,[[52,-3,[1,"8avigzXY5XhKbCpmY6Hsd0"],[0],[34],1]],[2,"5aY9yPu/BZp7UcX9kK9WyN",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[260,261]],[[[63,"SM_BlockSlot_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",377554118,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9216,"length":3048,"count":762,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9216,"count":192,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.48000001907348633,-0.47999992966651917,0],"maxPosition",8,[1,0.47999992966651917,0.48000001907348633,0.7500349879264832]]],-1],0,0,[],[],[]],[[[112,"0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4294967295],"mainTexture",6,0]],11]]],0,0,[0,0],[30,12],[3,25]],[[[50,"P-MotherShip"],[185,"P-MotherShip",[[-11,-12,[80,"Events",-14,[2,"d95EadoVJHU5W5txftTQiE",-13,0]],-15],1,1,4,1],[[-6,[55,-7,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-8,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-9,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-10,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],1,4,4,4,4],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[47,"VFX",[-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28],[2,"84MNp5rytHk7MKew+MZE5D",1,0]],[256,"Art",1,[-33,-34,-35,2],[[[88,true,-29,[1,"16mUt5j0BPfLyhp6c95pwE"],[32,33,34],35],-30,[141,-32,[1,"94pyLGjUVBT4hYHycVaNdM"],-31]],4,1,4],[2,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[35,"Scripts",1,[-36,-37,-38,-39,-40,-41],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[46,"Movement",4,[-42],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,3,[29,"4e37O/SwtXH7ij3M5Kc8S1",-50,[69,"dfEv3U1g9IeYieQZz8WRth",1,[[67,[4,["4e37O/SwtXH7ij3M5Kc8S1"]],[[55,-49,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[14,"SM_Model",["_name"],-43],[10,["_lpos"],-44,[1,0,0,0]],[10,["_lrot"],-45,[3,0,0,0,1]],[10,["_euler"],-46,[1,0,0,0]],[40,["_materials","0"],[4,["3d+F2YkWVUE5dfeE39LNmH"]],3],[10,["_lscale"],-47,[1,1,1,2]],[14,"SM_Model",["_name"],-48]]],2]],[4,["4e37O/SwtXH7ij3M5Kc8S1"]],[115,"Spawn Enemies",[[191,-52,[1,"c8XHdfxHpDTqy1MRySTiTb"],-51]],[2,"cega/hyd1PgbnfB8wiWCT3",1,0]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-60,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-59]]]],[[14,"P-HP-Bar",["_name"],-53],[10,["_lpos"],-54,[1,207,448.00000000000006,0]],[10,["_lrot"],-55,[3,0,0,0,1]],[10,["_euler"],-56,[1,0,0,0]],[14,"Art",["_name"],-57],[10,["_lpos"],-58,[1,0,0,0]]]],36]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Spawn",2,[-61,-62],[2,"10/INEOPhEu6IJP8OyaaZC",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[94,"VFX-BossExplosion",512,2,[-63],[2,"54Oy7pBqRJJ4lO97SaTv7q",1,0]],[73,0.2,false,false,12,[1,"7627i4zhRIU5rd7TxiSB4w"],[[8,null],6,0],[5],[3,3],[0],[0],[0],[0],[0],[135,3],[3,1.8],[3,0.2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.08258928571428571],[13,0.9241071428571428,[4,4289835441]],[13,0.9620535714285714,[4,4281084972]]],[[9,255,0.6004464285714286],[9,0,1]]]]],[31,[0]],[78,true,true,[12,1,20,[8,[0,0.6948717948717948,1],[[45,2,2.839080459770115,1,2.839080459770115,1],[6,2,0.9333333333333333,0.4622222222222221,0.4622222222222221],[72,2,1,1,1]]]],[12,1,6,[8,[0,0.7974358974358975],[[136,2,2,0.05925925925925926,-0.015204678362573122,0.09771705989047173,-0.015204678362573122],[137,2,1,0.9962962962962963,0.0288636426001776,0.0288636426001776,0.09792722000142738]]]],[12,1,5,[8,[0,0.8051282051282052],[[136,2,2,1,-0.015285126396237575,0.09720572269540514,-0.015285126396237575],[137,2,1,0.03333333333333333,-0.007150715071507141,-0.007150715071507141,0.10365593276852825]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-64],[26,9]],[64,"VFX-Flash",512,2,[-65],[2,"af9aRLNapJiqfIfEQa7U2N",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[73,0.2,false,false,14,[1,"82NL/UJ31ENbksuFtaMJiS"],[[10,null],6,0],[5],[3,1.5],[0],[0],[0],[0],[0],[0],[3,1.7],[3,0.2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.44642857142857145],[9,0,1]]]]],[77,0,[3,1]],[32,true,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-66],[26,11]],[64,"VFX_SprayOut",512,2,[-67],[2,"8dS8CNpcxFtZoais3uHp9w",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,1,false,false,16,[1,"68Op3EauJIk66Ez8YhINvj"],[12],[5],[23,3,0.1,0.4],[0],[0],[23,3,2,10],[0],[0],[0],[3,1.7],[3,1],[0],[83,80],[0],[[25,[3,50]]],[20,true,[16,1,[37,[[38,255],[9,255,0.22767857142857142],[9,0,1]]]]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[110,true,[0],[0],[0],[30,1,[8,[0,1],[[11,2,1],[6,2,0.037037037037037035,-1.54074074074074,-1.54074074074074]]]]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-68],[99,1,0.1,13]],[94,"VFX_Explosion2",512,2,[-69],[2,"13DLnsJ2VC6IFh9vkGqsMX",1,0]],[73,1.5,false,false,18,[1,"45PpFocJlJpJQup74wBa28"],[[14,null],6,0],[56,[4,4294506744]],[3,1],[0],[0],[0],[0],[0],[135,3],[3,2],[3,1.5],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.033482142857142856],[43,0.078125],[13,0.18973214285714285,[4,4288716960]],[13,0.8459821428571428,[4,4280624421]]],[[9,255,0.1049107142857143],[9,255,0.21651785714285715],[9,0,1]]]]],[31,[0]],[32,true,[12,1,20,[8,[0,0.38461538461538464,1],[[45,2,6.259259259259259,1,6.259259259259259,1],[6,2,0.9148148148148149,0.4622222222222221,0.4622222222222221],[72,2,1,1,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-70],[26,15]],[64,"VFX_SprayOut2",512,2,[-71],[2,"905M+mhW9DA6yML2PVFzUY",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,6,false,false,20,[1,"7dHZ9a8gpCaqUa89NyFyLf"],[16],[5],[23,3,0.1,0.4],[0],[0],[23,3,10,50],[0],[0],[0],[3,2],[3,1],[0],[83,80],[0],[[25,[3,50]]],[20,true,[16,1,[37,[[38,255],[9,255,0.22767857142857142],[9,0,1]]]]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[110,true,[0],[0],[0],[30,1,[8,[0,0.27708427247702977,0.5230769230769231,1],[[11,2,1],[6,2,0.30922275440798175,-2.3928348401596575,-2.3928348401596575],[6,2,0.05925925925925926,-0.21802935010482188,-0.21802935010482188],[11,2,0.020792806452028488]]]]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-72],[99,1,0.1,17]],[64,"VFX-ScreenTone",512,2,[-73],[2,"93BNyGbDBHE43adq5Je89f",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[160,false,false,22,[1,"3cYkW0ChBFa65j+VU0kq4Q"],[[18,null],6,0],[56,[4,1811939327]],[3,100],[0],[0],[0],[0],[0],[0],[3,2],[3,1],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.44642857142857145],[9,0,1]]]]],[77,0,[3,1]],[49,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-74],[26,19]],[94,"VFX-CircleIn",512,2,[-75],[2,"60IFXtU0FJqo8hF+jkz3w4",1,0]],[73,0.4,false,false,24,[1,"ceF4cP9hRFzrL9B6wnSrkx"],[[20,null],6,0],[5],[3,0.5],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[3,0.1],[3,0.4],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[13,0.12946428571428564,[4,4280229663]],[13,0.7745535714285714,[4,4289703855]],[43,0.9464285714285714]],[[38,0],[9,255,0.5357142857142858],[9,255,1]]]]],[31,[0]],[32,true,[12,1,20,[8,[0,1],[[41,2,0.9703703703703702,0.050682261208577085,1,0.050682261208577085,1],[45,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-76],[26,21]],[94,"VFX-RingIn",512,2,[-77],[2,"6bEKpC9GhCyYZ0i0P9Irsv",1,0]],[73,0.4,false,false,26,[1,"f2ywj3ErJDkqOF6qsiSzO6"],[[22,null],6,0],[5],[3,1.5],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[3,0.35],[3,0.4],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[13,0.12276785714285714,[4,4280887593]],[13,0.7745535714285714,[4,4290032820]],[43,0.9464285714285714]],[[38,0],[9,34,0.34151785714285715],[9,255,0.6941964285714286],[9,255,1]]]]],[31,[0]],[32,true,[12,1,8,[8,[0,1],[[41,2,0.9703703703703703,0.05068226120857707,1,0.05068226120857707,1],[45,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-78],[26,23]],[64,"VFX_SprayIn",512,2,[-79],[2,"cfODmQVsZLpJgV4QPS0rlM",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[134,1.2,false,false,28,[1,"bf8XzHLJ9DPYrslqqomWSQ"],[24],[5],[3,0.2],[0],[0],[3,5],[0],[0],[0],[0],[3,0.1],[0],[12,1,80,[8,[0,0.7333333333333333],[[6,2,0.05555555555555556,2.781893004115226,2.781893004115226],[11,2,0.9925925925925926]]]],[0],[122,[5]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-80],[99,1,0.5,25]],[64,"VFX-ChargeFlash",512,2,[-81],[2,"48Qgk4M8lIApXgomtAuYZR",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,2,false,false,30,[1,"a9WoHLJDBA/5Dn03IxYWkx"],[26],[5],[3,0.6],[0],[0],[0],[0],[0],[0],[3,0.3],[3,2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.8191964285714286],[9,0,1]]]]],[77,0,[3,1]],[32,true,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-82],[26,27]],[64,"VFX-Sparkle",512,2,[-83],[2,"b54XYX1YxClJ9bSjFeV4CI",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[178,0.7,false,false,32,[1,"08Pqpfy2NGh7VTVHP6F0Fl"],[[28,null],6,0],[16,4,[33,[[87,[4,4294926764]],[13,0.3169642857142857,[4,4294943343]],[13,0.6517857142857143,[4,4292278146]],[13,1,[4,4284279807]]],[[38,255]]]],[23,3,0.1,1.2],[0],[0],[3,0.1],[0],[0],[0],[3,1],[3,0.15],[0],[161,30,30],[0],[20,true,[16,1,[37,[[38,0],[9,255,0.12723214285714285],[9,255,0.2879464285714286],[9,0,1]]]]],[188,true,3,2,1.2,[3,1]],[32,true,[12,1,2,[8,[0,0.12307692307692308,0.3128205128205128,0.9974358974358974],[[11,2,0.48518518518518516],[6,2,1,0.18055555555555491,0.18055555555555491],[11,2,0.5074074074074074],[11,2,0.4962962962962963]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-84],[26,29]],[64,"VFX_LightRay",512,2,[-85],[2,"bbo46bJDBId6qX3q3t3UJO",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[134,1,false,false,34,[1,"9d2cGf2+tADLLAbxb6MY93"],[30],[5],[12,1,4,[8,[0,1],[[6,2,0.48148148148148145,1.0000000000000002,1.0000000000000002],[11,2,1]]]],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[0],[3,1],[0],[12,1,10,[8,[0,1],[[6,2,0.3555555555555555,1.9740740740740748,1.9740740740740748],[11,2,1]]]],[0],[20,true,[16,1,[37,[[38,0],[9,133,0.09375],[9,255,0.15401785714285715],[9,153,0.24330357142857142],[9,0,1]]]]],[77,0,[3,1]],[78,true,true,[0],[30,1,[8,[0,0.2717948717948718,1],[[6,2,1,-3.2828282828282838,-3.2828282828282838],[6,2,0.45925925925925926,-1.155555555555555,-1.155555555555555],[6,2,0.16666666666666666,0.03073286052009456,0.03073286052009456]]]],[12,1,2,[8,[0,0.2717948717948718,0.9923076923076923],[[6,2,0.5,2.4246031746031744,2.4246031746031744],[6,2,0.8814814814814815,0.36111111111111127,0.36111111111111127],[11,2,1]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-0.17453292519943295,0.17453292519943295]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-86],[26,31]],[46,"HP Controller",4,[-87],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[166,36,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-88],[7,"cc.ParticleSystem","play",12],[7,"cc.ParticleSystem","play",14],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",5],[7,"cc.ParticleSystem","play",16],[7,"cc.ParticleSystem","play",18],[7,"cc.ParticleSystem","play",20],[7,"cc.ParticleSystem","play",22],[7,"cc.ParticleSystem","play",24],[7,"cc.ParticleSystem","play",26],[7,"cc.ParticleSystem","play",28],[7,"cc.ParticleSystem","play",30],[7,"cc.ParticleSystem","play",32],[7,"cc.ParticleSystem","play",34],[68,"2022ebMdchE2pNL1SpqTm8g","setBool","isDead,true",3]],1],[54,"On Death VFX Finished",4,[[96,-89,[1,"08YVxqU/ZOvoZe6kTPNhhe"],[13,15,17,19,21,23,27,29,31,33,35,25],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"c5O/P6+pRGmK9nMqqnghoW",1,0]],[105,"Temp-Model",false,3,[[79,"Sphere<ModelComponent>",-90,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",3,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[4,["53OMhPX+VYzZ+r1aj16Fsd"]],[98,0.3,false,11,[1,"41xMUx+tBH4aqh2W9Xq0aM"],[4],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-91],[26,5]],[97,0.3,false,11,[1,"d1qethHmFM7KhlZkPwy4IB"],[[6,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-92],[26,7]],[128,3,[1,"cee2ID8IRMEbn7lUxcJnlp"]],[104,5,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[46,"Stun",4,[-93],[2,"28wv4th1pNs6qDNkpOR9dx",1,0]],[117,46,[1,"92X5rq9oNDNouphSNFIziH"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",5]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",5]]],[35,"Specials",4,[8],[2,"5cwJ6W6ItJ9Jh9kHBdNXK1",1,0]],[179,"MotherShip",2,1,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",5],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",36],[7,"71b59j50pJOQYyfqjE0LpJs","initialize",8]],37,45,47],[54,"Timer",4,[[408,true,3,-94,[1,"fcShTvEgVPGZyxfaWD8rMY"],[[7,"71b59j50pJOQYyfqjE0LpJs","spawnEnemies",8]]]],[2,"b1d80oKfFBHq84RIVNJlOx",1,0]],[35,"UI",1,[9],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,6,0,-2,9,0,3,9,0,13,37,0,2,1,0,-1,49,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-2,4,0,2,1,0,7,1,0,-4,51,0,-1,11,0,-2,12,0,-3,14,0,-4,16,0,-5,18,0,-6,20,0,-7,22,0,-8,24,0,-9,26,0,-10,28,0,-11,30,0,-12,32,0,-13,34,0,0,3,0,-2,44,0,33,44,0,0,3,0,-1,39,0,-2,40,0,-3,6,0,-1,5,0,-2,36,0,-3,46,0,-4,38,0,-5,48,0,-6,50,0,-1,45,0,1,7,0,1,7,0,1,7,0,1,7,0,1,41,0,1,41,0,0,6,0,2,6,0,38,49,0,0,8,0,1,10,0,1,10,0,1,10,0,1,10,0,1,52,0,1,52,0,17,40,0,2,9,0,-1,42,0,-2,43,0,-1,13,0,4,13,0,-1,15,0,4,15,0,-1,17,0,4,17,0,-1,19,0,4,19,0,-1,21,0,4,21,0,-1,23,0,4,23,0,-1,25,0,4,25,0,-1,27,0,4,27,0,-1,29,0,4,29,0,-1,31,0,4,31,0,-1,33,0,4,33,0,-1,35,0,4,35,0,-1,37,0,3,38,0,0,38,0,0,39,0,4,42,0,4,43,0,-1,47,0,0,50,0,9,1,2,7,3,8,7,48,9,7,51,94],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,44],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,-2,-3,18,8,26],[14,13,262,1,4,3,11,9,4,3,7,6,7,6,4,3,7,6,7,6,4,3,11,9,7,6,7,6,33,29,43,41,5,15,51,5,16,57]],[[{"name":"default_btn_normal","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"packable":true}],[2],0,[0],[21],[263]],[[{"name":"UI_Panel_Outline 3","rect":{"x":0,"y":0,"width":60,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":60,"height":60},"rotated":false,"capInsets":[3,3,3,3],"packable":true}],[2],0,[0],[21],[264]],[[[50,"P-LaserTower-Beam-OmegaBeam"],[47,"P-LaserTower-Beam-OmegaBeam",[-2],[2,"c46/YsCPVOJYA4mWEpNYRx",-1,0]],[54,"Temp",1,[[295,-3,[1,"222iH/EhhPB7NCHRxT98+N"],[3,0.5],[5],0]],[2,"b5twpQgB9KKoMf5U6SpAil",1,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0],[42],[65]],[[[63,"SM_EnemyBreeder_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",2116400395,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":13824,"length":2232,"count":558,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":13824,"count":288,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.44926419854164124,-0.6113954782485962,-0.010970347560942173],"maxPosition",8,[1,0.44926419854164124,0.6379702091217041,0.4927515685558319]]],-1],0,0,[],[],[]],[[[62],[47,"SM_EnemyBreeder_01",[-2],[2,"b6WuSZggVbVqyZ36EcrJAQ",-1,0]],[53,"SM_EnemyBreeder_01",1,[[52,-3,[1,"14dCZuzQ5ZrYZb8GT6TPbg"],[0],[34],1]],[2,"eaqOmHLtpfApf7fFMjgxn8",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[265,266]],[[[50,"P-Crowder-0"],[125,"P-Crowder-0",[[-16,-17,[80,"Events",-19,[2,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[156,"Crowder-0",-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[55,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[151,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[2,"4505kBZFlJebjm5k8fm2Li",1,0],[1,0.6,0.6,0.8]],[124,"Movement",[-26],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,2,[29,"7fciu/Gg9S/bnu8xJWbMom",-34,[69,"1crzRsAYpIWbqwVN3BJi/f",1,[[67,[4,["7fciu/Gg9S/bnu8xJWbMom"]],[[55,-33,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[14,"SM_Model",["_name"],-27],[10,["_lpos"],-28,[1,0,0,0]],[10,["_lrot"],-29,[3,0,0,0,1]],[10,["_euler"],-30,[1,0,0,0]],[40,["_materials","0"],[4,["9efmySxl5TsIXK39+yLHpg"]],3],[10,["_lpos"],-31,[1,0,-0.039,0.154]],[14,"SM_Model",["_name"],-32]]],2]],[35,"Scripts",1,[3,-35,-36,-37],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[4,["7fciu/Gg9S/bnu8xJWbMom"]],[301,"VFX",2,[-38,-39,-40],[2,"c45tEhPp1ITqXIWf5CJEoD",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-48,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-47]]]],[[14,"P-HP-Bar",["_name"],-41],[10,["_lpos"],-42,[1,207,448.00000000000006,0]],[10,["_lrot"],-43,[3,0,0,0,1]],[10,["_euler"],-44,[1,0,0,0]],[14,"Art",["_name"],-45],[10,["_lpos"],-46,[1,0,0,0]],[22,["_contentSize"],[4,["c64LiUsQNM4LjiTXqu/AKi"]],[5,414,896]]]],15]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[46,"VFX_Death_Erupt",7,[-49],[2,"a3VoOrtd1O5aX6tu3uI4aA",1,0]],[60,1,false,false,10,[1,"86T87a9K9E5pStURaaTJNo"],[4],[5],[3,0.4],[0],[0],[0],[0],[0],[0],[0],[3,0.16],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.3169642857142857],[13,0.4575892857142857,[4,4294938922]],[13,1,[4,4289817645]]],[[9,255,0.5736607142857143],[9,0,1]]]]],[31,[0]],[78,true,true,[111,2,2,[8,[0,1],[[6,2,0.02962962962962963,1.913888888888889,1.913888888888889],[11,2,1]]],[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-50],[26,5]],[46,"VFX_Death_Shards",7,[-51],[2,"7bjBpGqPVKf7P9VHT0Q37v",1,0]],[60,1,false,false,12,[1,"d4SIGx/vFHh4rzxqzQTdki"],[6],[5],[23,3,0.05,0.1],[0],[0],[23,3,3,5],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.3,0.8],[3,1],[0],[0],[[25,[23,3,5,7]]],[20,true,[16,1,[33,[[43,0.16964285714285715],[13,0.33035714285714285,[4,4294938368]],[13,0.7991071428571429,[4,4284748062]]],[[9,255,0.23883928571428573],[9,0,1]]]]],[109,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-8.726646259971647,8.726646259971647]],[123,true,2,2,[0],[0]],[19,[0],[0],[5],[5],-52],[26,7]],[46,"VFX_Spawn",7,[-53,-54],[2,"67Lt3FY85FMZmNgeKfFJLa",1,0]],[46,"HP Controller",5,[-55],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[139,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-56],[7,"cc.ParticleSystem","play",10],[7,"cc.ParticleSystem","play",12],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[54,"On Death VFX Finished",5,[[96,-57,[1,"7a/Dbp2GtHQYJ2AH1lfcg8"],[11,13],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"949GjlVN5KlLBUMBhbcK1w",1,0]],[105,"Temp-Model",false,2,[[79,"Sphere<ModelComponent>",-58,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",2,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[4,["ee6J7zZuhZ7ZlMxt5O9sjf"]],[98,0.3,false,14,[1,"84H40Z+cJL8rtOOFl4ygbD"],[8],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-59],[26,9]],[97,0.3,false,14,[1,"84H40Z+cJL8rtOOFl4ygbD"],[[10,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-60],[26,11]],[104,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[46,"Stun",5,[-61],[2,"72Uf8+ozZB8ayDAn7lWb4W",1,0]],[117,24,[1,"f2+yHdpmFP57Dep08Uz6Rn"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[35,"UI",1,[8],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,3,8,0,13,16,0,2,1,0,20,25,0,27,23,0,28,16,0,3,3,0,3,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,2,1,0,7,1,0,-4,26,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,23,0,1,6,0,1,6,0,1,6,0,1,6,0,1,20,0,1,20,0,0,4,0,2,4,0,-2,15,0,-3,24,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,27,0,1,27,0,17,19,0,2,8,0,-1,11,0,4,11,0,-1,13,0,4,13,0,-1,21,0,-2,22,0,-1,16,0,3,17,0,0,17,0,0,18,0,4,21,0,4,22,0,-1,25,0,9,1,3,7,5,8,7,26,61],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,-2,18,8],[14,13,267,1,20,19,10,18,4,3,11,9,5,15,5,16]],[[[149,[[150,[120,[-12,-13,-14,-15,-16,-17,-18],[[121,-5,-4],[329,0,true,false,-7,-6,[[91,"zoomIn"],[335,[336,"zoomIntensity"],[412,2]]]],[84,0,false,-9,-8,[[91,"zoomIn"],[335,[336,"zoomIntensity"],[412,1]]]],[84,0,false,-11,-10,[[91,"zoomIn"],[335,[336,"zoomIntensity"],[578]]]]],-3,-2,-1]]],[{},"zoomIntensity",4,[579,3],"zoomIn",4,[113,2]]],[71,"Empty",[180]],[65,"Entry"],[65,"Exit"],[65,"Any"],[71,"Camera-ZoomIn-Medium",[75,0]],[71,"Camera-ZoomIn-Large",[75,1]],[71,"Camera-ZoomIn-Small",[75,2]]],0,[0,22,4,0,23,3,0,24,2,0,14,1,0,15,2,0,14,6,0,15,1,0,14,5,0,15,1,0,14,7,0,15,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,-5,6,0,-6,7,0,-7,1,18],[0,0,0],[16,16,16],[160,161,162]],[[[149,[[150,[120,[-14,-15,-16,-17,-18,-19,-20],[[84,0,false,-5,-4,[[181,1,[118,"inScene"]]]],[121,-7,-6],[329,0,true,false,-9,-8,[[157,[118,"inScene"]]]],[84,0,false,-11,-10,[[157,[118,"paused"]]]],[84,0,false,-13,-12,[[181,1,[118,"paused"]]]]],-3,-2,-1]]],[{},"inScene",4,[174,1,false],"paused",4,[174,1,false]]],[71,"IntroPause_PlayClick",[75,1]],[65,"Entry"],[71,"IntroPause_Intro",[75,0]],[71,"Empty",[180]],[71,"IntroPause_PauseClick",[75,2]],[65,"Exit"],[65,"Any"]],0,[0,22,7,0,23,6,0,24,2,0,14,1,0,15,3,0,14,4,0,15,2,0,14,3,0,15,4,0,14,5,0,15,1,0,14,1,0,15,5,0,-1,2,0,-2,6,0,-3,7,0,-4,3,0,-5,1,0,-6,4,0,-7,5,20],[0,0,0],[16,16,16],[134,135,136]],[[[149,[[150,[120,[-6,-7,-8,-9],[[121,-5,-4]],-3,-2,-1]],[150,[120,[-19,-20,-21,-22,-23],[[121,-14,-13],[193,0,-16,-15,[[91,"IsHit"]]],[266,0,-18,-17]],-12,-11,-10]]],[{},"IsHit",4,[113,2]]],[216,"Empty"],[65,"Entry"],[65,"Entry"],[71,"Hit",[75,1]],[65,"Exit"],[65,"Any"],[71,"Idle",[75,0]],[65,"Exit"],[65,"Any"]],0,[0,22,6,0,23,5,0,24,2,0,14,7,0,15,2,0,-1,2,0,-2,5,0,-3,6,0,-4,7,0,22,9,0,23,8,0,24,3,0,14,1,0,15,3,0,14,4,0,15,1,0,14,1,0,15,4,0,-1,3,0,-2,8,0,-3,9,0,-4,1,0,-5,4,23],[0,0],[16,16],[163,164]],[[{"name":"UI_Indicator","rect":{"x":0,"y":0,"width":60,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":60,"height":60},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[21],[268]],[[[50,"05-Ground-Block"],[257,"05-Ground-Block",16,[[-17,-18,[80,"Events",-20,[2,"26v2eHDtlCM7ivoqBF7TjE",-19,0]]],1,1,4],[[413,-16,[1,"a89E+Jrq1Hr6jEGUCmTbE5"]]],[196,"a0J5bKqYFEmaKO4oONshDj",-15,0,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14]]],[195,"Toppings 1",[-21,-22,-23,-24,-25,-26],[2,"91/rTcXZFEpLJ3d9w+Jfn2",1,0],[1,0,0.7,0]],[35,"Art",1,[-27,-28,-29,-30,2,-31,-32],[2,"55qqtzXrZI0LhFh/yPSZLQ",1,0]],[35,"Scripts",1,[-33,-34,-35,-36,-37,-38,-39],[2,"1cB2ZUhadFO48t4WKrMPxi",1,0]],[35,"Toppings 3",3,[-40,-41,-42,-43],[2,"17T2Wy69VI1a72BMjCLZCG",1,0]],[4,["3eCYgi3G9Xl4TH+IlMfqkO"]],[4,["adq/Yq1hVR5Kyey84ZN4kv"]],[4,["9baIPWPuBegYREJ2bd45GU"]],[4,["d29whoas9ct6gAWpHxYcDc"]],[4,["6bMnZwcz1cbYMdXClIbfGW"]],[4,["2c3ig9FjFS+bF3iVcd7QWx"]],[4,["4bKhv/jV5Y7ZI2kqZex6z2"]],[4,["bb0RXNBHxTGI42/b2Cnubv"]],[4,["37AJz6L3dTxa3usvYy5S1i"]],[4,["69vp2YjNJakaIDVHGspGD6"]],[4,["deBsgn88dR46R0UuPdg7fm"]],[82,0,null,[29,"4fecgAd2JbDKVfOw0g/xbW",-48,[42,"e4DqtOv+hMhpZvlqnQtq4q",1,[[14,"SM_BlockHigh_01",["_name"],-44],[10,["_lpos"],-45,[1,0,0,0]],[10,["_lrot"],-46,[3,0,0,0,1]],[10,["_euler"],-47,[1,0,0,0]],[40,["_materials","0"],[4,["14k8y0SLpdaroj+3hWQPNc"]],3]]],2]],[4,["4fecgAd2JbDKVfOw0g/xbW"]],[82,0,null,[29,"73iHBgzzVTcYYBmRlHhAuY",-53,[42,"ccHsts2eBODZ9YZeUIEkpz",1,[[14,"SM_BlockHigh_02",["_name"],-49],[10,["_lpos"],-50,[1,0,0,0]],[10,["_lrot"],-51,[3,0,0,0,1]],[10,["_euler"],-52,[1,0,0,0]],[40,["_materials","0"],[4,["a6Qiv9LN5Y0ok4uMtmSOe6"]],5]]],4]],[4,["73iHBgzzVTcYYBmRlHhAuY"]],[82,0,null,[29,"4fecgAd2JbDKVfOw0g/xbW",-60,[42,"56nrscSXdJvptKKT2fdbP9",1,[[14,"SM_BlockHigh_02",["_name"],-54],[10,["_lpos"],-55,[1,0,0,0]],[10,["_lrot"],-56,[3,0,0,0,1]],[10,["_euler"],-57,[1,0,0,0]],[143,["_materials","0"],-58,7],[143,["_mesh"],-59,8]]],6]],[4,["4fecgAd2JbDKVfOw0g/xbW"]],[36,0,null,2,[29,"3eCYgi3G9Xl4TH+IlMfqkO",-61,[42,"9aAM9frjNKEL29b3DC4P5B",1,[[14,"SM_BlockDetail_01",["_name"],6],[10,["_lpos"],6,[1,0,0,0.051]],[10,["_lrot"],6,[3,0,0,0,1]],[10,["_euler"],6,[1,0,0,0]],[40,["_materials","0"],[4,["fb6o+I7s1ap6QaBFvF7AAY"]],10],[14,false,["_active"],6]]],9]],[36,0,null,2,[29,"adq/Yq1hVR5Kyey84ZN4kv",-62,[42,"54iNqhd6VMSbrQJO75zM+v",1,[[14,"SM_BlockDetail_02",["_name"],7],[10,["_lpos"],7,[1,-0.007,0,-0.018]],[10,["_lrot"],7,[3,0,0,0,1]],[10,["_euler"],7,[1,0,0,0]],[40,["_materials","0"],[4,["49hPoZFQtfgKWF4Jpx8AbD"]],12],[14,false,["_active"],7]]],11]],[36,0,null,2,[29,"9baIPWPuBegYREJ2bd45GU",-63,[42,"b4+NwYno1DDrlBIcZi4VhG",1,[[14,"SM_BlockDetail_03",["_name"],8],[10,["_lpos"],8,[1,0,0,0]],[10,["_lrot"],8,[3,0,0,0,1]],[10,["_euler"],8,[1,0,0,0]],[14,false,["_active"],8],[40,["_materials","0"],[4,["3cp8QxXtBa7JpQCn73Ia+U"]],14]]],13]],[36,0,null,2,[29,"d29whoas9ct6gAWpHxYcDc",-64,[42,"a6b0hDecBLo6nrTZZMUKjK",1,[[14,"SM_BlockDetail_04",["_name"],9],[10,["_lpos"],9,[1,0,0,0]],[10,["_lrot"],9,[3,0,0,0,1]],[10,["_euler"],9,[1,0,0,0]],[14,false,["_active"],9],[40,["_materials","0"],[4,["b4Cl6HSUJYAI6DNuXBqPYC"]],16]]],15]],[36,0,null,2,[29,"6bMnZwcz1cbYMdXClIbfGW",-65,[42,"75cO3Me/RDiLup7gapxRYM",1,[[14,"SM_BlockDetail_05",["_name"],10],[10,["_lpos"],10,[1,0,0,0]],[10,["_lrot"],10,[3,0,0,0,1]],[10,["_euler"],10,[1,0,0,0]],[14,false,["_active"],10],[40,["_materials","0"],[4,["11J0+1wghVOZLzTMW9skJd"]],18]]],17]],[36,0,null,2,[29,"2c3ig9FjFS+bF3iVcd7QWx",-66,[42,"06hYD6dTRLsKYsM3ri/b1o",1,[[14,"SM_BlockDetail_06",["_name"],11],[10,["_lpos"],11,[1,0,0,0]],[10,["_lrot"],11,[3,0,0,0,1]],[10,["_euler"],11,[1,0,0,0]],[14,false,["_active"],11],[40,["_materials","0"],[4,["feSFXUciRfzZUBkwwC679a"]],20]]],19]],[35,"Toppings 2",3,[-67],[2,"8a2m/PAn5LZKBq7UkO+tiG",1,0]],[36,0,null,29,[29,"4bKhv/jV5Y7ZI2kqZex6z2",-68,[42,"645+Uxk2VD+JmtT/Pp2xN0",1,[[14,"SM_Cracks_01",["_name"],12],[10,["_lpos"],12,[1,0,0,0]],[10,["_lrot"],12,[3,0,0,0,1]],[10,["_euler"],12,[1,0,0,0]],[40,["_materials","0"],[4,["fdBUKNZOdcRpJjryQ5pdeh"]],22],[14,false,["_active"],12]]],21]],[36,0,null,5,[29,"bb0RXNBHxTGI42/b2Cnubv",-69,[42,"7dRjdMDBlMDKP/yqdCiY4k",1,[[14,"SM_Crystal_01",["_name"],13],[10,["_lpos"],13,[1,0,0,0]],[10,["_lrot"],13,[3,0,0,0,1]],[10,["_euler"],13,[1,0,0,0]],[40,["_materials","0"],[4,["ccVb+VfBxQMYPT+MwU2grc"]],24],[14,false,["_active"],13]]],23]],[36,0,null,5,[29,"37AJz6L3dTxa3usvYy5S1i",-70,[42,"9f4AKM5R1HMKJdc0Q3EoQc",1,[[14,"SM_CubeDetail_01",["_name"],14],[10,["_lpos"],14,[1,0,0,0]],[10,["_lrot"],14,[3,0,0,0,1]],[10,["_euler"],14,[1,0,0,0]],[40,["_materials","0"],[4,["9bRA9bc99UN4/jH8hpKpSw"]],26],[14,false,["_active"],14]]],25]],[36,0,null,5,[29,"69vp2YjNJakaIDVHGspGD6",-71,[42,"e4bXVjb6RIv7dB5eWu2eFu",1,[[14,"SM_CubeDetail_02",["_name"],15],[10,["_lpos"],15,[1,0,0,0]],[10,["_lrot"],15,[3,0,0,0,1]],[10,["_euler"],15,[1,0,0,0]],[40,["_materials","0"],[4,["01NEcE4CpQBazU43NjyQzP"]],28],[14,false,["_active"],15]]],27]],[36,0,null,5,[29,"deBsgn88dR46R0UuPdg7fm",-72,[42,"6dApavnX9Niq5ezWaAJu9F",1,[[14,"SM_CubeDetail_03",["_name"],16],[10,["_lpos"],16,[1,0,0,0]],[10,["_lrot"],16,[3,0,0,0,1]],[10,["_euler"],16,[1,0,0,0]],[40,["_materials","0"],[4,["95XT6Y7ppZgLhssma9tJt7"]],30],[14,false,["_active"],16]]],29]],[81,"1",false,3,[17],[2,"0aIVupCTlN/brqliX5EqVU",1,0]],[81,"2",false,3,[19],[2,"07u+12NmpGOrtLbYRFQ2Yq",1,0]],[81,"3",false,3,[21],[2,"faj76PNwhJvLkTtYnK0Mxy",1,0]],[54,"Randomize Art Toppings 1",4,[[414,5,-73,[1,"ceM8te3hFOKaUWo7pLTekm"],[[182,1,23],[182,1,24],[182,1,25],[182,1,26],[182,1,27],[182,1,28]]]],[2,"dbCSJsYZRGHoeUVhNn64HS",1,0]],[54,"Randomize Art Toppings 2",4,[[414,1,-74,[1,"aaZmvLcAZLvJEXYqveCgAh"],[[182,1,30]]]],[2,"5eRvQFzZxIS4bXCM5/3fks",1,0]],[54,"Randomize Art Toppings 3",4,[[580,3,true,-75,[1,"f5dDwrqBNHTplHDpSEqUHw"],[[182,1,31],[182,1,32],[182,1,33],[182,1,34]]]],[2,"c0ZHPTTYxM+K7PZDVCVjcc",1,0]],[194,"TEMP-Model",false,3,[[79,"Cube<ModelComponent>",-76,[1,"3eq+2PhbRKu6WNSyYqYlmc"],[0],[34],1]],[2,"e4KNNUxLBOiaIrybrwqbAS",1,0]],[4,["14k8y0SLpdaroj+3hWQPNc"]],[54,"Randomize Art Block Position",4,[[581,true,-77,[1,"d9VM+yVL5BC70UqIklVWU1"],[1,0,-0.25,0],[1,0,0.25,0],[17,2,19,29,21,5]]],[2,"88vmMYOIhCg4IzK81M+Yur",1,0]],[54,"On Enable",4,[[252,-78,[1,"37m8bCpQlEzoI7R1hN7ZxV"],[[7,"d9dbaePcK9EmpC+u+4XoTKT","randomize",38],[7,"d9dbaePcK9EmpC+u+4XoTKT","randomize",39],[7,"d9dbaePcK9EmpC+u+4XoTKT","randomize",40]]]],[2,"dadxub055JopnKqoY9oFHr",1,0]],[54,"Theme Models Chooser",4,[[140,-79,[1,"a740Ko3zNEcKsqlmtY1695"],[35,36,37],31]],[2,"1b5SxUUhxBl4hPscbCvJ56",1,0]],[54,"Theme Models Chooser-001",4,[[140,-80,[1,"2dnIp8BYBL/KobKgxMeeSO"],[2,29,5],32]],[2,"2cRpNhjHRHdaOYWafXzZ6b",1,0]]],0,[0,-1,17,0,-2,19,0,-3,21,0,-4,23,0,-5,24,0,-6,25,0,-7,26,0,-8,27,0,-9,28,0,-10,30,0,-11,31,0,-12,32,0,-13,33,0,-14,34,0,2,1,0,0,1,0,-1,3,0,-2,4,0,2,1,0,7,1,0,-1,23,0,-2,24,0,-3,25,0,-4,26,0,-5,27,0,-6,28,0,-1,41,0,-2,35,0,-3,36,0,-4,37,0,-6,29,0,-7,5,0,-1,43,0,-2,38,0,-3,39,0,-4,40,0,-5,44,0,-6,45,0,-7,46,0,-1,31,0,-2,32,0,-3,33,0,-4,34,0,1,18,0,1,18,0,1,18,0,1,18,0,2,17,0,1,20,0,1,20,0,1,20,0,1,20,0,2,19,0,1,22,0,1,22,0,1,22,0,1,22,0,1,42,0,1,42,0,2,21,0,2,23,0,2,24,0,2,25,0,2,26,0,2,27,0,2,28,0,-1,30,0,2,30,0,2,31,0,2,32,0,2,33,0,2,34,0,0,38,0,0,39,0,0,40,0,0,41,0,0,43,0,0,44,0,0,45,0,0,46,0,9,1,2,7,3,17,7,35,19,7,36,21,7,37,80],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,8,11,8,11,8,11,11,8,11,8,11,8,11,8,11,8,11,8,11,8,11,8,11,8,11,8,11,8,11,34,34],[165,32,166,1,269,12,166,12,270,271,1,272,1,273,1,274,1,275,1,276,1,277,12,278,12,279,12,280,12,281,12,24,24]],[[[63,"SM_Tower3MGvBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",4212621417,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":38304,"length":11580,"count":2895,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":38304,"count":798,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2232978790998459,-0.39257004857063293,-0.00849794689565897],"maxPosition",8,[1,0.22329778969287872,0.25317785143852234,0.679470419883728]]],-1],0,0,[],[],[]],[[[62],[47,"SM_Tower3MGvBody_01",[-2],[2,"efp8IlO8deIZfWSlH1z7o0",-1,0]],[53,"SM_Tower3MGvBody_01",1,[[52,-3,[1,"49Ry8eFLhb25C1Q8wGk6C1"],[0],[34],1]],[2,"3aIYRFdwZW1ITWY1VGXMEK",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[282,167]],[[[50,"P-Runner-2"],[125,"P-Runner-2",[[-17,-18,[80,"Events",-20,[2,"d95EadoVJHU5W5txftTQiE",-19,0]],-21],1,1,4,1],[[156,"Runner-2",-12,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-10],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",-11]],-9,-8,-7],[55,-13,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-14,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-15,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-16,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[86,"c46/YsCPVOJYA4mWEpNYRx",-6,0,[[116,["_uiFillbar"],-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]],[74,["_uiFillbar"],-5,-4,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[164,"Art",1,[-23,-24,-25,-26],[[88,true,-22,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[2,"4505kBZFlJebjm5k8fm2Li",1,0]],[124,"Movement",[-27],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,2,[29,"e9aXVNzZtaRJscaZ3oH2lT",-33,[69,"4e+AlmKvhPkZOO6sSbp68M",1,[[67,[4,["e9aXVNzZtaRJscaZ3oH2lT"]],[[55,-32,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[14,"SM_Model",["_name"],-28],[10,["_lpos"],-29,[1,0,0,0]],[10,["_lrot"],-30,[3,0,0,0,1]],[10,["_euler"],-31,[1,0,0,0]],[40,["_materials","0"],[4,["82KrnAfSpZG69ZHuCZgscH"]],3],[28,"SM_Model",["_name"],[4,["c4b+YlD25S86pnrjGBd2Oa"]]]]],2]],[35,"Scripts",1,[3,-34,-35,-36],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-44,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-43]]]],[[14,"P-HP-Bar",["_name"],-37],[10,["_lpos"],-38,[1,207,448.00000000000006,0]],[10,["_lrot"],-39,[3,0,0,0,1]],[10,["_euler"],-40,[1,0,0,0]],[14,"Art",["_name"],-41],[10,["_lpos"],-42,[1,0,0,0]]]],15]],[4,["e9aXVNzZtaRJscaZ3oH2lT"]],[35,"VFX",2,[-45,-46,-47],[2,"8er6avrZlEGL30TjP1I4ZP",1,0]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Death_Erupt",8,[-48],[2,"4bxCPOAeBB27j0NR13Nm+v",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,10,[1,"a0Xk99R/dM2ZaY5gHtcTuo"],[4],[5],[3,0.4],[0],[0],[0],[0],[0],[0],[0],[3,0.16],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.3169642857142857],[13,0.4575892857142857,[4,4294938922]],[13,1,[4,4289817645]]],[[9,255,0.5736607142857143],[9,0,1]]]]],[31,[0]],[78,true,true,[111,2,2,[8,[0,1],[[6,2,0.02962962962962963,1.913888888888889,1.913888888888889],[11,2,1]]],[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-49],[26,5]],[59,"VFX_Death_Shards",8,[-50],[2,"70+SDzrzNDyaOcl5eAXkCV",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,12,[1,"533uR5L4VJo6ftNlpEgnbj"],[6],[5],[23,3,0.05,0.1],[0],[0],[23,3,3,5],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.3,0.8],[3,1],[0],[0],[[25,[23,3,5,7]]],[20,true,[16,1,[33,[[43,0.16964285714285715],[13,0.33035714285714285,[4,4294938368]],[13,0.7991071428571429,[4,4284748062]]],[[9,255,0.23883928571428573],[9,0,1]]]]],[109,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-8.726646259971647,8.726646259971647]],[123,true,2,2,[0],[0]],[19,[0],[0],[5],[5],-51],[26,7]],[59,"VFX_Spawn",8,[-52,-53],[2,"7fLVBBgG1FfZ/TXdr/7uQK",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[46,"HP Controller",5,[-54],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[166,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-55],[7,"cc.ParticleSystem","play",10],[7,"cc.ParticleSystem","play",12],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]],1],[54,"On Death VFX Finished",5,[[96,-56,[1,"caR6q06KNHsb890r2Ow1m7"],[11,13],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"97iFnebZ9Ljoe5ps8bSXVk",1,0]],[105,"Temp-Model",false,2,[[79,"Sphere<ModelComponent>",-57,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",2,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,14,[1,"5f3P23vKxFprncVQcsIHsd"],[8],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-58],[26,9]],[97,0.3,false,14,[1,"a72FM3p79PepftVEqguqjx"],[[10,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-59],[26,11]],[104,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[46,"Stun",5,[-60],[2,"31uSj+WThKTIt9/sdxHN+T",1,0]],[117,23,[1,"6aPiZhGDhPm4BUfcZnGALn"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[35,"UI",1,[6],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,6,0,3,6,0,3,6,0,13,16,0,2,1,0,20,24,0,27,22,0,28,16,0,3,3,0,3,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,2,1,0,7,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,8,0,-1,22,0,1,7,0,1,7,0,1,7,0,1,7,0,0,4,0,2,4,0,-2,15,0,-3,23,0,-4,17,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,17,19,0,2,6,0,-1,10,0,-2,12,0,-3,14,0,-1,11,0,4,11,0,-1,13,0,4,13,0,-1,20,0,-2,21,0,-1,16,0,3,17,0,0,17,0,0,18,0,4,20,0,4,21,0,-1,24,0,9,1,3,7,5,6,7,25,60],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,-2,18,8],[14,13,283,1,20,19,10,18,4,3,11,9,5,15,5,16]],[[[62],[47,"SM_EnemyOvercharger_03",[-2],[2,"79BYQtfNNbj4YT0sLCxBU2",-1,0]],[53,"SM_EnemyOvercharger_03",1,[[52,-3,[1,"5b4dml5JZZSpEFLZ2t+IcI"],[0],[34],1]],[2,"b2leN5NINUyYLt7KA/my5j",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[284,285]],[[[63,"SM_EnemyOvercharger_03__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",89547796,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9216,"length":1344,"count":336,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9216,"count":192,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.30566802620887756,-0.2593323588371277,-0.09883619844913483],"maxPosition",8,[1,0.3056679964065552,0.5301661491394043,0.3970951735973358]]],-1],0,0,[],[],[]],[[[168,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainColor",8,[4,4294967174]]],11]]],0,0,[0],[12],[34]],[[[50,"P-Tank-2"],[125,"P-Tank-2",[[-16,-17,[80,"Events",-19,[2,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[156,"Tank-2",-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[55,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[164,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[2,"4505kBZFlJebjm5k8fm2Li",1,0]],[124,"Movement",[-26],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,2,[29,"6fmtIknt9barIS5y55aJtq",-32,[69,"f2a0mp8bNC7bD54hw6Y13q",1,[[67,[4,["6fmtIknt9barIS5y55aJtq"]],[[55,-31,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[14,"SM_Model",["_name"],-27],[10,["_lpos"],-28,[1,0,-0.175,0.091]],[10,["_lrot"],-29,[3,0,0,0,1]],[10,["_euler"],-30,[1,0,0,0]],[40,["_materials","0"],[4,["66o7UDfllVyr9MoWFmTbga"]],3],[28,"SM_Model",["_name"],[4,["7a5v6ewJBcY6bQHuXc2hJF"]]]]],2]],[35,"Scripts",1,[3,-33,-34,-35],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[4,["6fmtIknt9barIS5y55aJtq"]],[35,"VFX",2,[-36,-37,-38],[2,"aeUCIwkRdNnZ85aGoSwsxY",1,0]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-46,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[14,"P-HP-Bar",["_name"],-39],[10,["_lpos"],-40,[1,207,448.00000000000006,0]],[10,["_lrot"],-41,[3,0,0,0,1]],[10,["_euler"],-42,[1,0,0,0]],[14,"Art",["_name"],-43],[10,["_lpos"],-44,[1,0,0,0]]]],15]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Death_Erupt",7,[-47],[2,"6439JCnJdESJrRIzw1X6Xe",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,10,[1,"0eRY0j2sRN2LMSmlTgdDC7"],[4],[5],[3,0.4],[0],[0],[0],[0],[0],[0],[0],[3,0.16],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.3169642857142857],[13,0.4575892857142857,[4,4294938922]],[13,1,[4,4289817645]]],[[9,255,0.5736607142857143],[9,0,1]]]]],[31,[0]],[78,true,true,[111,2,2,[8,[0,1],[[6,2,0.02962962962962963,1.913888888888889,1.913888888888889],[11,2,1]]],[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-48],[26,5]],[59,"VFX_Death_Shards",7,[-49],[2,"eewGKCtCVCOrQ0SOWIA6wT",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,12,[1,"9a33wGUzlEE5+mfNR0v0fi"],[6],[5],[23,3,0.05,0.1],[0],[0],[23,3,3,5],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.3,0.8],[3,1],[0],[0],[[25,[23,3,5,7]]],[20,true,[16,1,[33,[[43,0.16964285714285715],[13,0.33035714285714285,[4,4294938368]],[13,0.7991071428571429,[4,4284748062]]],[[9,255,0.23883928571428573],[9,0,1]]]]],[109,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-8.726646259971647,8.726646259971647]],[123,true,2,2,[0],[0]],[19,[0],[0],[5],[5],-50],[26,7]],[59,"VFX_Spawn",7,[-51,-52],[2,"33yjbetb9FM7Z5dQ7NiEBL",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[46,"HP Controller",5,[-53],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[139,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[7,"cc.ParticleSystem","play",10],[7,"cc.ParticleSystem","play",12],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[54,"On Death VFX Finished",5,[[96,-55,[1,"4ad/DwlQdNG49/4a9n8z+I"],[11,13],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"22NvrE4V5LHKAw78WKZzPN",1,0]],[105,"Temp-Model",false,2,[[79,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",2,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,14,[1,"3a3Sd8kLBGNaWPmhJ/IhNc"],[8],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-57],[26,9]],[97,0.3,false,14,[1,"60NTAXw5tKgaDRtNlKKVcT"],[[10,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-58],[26,11]],[104,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[46,"Stun",5,[-59],[2,"dac7ZgdvtBBILxt/AUoxlG",1,0]],[117,23,[1,"c3ae4MCbxK8YUgB7h5tdE2"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[35,"UI",1,[8],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,3,8,0,13,16,0,2,1,0,20,24,0,27,22,0,28,16,0,3,3,0,3,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,2,1,0,7,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,6,0,1,6,0,1,6,0,1,6,0,0,4,0,2,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,17,19,0,2,8,0,-1,11,0,4,11,0,-1,13,0,4,13,0,-1,20,0,-2,21,0,-1,16,0,3,17,0,0,17,0,0,18,0,4,20,0,4,21,0,-1,24,0,9,1,3,7,5,8,7,25,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,-2,18,8],[14,13,286,1,20,19,10,18,4,3,11,9,5,15,5,16]],[[[168,[{"rasterizerState":{"shadeModel":1,"cullMode":0},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[30,12],[287,34]],[[[63,"SM_EnemyCharger_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[62],[47,"SM_EnemyCharger_01",[-2],[2,"47/vCPei5Z0pNlzjcP769r",-1,0]],[53,"SM_EnemyCharger_01",1,[[52,-3,[1,"f9Xsbslq5Th7Btq+30Q0l1"],[0],[34],1]],[2,"477ZEAbpBWqKxecVErE+OB",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[288,289]],[[[57,".bin",3218173862,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5184,"length":696,"count":174,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5184,"count":108,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3009660840034485,-0.25036337971687317,0.0424368791282177],"maxPosition",8,[1,0.30096614360809326,0.22721247375011444,0.5172187089920044]]],-1],0,0,[],[],[]],[[[63,"SM_BlockDetail_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",214045722,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19152,"length":6072,"count":1518,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":19152,"count":399,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4379175305366516,-0.31485438346862793,-0.012438390403985977],"maxPosition",8,[1,0.3254941701889038,0.47018003463745117,0.34161439538002014]]],-1],0,0,[],[],[]],[[[62],[47,"SM_BlockDetail_01",[-2],[2,"3eCYgi3G9Xl4TH+IlMfqkO",-1,0]],[53,"SM_BlockDetail_01",1,[[52,-3,[1,"fb6o+I7s1ap6QaBFvF7AAY"],[0],[34],1]],[2,"27MkPpTrhV/YzOKm7UdrDt",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[290,291]],[[[50,"Towers Holder"],[453,"Towers Holder",8388608,[-9,-10],[[[18,-2,[1,"b3s3iwIk5GWLlMpTf30EX5"],[5,1.3,1.2333333333333334]],-3,[582,-7,[1,"cfGNKRbINDO7IZQhUKGHsa"],-6,-5,-4,0,1],[88,true,-8,[1,"bbvxE+a7RLlb4K23+CkgQh"],[2],3]],4,1,4,4],[2,"1ewdi1di5LRLRsG+guCXmn",-1,0],[3,0.3314135740355918,0.8001031451912656,0.4619397662556433,0.19134171618254486],[1,60,60,60.00000000000001],[1,-59.99999999999999,180,45.00000000000001]],[85,"Head Pivot",8388608,1,[-12],[[48,-11,[1,"32uDYhTTxPELrkKx3qUEcG"]]],[2,"4cmdeCgahD+7pmqhGqkBOi",1,0]],[163,"Inner Pivot",8388608,2,[[48,-13,[1,"4dO9eXe5BLmaBUOWHh2l6B"]]],[2,"567J4hAvhBHpZ0NfvzCgNL",1,0],[1,0,0.55,0],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[167,"Base Pivot",8388608,1,[[48,-14,[1,"cevMoJmpNErrD1piEoV5a+"]]],[2,"02Z6od6+lLPYyWz/3Uv+Qi",1,0],[1,0,0.25,0],[1,0.6,0.6,0.6]],[378,true,true,1,[1,"38JEqV6MtBrIIB0I78QUIw"]]],0,[0,2,1,0,0,1,0,-2,5,0,47,5,0,57,4,0,58,3,0,0,1,0,0,1,0,-1,2,0,-2,4,0,0,2,0,-1,3,0,0,3,0,0,4,0,9,1,14],[0,0,0,0],[59,39,-1,18],[292,45,168,168]],[[[50,"P-Spawner"],[47,"P-Spawner",[-2,-3],[2,"e7x73SDh9MfZgQfJSXZT9u",-1,0]],[54,"Scripts",1,[[583,-4,[1,"18nYvcfMtJO6Oo5PlZFwRZ"],[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32]]],[2,"1cNL1n+WFNfIq0J1FHVpx3",1,0]],[35,"Events",1,[-5,-6,-7],[2,"d3Y05YuGFBTqGWcwcFabCr",1,0]],[54,"Spawn Enemy Listener",3,[[415,1,-8,[1,"0bmHxJWWZKHbEPI3AvzRio"],[[7,"6224ediLkZG84aZ/Y7G48dr","spawnEnemy",2]]]],[2,"d4DYBltkRBy7G1lL1D+UGh",1,0]],[54,"Spawn Horde Listener",3,[[415,2,-9,[1,"c8oKJaO91HgqcUU9Q3sGVK"],[[7,"6224ediLkZG84aZ/Y7G48dr","spawnHorde",2]]]],[2,"73P2RgJhJIPrQOfEbOUvy8",1,0]],[54,"Game Over",3,[[169,4,-10,[1,"4bL9tUfqNGRI3qODRXrUqE"],[[7,"6224ediLkZG84aZ/Y7G48dr","deactivate",2]]]],[2,"aeC7MhkEdOdr2ybzitYqn4",1,0]]],0,[0,2,1,0,-1,2,0,-2,3,0,0,2,0,-1,4,0,-2,5,0,-3,6,0,0,4,0,0,5,0,0,6,0,9,1,10],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33],[97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,293,294,295,296]],[[[50,"SM_TowerH311Body_01"],[47,"SM_TowerH311Body_01",[-2],[2,"76kmy9MSZU7qIHreg7REJV",-1,0]],[53,"SM_TowerH311Body_01",1,[[52,-3,[1,"d5Ph66/6xbPK4Q72/PB8zz"],[0],[34],1]],[2,"baQ2X4AqJelaVJs15lbapQ",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[1,169]],[[[57,".bin",2569504627,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5184,"length":696,"count":174,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5184,"count":108,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3009660840034485,-0.25036337971687317,0.0424368791282177],"maxPosition",8,[1,0.30096614360809326,0.22721247375011444,0.5172187089920044]]],-1],0,0,[],[],[]],[[[63,"SM_EnemyCharger_03__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[62],[47,"SM_EnemyCharger_03",[-2],[2,"eerPSLgTJdH7hLSNuCTtVc",-1,0]],[53,"SM_EnemyCharger_03",1,[[52,-3,[1,"c8h0R7kAVVrrw0yFT3+4z0"],[0],[34],1]],[2,"69IPnlhZJZXItc4Tb0npin",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[297,298]],[[[63,"SM_EnemyShielder_01__0.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[62],[47,"SM_EnemyShielder_01",[-2],[2,"d8e+2t58lRg7KkNuP6KtFQ",-1,0]],[53,"SM_EnemyShielder_01",1,[[52,-3,[1,"39boRnqgtbo5vuS2ne40Wb"],[0],[34],1]],[2,"45PDynTphbp7AfDJkFxT6/",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[299,300]],[[[57,".bin",1600139202,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":22080,"length":2832,"count":708,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":22080,"count":460,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.26100820302963257,-0.396431028842926,-0.007929272949695587],"maxPosition",8,[1,0.26100820302963257,0.24362486600875854,0.2592196762561798]]],-1],0,0,[],[],[]],[[[50,"P-Laser-Tower"],[306,"P-Laser-Tower",128,[[-12,-13,[80,"Events",-15,[2,"ef4CiMUqFFBLxbigVGcbkS",-14,0]],-16,-17],1,1,4,1,1],[-11],[86,"c7FBgV+GNP8JXw9YieWPKB",-10,0,[[212,["_commonLaserBeam"],-9,[4,["6bE16mDyVM2rbu8cMQ5OnY"]]]],[-1,-2,-3,-4,-5,-6,-7,-8]]],[115,"Tower Attack",[[584,0.01,3,0.005,0.3,1,-21,[1,"44lWW4CCdMbrkFp7yHEwXi"],1,-20,-19,[585],-18,26]],[2,"f40ywYz1xDCq70ENky8ahk",1,0]],[350,"Head Pivot",[-22,-23,-24,-25,-26,-27,-28,-29,-30],[2,"cbvB8Ld9JIX6xuIF03lxnb",1,0],[1,0,0.3,0],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[35,"Scripts",1,[2,-31,-32,-33,-34,-35],[2,"395/jqomdNs4i+MZIAv9Bl",1,0]],[217,"Shoot SFX Controller",[-40,-41,-42],[[586,-39,[1,"89epilNXRBAbuhGrmqNYKj"],[-36,-37,-38]]],[2,"bf4Cu38H1LkpQx8wn1KDKs",1,0]],[270,"Art",1,[-44,-45],[[316,-43,[1,"42A6VK8ypFjJLHG2aiUvkg"],[24],25]],[2,"f6510qCkdPhZ5QPlFG7sjV",1,0],[1,0,0.25,0]],[36,0,null,3,[29,"c3aOBtjPNU96Ex7+KDGHdh",-46,[42,"f0AncNe1VN4Jw9g61+WTW/",1,[[28,"SM_TowerLaserBody_01",["_name"],[4,["c3aOBtjPNU96Ex7+KDGHdh"]]],[22,["_lpos"],[4,["c3aOBtjPNU96Ex7+KDGHdh"]],[1,0,0,0]],[22,["_lrot"],[4,["c3aOBtjPNU96Ex7+KDGHdh"]],[3,0,0,0,1]],[22,["_euler"],[4,["c3aOBtjPNU96Ex7+KDGHdh"]],[1,0,0,0]],[40,["_materials","0"],[4,["c79Byda9tSsLPjCdZFbGni"]],5],[28,true,["_active"],[4,["c3aOBtjPNU96Ex7+KDGHdh"]]]]],4]],[36,0,null,3,[29,"bbqAjalhlRdoiOW0dhSoUC",-52,[42,"9bGTEv4JRIiJGuFFa9ma1Y",1,[[14,"SM_TowerPuls3rBody_01",["_name"],-47],[10,["_lpos"],-48,[1,0,0,0]],[10,["_lrot"],-49,[3,0,0,0,1]],[10,["_euler"],-50,[1,0,0,0]],[40,["_materials","0"],[4,["1fCLEjPmBTW6Y7Y/vYCPCL"]],7],[14,false,["_active"],-51]]],6]],[4,["bbqAjalhlRdoiOW0dhSoUC"]],[36,0,null,3,[29,"27Yce2+45c87fcrQ+S23Kt",-58,[42,"ccDeVeKh1LjrP0SrpJctVM",1,[[14,"SM_TowerPulsarBody_01",["_name"],-53],[10,["_lpos"],-54,[1,0,0,0]],[10,["_lrot"],-55,[3,0,0,0,1]],[10,["_euler"],-56,[1,0,0,0]],[40,["_materials","0"],[4,["c1qYGglmVbiJ63kvX3SnJg"]],9],[14,false,["_active"],-57]]],8]],[4,["27Yce2+45c87fcrQ+S23Kt"]],[36,0,null,3,[29,"9aoAAYJKJR56nsyDVR3xr1",-64,[42,"0eRRL+G4ZKPIWwpxmI+JAF",1,[[14,"SM_TowerThunderBBody_01",["_name"],-59],[10,["_lpos"],-60,[1,0,0,0]],[10,["_lrot"],-61,[3,0,0,0,1]],[10,["_euler"],-62,[1,0,0,0]],[40,["_materials","0"],[4,["a174aNwnFUq6B+C8hupOtt"]],11],[14,false,["_active"],-63]]],10]],[4,["9aoAAYJKJR56nsyDVR3xr1"]],[36,0,null,3,[29,"12sIxAd4xbv59W3ANKj2X7",-70,[42,"a0wx+g8VdJF72O05oPqoH9",1,[[14,"SM_TowerElectroneerBody_01",["_name"],-65],[10,["_lpos"],-66,[1,0,0,0]],[10,["_lrot"],-67,[3,0,0,0,1]],[10,["_euler"],-68,[1,0,0,0]],[40,["_materials","0"],[4,["366PFgp3dcA6jQhh5OaNY0"]],13],[14,false,["_active"],-69]]],12]],[4,["12sIxAd4xbv59W3ANKj2X7"]],[36,0,null,3,[29,"a8rRRSGbdZ75rtdYdCxXvt",-76,[42,"d6WBGMhktOZ7Cgduuqa4z7",1,[[14,"SM_TowerOmegaBeamBody_01",["_name"],-71],[10,["_lpos"],-72,[1,0,0,0]],[10,["_lrot"],-73,[3,0,0,0,1]],[10,["_euler"],-74,[1,0,0,0]],[40,["_materials","0"],[4,["ebLTCL4wZWyoex5cTjGOhH"]],15],[14,false,["_active"],-75]]],14]],[4,["a8rRRSGbdZ75rtdYdCxXvt"]],[36,0,null,3,[29,"19dqAvhYZW66LFXyVsSUYV",-82,[42,"2dItOgZ0FIBZzYZboaU2Dr",1,[[14,"SM_TowerPlasmaQBody_01",["_name"],-77],[10,["_lpos"],-78,[1,0,0,0]],[10,["_lrot"],-79,[3,0,0,0,1]],[10,["_euler"],-80,[1,0,0,0]],[40,["_materials","0"],[4,["d1WspVTtle/Jp16o0xqn79"]],17],[14,false,["_active"],-81]]],16]],[4,["19dqAvhYZW66LFXyVsSUYV"]],[351,"Laser Tower",6,[-83,-84,-85],[2,"24gWhf6edPooZqAHMrGA4L",1,0],[1,0,-0.05,0]],[4,["a6UoiMmTtU6YsbaNPx5rqf"]],[124,"Laser Tower Common VFX",[-86],[2,"710SnCgmtBMqX5qvsJxAJj",1,0]],[337,"lasertower",4,"lasertower",2,1,[1,"92UYE5HlRLmKMlLGBWVR4U"],[[114,"lasertower","lasertower-plus",5,-1,"Level Up (5)",7],[158,"lasertower-plus","pulsar",6,"Pulsar (6)",10],[114,"lasertower-plus","plasma-q",6,1,"Plasma-Q (6)",18],[114,"pulsar","pulsar-plus",7,-1,"Level Up (7)",10],[114,"pulsar-plus","puls.3r",8,2,"Puls.3R (8)",8],[114,"pulsar-plus","thunder-b",8,3,"Thunder-B (8)",12],[114,"puls.3r","puls.3r-plus",9,-1,"Level Up (9)",8],[114,"thunder-b","thunder-b-plus",9,-1,"Level Up (9)",12],[114,"plasma-q","plasma-q-plus",7,-1,"Level Up (7)",18],[114,"plasma-q-plus","omega bean",8,4,"Omega Bean (8)",16],[114,"plasma-q-plus","electron discharger",8,5,"Electron Discharger (8)",14],[114,"omega bean","omega bean-plus",9,-1,"Level Up (9)",16],[114,"electron discharger","electron discharger-plus",9,-1,"Level Up (9)",14],[114,"-","lasertower",-1,-1,"-",7]],[[7,"eabd4jLlnpI9pLiRtNsUPbD","towerDestroyed",2],[7,"73d3de5uWhKsLUv3xQl1Qmu","towerDestroyed",22]]],[352,"TEMP-Model-Base",false,6,[-88],[[79,"Cube<ModelComponent>",-87,[1,"7bG1DGF3VI0JZiYz5rIjhD"],[2],[34],3]],[2,"085+2asOdGZYXXlS21L1NF",1,0],[1,0.5,0.5,0.5]],[35,"Head",20,[3],[2,"06ys2XK4NDNaVGaZX95a4/",1,0]],[82,0,null,[29,"a6UoiMmTtU6YsbaNPx5rqf",-89,[42,"8b61amJ0tGrLsoc9ZkcpIu",1,[[14,"SM_TowerBase_01",["_name"],21],[10,["_lpos"],21,[1,0,0,0]],[10,["_lrot"],21,[3,0,0,0,1]],[10,["_euler"],21,[1,0,0,0]],[40,["_materials","0"],[4,["c8x41wezhYTop9GywitTd7"]],19]]],18]],[353,"VFX_TowerUpgrade",128,20,[-90,-91],[2,"07ayltgthJy47RKgCHu0ne",1,0],[1,0,0.3,0]],[199,false,[1,"e1sUSELtZP1aRciv+ajBKU"],[[20,null],6,0],[56,[4,3668826087]],[23,3,0.03,0.08],[0],[0],[23,3,0.2,1.5],[0],[0],[44,3,1.5707963267948966],[0],[23,3,0.9,1.6],[0],[3,3],[0],[20,true,[278,3,[37,[[38,0],[9,255,0.04910714285714286],[9,0,1]]],[37,[[38,0],[9,255,0.06696428571428571],[9,0,1]]]]],[309,true,0.6,0.5,0,[0],[1,0,-0.2,0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-1.7453292519943295,1.7453292519943295]],[24,[0],[0]],[19,[0],[0],[5],[5],-92],[26,21]],[199,false,[1,"c4Yq5IOx9LSYnQn+VZ4Glg"],[[22,null],6,0],[277,2,[4,2291001070],[4,2318556644]],[23,3,1.8,2.6],[0],[0],[0],[0],[0],[0],[0],[3,3],[0],[3,2],[0],[20,true,[16,1,[37,[[38,255],[9,0,1]]]]],[31,[0]],[32,true,[30,1,[8,[0,0.41794871794871796,1],[[6,2,0.3814814814814815,0.4896421845574388,0.4896421845574388],[6,2,0.8444444444444444,0.5947712418300657,0.5947712418300657],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-93],[26,23]],[159,"Physics",32,1,[[-94,[328,4,-95,[1,"97e/OxmxpCU4rWbyCxoizi"]]],1,4],[2,"9e2QPGtlxGhY+FpgLqB+0P",1,0],[1,0,0.25,0]],[587,22,[1,"06NU+0UwxCH5IJsNFdY308"],23,[[131,"lasertower",27],[131,"pulsar",28],[131,"puls.3r",29],[131,"thunder-b",30],[131,"plasma-q",31],[131,"omega bean",32],[131,"electron discharger",33]],[[7,"cc.Animation","play",6],[7,"0e0544yblFGAInBmDlibiCW","play",5]],[[7,"cc.Animation","stop",6],[7,"0e0544yblFGAInBmDlibiCW","stop",5]]],[35,"VFX",4,[22,-96],[2,"a7KWU5jQVPCrqo3088lwKi",1,0]],[46,"Tower Range Scaler",4,[-97],[2,"93s95LzERJQ5rfNKhL52x/",1,0]],[354,"Cube",24,[[79,"Cube<ModelComponent>",-98,[1,"97Ufor9GlN64W+hZraFqg3"],[0],[34],1]],[2,"c7K8ONC+dATbpE1sB25eRu",1,0],[1,0,0.75,0],[1,0.5,0.5,0.8]],[302,"Laser Beam Spawn Pivot",3,[2,"f4ObGuXsBHRLAr8bTfEtcA",1,0],[1,5.3517065122739334e-17,0.14400000000000002,0.437],[3,0,1,0,-6.123233995736766e-17],[1,0,-180,0]],[302,"Pulsar Spawn Pivot",3,[2,"cchumovahDh63OiKDELICF",1,0],[1,0,-0.09999999999999998,0],[3,0,1,0,-6.123233995736766e-17],[1,0,-180,0]],[35,"Base",20,[-99],[2,"36eDbakQhC6L6Jg+6hDfT4",1,0]],[35,"Base Pivot",37,[26],[2,"35tdeOAEBEHLxj5SdRF4RG",1,0]],[46,"VFX_TowerGlow",27,[28],[2,"73jIkQORVGtaYgvr4iqtWi",1,0]],[241,"VFX_TowerDots",27,[29],[2,"44DydTbTJAIJ27hK0AKlv7",1,0],[1,0,0.229,0]],[93,true,6,30,[1,"4eMDs4lP1E65tyxVoUMp7G"]],[39,"Aura VFX Controller",128,32,[[338,-100,[1,"9avLH7tUJMh5afphX8dGUN"],23,[28,29]]],[2,"23a7x3fOtCsb4v0Nd/5auu",1,0]],[35,"Audio",4,[5],[2,"44IB4OpAVJe6/toKLUx26M",1,0]],[46,"Shoot SFX 1",5,[-101],[2,"1ahLIN1+dPubK833TsHcMY",1,0]],[144,"sfx-towers-laser-shoot-0",44,[1,"6arGghfZFKaZO9K1qWWpTn"]],[46,"Shoot SFX 2",5,[-102],[2,"13MIjnWABA3YZn0YEKV5ge",1,0]],[144,"sfx-towers-laser-shoot-1",46,[1,"2c6wl3Qx5N/7+mIuqD6s07"]],[46,"Shoot SFX 3",5,[-103],[2,"6chkRSU61MgI4aUwvVgjTo",1,0]],[144,"sfx-towers-laser-shoot-2",48,[1,"0fCQKsqUlImq1uD1rVOtVA"]],[588,true,true,0.8,33,[1,"5aw86FdihOVbXs/zMNu3/J"]],[268,[1,"ebK52pdvVFVpnbMYAaqnYY"],25],[46,"Look At Target",4,[51],[2,"10ZKBZtktPwr+edfWOlO5S",1,0]],[54,"Tower Upgrader Handler",4,[[589,2,-104,[1,"24Vyh6NqtMzKIhTklkIJvn"],23,[[7,"eabd4jLlnpI9pLiRtNsUPbD","setDamage",2]],[[7,"eabd4jLlnpI9pLiRtNsUPbD","setShootFrequency",2]],[[7,"eabd4jLlnpI9pLiRtNsUPbD","setRange",2],[7,"b902aOEwNdPBYlSlwTCn6gl","setRange",33]],[[7,"eabd4jLlnpI9pLiRtNsUPbD","setDamageModifier",2]],[[7,"eabd4jLlnpI9pLiRtNsUPbD","setSlowPercentage",2]],[[7,"eabd4jLlnpI9pLiRtNsUPbD","setStun",2]],[[7,"eabd4jLlnpI9pLiRtNsUPbD","setChainAttackData",2]],[[7,"73d3de5uWhKsLUv3xQl1Qmu","setSingleTarget",22],[7,"eabd4jLlnpI9pLiRtNsUPbD","setSingleTarget",2]]]],[2,"c8JjjFtZZC+qlEznUZ9ueS",1,0]],[146,"Debug",32,1,[-105],[2,"c5P03BmLRMW7wv+cKS4MkT",1,0]],[255,"Radius Sphere",false,32,54,[[79,"Sphere<ModelComponent>",-106,[1,"0cZhNLD85HH5MFbxfIpZNi"],[34],[34],35]],[2,"d96R4JVqFFAYKUs3lr7ZMs",1,0],[1,6,6,6]]],0,[0,-1,7,0,-2,8,0,-3,10,0,-4,12,0,-5,14,0,-6,16,0,-7,18,0,-8,26,0,13,31,0,2,1,0,-1,23,0,-1,6,0,-2,4,0,2,1,0,7,1,0,-4,30,0,-5,54,0,60,51,0,44,31,0,45,41,0,0,2,0,-1,7,0,-2,8,0,-3,10,0,-4,12,0,-5,14,0,-6,16,0,-7,18,0,-8,35,0,-9,36,0,-2,53,0,-3,52,0,-4,43,0,-5,32,0,-6,33,0,-1,45,0,-2,47,0,-3,49,0,0,5,0,-1,44,0,-2,46,0,-3,48,0,0,6,0,-1,24,0,-2,20,0,2,7,0,1,9,0,1,9,0,1,9,0,1,9,0,1,9,0,2,8,0,1,11,0,1,11,0,1,11,0,1,11,0,1,11,0,2,10,0,1,13,0,1,13,0,1,13,0,1,13,0,1,13,0,2,12,0,1,15,0,1,15,0,1,15,0,1,15,0,1,15,0,2,14,0,1,17,0,1,17,0,1,17,0,1,17,0,1,17,0,2,16,0,1,19,0,1,19,0,1,19,0,1,19,0,1,19,0,2,18,0,-1,25,0,-2,37,0,-3,27,0,-1,31,0,0,24,0,-1,34,0,2,26,0,-1,39,0,-2,40,0,4,28,0,4,29,0,-1,41,0,0,30,0,-2,42,0,-1,50,0,0,34,0,-1,38,0,0,42,0,-1,45,0,-1,47,0,-1,49,0,0,53,0,-1,55,0,0,55,0,9,1,2,7,4,3,7,25,5,7,43,22,7,32,26,7,38,28,0,39,29,0,40,31,61,50,31,62,36,31,63,35,51,0,52,106],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,23],[-1,10,-1,10,8,11,8,11,8,11,8,11,8,11,8,11,8,11,8,11,-1,5,-1,5,-1,18,46,31,31,31,31,31,31,31,-1,10,39],[301,32,170,32,302,1,303,1,304,1,305,1,306,1,307,1,308,1,66,1,4,3,4,3,171,171,309,310,88,88,88,311,312,313,89,13,45]],[[[50,"P-TutorialController"],[115,"P-TutorialController",[[590,1.5,[2],[2,3,4],-2,[1,"25oQYJXQpNu63GPa2HBUsA"]]],[2,"99QFVlgAJEv6eNRQXbLkNr",-1,0]]],0,[0,2,1,0,0,1,0,9,1,2],[],[],[]],[[[62],[47,"SM_EnemyTheGang_01",[-2],[2,"77rOjdJ21R1KKIOlYM4BQr",-1,0]],[53,"SM_EnemyTheGang_01",1,[[52,-3,[1,"407oAt4+lSGbdC+vtR9xCJ"],[0],[34],1]],[2,"41Jrlqi2tdbKkcy+f7Uc1y",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[314,315]],[[[57,".bin",1027380282,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":17856,"length":2208,"count":552,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":17856,"count":372,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.381155401468277,-0.37926408648490906,-0.015314404852688313],"maxPosition",8,[1,0.38115382194519043,0.33310219645500183,0.5613952875137329]]],-1],0,0,[],[],[]],[[[63,"SM_EnemyTheGang_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[50,"P-HP-Bar"],[133,"P-HP-Bar",33554432,[-8,-9],[[18,-2,[1,"c64LiUsQNM4LjiTXqu/AKi"],[5,414,896]],[501,false,-3,[1,"ecxGkFKD9JnJ5OmD/ZdnDI"]],[154,45,414,896,1,-4,[1,"f0o0HJrDtP0qcPgrs4Qzen"]],[258,-5,[1,"d3Ni8szaZB5ZNahOVRn6Gj"]],[591,-7,[1,"52yIw7XwBCjZVxvHAmudT5"],-6]],[2,"c46/YsCPVOJYA4mWEpNYRx",-1,0],[1,207,448,0]],[85,"Art",33554432,1,[-13,-14],[[18,-10,[1,"16/H49/TdPRoitnCWHHtND"],[5,50,5]],[506,-11,[1,"c6txqjKZtMdI+UiFvJkHfp"]],[202,0,-12,[1,"4bcpQFUV9A2pERol15hGNy"]]],[2,"84Ywt62DNL1o63TuorfGV8",1,0]],[85,"Scripts",33554432,1,[-16,-17],[[48,-15,[1,"02YVPD0/dDDqhUV9ZDjqzR"]]],[2,"17ELThIt9GWY3dixggSO0z",1,0]],[177,"Show Bar",33554432,[[48,-18,[1,"c5Y80jcjRBbbJfTzAgdkGk"]],[559,0.3,-19,[1,"11MBvFWXxLN6h7ehk/UvTE"],2]],[2,"7ck5c/kFdG87VS8Tzkrgjv",1,0]],[85,"Tweens",33554432,3,[4,-21],[[48,-20,[1,"78gBOdyh1JbqeMXgSLvS+y"]]],[2,"af6Z5L/S5Ad5Rjj2jzK/bl",1,0]],[39,"Hide Bar",33554432,5,[[48,-22,[1,"066ZKb089Aib85bkdD822o"]],[560,0.3,255,0,-23,[1,"78CeyKHJ1HfpmdMNNnaBqy"],2]],[2,"c36zJtVAFIxpE2csiU0Nto",1,0]],[39,"Background",33554432,2,[[18,-24,[1,"13na9dWHtHzodBaC5MfT6G"],[5,50,5]],[529,3,0,1,-25,[1,"3eVNGZQrNOPalinG6nG6RJ"],[4,4279045502],0]],[2,"a1wkjIS0tI8rbwvbjqPlMV",1,0]],[142,"Sprite",33554432,2,[[[18,-26,[1,"dcdylTzqJKpoeF/ww5RH3o"],[5,50,5]],-27],4,1],[2,"98lpyac4JCm6tdoNvxxo2D",1,0]],[39,"Fillbar Controller",33554432,3,[[48,-28,[1,"a8JM1xmpdJabjNGyhYN4Bo"]],[592,-30,[1,"75rpDrYFxOrpjPTC4qrQGD"],-29,[[7,"1eddcq+dFJL6Kd35j8xBAOw","play",4]],[[7,"1eddcq+dFJL6Kd35j8xBAOw","play",6]]]],[2,"16Lj+Xb4JM/IM59RDrEaOf",1,0]],[530,3,0,1,8,[1,"daubHDVbBKZY1f8SegFwij"],[4,4278190293]]],0,[0,2,1,0,0,1,0,0,1,0,0,1,0,0,1,0,64,2,0,0,1,0,-1,2,0,-2,3,0,0,2,0,0,2,0,0,2,0,-1,7,0,-2,8,0,0,3,0,-1,9,0,-2,5,0,0,4,0,0,4,0,0,5,0,-2,6,0,0,6,0,0,6,0,0,7,0,0,7,0,0,8,0,-2,10,0,0,9,0,65,10,0,0,9,0,9,1,4,7,5,30],[0,10],[6,6],[172,172]],[[[57,".bin",997286365,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19008,"length":6180,"count":1545,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":19008,"count":396,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.21314796805381775,-0.5221704244613647,-0.005207274574786425],"maxPosition",8,[1,0.2131478637456894,0.2341163456439972,0.31767797470092773]]],-1],0,0,[],[],[]],[[[63,"SM_TowerBullziBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[62],[47,"SM_TowerBullziBody_01",[-2],[2,"6bEJXm3ENa5ZOriZO+0Lz9",-1,0]],[53,"SM_TowerBullziBody_01",1,[[52,-3,[1,"853BuGPRRQ2oL14CCvM0kL"],[0],[34],1]],[2,"e2BArGLdFbrorm0OZN+vwY",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[316,173]],[[[50,"P-HighestHP-TowerTarget"],[115,"P-HighestHP-TowerTarget",[[593,-2,[1,"89MoOjHPhPOpDRKNmcEg70"]]],[2,"c46/YsCPVOJYA4mWEpNYRx",-1,0]]],0,[0,2,1,0,0,1,0,9,1,2],[],[],[]],[[[50,"P-TheGang"],[185,"P-TheGang",[[-11,-12,[80,"Events",-14,[2,"d95EadoVJHU5W5txftTQiE",-13,0]],-15],1,1,4,1],[[-6,[55,-7,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-8,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-9,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-10,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],1,4,4,4,4],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[47,"VFX",[-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28],[2,"44lmI5C0dPj4Z8erRpRtG2",1,0]],[256,"Art",1,[-33,-34,-35,2],[[[88,true,-29,[1,"16mUt5j0BPfLyhp6c95pwE"],[32,33,34],35],-30,[141,-32,[1,"7djovCtL1Loph8nFGcCXSm"],-31]],4,1,4],[2,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[35,"Scripts",1,[-36,-37,-38,-39,-40],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[46,"Movement",4,[-41],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,3,[29,"77rOjdJ21R1KKIOlYM4BQr",-48,[69,"b0zVPKtXNDBqBPhFVjhVsT",1,[[67,[4,["77rOjdJ21R1KKIOlYM4BQr"]],[[55,-47,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[14,"SM_Model",["_name"],-42],[10,["_lpos"],-43,[1,0,0,0]],[10,["_lrot"],-44,[3,0,0,0,1]],[10,["_euler"],-45,[1,0,0,0]],[10,["_lscale"],-46,[1,1.2,1.2,1.2]],[40,["_materials","0"],[4,["407oAt4+lSGbdC+vtR9xCJ"]],3],[28,"SM_Model",["_name"],[4,["41Jrlqi2tdbKkcy+f7Uc1y"]]]]],2]],[4,["77rOjdJ21R1KKIOlYM4BQr"]],[115,"Spawn Enemies",[[191,-50,[1,"12HKbyQS5FqYWAIY6bkc9T"],-49]],[2,"1aL01L/UVD3Ifa2TsWBnzm",1,0]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-58,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-57]]]],[[14,"P-HP-Bar",["_name"],-51],[10,["_lpos"],-52,[1,207,448,0]],[10,["_lrot"],-53,[3,0,0,0,1]],[10,["_euler"],-54,[1,0,0,0]],[14,"Art",["_name"],-55],[10,["_lpos"],-56,[1,0,0,0]]]],36]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Spawn",2,[-59,-60],[2,"026s6SWrxLW5uEsAZqfRek",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[94,"VFX-BossExplosion",512,2,[-61],[2,"d9yEp+sqpLpZq1MTGLRswJ",1,0]],[73,0.2,false,false,12,[1,"d10nvhTw9GXqVPxiekKlR8"],[[8,null],6,0],[5],[3,3],[0],[0],[0],[0],[0],[135,3],[3,1.8],[3,0.2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.08258928571428571],[13,0.9241071428571428,[4,4289835441]],[13,0.9620535714285714,[4,4281084972]]],[[9,255,0.6004464285714286],[9,0,1]]]]],[31,[0]],[78,true,true,[12,1,20,[8,[0,0.6948717948717948,1],[[45,2,2.839080459770115,1,2.839080459770115,1],[6,2,0.9333333333333333,0.4622222222222221,0.4622222222222221],[72,2,1,1,1]]]],[12,1,6,[8,[0,0.7974358974358975],[[136,2,2,0.05925925925925926,-0.015204678362573122,0.09771705989047173,-0.015204678362573122],[137,2,1,0.9962962962962963,0.0288636426001776,0.0288636426001776,0.09792722000142738]]]],[12,1,5,[8,[0,0.8051282051282052],[[136,2,2,1,-0.015285126396237575,0.09720572269540514,-0.015285126396237575],[137,2,1,0.03333333333333333,-0.007150715071507141,-0.007150715071507141,0.10365593276852825]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-62],[26,9]],[477,0.2,false,false,[1,"8dMZufmHtHZJXD5YFSNkRf"],[[10,null],6,0],[5],[3,1.5],[0],[0],[0],[0],[0],[0],[3,1.7],[3,0.2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.44642857142857145],[9,0,1]]]]],[77,0,[3,1]],[32,true,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-63],[26,11]],[64,"VFX_SprayOut",512,2,[-64],[2,"00iEWi69ZHKYYIsiZ5jutH",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,1,false,false,15,[1,"b264p0fLRGrJvO19niGNvw"],[12],[5],[23,3,0.1,0.4],[0],[0],[23,3,2,10],[0],[0],[0],[3,1.7],[3,1],[0],[83,80],[0],[[25,[3,50]]],[20,true,[16,1,[37,[[38,255],[9,255,0.22767857142857142],[9,0,1]]]]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[110,true,[0],[0],[0],[30,1,[8,[0,1],[[11,2,1],[6,2,0.037037037037037035,-1.54074074074074,-1.54074074074074]]]]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-65],[99,1,0.1,13]],[94,"VFX_Explosion2",512,2,[-66],[2,"890Mx9ix5BwIhoG8cjr7++",1,0]],[73,1.5,false,false,17,[1,"4eQyYz3hxBm7uLA5fHyqF+"],[[14,null],6,0],[56,[4,4294506744]],[3,1],[0],[0],[0],[0],[0],[135,3],[3,2],[3,1.5],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.033482142857142856],[43,0.078125],[13,0.18973214285714285,[4,4288716960]],[13,0.8459821428571428,[4,4280624421]]],[[9,255,0.1049107142857143],[9,255,0.21651785714285715],[9,0,1]]]]],[31,[0]],[32,true,[12,1,20,[8,[0,0.38461538461538464,1],[[45,2,6.259259259259259,1,6.259259259259259,1],[6,2,0.9148148148148149,0.4622222222222221,0.4622222222222221],[72,2,1,1,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-67],[26,15]],[64,"VFX_SprayOut2",512,2,[-68],[2,"891XO9y2NK7JM5PR3y+ltZ",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,6,false,false,19,[1,"36ujuDyQJLdJlsW/UlrF+z"],[16],[5],[23,3,0.1,0.4],[0],[0],[23,3,10,50],[0],[0],[0],[3,2],[3,1],[0],[83,80],[0],[[25,[3,50]]],[20,true,[16,1,[37,[[38,255],[9,255,0.22767857142857142],[9,0,1]]]]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[110,true,[0],[0],[0],[30,1,[8,[0,0.27708427247702977,0.5230769230769231,1],[[11,2,1],[6,2,0.30922275440798175,-2.3928348401596575,-2.3928348401596575],[6,2,0.05925925925925926,-0.21802935010482188,-0.21802935010482188],[11,2,0.020792806452028488]]]]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-69],[99,1,0.1,17]],[64,"VFX-ScreenTone",512,2,[-70],[2,"b3kU7fcAFPOZG0m2PfYKQB",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[160,false,false,21,[1,"95+nGwDCRLhYXTyvMW+a4H"],[[18,null],6,0],[56,[4,1811939327]],[3,100],[0],[0],[0],[0],[0],[0],[3,2],[3,1],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.44642857142857145],[9,0,1]]]]],[77,0,[3,1]],[49,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-71],[26,19]],[94,"VFX-CircleIn",512,2,[-72],[2,"e0s/IN76hON7GqK/L5tWA6",1,0]],[73,0.4,false,false,23,[1,"a5lhrVljpKp4YP3IClwwYY"],[[20,null],6,0],[5],[3,0.5],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[3,0.1],[3,0.4],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[13,0.12946428571428564,[4,4280229663]],[13,0.7745535714285714,[4,4289703855]],[43,0.9464285714285714]],[[38,0],[9,255,0.5357142857142858],[9,255,1]]]]],[31,[0]],[32,true,[12,1,20,[8,[0,1],[[41,2,0.9703703703703702,0.050682261208577085,1,0.050682261208577085,1],[45,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-73],[26,21]],[94,"VFX-RingIn",512,2,[-74],[2,"fc2/xcGRBHY7qFA7JkyzI7",1,0]],[73,0.4,false,false,25,[1,"20iEhkrr1LgpiPkrDSvS9X"],[[22,null],6,0],[5],[3,1.5],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[3,0.35],[3,0.4],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[13,0.12276785714285714,[4,4280887593]],[13,0.7745535714285714,[4,4290032820]],[43,0.9464285714285714]],[[38,0],[9,34,0.34151785714285715],[9,255,0.6941964285714286],[9,255,1]]]]],[31,[0]],[32,true,[12,1,8,[8,[0,1],[[41,2,0.9703703703703703,0.05068226120857707,1,0.05068226120857707,1],[45,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-75],[26,23]],[64,"VFX_SprayIn",512,2,[-76],[2,"abYU/q3aBP9Jq4iRCrBt5d",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[134,1.2,false,false,27,[1,"47PuywNUhIdbXxRB9/UWP5"],[24],[5],[3,0.2],[0],[0],[3,5],[0],[0],[0],[0],[3,0.1],[0],[12,1,80,[8,[0,0.7333333333333333],[[6,2,0.05555555555555556,2.781893004115226,2.781893004115226],[11,2,0.9925925925925926]]]],[0],[122,[5]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-77],[99,1,0.5,25]],[64,"VFX-ChargeFlash",512,2,[-78],[2,"2aE3MNT/FDnY1BH9oRgFrG",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,2,false,false,29,[1,"0fX0yXn0RCo7ZwqD66Awgh"],[26],[5],[3,0.6],[0],[0],[0],[0],[0],[0],[3,0.3],[3,2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.8191964285714286],[9,0,1]]]]],[77,0,[3,1]],[32,true,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-79],[26,27]],[64,"VFX-Sparkle",512,2,[-80],[2,"e3osfxkOBOpYPw1K2aZUIn",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[178,0.7,false,false,31,[1,"b9uXeWhNVPY69awVrcM3/T"],[[28,null],6,0],[16,4,[33,[[87,[4,4294926764]],[13,0.3169642857142857,[4,4294943343]],[13,0.6517857142857143,[4,4292278146]],[13,1,[4,4284279807]]],[[38,255]]]],[23,3,0.1,1.2],[0],[0],[3,0.1],[0],[0],[0],[3,1],[3,0.15],[0],[161,30,30],[0],[20,true,[16,1,[37,[[38,0],[9,255,0.12723214285714285],[9,255,0.2879464285714286],[9,0,1]]]]],[188,true,3,2,1.2,[3,1]],[32,true,[12,1,2,[8,[0,0.12307692307692308,0.3128205128205128,0.9974358974358974],[[11,2,0.48518518518518516],[6,2,1,0.18055555555555491,0.18055555555555491],[11,2,0.5074074074074074],[11,2,0.4962962962962963]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-81],[26,29]],[64,"VFX_LightRay",512,2,[-82],[2,"06FezKEv5PHrvBfDQ8gIrg",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[134,1,false,false,33,[1,"e7dy+kArBNupOW18u+2ARw"],[30],[5],[12,1,4,[8,[0,1],[[6,2,0.48148148148148145,1.0000000000000002,1.0000000000000002],[11,2,1]]]],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[0],[3,1],[0],[12,1,10,[8,[0,1],[[6,2,0.3555555555555555,1.9740740740740748,1.9740740740740748],[11,2,1]]]],[0],[20,true,[16,1,[37,[[38,0],[9,133,0.09375],[9,255,0.15401785714285715],[9,153,0.24330357142857142],[9,0,1]]]]],[77,0,[3,1]],[78,true,true,[0],[30,1,[8,[0,0.2717948717948718,1],[[6,2,1,-3.2828282828282838,-3.2828282828282838],[6,2,0.45925925925925926,-1.155555555555555,-1.155555555555555],[6,2,0.16666666666666666,0.03073286052009456,0.03073286052009456]]]],[12,1,2,[8,[0,0.2717948717948718,0.9923076923076923],[[6,2,0.5,2.4246031746031744,2.4246031746031744],[6,2,0.8814814814814815,0.36111111111111127,0.36111111111111127],[11,2,1]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-0.17453292519943295,0.17453292519943295]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-83],[26,31]],[46,"HP Controller",4,[-84],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[166,35,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-85],[7,"cc.ParticleSystem","play",12],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",5],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",6],[7,"71b59j50pJOQYyfqjE0LpJs","spawnEnemies",8],[7,"cc.ParticleSystem","play",15],[7,"cc.ParticleSystem","play",17],[7,"cc.ParticleSystem","play",19],[7,"cc.ParticleSystem","play",21],[7,"cc.ParticleSystem","play",23],[7,"cc.ParticleSystem","play",25],[7,"cc.ParticleSystem","play",27],[7,"cc.ParticleSystem","play",29],[7,"cc.ParticleSystem","play",31],[7,"cc.ParticleSystem","play",33],[68,"2022ebMdchE2pNL1SpqTm8g","setBool","isDead,true",3]],1],[54,"On Death VFX Finished",4,[[96,-86,[1,"67W+7l9PZAA4LQkNbOeiI6"],[13,14,16,18,20,22,24,26,28,30,34,32],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"54py1+24lEvosm8pG/dm8g",1,0]],[105,"Temp-Model",false,3,[[79,"Sphere<ModelComponent>",-87,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",3,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,11,[1,"aewJ8JwoNJCq33IuxeLFQ7"],[4],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-88],[26,5]],[97,0.3,false,11,[1,"36ejVK11FPAJNrDXjhhqb6"],[[6,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-89],[26,7]],[64,"VFX-Flash",512,2,[14],[2,"d9bFGiF8VPXbtQyJfltpnf",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[128,3,[1,"32JYwENjVLwZkjyNU9RCCs"]],[104,5,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[35,"Specials",4,[8],[2,"68ld6dHcJL6JIZOliZkLDz",1,0]],[233,"TheGang",2,1,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",5],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",35],[7,"71b59j50pJOQYyfqjE0LpJs","initialize",8]],36,44],[234,[1,"92X5rq9oNDNouphSNFIziH"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",5]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",5]]],[46,"Stun",4,[47],[2,"28wv4th1pNs6qDNkpOR9dx",1,0]],[35,"UI",1,[9],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,6,0,-2,9,0,3,9,0,13,36,0,2,1,0,-1,46,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-2,4,0,2,1,0,7,1,0,-4,49,0,-1,11,0,-2,12,0,-3,42,0,-4,15,0,-5,17,0,-6,19,0,-7,21,0,-8,23,0,-9,25,0,-10,27,0,-11,29,0,-12,31,0,-13,33,0,0,3,0,-2,43,0,33,43,0,0,3,0,-1,38,0,-2,39,0,-3,6,0,-1,5,0,-2,35,0,-3,48,0,-4,37,0,-5,45,0,-1,44,0,1,7,0,1,7,0,1,7,0,1,7,0,1,7,0,0,6,0,2,6,0,38,46,0,0,8,0,1,10,0,1,10,0,1,10,0,1,10,0,1,50,0,1,50,0,17,39,0,2,9,0,-1,40,0,-2,41,0,-1,13,0,4,13,0,4,14,0,-1,16,0,4,16,0,-1,18,0,4,18,0,-1,20,0,4,20,0,-1,22,0,4,22,0,-1,24,0,4,24,0,-1,26,0,4,26,0,-1,28,0,4,28,0,-1,30,0,4,30,0,-1,32,0,4,32,0,-1,34,0,4,34,0,-1,36,0,3,37,0,0,37,0,0,38,0,4,40,0,4,41,0,9,1,2,7,3,8,7,45,9,7,49,14,0,42,46,20,47,47,0,48,89],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,-2,-3,18,8,26],[14,13,90,1,4,3,11,9,4,3,7,6,7,6,4,3,7,6,7,6,4,3,11,9,7,6,7,6,33,29,43,41,5,15,51,5,16,57]],[[[50,"LifeCube_Holder"],[207,"LifeCube_Holder",33554432,[-12,-13,-14,-15,-16],[[[18,-2,[1,"7aHCdRTxRF6o9wE92jXTKG"],[5,30,30]],[245,false,-3,[1,"945ZMyt9JJdIooGkHGFDA1"],[6,7,8]],-4,[141,-6,[1,"8d6uGinqFCfLEo8v+UDRsr"],-5],[202,0,-7,[1,"aeLkaP9DBF+qnesnXn0B/x"]],[594,-11,[1,"90VlqbCeNJLrF0SELcxWPK"],[[595,4],[235,1,3],[235,2,2],[235,3,1],[416,4],[416,5],[235,6,1],[235,7,2],[235,8,3],[235,9,4]],[[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","show",-10]],[[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",-9]],[[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","damaged",-8]]]],4,4,1,4,4,4],[2,"2fFGF3dqxMNKSC0hr3+Zvd",-1,0]],[206,"Empty",false,33554432,1,[-18,-19,-20],[[48,-17,[1,"92m5ZrlotEoayRr+kbGrBv"]]],[2,"cdff7dbRpGLZU2GsbeORqJ",1,0]],[39,"Details01",33554432,2,[[18,-21,[1,"5fW7UmhWFM67DM0NGlrHcf"],[5,14,14]],[51,0,-22,[1,"d7pGK9Hr5FsYXfWC4RgV+Q"],[4,2522218710],0]],[2,"82jei97mxJGKQrGqqbhBfl",1,0]],[184,"Cube 01",33554432,2,[[18,-23,[1,"4fMbvXEbFJTqsA8CsojU3t"],[5,6,6]],[51,0,-24,[1,"52qj9jAxRInYrcHwFZOIrm"],[4,844507621],1]],[2,"dayuP3E2tPrJhdzs12FZyF",1,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[184,"Outline 01",33554432,2,[[18,-25,[1,"01IhAz+OtEDbhdsAM20SvY"],[5,12,12]],[397,1,0,false,-26,[1,"b7N6zCGMNEvrv9AFIHoPpR"],2]],[2,"6aP8V1l2NEwJKz9VSUvgWd",1,0],[3,0,0,0.3826834323650898,0.9238795325112867],[1,0,0,45]],[39,"Cube",33554432,1,[[18,-27,[1,"e6RjOhAQ9AWZxCrxaiS5u9"],[5,20,20]],[51,0,-28,[1,"07C1LYt3BKm5GoJNwKklfA"],[4,4283836901],3]],[2,"b6/w9ywWhKNIxWrf/5bx2A",1,0]],[39,"Outline",33554432,1,[[18,-29,[1,"91EE4MXJ5EHLR5G0/W2mLS"],[5,28,28]],[397,1,0,false,-30,[1,"d4xLcJlf9LsbYnJpxG8iyC"],4]],[2,"8ao7aRe/pLuZ3YAoyHupby",1,0]],[39,"Details",33554432,1,[[18,-31,[1,"eekVIAuxRATL+ERjCHCCN8"],[5,14,14]],[51,0,-32,[1,"92hDgevBZHMKIPfODUgyNu"],[4,4283826390],5]],[2,"2fYVkAZnFImJP5M2vSab0h",1,0]],[39,"Scripts",33554432,1,[[48,-33,[1,"e1UFk+qmVGhrbxnAyPi8Y9"]]],[2,"68xusf6oBGpbtPAnhLgreE",1,0]],[128,1,[1,"72Hg4upylKrbpfK1/Vwzqi"]]],0,[0,2,1,0,0,1,0,0,1,0,-3,10,0,33,10,0,0,1,0,0,1,0,3,1,0,3,1,0,3,1,0,0,1,0,-1,2,0,-2,6,0,-3,7,0,-4,8,0,-5,9,0,0,2,0,-1,3,0,-2,4,0,-3,5,0,0,3,0,0,3,0,0,4,0,0,4,0,0,5,0,0,5,0,0,6,0,0,6,0,0,7,0,0,7,0,0,8,0,0,8,0,0,9,0,9,1,33],[0,0,0,0,0,0,0,0,0,10],[6,6,6,6,6,6,-1,-2,-3,26],[174,0,175,0,175,174,176,177,178,317]],[[{"name":"Icon_Currency Faded 100","rect":{"x":0,"y":0,"width":92,"height":92},"offset":{"x":0,"y":0},"originalSize":{"width":92,"height":92},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[21],[318]],[[[149,[[150,[120,[-18,-19,-20,-21,-22,-23,-24],[[84,0,false,-5,-4,[[91,"confirmationClick"]]],[84,0,false,-7,-6,[[91,"towerClick"]]],[84,0,false,-9,-8,[[91,"confirmationClick"]]],[84,0,false,-11,-10,[[91,"exit"]]],[84,0,false,-13,-12,[[91,"exit"]]],[84,0,false,-15,-14,[[91,"intro"]]],[121,-17,-16]],-3,-2,-1]]],[{},"towerClick",4,[113,2],"confirmationClick",4,[113,2],"exit",4,[113,2],"intro",4,[113,2]]],[71,"TowerUpgrade_Intro",[75,0]],[71,"TowerUpgrade_Exit",[75,2]],[71,"TowerUpgrade_Info Panel Intro",[75,1]],[65,"Entry"],[65,"Any"],[65,"Exit"],[71,"Empty",[180]]],0,[0,22,5,0,23,6,0,24,4,0,14,2,0,15,1,0,14,3,0,15,1,0,14,2,0,15,3,0,14,2,0,15,1,0,14,2,0,15,3,0,14,1,0,15,5,0,14,7,0,15,4,0,-1,4,0,-2,6,0,-3,5,0,-4,1,0,-5,3,0,-6,2,0,-7,7,24],[0,0,0],[16,16,16],[159,157,158]],[[[57,".bin",4222070262,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":960,"length":360,"count":90,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":960,"count":20,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2592058479785919,-0.2142728716135025,-0.3999999761581421],"maxPosition",8,[1,0.24021464586257935,0.28514787554740906,0.9448086023330688]]],-1],0,0,[],[],[]],[[[50,"P-Stunner-0"],[125,"P-Stunner-0",[[-16,-17,[80,"Events",-19,[2,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[179,"Stunner-0",1,-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[55,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[151,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[2,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[124,"Movement",[-26],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,2,[29,"1edAXY0UBcjIIUC2qW4Qqc",-32,[69,"272+sXo4hAPr6ZTzt9cqY4",1,[[67,[4,["1edAXY0UBcjIIUC2qW4Qqc"]],[[55,-31,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[14,"SM_Model",["_name"],-27],[10,["_lpos"],-28,[1,0,0,0]],[10,["_lrot"],-29,[3,0,0,0,1]],[10,["_euler"],-30,[1,0,0,0]],[40,["_materials","0"],[4,["0bpaVy6q1YuIQflgT+j8KX"]],3],[28,"SM_Model",["_name"],[4,["e3hH5Ei39RPpmb2lhMVpUH"]]]]],2]],[35,"Scripts",1,[3,-33,-34,-35],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[4,["1edAXY0UBcjIIUC2qW4Qqc"]],[35,"VFX",2,[-36,-37,-38],[2,"d9qKrqLFNAqYop9UBzIrym",1,0]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-46,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[14,"P-HP-Bar",["_name"],-39],[10,["_lpos"],-40,[1,207,448.00000000000006,0]],[10,["_lrot"],-41,[3,0,0,0,1]],[10,["_euler"],-42,[1,0,0,0]],[14,"Art",["_name"],-43],[10,["_lpos"],-44,[1,0,0,0]]]],15]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Death_Erupt",7,[-47],[2,"60BjhmTrxB37jmd1NHyuGJ",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,10,[1,"09mfQTQPxLqLacJO+gEh9G"],[4],[5],[3,0.4],[0],[0],[0],[0],[0],[0],[0],[3,0.16],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.3169642857142857],[13,0.4575892857142857,[4,4294938922]],[13,1,[4,4289817645]]],[[9,255,0.5736607142857143],[9,0,1]]]]],[31,[0]],[78,true,true,[111,2,2,[8,[0,1],[[6,2,0.02962962962962963,1.913888888888889,1.913888888888889],[11,2,1]]],[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-48],[26,5]],[59,"VFX_Death_Shards",7,[-49],[2,"ef5fOJVoFBupF5YfOLe7SO",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,12,[1,"4bgUjgS79IYJjTbznC0Dh8"],[6],[5],[23,3,0.05,0.1],[0],[0],[23,3,3,5],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.3,0.8],[3,1],[0],[0],[[25,[23,3,5,7]]],[20,true,[16,1,[33,[[43,0.16964285714285715],[13,0.33035714285714285,[4,4294938368]],[13,0.7991071428571429,[4,4284748062]]],[[9,255,0.23883928571428573],[9,0,1]]]]],[109,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-8.726646259971647,8.726646259971647]],[123,true,2,2,[0],[0]],[19,[0],[0],[5],[5],-50],[26,7]],[59,"VFX_Spawn",7,[-51,-52],[2,"7bmcykzIZKta4/2rRDCMsE",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[46,"HP Controller",5,[-53],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[139,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[7,"cc.ParticleSystem","play",10],[7,"cc.ParticleSystem","play",12],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[54,"On Death VFX Finished",5,[[96,-55,[1,"b3y7A0B2NDkqBDEyusZNy5"],[11,13],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"f8NK8x1y5BSqsDqn0+iwLo",1,0]],[105,"Temp-Model",false,2,[[79,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",2,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,14,[1,"dbs7XXLdhL46970DPXySzd"],[8],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-57],[26,9]],[97,0.3,false,14,[1,"2bFjzW6MBLvbd/7hplXBAi"],[[10,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-58],[26,11]],[104,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[46,"Stun",5,[-59],[2,"28wv4th1pNs6qDNkpOR9dx",1,0]],[117,23,[1,"92X5rq9oNDNouphSNFIziH"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[35,"UI",1,[8],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,3,8,0,13,16,0,2,1,0,20,24,0,27,22,0,28,16,0,3,3,0,3,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,2,1,0,7,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,6,0,1,6,0,1,6,0,1,6,0,0,4,0,2,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,17,19,0,2,8,0,-1,11,0,4,11,0,-1,13,0,4,13,0,-1,20,0,-2,21,0,-1,16,0,3,17,0,0,17,0,0,18,0,4,20,0,4,21,0,-1,24,0,9,1,3,7,5,8,7,25,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,-2,18,8],[14,13,319,1,20,19,10,18,4,3,11,9,5,15,5,16]],[[[50,"Burn Special"],[467,"Burn Special",64,[[-11,[271,"Scripts",64,-13,[2,"4c9iHXTeFH+ptCJmnvJ7g9",-12,0]],[271,"Events",64,-15,[2,"8bKYZ0gv9NwJwaAf5KkgDI",-14,0]],[271,"Physics",64,-17,[2,"abzpn+5vtNA49bY89k626m",-16,0]],[271,"Debug",64,-19,[2,"7euWMQi29IUatiSfXcspRs",-18,0]],-20],1,4,4,4,4,1],[[596,10,3,-10,[1,"46rxBzxnhNZ5SMtpC/PbmS"],-9,[-3,-4,-5,-6,-7,-8],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-2]]]],[2,"41nCdqIzNJPL0N4Cg61TVD",-1,0],[1,1,0,0]],[460,"VFX_AoE_Fire",64,[-22,-23,-24,-25],[-21],[2,"7agpHOC2lLRqOD+BaGa8Yl",1,0],[3,0.7071067811865475,0,0,0.7071067811865477],[1,89.99999999999999,0,0]],[199,false,[1,"d2tNm9kMFFuqu9U9dHbLbg"],[[2,null],6,0],[56,[4,1239277021]],[23,3,0.15,0.2],[0],[0],[23,3,0.2,2],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.4,0.6],[0],[3,10],[0],[20,true,[16,1,[33,[[119],[13,0.12946428571428573,[4,4281523443]],[13,0.23883928571428575,[4,4279222479]],[13,0.59375,[4,4280164058]],[13,0.8816964285714286,[4,4279703383]]],[[38,0],[9,255,0.09375000000000001],[9,0,1]]]]],[372,true,0,0.4,1,0,[3,1]],[32,true,[12,1,2,[8,[0,0.5666666666666667,1],[[72,2,0.9925925925925926,1,1],[41,2,0.5925925925925926,-0.36111111111111055,1,-0.36111111111111055,1],[11,2,0.5074074074074074]]]],[12,1,2,[8,[0,1],[[6,2,0.5074074074074074,0.5995807127882601,0.5995807127882601],[11,2,0.6814814814814815]]]],[12,1,5,[8,[0,0.6384615384615384,1],[[6,2,0.18888888888888888,0.38888888888888895,0.38888888888888895],[6,2,0.3259259259259259,0.08666666666666636,0.08666666666666636],[11,2,0.33333333333333337]]]],[0]],[110,true,[0],[0],[0],[30,1,[8,[0.12051282051282051,1],[[11,2,0.8296296296296296],[6,2,-0.014814814814814815,-0.045138888888888895,-0.045138888888888895]]]]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-0.6981317007977318,-2.6179938779914944]],[280,2,2,1,[0],[44,3,3]],[19,[3,1],[0],[5],[5],-26],[26,3]],[199,false,[1,"3aGwUH+LxDsLOvm2TeI22A"],[[4,null],6,0],[56,[4,4287033855]],[23,3,0.02,0.1],[0],[0],[23,3,0.5,2],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.3,0.8],[0],[3,10],[0],[20,true,[16,1,[33,[[119],[13,0.3482142857142857,[4,4279875327]],[13,0.6227678571428572,[4,4282716595]],[13,0.8348214285714285,[4,4280361257]]],[[38,255],[9,255,1]]]]],[490,true,0,0.4,1,0.2617993877991494,[3,1],[1,0,-0.2,0],[1,-90,0,0]],[32,true,[30,1,[8,[0,0.48717948717948717,1],[[11,2,1],[6,2,1,0.020933977455716932,0.020933977455716932],[189,2,-3.333333333333334,-3.333333333333334]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[12,1,25,[8,[0,0.2564102564102564,0.5076923076923077,0.7538461538461538,0.9948717948717949],[[6,2,-1,0.09318996415770607,0.09318996415770607],[11,2,1],[11,2,-1],[11,2,1],[11,2,-1]]]],[83,5],[12,1,25,[8,[0,0.1358974358974359,0.37435897435897436,0.5641025641025641,0.8384615384615385,1],[[6,2,-0.014814814814814814,7.616161616161616,7.616161616161616],[11,2,1],[11,2,-1],[11,2,1],[11,2,-1],[6,2,0.16296296296296295,7.98692810457517,7.98692810457517]]]]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-6.283185307179586,6.283185307179586]],[138,true,2,2,1,[0],[3,2]],[19,[3,1],[0],[5],[5],-27],[26,5]],[199,false,[1,"02e0rGWj5NH7WPI7EvQL3f"],[[6,null],6,0],[56,[4,1593835519]],[3,0.5],[0],[0],[0],[0],[0],[0],[0],[3,3],[0],[3,1],[0],[20,true,[16,1,[33,[[87,[4,4278237439]],[13,1,[4,4278190327]]],[[9,255,0.03125000000000001],[9,255,0.7366071428571429],[9,0,1]]]]],[77,0,[3,1]],[32,true,[12,1,2,[8,[0,1],[[6,2,0.9259259259259259,0.29885057471264337,0.29885057471264337],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-28],[243,2,7]],[367,false,true,[1,"03SKd4nW1F/pU7XSbWM/S6"],[[8,null],6,0],[56,[4,1593835519]],[3,0.5],[0],[0],[0],[0],[0],[0],[0],[3,3],[0],[3,0.5],[0],[20,true,[16,1,[33,[[87,[4,4278237439]],[13,1,[4,4278190327]]],[[9,255,0.03125000000000001],[9,255,0.7366071428571429],[9,0,1]]]]],[77,0,[3,1]],[32,true,[12,1,2,[8,[0,1],[[6,2,0.9259259259259259,0.29885057471264337,0.29885057471264337],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-29],[243,2,9]],[367,false,true,[1,"0d+u7VHHlJHoR0Q3bXtBQJ"],[[10,null],6,0],[56,[4,1593835519]],[3,0.5],[0],[0],[0],[0],[0],[0],[0],[3,3],[0],[3,0.5],[0],[20,true,[16,1,[33,[[87,[4,4278237439]],[13,1,[4,4278190327]]],[[9,255,0.03125000000000001],[9,255,0.7366071428571429],[9,0,1]]]]],[77,0,[3,1]],[32,true,[12,1,2,[8,[0,1],[[6,2,0.9259259259259259,0.29885057471264337,0.29885057471264337],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-30],[243,2,11]],[478,false,2,[1,"d2tNm9kMFFuqu9U9dHbLbg"],[[12,null],6,0],[56,[4,721420287]],[23,3,0.05,0.15],[0],[0],[23,3,0.8,1.5],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.6,1],[0],[3,15],[0],[20,true,[16,1,[33,[[119],[13,0.0825892857142857,[4,4281523443]],[13,0.30357142857142855,[4,4281375211]],[13,0.5312500000000001,[4,4280164058]],[13,0.8816964285714286,[4,4279703383]]],[[38,0],[9,255,0.06919642857142858],[9,0,1]]]]],[372,true,0,0.5,1,0,[3,1]],[32,true,[12,1,2,[8,[0,0.5666666666666667,1],[[72,2,0.9925925925925926,1,1],[41,2,0.5925925925925926,-0.36111111111111055,1,-0.36111111111111055,1],[11,2,0.5074074074074074]]]],[12,1,2,[8,[0,1],[[6,2,0.5074074074074074,0.5995807127882601,0.5995807127882601],[11,2,0.6814814814814815]]]],[12,1,5,[8,[0,0.6384615384615384,1],[[6,2,0.18888888888888888,0.38888888888888895,0.38888888888888895],[6,2,0.3259259259259259,0.08666666666666636,0.08666666666666636],[11,2,0.33333333333333337]]]],[0]],[110,true,[0],[0],[0],[30,1,[8,[0.12051282051282051,1],[[11,2,0.8296296296296296],[6,2,-0.014814814814814815,-0.045138888888888895,-0.045138888888888895]]]]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-0.6981317007977318,-2.6179938779914944]],[280,2,2,1,[0],[44,3,3]],[19,[3,1],[0],[5],[5],-31],[26,13]],[146,"Art",64,1,[-32,2],[2,"9ePqoYYQVADafa8PKSBSmj",1,0]],[454,"Sphere",false,64,9,[[[79,"Sphere<ModelComponent>",-33,[1,"f1MVaDb/hC8I+rENUiYa2A"],[0],[34],1],-34],4,1],[2,"0cuqbRNLNMGqVpzVOB95FG",1,0],[1,0.3,0.3,0.3]],[461,"VFX_First Ring",64,2,[-35],[7],[2,"6bGUoOG7dMzqhV1vESSe3U",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[177,"Wait Particles",64,[[96,-36,[1,"f7V9kUlP5LIal4cQqjtI6U"],[8,3,4,5,7,6],[[7,"49a11a/LjxMzoQg6t3SZkfy","finishBurn",1]]]],[2,"866yWJupVJ6Jl2pFfgb6Ig",1,0]],[597,3,10,[1,"29JTpX50ZF5axkT5onj8mf"]],[94,"VFX_AoE_Fire_Bottom",64,2,[3],[2,"8dqqjcCtxL9KeN1TGPNN/a",1,0]],[64,"VFX_Motes",32,2,[4],[2,"28ydrJtptD4ZELiWYohnND",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[64,"VFX_Ring",64,2,[5],[2,"e1KEOnQmpEEqzTKrRtWCts",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[94,"VFX_First Ring-001",64,11,[6],[2,"85UYhfTLpLx6Ib6jaTEwXv",1,0]],[146,"Scripts",64,1,[12],[2,"06VkerzudPNIX5Nhc7BfKJ",1,0]]],0,[0,2,1,0,3,12,0,-1,8,0,-2,3,0,-3,4,0,-4,5,0,-5,7,0,-6,6,0,49,13,0,0,1,0,-1,9,0,2,1,0,7,1,0,2,1,0,7,1,0,2,1,0,7,1,0,2,1,0,7,1,0,-6,18,0,-1,8,0,-1,14,0,-2,15,0,-3,16,0,-4,11,0,4,3,0,4,4,0,4,5,0,4,6,0,4,7,0,4,8,0,-1,10,0,0,10,0,-2,13,0,-1,17,0,0,12,0,9,1,2,7,9,3,0,14,4,0,15,5,0,16,6,0,17,7,0,11,12,7,18,36],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5],[320,13,321,64,10,18,67,53,67,53,67,53,322,64]],[[{"name":"UI_Panel_Outline 1","rect":{"x":0,"y":0,"width":60,"height":60},"offset":{"x":0,"y":0},"originalSize":{"width":60,"height":60},"rotated":false,"capInsets":[2,2,2,2],"packable":true}],[2],0,[0],[21],[323]],[[[50,"03-Path-Block"],[257,"03-Path-Block",4,[[-6,-7,[80,"Events",-9,[2,"34iBSezn5G07tUlJs/nvZp",-8,0]]],1,1,4],[[598,-5,[1,"36V5BNduRHD7uF+W+5NhQS"]]],[196,"5b6u8OqjhBRr6OuX0OXiUI",-4,0,[-1,-2,-3]]],[35,"Art",1,[-10,-11,-12,-13],[2,"a09QozlsRHabo8F1aOjmWX",1,0]],[4,["38TprYPCRWppYLEJoooZq3"]],[4,["fefPIkSBJemp8PPyjHLGkW"]],[4,["e9QGVwjwRRNYH2wTOhd0ZX"]],[146,"1",4,2,[-14],[2,"8dhXxs9cNJwbSDFPfUttge",1,0]],[36,0,null,6,[29,"38TprYPCRWppYLEJoooZq3",-15,[42,"6aRQSBvwFJAqCGG2McOH6f",1,[[14,"SM_BlockPath_01",["_name"],3],[10,["_lpos"],3,[1,0,0,0]],[10,["_lrot"],3,[3,0,0,0,1]],[10,["_euler"],3,[1,0,0,0]],[40,["_materials","0"],[4,["c6ETENbq5XL5UBZI2bIgRH"]],3]]],2]],[355,"2",false,4,2,[-16],[2,"eeZ+vMyy9N0aAzCg7L5U5k",1,0]],[36,0,null,8,[29,"fefPIkSBJemp8PPyjHLGkW",-17,[42,"d52FgNAmZG6oApZb8TbQ55",1,[[14,"SM_BlockPath_02",["_name"],4],[10,["_lpos"],4,[1,0,0,0]],[10,["_lrot"],4,[3,0,0,0,1]],[10,["_euler"],4,[1,0,0,0]],[40,["_materials","0"],[4,["c2E9Ka2cRe7YGAxkqvC+yR"]],5]]],4]],[355,"3",false,4,2,[-18],[2,"c0U2s17YZJzIQFceQvPzFA",1,0]],[36,0,null,10,[29,"e9QGVwjwRRNYH2wTOhd0ZX",-19,[42,"6f4IryRr5Lr5elhTZ/fSeZ",1,[[14,"SM_BlockPath_03",["_name"],5],[10,["_lpos"],5,[1,0,0,0]],[10,["_lrot"],5,[3,0,0,0,1]],[10,["_euler"],5,[1,0,0,0]],[40,["_materials","0"],[4,["0fKTIDFQVVW7qzAtQnZb77"]],7]]],6]],[194,"TEMP-Model",false,2,[[79,"Cube<ModelComponent>",-20,[1,"978JxPEERAj518S/nHzKka"],[0],[34],1]],[2,"dd1WBigLdLTITwg6vZGyat",1,0]],[35,"Scripts",1,[-21],[2,"ffQ/76qrJBiJLp8k47B7Vj",1,0]],[54,"Theme Models Chooser",13,[[140,-22,[1,"33RFhRi6NFzK+5Vx1KIun1"],[6,8,10],8]],[2,"14XC/Mq+9B+6Jgn0NpMGtn",1,0]]],0,[0,-1,7,0,-2,9,0,-3,11,0,2,1,0,0,1,0,-1,2,0,-2,13,0,2,1,0,7,1,0,-1,12,0,-2,6,0,-3,8,0,-4,10,0,-1,7,0,2,7,0,-1,9,0,2,9,0,-1,11,0,2,11,0,0,12,0,-1,14,0,0,14,0,9,1,22],[0,0,0,0,0,0,0,0,0],[-1,10,8,11,8,11,8,11,34],[324,32,63,1,81,12,82,12,24]],[[[149,[[150,[120,[-12,-13,-14,-15,-16,-17,-18],[[121,-5,-4],[193,0,-7,-6,[[157,[118,"inScene"]]]],[84,0,false,-9,-8,[[91,"victory"]]],[84,0,false,-11,-10,[[91,"defeat"]]]],-3,-2,-1]],[203,"Wave Announcer",[120,[-28,-29,-30,-31,-32],[[121,-23,-22],[193,0,-25,-24,[[91,"showWave"]]],[266,0,-27,-26]],-21,-20,-19]],[203,"Ad Layer",[120,[-44,-45,-46,-47,-48,-49],[[121,-37,-36],[193,0,-39,-38,[[157,[118,"adInScene"]]]],[84,0,false,-41,-40,[[181,1,[118,"adInScene"]]]],[84,0,false,-43,-42,[[157,[118,"adInScene"]]]]],-35,-34,-33]],[203,"Energy Full",[120,[-59,-60,-61,-62,-63],[[121,-54,-53],[84,0,false,-56,-55,[[157,[118,"energyFull"]]]],[330,0,-58,-57,[[181,1,[118,"energyFull"]]]]],-52,-51,-50]]],[{},"inScene",4,[174,1,false],"victory",4,[113,2],"showWave",4,[113,2],"defeat",4,[113,2],"adInScene",4,[174,1,false],"energyFull",4,[174,1,false]]],[71,"Game_Intro",[75,0]],[216,"Hidden"],[71,"Game_AdPanel Intro",[75,5]],[71,"Empty",[180]],[65,"Entry"],[216,"Empty"],[65,"Entry"],[71,"Announcer_Wave",[75,3]],[65,"Entry"],[216,"Empty"],[71,"Game_AdPanel Exit",[75,4]],[65,"Entry"],[71,"Game_Energy Full",[75,6]],[65,"Exit"],[65,"Any"],[71,"Game_Victory",[75,1]],[71,"Game_Defeat",[75,2]],[65,"Exit"],[65,"Any"],[65,"Exit"],[65,"Any"],[65,"Exit"],[65,"Any"]],0,[0,22,15,0,23,14,0,24,5,0,14,6,0,15,5,0,14,1,0,15,6,0,14,16,0,15,1,0,14,17,0,15,1,0,-1,5,0,-2,14,0,-3,15,0,-4,6,0,-5,1,0,-6,16,0,-7,17,0,22,19,0,23,18,0,24,7,0,14,2,0,15,7,0,14,8,0,15,2,0,14,2,0,15,8,0,-1,7,0,-2,18,0,-3,19,0,-4,2,0,-5,8,0,22,21,0,23,20,0,24,9,0,14,10,0,15,9,0,14,3,0,15,10,0,14,11,0,15,3,0,14,3,0,15,11,0,-1,9,0,-2,20,0,-3,21,0,-4,10,0,-5,11,0,-6,3,0,22,23,0,23,22,0,24,12,0,14,4,0,15,12,0,14,13,0,15,4,0,14,4,0,15,13,0,-1,12,0,-2,22,0,-3,23,0,-4,4,0,-5,13,63],[0,0,0,0,0,0,0],[16,16,16,16,16,16,16],[138,139,140,325,141,78,79]],[[[63,"SM_EnemyMegalodon_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[62],[47,"SM_EnemyMegalodon_01",[-2],[2,"35q+F/UKRcsrrmbxiyg3c7",-1,0]],[53,"SM_EnemyMegalodon_01",1,[[52,-3,[1,"e04xugrldTnbXkchKrSM5C"],[0],[34],1]],[2,"34TgPiyp5WOaPkHMnfYRpy",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[326,327]],[[[57,".bin",2342328673,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":26160,"length":3432,"count":858,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":26160,"count":545,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5395184755325317,-0.6244027018547058,-0.036059506237506866],"maxPosition",8,[1,0.5395184755325317,0.5536021590232849,0.7061196565628052]]],-1],0,0,[],[],[]],[[{"name":"Icon_Ad","rect":{"x":0,"y":1,"width":36,"height":22},"offset":{"x":0,"y":0},"originalSize":{"width":36,"height":24},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[21],[328]],[[[112,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{},{}],[[[{},"mainColor",8,[4,2852126975]],{},{}],11,0,0]]],0,0,[0],[12],[58]],[[[168,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,2147483647],"mainTexture",6,0]],11]]],0,0,[0,0],[30,12],[41,25]],[[[50,"Pathfinder"],[115,"Pathfinder",[[599,-2,[1,"fbXTNsgMxL0pV4RfV0//+o"]]],[2,"e8925zNxNCiI5CO2GAh1dK",-1,0]]],0,[0,2,1,0,0,1,0,9,1,2],[],[],[]],[[[57,".bin",3661720650,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":960,"length":360,"count":90,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":960,"count":20,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.33939939737319946,-0.3027116656303406,-0.4000000059604645],"maxPosition",8,[1,0.26602408289909363,0.3027118742465973,0.8425395488739014]]],-1],0,0,[],[],[]],[[[63,"SM_EnemyStunner_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[62],[47,"SM_EnemyStunner_02",[-2],[2,"22NP+cD/5Tgoh+buCGMtgq",-1,0]],[53,"SM_EnemyStunner_02",1,[[52,-3,[1,"11T+cnA+pVrprAp+evER/v"],[0],[34],1]],[2,"aecmakxK5ezJYcZJrdxRqp",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[329,330]],[[[57,".bin",1358063307,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10656,"length":1320,"count":330,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":10656,"count":222,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2883804142475128,-0.38122305274009705,0],"maxPosition",8,[1,0.2883804142475128,0.27011871337890625,0.46827760338783264]]],-1],0,0,[],[],[]],[[[63,"SM_EndBlock_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",3297684821,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":960,"length":360,"count":90,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":960,"count":20,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.24971038103103638,-0.2497103363275528,-0.40000003576278687],"maxPosition",8,[1,0.2497103363275528,0.24971021711826324,1.1082842350006104]]],-1],0,0,[],[],[]],[[[62],[47,"SM_EndBlock_01",[-2],[2,"baKMdN60VQQ4U2ioBdasIK",-1,0]],[53,"SM_EndBlock_01",1,[[52,-3,[1,"66VTaMsHtVnpyJ3svdwpBh"],[0],[34],1]],[2,"a8iO39YqpY2JrtDnB05aqa",1,0],[3,-0.7071067811865455,5.3385076829104015e-8,5.3385076829104015e-8,0.7071067811865455],[1,-89.99999999999999,0.00000865142202753775,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[331,332]],[[[57,".bin",809581060,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":21120,"length":6132,"count":1533,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":21120,"count":440,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.22483040392398834,-0.40791887044906616,-0.009908358566462994],"maxPosition",8,[1,0.22483040392398834,0.26236942410469055,0.4152980148792267]]],-1],0,0,[],[],[]],[[[62],[47,"SM_TowerMeteorUBody_01",[-2],[2,"6ba5eX4SReyqm+Vbwgfquh",-1,0]],[53,"SM_TowerMeteorUBody_01",1,[[52,-3,[1,"2aeozPTBpe75ML5ovX4gHo"],[0],[34],1]],[2,"951PfNhQddLokvIk63kqxu",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[333,179]],[[[63,"SM_TowerMeteorUBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",2853500703,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9216,"length":3048,"count":762,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9216,"count":192,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.48000001907348633,-0.47999992966651917,0],"maxPosition",8,[1,0.47999992966651917,0.48000001907348633,0.7500349879264832]]],-1],0,0,[],[],[]],[[[62],[47,"SM_BlockSlot_03",[-2],[2,"86TnLpMyZez4d2k1E06z3O",-1,0]],[53,"SM_BlockSlot_03",1,[[52,-3,[1,"dcQNjsiCBT3KDpO+eJMUSG"],[0],[34],1]],[2,"24IpCURn9ZHJTPM/735xNN",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[334,335]],[[[63,"SM_BlockSlot_03__0.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[411,"../Internal/Effects/custom-unlit-scroll",[{}],[{"hash":2445729569,"name":"../Internal/Effects/custom-unlit-scroll|unlit-vs:vert|unlit-fs:frag","blocks":[{"name":"TexCoords","stageFlags":1,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1}],"defines":["USE_TEXTURE"]},{"name":"Noise1TexCoords","stageFlags":1,"binding":1,"members":[{"name":"noise1TilingOffset","type":16,"count":1}],"defines":["USE_NOISE_1"]},{"name":"Noise2TexCoords","stageFlags":1,"binding":2,"members":[{"name":"noise2TilingOffset","type":16,"count":1}],"defines":["USE_NOISE_2"]},{"name":"Constant","stageFlags":16,"binding":3,"members":[{"name":"mainColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_TEXTURE"]},{"name":"noise1Texture","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_NOISE_1"]},{"name":"noise2Texture","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_NOISE_2"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":14,"defines":["USE_VERTEX_COLOR"]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":17,"location":0,"defines":["!CC_USE_ACCURATE_FOG"]},{"name":"v_color","type":16,"count":1,"stageFlags":17,"location":1,"defines":["USE_VERTEX_COLOR"]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":2,"defines":["USE_TEXTURE"]},{"name":"v_noise1_uv","type":14,"count":1,"stageFlags":17,"location":3,"defines":["USE_NOISE_1"]},{"name":"v_noise2_uv","type":14,"count":1,"stageFlags":17,"location":4,"defines":["USE_NOISE_2"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  layout(location = 14) in lowp vec4 a_color;\n  layout(location = 1) out lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  layout(location = 2) out vec2 v_uv;\n  layout(set = 1, binding = 0) uniform TexCoords {\n    vec4 tilingOffset;\n  };\n#endif\n#if USE_NOISE_1\n  layout(location = 3) out vec2 v_noise1_uv;\n  layout(set = 1, binding = 1) uniform Noise1TexCoords {\n    vec4 noise1TilingOffset;\n  };\n#endif\n#if USE_NOISE_2\n  layout(location = 4) out vec2 v_noise2_uv;\n  layout(set = 1, binding = 2) uniform Noise2TexCoords {\n    vec4 noise2TilingOffset;\n  };\n#endif\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_NOISE_1\n    v_noise1_uv = a_texCoord * noise1TilingOffset.xy + (noise1TilingOffset.zw * cc_time.x);\n  #endif\n  #if USE_NOISE_2\n    v_noise2_uv = a_texCoord * noise2TilingOffset.xy + (noise2TilingOffset.zw * cc_time.x);\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) in float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  layout(location = 2) in vec2 v_uv;\n  layout(set = 1, binding = 4) uniform sampler2D mainTexture;\n#endif\n#if USE_NOISE_1\n  layout(location = 3) in vec2 v_noise1_uv;\n  layout(set = 1, binding = 5) uniform sampler2D noise1Texture;\n#endif\n#if USE_NOISE_2\n  layout(location = 4) in vec2 v_noise2_uv;\n  layout(set = 1, binding = 6) uniform sampler2D noise2Texture;\n#endif\nlayout(set = 1, binding = 3) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScaleAndCutoff;\n};\n#if USE_VERTEX_COLOR\n  layout(location = 1) in lowp vec4 v_color;\n#endif\nvec3 blendOverlay(vec3 base, vec3 blend) {\n  return mix(1.0 - 2.0 * (1.0 - base) * (1.0 - blend), 2.0 * base * blend, step(base, vec3(0.5)));\n}\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec4 texColor = texture(mainTexture, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_NOISE_1\n    vec4 noise1TexColor = texture(noise1Texture, v_noise1_uv);\n    noise1TexColor.rgb = SRGBToLinear(noise1TexColor.rgb);\n    #if NOISE_1_BLEND_ADD\n      o += noise1TexColor;\n    #endif\n    #if NOISE_1_BLEND_MULTIPLY\n      o *= noise1TexColor;\n    #endif\n    #if NOISE_1_BLEND_OVERLAY\n      o.rgb = blendOverlay(o.rgb, noise1TexColor.rgb);\n    #endif\n    #if NOISE_1_BLEND_MIX\n      o.rgb = mix(o.rgb, noise1TexColor.rgb, noise1TexColor.r);\n    #endif\n  #endif\n  #if USE_NOISE_2\n    vec4 noise2TexColor = texture(noise2Texture, v_noise2_uv);\n    noise2TexColor.rgb = SRGBToLinear(noise2TexColor.rgb);\n    #if NOISE_2_BLEND_ADD\n      o += noise2TexColor;\n    #endif\n    #if NOISE_2_BLEND_MULTIPLY\n      o *= noise2TexColor;\n    #endif\n    #if NOISE_2_BLEND_OVERLAY\n      o.rgb = blendOverlay(o.rgb, noise2TexColor.rgb);\n    #endif\n    #if NOISE_2_BLEND_MIX\n      o.rgb = mix(o.rgb, noise2TexColor.rgb, noise2TexColor.r);\n    #endif\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  in lowp vec4 a_color;\n  out lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  out vec2 v_uv;\n  layout(std140) uniform TexCoords {\n    vec4 tilingOffset;\n  };\n#endif\n#if USE_NOISE_1\n  out vec2 v_noise1_uv;\n  layout(std140) uniform Noise1TexCoords {\n    vec4 noise1TilingOffset;\n  };\n#endif\n#if USE_NOISE_2\n  out vec2 v_noise2_uv;\n  layout(std140) uniform Noise2TexCoords {\n    vec4 noise2TilingOffset;\n  };\n#endif\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_NOISE_1\n    v_noise1_uv = a_texCoord * noise1TilingOffset.xy + (noise1TilingOffset.zw * cc_time.x);\n  #endif\n  #if USE_NOISE_2\n    v_noise2_uv = a_texCoord * noise2TilingOffset.xy + (noise2TilingOffset.zw * cc_time.x);\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  in vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\n#if USE_NOISE_1\n  in vec2 v_noise1_uv;\n  uniform sampler2D noise1Texture;\n#endif\n#if USE_NOISE_2\n  in vec2 v_noise2_uv;\n  uniform sampler2D noise2Texture;\n#endif\nlayout(std140) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScaleAndCutoff;\n};\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\nvec3 blendOverlay(vec3 base, vec3 blend) {\n  return mix(1.0 - 2.0 * (1.0 - base) * (1.0 - blend), 2.0 * base * blend, step(base, vec3(0.5)));\n}\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec4 texColor = texture(mainTexture, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_NOISE_1\n    vec4 noise1TexColor = texture(noise1Texture, v_noise1_uv);\n    noise1TexColor.rgb = SRGBToLinear(noise1TexColor.rgb);\n    #if NOISE_1_BLEND_ADD\n      o += noise1TexColor;\n    #endif\n    #if NOISE_1_BLEND_MULTIPLY\n      o *= noise1TexColor;\n    #endif\n    #if NOISE_1_BLEND_OVERLAY\n      o.rgb = blendOverlay(o.rgb, noise1TexColor.rgb);\n    #endif\n    #if NOISE_1_BLEND_MIX\n      o.rgb = mix(o.rgb, noise1TexColor.rgb, noise1TexColor.r);\n    #endif\n  #endif\n  #if USE_NOISE_2\n    vec4 noise2TexColor = texture(noise2Texture, v_noise2_uv);\n    noise2TexColor.rgb = SRGBToLinear(noise2TexColor.rgb);\n    #if NOISE_2_BLEND_ADD\n      o += noise2TexColor;\n    #endif\n    #if NOISE_2_BLEND_MULTIPLY\n      o *= noise2TexColor;\n    #endif\n    #if NOISE_2_BLEND_OVERLAY\n      o.rgb = blendOverlay(o.rgb, noise2TexColor.rgb);\n    #endif\n    #if NOISE_2_BLEND_MIX\n      o.rgb = mix(o.rgb, noise2TexColor.rgb, noise2TexColor.r);\n    #endif\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nuniform highp vec4 cc_time;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  attribute lowp vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n      uniform vec4 tilingOffset;\n#endif\n#if USE_NOISE_1\n  varying vec2 v_noise1_uv;\n      uniform vec4 noise1TilingOffset;\n#endif\n#if USE_NOISE_2\n  varying vec2 v_noise2_uv;\n      uniform vec4 noise2TilingOffset;\n#endif\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_NOISE_1\n    v_noise1_uv = a_texCoord * noise1TilingOffset.xy + (noise1TilingOffset.zw * cc_time.x);\n  #endif\n  #if USE_NOISE_2\n    v_noise2_uv = a_texCoord * noise2TilingOffset.xy + (noise2TilingOffset.zw * cc_time.x);\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\n#if USE_NOISE_1\n  varying vec2 v_noise1_uv;\n  uniform sampler2D noise1Texture;\n#endif\n#if USE_NOISE_2\n  varying vec2 v_noise2_uv;\n  uniform sampler2D noise2Texture;\n#endif\n   uniform vec4 mainColor;\n   uniform vec4 colorScaleAndCutoff;\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\nvec3 blendOverlay(vec3 base, vec3 blend) {\n  return mix(1.0 - 2.0 * (1.0 - base) * (1.0 - blend), 2.0 * base * blend, step(base, vec3(0.5)));\n}\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec4 texColor = texture2D(mainTexture, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_NOISE_1\n    vec4 noise1TexColor = texture2D(noise1Texture, v_noise1_uv);\n    noise1TexColor.rgb = SRGBToLinear(noise1TexColor.rgb);\n    #if NOISE_1_BLEND_ADD\n      o += noise1TexColor;\n    #endif\n    #if NOISE_1_BLEND_MULTIPLY\n      o *= noise1TexColor;\n    #endif\n    #if NOISE_1_BLEND_OVERLAY\n      o.rgb = blendOverlay(o.rgb, noise1TexColor.rgb);\n    #endif\n    #if NOISE_1_BLEND_MIX\n      o.rgb = mix(o.rgb, noise1TexColor.rgb, noise1TexColor.r);\n    #endif\n  #endif\n  #if USE_NOISE_2\n    vec4 noise2TexColor = texture2D(noise2Texture, v_noise2_uv);\n    noise2TexColor.rgb = SRGBToLinear(noise2TexColor.rgb);\n    #if NOISE_2_BLEND_ADD\n      o += noise2TexColor;\n    #endif\n    #if NOISE_2_BLEND_MULTIPLY\n      o *= noise2TexColor;\n    #endif\n    #if NOISE_2_BLEND_OVERLAY\n      o.rgb = blendOverlay(o.rgb, noise2TexColor.rgb);\n    #endif\n    #if NOISE_2_BLEND_MIX\n      o.rgb = mix(o.rgb, noise2TexColor.rgb, noise2TexColor.r);\n    #endif\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":200,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":41}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"USE_NOISE_1","type":"boolean","defines":[]},{"name":"USE_NOISE_2","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":["USE_TEXTURE"]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r","g","b"]},{"name":"NOISE_1_BLEND_ADD","type":"boolean","defines":["USE_NOISE_1"]},{"name":"NOISE_1_BLEND_MULTIPLY","type":"boolean","defines":["USE_NOISE_1"]},{"name":"NOISE_1_BLEND_OVERLAY","type":"boolean","defines":["USE_NOISE_1"]},{"name":"NOISE_1_BLEND_MIX","type":"boolean","defines":["USE_NOISE_1"]},{"name":"NOISE_2_BLEND_ADD","type":"boolean","defines":["USE_NOISE_2"]},{"name":"NOISE_2_BLEND_MULTIPLY","type":"boolean","defines":["USE_NOISE_2"]},{"name":"NOISE_2_BLEND_OVERLAY","type":"boolean","defines":["USE_NOISE_2"]},{"name":"NOISE_2_BLEND_MIX","type":"boolean","defines":["USE_NOISE_2"]}]}],[{"name":"opaque","passes":[{"program":"../Internal/Effects/custom-unlit-scroll|unlit-vs:vert|unlit-fs:frag","properties":{"mainTexture":{"value":"white","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"noise1Texture":{"value":"white","type":28},"noise1TilingOffset":{"type":16,"value":[1,1,0,0]},"noise2Texture":{"value":"white","type":28},"noise2TilingOffset":{"type":16,"value":[1,1,0,0]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"transparent","passes":[{"program":"../Internal/Effects/custom-unlit-scroll|unlit-vs:vert|unlit-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"white","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"noise1Texture":{"value":"white","type":28},"noise1TilingOffset":{"type":16,"value":[1,1,0,0]},"noise2Texture":{"value":"white","type":28},"noise2TilingOffset":{"type":16,"value":[1,1,0,0]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"add","passes":[{"program":"../Internal/Effects/custom-unlit-scroll|unlit-vs:vert|unlit-fs:frag","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"white","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"noise1Texture":{"value":"white","type":28},"noise1TilingOffset":{"type":16,"value":[1,1,0,0]},"noise2Texture":{"value":"white","type":28},"noise2TilingOffset":{"type":16,"value":[1,1,0,0]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"alpha-blend","passes":[{"program":"../Internal/Effects/custom-unlit-scroll|unlit-vs:vert|unlit-fs:frag","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"white","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"noise1Texture":{"value":"white","type":28},"noise1TilingOffset":{"type":16,"value":[1,1,0,0]},"noise2Texture":{"value":"white","type":28},"noise2TilingOffset":{"type":16,"value":[1,1,0,0]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]}]]],0,0,[],[],[]],[[[50,"P-LaserTower-Beam-PlasmaQ"],[47,"P-LaserTower-Beam-PlasmaQ",[-2],[2,"c46/YsCPVOJYA4mWEpNYRx",-1,0]],[54,"Temp",1,[[295,-3,[1,"222iH/EhhPB7NCHRxT98+N"],[3,0.5],[5],0]],[2,"b5twpQgB9KKoMf5U6SpAil",1,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0],[42],[65]],[[{"name":"default_btn_pressed","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"packable":true}],[2],0,[0],[21],[336]],[[[50,"05-Boundary-Block"],[257,"05-Boundary-Block",16,[[-63,-64,[80,"Events",-66,[2,"26v2eHDtlCM7ivoqBF7TjE",-65,0]]],1,1,4],[[600,-62,[1,"30Ag+k+UFLgZjVv8B0lcFZ"],[296,1,[-56,-57,-58,-59,-60,-61]],[296,2,[-50,-51,-52,-53,-54,-55]],[296,3,[-44,-45,-46,-47,-48,-49]],[296,4,[-38,-39,-40,-41,-42,-43]]]],[196,"a0J5bKqYFEmaKO4oONshDj",-37,0,[-1,-2,-3,-4,-5,-6,-7,-8,-9,-10,-11,-12,-13,-14,-15,-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35,-36]]],[35,"Art",1,[-67,-68,-69,-70,-71,-72,-73,-74,-75,-76,-77,-78],[2,"55qqtzXrZI0LhFh/yPSZLQ",1,0]],[35,"Scripts",1,[-79,-80,-81,-82,-83,-84,-85,-86,-87,-88,-89,-90],[2,"1cB2ZUhadFO48t4WKrMPxi",1,0]],[81,"Left Bottom 1",false,2,[-91,-92,-93],[2,"feypz3UMlASasQtRUhSBbs",1,0]],[81,"Left Bottom 2",false,2,[-94,-95,-96],[2,"c6JwTPLLJBfqNJMlZnOYOT",1,0]],[81,"Left Bottom 3",false,2,[-97,-98,-99],[2,"4ef5Z1GnpIG6P4q95H8nSR",1,0]],[81,"Right Bottom 1",false,2,[-100,-101,-102],[2,"7bjNHjtvZP7buaC34rVoCZ",1,0]],[81,"Right Bottom 2",false,2,[-103,-104,-105],[2,"a7y/eplxNClKPZUJFj7NGo",1,0]],[81,"Right Bottom 3",false,2,[-106,-107,-108],[2,"cdO5vQFIxAMIY4vuOEIfYu",1,0]],[81,"Right Top 1",false,2,[-109,-110,-111],[2,"8cYm1F+c5MTa515qkt2e09",1,0]],[81,"Right Top 2",false,2,[-112,-113,-114],[2,"70zzFZbJ9CZ7BWTAINP0Fi",1,0]],[81,"Right Top 3",false,2,[-115,-116,-117],[2,"bfiWNOZtdDlZfRpGMqlDTt",1,0]],[81,"Left Top 1",false,2,[-118,-119,-120],[2,"1bTRv9SDpJeIp0p5GnFrMH",1,0]],[81,"Left Top 2",false,2,[-121,-122,-123],[2,"64Z6EiJiNM+ZqRgbewmJeb",1,0]],[81,"Left Top 3",false,2,[-124,-125,-126],[2,"8fC5A+C1xOVrsgFoXjSmsD",1,0]],[35,"1",4,[-127],[2,"20SeMyqBBHVoVuFJiqmZTu",1,0]],[36,0,null,16,[29,"baKMdN60VQQ4U2ioBdasIK",-128,[42,"6apb/3NrtITKki7CgduFPk",1,[[28,"SM_EndBlock_01 Left-Bottom",["_name"],[4,["baKMdN60VQQ4U2ioBdasIK"]]],[22,["_lpos"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[1,-0.25,0,0.25]],[22,["_lrot"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[3,0,0,0,1]],[22,["_euler"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[1,0,0,0]],[40,["_materials","0"],[4,["66VTaMsHtVnpyJ3svdwpBh"]],1],[28,true,["_active"],[4,["baKMdN60VQQ4U2ioBdasIK"]]]]],0]],[81,"2",false,4,[-129],[2,"14DCzKsy5I/r8+ifR0wLHZ",1,0]],[36,0,null,18,[29,"baKMdN60VQQ4U2ioBdasIK",-130,[42,"50BQkk3upBNa4xstp6fC0m",1,[[28,"SM_EndBlock_01 Left-Bottom-002",["_name"],[4,["baKMdN60VQQ4U2ioBdasIK"]]],[22,["_lpos"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[1,-0.25,0,0.25]],[22,["_lrot"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[3,0,0,0,1]],[22,["_euler"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[1,0,0,0]],[40,["_materials","0"],[4,["66VTaMsHtVnpyJ3svdwpBh"]],3],[28,true,["_active"],[4,["baKMdN60VQQ4U2ioBdasIK"]]],[40,["_mesh"],[4,["66VTaMsHtVnpyJ3svdwpBh"]],4]]],2]],[81,"3",false,4,[-131],[2,"49nsLVq01EnoYiM/bAqXz/",1,0]],[36,0,null,20,[29,"baKMdN60VQQ4U2ioBdasIK",-132,[42,"22shx0SKlAq5Bkt4iYi6hl",1,[[28,"SM_EndBlock_01 Left-Bottom-001",["_name"],[4,["baKMdN60VQQ4U2ioBdasIK"]]],[22,["_lpos"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[1,-0.25,0,0.25]],[22,["_lrot"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[3,0,0,0,1]],[22,["_euler"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[1,0,0,0]],[40,["_materials","0"],[4,["66VTaMsHtVnpyJ3svdwpBh"]],6],[28,true,["_active"],[4,["baKMdN60VQQ4U2ioBdasIK"]]]]],5]],[35,"1",5,[-133],[2,"87j98mvK9Ha6DnjA6mRGvY",1,0]],[36,0,null,22,[29,"02IhkEmuRXK63cdwkK5zZa",-134,[42,"3enyY0RqVHo7qQdvzWBFXf",1,[[28,"SM_EndBlock_02 Left-Bottom",["_name"],[4,["02IhkEmuRXK63cdwkK5zZa"]]],[22,["_lpos"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[1,-0.25,0,0.25]],[22,["_lrot"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[3,0,0,0,1]],[22,["_euler"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[1,0,0,0]],[40,["_materials","0"],[4,["32LRqVqIxUXrhRaZjufCFa"]],8],[28,true,["_active"],[4,["02IhkEmuRXK63cdwkK5zZa"]]]]],7]],[81,"2",false,5,[-135],[2,"297q/MaoNPJJJquIe1uz7k",1,0]],[36,0,null,24,[29,"02IhkEmuRXK63cdwkK5zZa",-136,[42,"efSYnWwMxHZYr1J1cscEjq",1,[[28,"SM_EndBlock_02 Left-Bottom-002",["_name"],[4,["02IhkEmuRXK63cdwkK5zZa"]]],[22,["_lpos"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[1,-0.25,0,0.25]],[22,["_lrot"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[3,0,0,0,1]],[22,["_euler"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[1,0,0,0]],[40,["_materials","0"],[4,["32LRqVqIxUXrhRaZjufCFa"]],10],[28,true,["_active"],[4,["02IhkEmuRXK63cdwkK5zZa"]]],[40,["_mesh"],[4,["32LRqVqIxUXrhRaZjufCFa"]],11]]],9]],[81,"3",false,5,[-137],[2,"17SLpDeVBOaaYZ1cmpG66J",1,0]],[36,0,null,26,[29,"02IhkEmuRXK63cdwkK5zZa",-138,[42,"7bIPdKScpPR5p3CzmUJTD+",1,[[28,"SM_EndBlock_02 Left-Bottom-001",["_name"],[4,["02IhkEmuRXK63cdwkK5zZa"]]],[22,["_lpos"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[1,-0.25,0,0.25]],[22,["_lrot"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[3,0,0,0,1]],[22,["_euler"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[1,0,0,0]],[40,["_materials","0"],[4,["32LRqVqIxUXrhRaZjufCFa"]],13],[28,true,["_active"],[4,["02IhkEmuRXK63cdwkK5zZa"]]]]],12]],[35,"1",6,[-139],[2,"6cBe8Jp/VJ861Pu7Grqccl",1,0]],[36,0,null,28,[29,"baVlE0TcVebKnvsHiGIVYd",-140,[42,"23PtGo6pdJna9Ntv9tn18m",1,[[28,"SM_EndBlock_03 Left-Bottom",["_name"],[4,["baVlE0TcVebKnvsHiGIVYd"]]],[22,["_lpos"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[1,-0.25,0,0.25]],[22,["_lrot"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[3,0,0,0,1]],[22,["_euler"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[1,0,0,0]],[40,["_materials","0"],[4,["70ayJ71XlU96/U8xl8cilw"]],15],[28,true,["_active"],[4,["baVlE0TcVebKnvsHiGIVYd"]]]]],14]],[81,"2",false,6,[-141],[2,"f7ZS/yJI1JX690fV/uAFvR",1,0]],[36,0,null,30,[29,"baVlE0TcVebKnvsHiGIVYd",-142,[42,"04qpbqAhhP76Wm3rmcJCl/",1,[[28,"SM_EndBlock_03 Left-Bottom-002",["_name"],[4,["baVlE0TcVebKnvsHiGIVYd"]]],[22,["_lpos"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[1,-0.25,0,0.25]],[22,["_lrot"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[3,0,0,0,1]],[22,["_euler"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[1,0,0,0]],[40,["_materials","0"],[4,["70ayJ71XlU96/U8xl8cilw"]],17],[28,true,["_active"],[4,["baVlE0TcVebKnvsHiGIVYd"]]],[40,["_mesh"],[4,["70ayJ71XlU96/U8xl8cilw"]],18]]],16]],[81,"3",false,6,[-143],[2,"e97jPFIPRFnKU2JutQSzaz",1,0]],[36,0,null,32,[29,"baVlE0TcVebKnvsHiGIVYd",-144,[42,"edKBO1tMZKi4mRKXkZxUvx",1,[[28,"SM_EndBlock_03 Left-Bottom-001",["_name"],[4,["baVlE0TcVebKnvsHiGIVYd"]]],[22,["_lpos"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[1,-0.25,0,0.25]],[22,["_lrot"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[3,0,0,0,1]],[22,["_euler"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[1,0,0,0]],[40,["_materials","0"],[4,["70ayJ71XlU96/U8xl8cilw"]],20],[28,true,["_active"],[4,["baVlE0TcVebKnvsHiGIVYd"]]]]],19]],[35,"1",7,[-145],[2,"09FXYcrzRBFIhAzOACnrK2",1,0]],[36,0,null,34,[29,"baKMdN60VQQ4U2ioBdasIK",-146,[42,"65/vZTEhtLJYuikzGixfOP",1,[[28,"SM_EndBlock_04 Right-Bottom",["_name"],[4,["baKMdN60VQQ4U2ioBdasIK"]]],[22,["_lpos"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[1,0.25,0,0.25]],[22,["_lrot"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[3,0,0,0,1]],[22,["_euler"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[1,0,0,0]],[40,["_materials","0"],[4,["66VTaMsHtVnpyJ3svdwpBh"]],22],[28,true,["_active"],[4,["baKMdN60VQQ4U2ioBdasIK"]]]]],21]],[81,"2",false,7,[-147],[2,"0coLdzaw1KDrxenYvcuirg",1,0]],[36,0,null,36,[29,"baKMdN60VQQ4U2ioBdasIK",-148,[42,"cdEQ5KpNNAb4KW6yud8XPZ",1,[[28,"SM_EndBlock_04 Right-Bottom-002",["_name"],[4,["baKMdN60VQQ4U2ioBdasIK"]]],[22,["_lpos"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[1,0.25,0,0.25]],[22,["_lrot"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[3,0,0,0,1]],[22,["_euler"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[1,0,0,0]],[40,["_materials","0"],[4,["66VTaMsHtVnpyJ3svdwpBh"]],24],[28,true,["_active"],[4,["baKMdN60VQQ4U2ioBdasIK"]]],[40,["_mesh"],[4,["66VTaMsHtVnpyJ3svdwpBh"]],25]]],23]],[81,"3",false,7,[-149],[2,"dbj6RnB6BM16xIcMwT2kcK",1,0]],[36,0,null,38,[29,"baKMdN60VQQ4U2ioBdasIK",-150,[42,"7fI6deV6FAtbdqFNs8ISsd",1,[[28,"SM_EndBlock_04 Right-Bottom-001",["_name"],[4,["baKMdN60VQQ4U2ioBdasIK"]]],[22,["_lpos"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[1,0.25,0,0.25]],[22,["_lrot"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[3,0,0,0,1]],[22,["_euler"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[1,0,0,0]],[40,["_materials","0"],[4,["66VTaMsHtVnpyJ3svdwpBh"]],27],[28,true,["_active"],[4,["baKMdN60VQQ4U2ioBdasIK"]]]]],26]],[35,"1",8,[-151],[2,"cbikTD2kFITKegdGc6pEAO",1,0]],[36,0,null,40,[29,"02IhkEmuRXK63cdwkK5zZa",-152,[42,"235B3/Br5MXKNIIPwlUZ4q",1,[[28,"SM_EndBlock_05 Right-Bottom",["_name"],[4,["02IhkEmuRXK63cdwkK5zZa"]]],[22,["_lpos"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[1,0.25,0,0.25]],[22,["_lrot"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[3,0,0,0,1]],[22,["_euler"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[1,0,0,0]],[40,["_materials","0"],[4,["32LRqVqIxUXrhRaZjufCFa"]],29],[28,true,["_active"],[4,["02IhkEmuRXK63cdwkK5zZa"]]]]],28]],[81,"2",false,8,[-153],[2,"53QYGKpfhE0KVpTskXvxgT",1,0]],[36,0,null,42,[29,"02IhkEmuRXK63cdwkK5zZa",-154,[42,"2845/3MXdO2qbToYh6fm+v",1,[[28,"SM_EndBlock_05 Right-Bottom-002",["_name"],[4,["02IhkEmuRXK63cdwkK5zZa"]]],[22,["_lpos"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[1,0.25,0,0.25]],[22,["_lrot"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[3,0,0,0,1]],[22,["_euler"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[1,0,0,0]],[40,["_materials","0"],[4,["32LRqVqIxUXrhRaZjufCFa"]],31],[28,true,["_active"],[4,["02IhkEmuRXK63cdwkK5zZa"]]],[40,["_mesh"],[4,["32LRqVqIxUXrhRaZjufCFa"]],32]]],30]],[81,"3",false,8,[-155],[2,"b9dpwXOKZDD4glfSi4nraI",1,0]],[36,0,null,44,[29,"02IhkEmuRXK63cdwkK5zZa",-156,[42,"a7DmD/gctJvr96hOAJIWtQ",1,[[28,"SM_EndBlock_05 Right-Bottom-001",["_name"],[4,["02IhkEmuRXK63cdwkK5zZa"]]],[22,["_lpos"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[1,0.25,0,0.25]],[22,["_lrot"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[3,0,0,0,1]],[22,["_euler"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[1,0,0,0]],[40,["_materials","0"],[4,["32LRqVqIxUXrhRaZjufCFa"]],34],[28,true,["_active"],[4,["02IhkEmuRXK63cdwkK5zZa"]]]]],33]],[35,"1",9,[-157],[2,"93Rkd9HVJDqJl5eZdGFu4V",1,0]],[36,0,null,46,[29,"baVlE0TcVebKnvsHiGIVYd",-158,[42,"56zgzGwT5G7JwLSE7BmSy5",1,[[28,"SM_EndBlock_06 Right-Bottom",["_name"],[4,["baVlE0TcVebKnvsHiGIVYd"]]],[22,["_lpos"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[1,0.25,0,0.25]],[22,["_lrot"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[3,0,0,0,1]],[22,["_euler"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[1,0,0,0]],[40,["_materials","0"],[4,["70ayJ71XlU96/U8xl8cilw"]],36],[28,true,["_active"],[4,["baVlE0TcVebKnvsHiGIVYd"]]]]],35]],[81,"2",false,9,[-159],[2,"a1QOvVRaJOEbJyfTKwH3sF",1,0]],[36,0,null,48,[29,"baVlE0TcVebKnvsHiGIVYd",-160,[42,"8docTjKdNPvaey+Y4rJ9HF",1,[[28,"SM_EndBlock_06 Right-Bottom-002",["_name"],[4,["baVlE0TcVebKnvsHiGIVYd"]]],[22,["_lpos"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[1,0.25,0,0.25]],[22,["_lrot"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[3,0,0,0,1]],[22,["_euler"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[1,0,0,0]],[40,["_materials","0"],[4,["70ayJ71XlU96/U8xl8cilw"]],38],[28,true,["_active"],[4,["baVlE0TcVebKnvsHiGIVYd"]]],[40,["_mesh"],[4,["70ayJ71XlU96/U8xl8cilw"]],39]]],37]],[81,"3",false,9,[-161],[2,"bd+wAzb/tHQqXu+04pZvmJ",1,0]],[36,0,null,50,[29,"baVlE0TcVebKnvsHiGIVYd",-162,[42,"56zuTOgKBG8YlquhBDTNC2",1,[[28,"SM_EndBlock_06 Right-Bottom-001",["_name"],[4,["baVlE0TcVebKnvsHiGIVYd"]]],[22,["_lpos"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[1,0.25,0,0.25]],[22,["_lrot"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[3,0,0,0,1]],[22,["_euler"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[1,0,0,0]],[40,["_materials","0"],[4,["70ayJ71XlU96/U8xl8cilw"]],41],[28,true,["_active"],[4,["baVlE0TcVebKnvsHiGIVYd"]]]]],40]],[35,"1",10,[-163],[2,"89yaC0d+JHoKBaf4qaAOhh",1,0]],[36,0,null,52,[29,"baKMdN60VQQ4U2ioBdasIK",-164,[42,"0dIw6xYv9KBp+MvlqxGdF6",1,[[28,"SM_EndBlock_07 Right-Top",["_name"],[4,["baKMdN60VQQ4U2ioBdasIK"]]],[22,["_lpos"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[1,0.25,0,-0.25]],[22,["_lrot"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[3,0,0,0,1]],[22,["_euler"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[1,0,0,0]],[40,["_materials","0"],[4,["66VTaMsHtVnpyJ3svdwpBh"]],43],[28,true,["_active"],[4,["baKMdN60VQQ4U2ioBdasIK"]]]]],42]],[81,"2",false,10,[-165],[2,"4cyr6gi1BAybYrC2y7UB3+",1,0]],[36,0,null,54,[29,"baKMdN60VQQ4U2ioBdasIK",-166,[42,"51/PlTHf9DuoBwfSwA8rHo",1,[[28,"SM_EndBlock_07 Right-Top-002",["_name"],[4,["baKMdN60VQQ4U2ioBdasIK"]]],[22,["_lpos"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[1,0.25,0,-0.25]],[22,["_lrot"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[3,0,0,0,1]],[22,["_euler"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[1,0,0,0]],[40,["_materials","0"],[4,["66VTaMsHtVnpyJ3svdwpBh"]],45],[28,true,["_active"],[4,["baKMdN60VQQ4U2ioBdasIK"]]],[40,["_mesh"],[4,["66VTaMsHtVnpyJ3svdwpBh"]],46]]],44]],[81,"3",false,10,[-167],[2,"8etgT/Jc9CpoPjod5zTPSV",1,0]],[36,0,null,56,[29,"baKMdN60VQQ4U2ioBdasIK",-168,[42,"68zWcDyvZCFq6HT/Kumis2",1,[[28,"SM_EndBlock_07 Right-Top-001",["_name"],[4,["baKMdN60VQQ4U2ioBdasIK"]]],[22,["_lpos"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[1,0.25,0,-0.25]],[22,["_lrot"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[3,0,0,0,1]],[22,["_euler"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[1,0,0,0]],[40,["_materials","0"],[4,["66VTaMsHtVnpyJ3svdwpBh"]],48],[28,true,["_active"],[4,["baKMdN60VQQ4U2ioBdasIK"]]]]],47]],[35,"1",11,[-169],[2,"9eH1TWrWtJR4zz3U1pdWMB",1,0]],[36,0,null,58,[29,"02IhkEmuRXK63cdwkK5zZa",-170,[42,"14KIBG2b1EM5ewyzHOXmWX",1,[[28,"SM_EndBlock_08 Right-Top",["_name"],[4,["02IhkEmuRXK63cdwkK5zZa"]]],[22,["_lpos"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[1,0.25,0,-0.25]],[22,["_lrot"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[3,0,0,0,1]],[22,["_euler"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[1,0,0,0]],[40,["_materials","0"],[4,["32LRqVqIxUXrhRaZjufCFa"]],50],[28,true,["_active"],[4,["02IhkEmuRXK63cdwkK5zZa"]]]]],49]],[81,"2",false,11,[-171],[2,"b3rxVAYhxE+JvSuUfsQrKL",1,0]],[36,0,null,60,[29,"02IhkEmuRXK63cdwkK5zZa",-172,[42,"86BbGCRxJGbInK9dBD0diE",1,[[28,"SM_EndBlock_08 Right-Top-002",["_name"],[4,["02IhkEmuRXK63cdwkK5zZa"]]],[22,["_lpos"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[1,0.25,0,-0.25]],[22,["_lrot"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[3,0,0,0,1]],[22,["_euler"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[1,0,0,0]],[40,["_materials","0"],[4,["32LRqVqIxUXrhRaZjufCFa"]],52],[28,true,["_active"],[4,["02IhkEmuRXK63cdwkK5zZa"]]],[40,["_mesh"],[4,["32LRqVqIxUXrhRaZjufCFa"]],53]]],51]],[81,"3",false,11,[-173],[2,"faybAKhO1Mu5PthwT6moQW",1,0]],[36,0,null,62,[29,"02IhkEmuRXK63cdwkK5zZa",-174,[42,"20iwmckX9D3qWKIY0tzuz3",1,[[28,"SM_EndBlock_08 Right-Top-001",["_name"],[4,["02IhkEmuRXK63cdwkK5zZa"]]],[22,["_lpos"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[1,0.25,0,-0.25]],[22,["_lrot"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[3,0,0,0,1]],[22,["_euler"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[1,0,0,0]],[40,["_materials","0"],[4,["32LRqVqIxUXrhRaZjufCFa"]],55],[28,true,["_active"],[4,["02IhkEmuRXK63cdwkK5zZa"]]]]],54]],[35,"1",12,[-175],[2,"cfPF7miaxJH45HDW6ifFjW",1,0]],[36,0,null,64,[29,"baVlE0TcVebKnvsHiGIVYd",-176,[42,"c9g5Qilk1OC43jW9AkNsAT",1,[[28,"SM_EndBlock_09 Right-Top",["_name"],[4,["baVlE0TcVebKnvsHiGIVYd"]]],[22,["_lpos"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[1,0.25,0,-0.25]],[22,["_lrot"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[3,0,0,0,1]],[22,["_euler"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[1,0,0,0]],[40,["_materials","0"],[4,["70ayJ71XlU96/U8xl8cilw"]],57],[28,true,["_active"],[4,["baVlE0TcVebKnvsHiGIVYd"]]]]],56]],[81,"2",false,12,[-177],[2,"57jagoUrNLS5fFXOSFy3KG",1,0]],[36,0,null,66,[29,"baVlE0TcVebKnvsHiGIVYd",-178,[42,"07aC8Edu5FvqIcDAtNAN1z",1,[[28,"SM_EndBlock_09 Right-Top-002",["_name"],[4,["baVlE0TcVebKnvsHiGIVYd"]]],[22,["_lpos"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[1,0.25,0,-0.25]],[22,["_lrot"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[3,0,0,0,1]],[22,["_euler"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[1,0,0,0]],[40,["_materials","0"],[4,["70ayJ71XlU96/U8xl8cilw"]],59],[28,true,["_active"],[4,["baVlE0TcVebKnvsHiGIVYd"]]],[40,["_mesh"],[4,["70ayJ71XlU96/U8xl8cilw"]],60]]],58]],[81,"3",false,12,[-179],[2,"3cfi4XZ29NQIywMeyX7YCt",1,0]],[36,0,null,68,[29,"baVlE0TcVebKnvsHiGIVYd",-180,[42,"7dIAaqG+lCNoE032E1+LiM",1,[[28,"SM_EndBlock_09 Right-Top-001",["_name"],[4,["baVlE0TcVebKnvsHiGIVYd"]]],[22,["_lpos"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[1,0.25,0,-0.25]],[22,["_lrot"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[3,0,0,0,1]],[22,["_euler"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[1,0,0,0]],[40,["_materials","0"],[4,["70ayJ71XlU96/U8xl8cilw"]],62],[28,true,["_active"],[4,["baVlE0TcVebKnvsHiGIVYd"]]]]],61]],[35,"1",13,[-181],[2,"f6yf5GLplOMbn6UctAu6qA",1,0]],[36,0,null,70,[29,"baKMdN60VQQ4U2ioBdasIK",-182,[42,"94Jpp1NPZPyrR0u64niL6t",1,[[28,"SM_EndBlock_10 Left-Top",["_name"],[4,["baKMdN60VQQ4U2ioBdasIK"]]],[22,["_lpos"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[1,-0.25,0,-0.25]],[22,["_lrot"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[3,0,0,0,1]],[22,["_euler"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[1,0,0,0]],[40,["_materials","0"],[4,["66VTaMsHtVnpyJ3svdwpBh"]],64],[28,true,["_active"],[4,["baKMdN60VQQ4U2ioBdasIK"]]]]],63]],[81,"2",false,13,[-183],[2,"34fjPhRTRPP7wd12sjy6L7",1,0]],[36,0,null,72,[29,"baKMdN60VQQ4U2ioBdasIK",-184,[42,"34qJZv/TBIZqfqb/XLeOwD",1,[[28,"SM_EndBlock_10 Left-Top-002",["_name"],[4,["baKMdN60VQQ4U2ioBdasIK"]]],[22,["_lpos"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[1,-0.25,0,-0.25]],[22,["_lrot"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[3,0,0,0,1]],[22,["_euler"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[1,0,0,0]],[40,["_materials","0"],[4,["66VTaMsHtVnpyJ3svdwpBh"]],66],[28,true,["_active"],[4,["baKMdN60VQQ4U2ioBdasIK"]]],[40,["_mesh"],[4,["66VTaMsHtVnpyJ3svdwpBh"]],67]]],65]],[81,"3",false,13,[-185],[2,"d1atVx5XBKk7K7hY7wuTAw",1,0]],[36,0,null,74,[29,"baKMdN60VQQ4U2ioBdasIK",-186,[42,"7a2viLAxxFSqeg+z9ilyEB",1,[[28,"SM_EndBlock_10 Left-Top-001",["_name"],[4,["baKMdN60VQQ4U2ioBdasIK"]]],[22,["_lpos"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[1,-0.25,0,-0.25]],[22,["_lrot"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[3,0,0,0,1]],[22,["_euler"],[4,["baKMdN60VQQ4U2ioBdasIK"]],[1,0,0,0]],[40,["_materials","0"],[4,["66VTaMsHtVnpyJ3svdwpBh"]],69],[28,true,["_active"],[4,["baKMdN60VQQ4U2ioBdasIK"]]]]],68]],[35,"1",14,[-187],[2,"b724QjPX1Hh7j6Bf+03Svr",1,0]],[36,0,null,76,[29,"02IhkEmuRXK63cdwkK5zZa",-188,[42,"feFCgcWuVNYLndeyJ7aX5w",1,[[28,"SM_EndBlock_11 Left-Top",["_name"],[4,["02IhkEmuRXK63cdwkK5zZa"]]],[22,["_lpos"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[1,-0.25,0,-0.25]],[22,["_lrot"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[3,0,0,0,1]],[22,["_euler"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[1,0,0,0]],[40,["_materials","0"],[4,["32LRqVqIxUXrhRaZjufCFa"]],71],[28,true,["_active"],[4,["02IhkEmuRXK63cdwkK5zZa"]]]]],70]],[81,"2",false,14,[-189],[2,"e4hI1pbq5NS6KjqeJ37bP6",1,0]],[36,0,null,78,[29,"02IhkEmuRXK63cdwkK5zZa",-190,[42,"1dUsfHpH5PpLP4z+KiFc+o",1,[[28,"SM_EndBlock_11 Left-Top-002",["_name"],[4,["02IhkEmuRXK63cdwkK5zZa"]]],[22,["_lpos"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[1,-0.25,0,-0.25]],[22,["_lrot"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[3,0,0,0,1]],[22,["_euler"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[1,0,0,0]],[40,["_materials","0"],[4,["32LRqVqIxUXrhRaZjufCFa"]],73],[28,true,["_active"],[4,["02IhkEmuRXK63cdwkK5zZa"]]],[40,["_mesh"],[4,["32LRqVqIxUXrhRaZjufCFa"]],74]]],72]],[81,"3",false,14,[-191],[2,"60meav/ilI8bpbaS7ng+3I",1,0]],[36,0,null,80,[29,"02IhkEmuRXK63cdwkK5zZa",-192,[42,"571i5qRDFJpqPgLjBy/byV",1,[[28,"SM_EndBlock_11 Left-Top-001",["_name"],[4,["02IhkEmuRXK63cdwkK5zZa"]]],[22,["_lpos"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[1,-0.25,0,-0.25]],[22,["_lrot"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[3,0,0,0,1]],[22,["_euler"],[4,["02IhkEmuRXK63cdwkK5zZa"]],[1,0,0,0]],[40,["_materials","0"],[4,["32LRqVqIxUXrhRaZjufCFa"]],76],[28,true,["_active"],[4,["02IhkEmuRXK63cdwkK5zZa"]]]]],75]],[35,"1",15,[-193],[2,"6aw0H9+/dE5JMevXjE0BJO",1,0]],[36,0,null,82,[29,"baVlE0TcVebKnvsHiGIVYd",-194,[42,"c6L55NMsFLaIhZVMkNt9OO",1,[[28,"SM_EndBlock_12 Left-Top",["_name"],[4,["baVlE0TcVebKnvsHiGIVYd"]]],[22,["_lpos"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[1,-0.25,0,-0.25]],[22,["_lrot"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[3,0,0,0,1]],[22,["_euler"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[1,0,0,0]],[40,["_materials","0"],[4,["70ayJ71XlU96/U8xl8cilw"]],78],[28,true,["_active"],[4,["baVlE0TcVebKnvsHiGIVYd"]]]]],77]],[81,"2",false,15,[-195],[2,"e97MiIQdFO76oTRPdabtd+",1,0]],[36,0,null,84,[29,"baVlE0TcVebKnvsHiGIVYd",-196,[42,"62dDgRg25Fd7NLM+8xt2Gf",1,[[28,"SM_EndBlock_12 Left-Top-002",["_name"],[4,["baVlE0TcVebKnvsHiGIVYd"]]],[22,["_lpos"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[1,-0.25,0,-0.25]],[22,["_lrot"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[3,0,0,0,1]],[22,["_euler"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[1,0,0,0]],[40,["_materials","0"],[4,["70ayJ71XlU96/U8xl8cilw"]],80],[28,true,["_active"],[4,["baVlE0TcVebKnvsHiGIVYd"]]],[40,["_mesh"],[4,["70ayJ71XlU96/U8xl8cilw"]],81]]],79]],[81,"3",false,15,[-197],[2,"b9bZu+EHdIYat0070s/vef",1,0]],[36,0,null,86,[29,"baVlE0TcVebKnvsHiGIVYd",-198,[42,"e4wJolQAJNS74DRIwQc/qI",1,[[28,"SM_EndBlock_12 Left-Top-001",["_name"],[4,["baVlE0TcVebKnvsHiGIVYd"]]],[22,["_lpos"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[1,-0.25,0,-0.25]],[22,["_lrot"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[3,0,0,0,1]],[22,["_euler"],[4,["baVlE0TcVebKnvsHiGIVYd"]],[1,0,0,0]],[40,["_materials","0"],[4,["70ayJ71XlU96/U8xl8cilw"]],83],[28,true,["_active"],[4,["baVlE0TcVebKnvsHiGIVYd"]]]]],82]],[54,"Theme Models Chooser",3,[[140,-199,[1,"6fDZXFXGdCfohVaFtXSr7f"],[16,18,20],84]],[2,"83bHpRTZtDG6krYjDlxIcN",1,0]],[54,"Theme Models Chooser-001",3,[[140,-200,[1,"6eBGq6/Y9FrIqwag0gOY/4"],[22,24,26],85]],[2,"915CkqYcFFeYqMitVrRBw+",1,0]],[54,"Theme Models Chooser-002",3,[[140,-201,[1,"10Q3YuoVpHtp1XO4Q9In45"],[28,30,32],86]],[2,"7cNMcx0BtNU7I+mxttFheJ",1,0]],[54,"Theme Models Chooser-003",3,[[140,-202,[1,"bbwvYoIv1HeqSZbWZg4t7n"],[34,36,38],87]],[2,"29ilsUw9tLgKCxQ+heo4DJ",1,0]],[54,"Theme Models Chooser-004",3,[[140,-203,[1,"05Ofh8sOlDfK7V6z922U9D"],[40,42,44],88]],[2,"8cg1tq+69L06DbjxGvbUp+",1,0]],[54,"Theme Models Chooser-005",3,[[140,-204,[1,"e0KQlpQjZFxJtfhFWz1Fd5"],[52,54,56],89]],[2,"cdH6/BSlRA+Ler2ohtispR",1,0]],[54,"Theme Models Chooser-006",3,[[140,-205,[1,"e3OZVO/+FMH45Ctaij5w7a"],[58,60,62],90]],[2,"35J9gE5apNOquYZro685RC",1,0]],[54,"Theme Models Chooser-007",3,[[140,-206,[1,"fbyvqtYvpJqJhfzzpEgUr3"],[64,66,68],91]],[2,"f31EF9cwdDw4ObxHSNNEDo",1,0]],[54,"Theme Models Chooser-008",3,[[140,-207,[1,"6fSn/rbHhBVJiU5lY/ruDg"],[76,78,80],92]],[2,"c2zkBFMSFGvKelQYOoPe1s",1,0]],[54,"Theme Models Chooser-009",3,[[140,-208,[1,"d8cGtAQcNPBaaMO6mHv3jr"],[82,84,86],93]],[2,"456iB9UpFOJYLjVIxkO6Ih",1,0]],[54,"Theme Models Chooser-010",3,[[140,-209,[1,"818m8z3NhBWpv+lplbY3Ol"],[46,48,50],94]],[2,"d57U/lqCFNFocyvYO2itCK",1,0]],[54,"Theme Models Chooser-011",3,[[140,-210,[1,"8fOSsbgVtLe4IL0MKLlZzI"],[70,72,74],95]],[2,"17K7sACn5E/6tAOIWw2/hq",1,0]]],0,[0,-1,17,0,-2,19,0,-3,21,0,-4,23,0,-5,25,0,-6,27,0,-7,29,0,-8,31,0,-9,33,0,-10,35,0,-11,37,0,-12,39,0,-13,41,0,-14,43,0,-15,45,0,-16,47,0,-17,49,0,-18,51,0,-19,53,0,-20,55,0,-21,57,0,-22,59,0,-23,61,0,-24,63,0,-25,65,0,-26,67,0,-27,69,0,-28,71,0,-29,73,0,-30,75,0,-31,77,0,-32,79,0,-33,81,0,-34,83,0,-35,85,0,-36,87,0,2,1,0,-1,4,0,-2,5,0,-3,6,0,-4,7,0,-5,8,0,-6,9,0,-1,10,0,-2,11,0,-3,12,0,-4,13,0,-5,14,0,-6,15,0,-1,7,0,-2,8,0,-3,9,0,-4,10,0,-5,11,0,-6,12,0,-1,4,0,-2,5,0,-3,6,0,-4,13,0,-5,14,0,-6,15,0,0,1,0,-1,2,0,-2,3,0,2,1,0,7,1,0,-1,4,0,-2,5,0,-3,6,0,-4,7,0,-5,8,0,-6,9,0,-7,10,0,-8,11,0,-9,12,0,-10,13,0,-11,14,0,-12,15,0,-1,88,0,-2,89,0,-3,90,0,-4,91,0,-5,92,0,-6,93,0,-7,94,0,-8,95,0,-9,96,0,-10,97,0,-11,98,0,-12,99,0,-1,16,0,-2,18,0,-3,20,0,-1,22,0,-2,24,0,-3,26,0,-1,28,0,-2,30,0,-3,32,0,-1,34,0,-2,36,0,-3,38,0,-1,40,0,-2,42,0,-3,44,0,-1,46,0,-2,48,0,-3,50,0,-1,52,0,-2,54,0,-3,56,0,-1,58,0,-2,60,0,-3,62,0,-1,64,0,-2,66,0,-3,68,0,-1,70,0,-2,72,0,-3,74,0,-1,76,0,-2,78,0,-3,80,0,-1,82,0,-2,84,0,-3,86,0,-1,17,0,2,17,0,-1,19,0,2,19,0,-1,21,0,2,21,0,-1,23,0,2,23,0,-1,25,0,2,25,0,-1,27,0,2,27,0,-1,29,0,2,29,0,-1,31,0,2,31,0,-1,33,0,2,33,0,-1,35,0,2,35,0,-1,37,0,2,37,0,-1,39,0,2,39,0,-1,41,0,2,41,0,-1,43,0,2,43,0,-1,45,0,2,45,0,-1,47,0,2,47,0,-1,49,0,2,49,0,-1,51,0,2,51,0,-1,53,0,2,53,0,-1,55,0,2,55,0,-1,57,0,2,57,0,-1,59,0,2,59,0,-1,61,0,2,61,0,-1,63,0,2,63,0,-1,65,0,2,65,0,-1,67,0,2,67,0,-1,69,0,2,69,0,-1,71,0,2,71,0,-1,73,0,2,73,0,-1,75,0,2,75,0,-1,77,0,2,77,0,-1,79,0,2,79,0,-1,81,0,2,81,0,-1,83,0,2,83,0,-1,85,0,2,85,0,-1,87,0,2,87,0,0,88,0,0,89,0,0,90,0,0,91,0,0,92,0,0,93,0,0,94,0,0,95,0,0,96,0,0,97,0,0,98,0,0,99,0,9,1,210],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[8,11,8,11,11,8,11,8,11,8,11,11,8,11,8,11,8,11,11,8,11,8,11,8,11,11,8,11,8,11,8,11,11,8,11,8,11,8,11,11,8,11,8,11,8,11,11,8,11,8,11,8,11,11,8,11,8,11,8,11,11,8,11,8,11,8,11,11,8,11,8,11,8,11,11,8,11,8,11,8,11,11,8,11,34,34,34,34,34,34,34,34,34,34,34,34],[36,1,36,12,68,36,12,37,1,37,12,69,37,12,38,1,38,12,70,38,12,36,1,36,12,68,36,12,37,1,37,12,69,37,12,38,1,38,12,70,38,12,36,1,36,12,68,36,12,37,1,37,12,69,37,12,38,1,38,12,70,38,12,36,1,36,12,68,36,12,37,1,37,12,69,37,12,38,1,38,12,70,38,12,24,24,24,24,24,24,24,24,24,24,24,24]],[[[50,"04-Slot-Block"],[207,"04-Slot-Block",8,[-31,-32,-33],[[[601,-24,[1,"adDwCD0kZGYbj7slb75EIO"],[[7,"cd32dlNM6hEkokUGHlLV8y+","raise",-20],[7,"99672sUg5NFw4x7bEPAiyHE","activate",-21],[7,"99672sUg5NFw4x7bEPAiyHE","activate",-22],[7,"99672sUg5NFw4x7bEPAiyHE","activate",-23]],[[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",-17],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",-18],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",-19]],[[7,"cd32dlNM6hEkokUGHlLV8y+","raise",-16]],[[7,"99672sUg5NFw4x7bEPAiyHE","activate",-11],[7,"642bcspAnpEK4LUpupK8i0T","showTowerUpgradesUI",-12],[7,"99672sUg5NFw4x7bEPAiyHE","activate",-13],[7,"99672sUg5NFw4x7bEPAiyHE","activate",-14],[7,"99672sUg5NFw4x7bEPAiyHE","activate",-15]],[[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",-6],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",-7],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",-8],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",-9],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",-10]],[[7,"cd32dlNM6hEkokUGHlLV8y+","raise",-5]]],-25,[602,-28,[1,"8dwHXegJxM25YUdE4DUKEv"],[[7,"cb730GgZGlA0o2b0bqxYlIm","selectBlock",-26],[7,"ac879rTendCEbpZWFz/jexs","playSFX",-27]]],[603,2,-30,[1,"17IzOsNdhBR75gUsomuMOG"],-29]],4,1,4,4],[196,"73wwOw5Z5Jy71Ba4KiCnyV",-4,0,[-1,-2,-3]]],[35,"Art",1,[-34,-35,-36,-37,-38],[2,"76iPw3M8NCmYDzQoN4azLT",1,0]],[35,"Scripts",1,[-39,-40,-41,-42,-43],[2,"6bab7tdnVM0KYPoS+cOMos",1,0]],[426,"Destroy Tower Listener",false,[[55,-44,[1,"d3w5IonClDa6tyDGPYPR1W"]],[190,10,-46,[1,"dax+ZfLVBCpql9ZPIj8JEd"],[[7,"730c2m+dVlIkomlZBav90dv","destructTower",-45]]]],[2,"baUBErQY1AkrhdLA4HFWE9",1,0]],[427,"TEMP Construct Preview",false,[[79,"Cube<ModelComponent>",-47,[1,"ceLfXOBBNCI7SpoTY1VBcM"],[0],[34],1],[55,-48,[1,"1epQzWNDZFqI/tDUQkaSwk"]]],[2,"3dyFvhB35ACJaCQ36xCQLH",1,0],[1,0,0.247,0],[3,0,0.3826834323650898,0,0.9238795325112867],[1,0.6,0.5,0.6],[1,0,45,0]],[428,"TEMP Upgrade Preview",false,[[79,"Cube<ModelComponent>",-49,[1,"abf5sIaGBOw6x4s6hbNn8A"],[2],[34],3],[55,-50,[1,"fbwWjuoMJB1KKhjv2z5zHW"]]],[2,"97aks0Y/lIDaNA5yl4yyqU",1,0],[1,0,0.001,0],[1,0.98,1,0.98]],[4,["9ea1IJXwxR8LDyOJtyJFa5"]],[54,"Tower Upgrader",3,[[604,-51,[1,"0cRG/YZcVDnojS2xJFmyHF"],[[7,"cb730GgZGlA0o2b0bqxYlIm","deselectBlock",1]],15]],[2,"5bRwKGvMtMaJ4ggqaPPlTP",1,0]],[305,"Events",1,[[-52,-53,-54,[80,"Destroy Tower",-55,[2,"09iEmF0l1BkZQNJrjHu3CW",1,0]]],1,1,1,4],[2,"9dc6Kbfq9OqoO2cT0u3vnX",1,0]],[35,"Construction Tower UI",9,[-56,-57,-58,-59],[2,"bcFTKQKcVNh4OVKMQLDZX3",1,0]],[194,"Construct Tower Listener",false,10,[[190,2,-61,[1,"caN/7z40NP/5OzEkbKPOfz"],[[7,"9c66529d09P4Zt3iRYdMpnm","constructTower",-60],[7,"cb730GgZGlA0o2b0bqxYlIm","deselectBlock",1]]],[55,-62,[1,"20V5RrxrREta3goccw35Va"]]],[2,"18EX/NR3ZKJ6indRwwkVX8",1,0]],[194,"Cancelled Tower Construction Listener",false,10,[[190,3,-63,[1,"d7zj9iaI5ECYC6QghW4QLz"],[[7,"cb730GgZGlA0o2b0bqxYlIm","deselectBlock",1]]],[55,-64,[1,"80bSxkWWhBZI41Uw+h/+lg"]]],[2,"88sA/6uj9EGodUaOT91ut1",1,0]],[35,"Upgrade Tower UI",9,[-65,4,-66,-67],[2,"dba0a0bMJH04vTFqgjDtWV",1,0]],[194,"Upgrade Tower Listener",false,13,[[55,-68,[1,"7fKf+xfaVNZqbqDlWPTHSX"]],[190,7,-69,[1,"d1N5TwrCpNrL0tALIoJJNP"],[[7,"642bcspAnpEK4LUpupK8i0T","upgrade",8]]]],[2,"8crVtGRBlI36VTNH5kNrvo",1,0]],[194,"Cancelled Tower Upgrade Listener",false,13,[[190,8,-70,[1,"20eR6YBU5MZ52EU8wQzJvJ"],[[7,"cb730GgZGlA0o2b0bqxYlIm","deselectBlock",1]]],[55,-71,[1,"cc88B1wJdEM43dbPKNNFvi"]]],[2,"7aZWqf11RC3ZawxtRzeSbW",1,0]],[270,"TEMP-Selection Interface Holder",2,[5,6],[[471,"Cube<ModelComponent>",false,-72,[1,"30WlUBDaJCX4B6ougKhd4q"],[4],[34],5]],[2,"4fn4ibmVVFpaRuQMtoU9MG",1,0],[1,0,0.204,0]],[4,["b2NVzD9jpfBKZ43/7JApbk"]],[4,["86TnLpMyZez4d2k1E06z3O"]],[54,"Tower Constructor",3,[[605,-74,[1,"fd8gErEUFNT41S9GXbiKdZ"],[12,13,14],-73,[[7,"cb730GgZGlA0o2b0bqxYlIm","constructed",1],[7,"642bcspAnpEK4LUpupK8i0T","setTower",8]]]],[2,"11jZQlUPhA/7itixFa+SRt",1,0]],[35,"Game",9,[-75,-76,-77],[2,"bdOx6yqYJPjou6zaXi0ml3",1,0]],[89,"Tower Construction Holder",2,[2,"c6ObkwxQ9BBZZxp/KzoeHC",1,0],[1,0,0.5,0]],[35,"1",2,[-78],[2,"2fcql0mmFG4pdSwI0r3h8I",1,0]],[36,0,null,22,[29,"9ea1IJXwxR8LDyOJtyJFa5",-79,[42,"3eo/BpkptEWowLuutI53Ib",1,[[14,"SM_BlockSlot_01",["_name"],7],[10,["_lpos"],7,[1,0,0,0]],[10,["_lrot"],7,[3,0,0,0,1]],[10,["_euler"],7,[1,0,0,0]],[40,["_materials","0"],[4,["8avigzXY5XhKbCpmY6Hsd0"]],7],[14,true,["_active"],7]]],6]],[81,"2",false,2,[-80],[2,"398yKv+lRG8ZL4gxsMkiqm",1,0]],[36,0,null,24,[29,"b2NVzD9jpfBKZ43/7JApbk",-81,[42,"88yyq4KHRLubFuTyOpwmB6",1,[[14,"SM_BlockSlot_02",["_name"],17],[10,["_lpos"],17,[1,0,0,0]],[10,["_lrot"],17,[3,0,0,0,1]],[10,["_euler"],17,[1,0,0,0]],[40,["_materials","0"],[4,["34IQ6xxWhUH7mqUbH//+fB"]],9]]],8]],[81,"3",false,2,[-82],[2,"a1qmzg+ZdK46reBPR4jr/+",1,0]],[36,0,null,26,[29,"86TnLpMyZez4d2k1E06z3O",-83,[42,"4bd8S+/N9PDpgI5XSWg8iv",1,[[14,"SM_BlockSlot_03",["_name"],18],[10,["_lpos"],18,[1,0,0,0]],[10,["_lrot"],18,[3,0,0,0,1]],[10,["_euler"],18,[1,0,0,0]],[40,["_materials","0"],[4,["dcQNjsiCBT3KDpO+eJMUSG"]],11]]],10]],[54,"Tower Destructor",3,[[606,-84,[1,"e0fD1BV7JPSZQ67M3OXKM9"],21,[[7,"cb730GgZGlA0o2b0bqxYlIm","deselectBlock",1],[7,"cb730GgZGlA0o2b0bqxYlIm","destroyTower",1],[7,"9c66529d09P4Zt3iRYdMpnm","towerDestroyed",19]]]],[2,"52yFjhH2hLnIO+ybGhXYC5",1,0]],[115,"Click SFX",[[144,"sfx-ui-gametap",-85,[1,"32X2mvA3ZExZ1cYq79lbHz"]]],[2,"eaqt74DPlEpbOBVUUA5ngG",1,0]],[54,"Show Tower Construction UI Raiser",10,[[192,1,-86,[1,"aflqH3CxJH4Z8Ihv0nNAme"]]],[2,"cfUaSORzxMWq96dYL0DCtj",1,0]],[54,"Hide Tower Construction UI Raiser",10,[[192,4,-87,[1,"d3STKhVGRLnbgJNXHdUakl"]]],[2,"57IvbxkSpOT5gdaRmgrZIw",1,0]],[54,"Hide Tower Upgrade UI Raiser",13,[[192,6,-88,[1,"cbNrjOJ5VF3J7YpzWy7t2k"]]],[2,"42R45W52BJsJ4o/Q6xp/Zd",1,0]],[35,"Audio",3,[29],[2,"42+2bziB1Bg6DScBRmNQzf",1,0]],[54,"Theme Model Chooser",3,[[140,-89,[1,"a7g6yA3qNOtKyL0Ps9MSgt"],[22,24,26],16]],[2,"f2mSkhygFJbopmX1A47GPm",1,0]],[54,"On Game Start",20,[[169,1,-90,[1,"77OiI0KHdEe7I7+z+wfscb"],[[7,"cb730GgZGlA0o2b0bqxYlIm","activate",1]]]],[2,"48CIl14thLwqIQsXmut+QT",1,0]],[54,"On Victory",20,[[169,3,-91,[1,"70ldOpdp9INofNub/nWCLb"],[[7,"cb730GgZGlA0o2b0bqxYlIm","deactivate",1]]]],[2,"b2soa2pohOF4wI4NRdw7ql",1,0]],[54,"On Defeat",20,[[169,4,-92,[1,"32rSGuJ45BFIqcH2gmSqpN"],[[7,"cb730GgZGlA0o2b0bqxYlIm","deactivate",1]]]],[2,"64NDKp7V9GjKDh59AqqcXs",1,0]],[567,true,1,[1,"0c5pCZwi5OOphmm0m2TRWt"],[1,0,0.4,0]]],0,[0,-1,23,0,-2,25,0,-3,27,0,2,1,0,3,32,0,3,6,0,3,14,0,3,4,0,3,4,0,3,15,0,3,6,0,3,8,0,3,14,0,3,4,0,3,15,0,3,31,0,3,11,0,3,5,0,3,12,0,3,30,0,3,11,0,3,5,0,3,12,0,0,1,0,-2,38,0,3,1,0,3,29,0,0,1,0,17,38,0,0,1,0,-1,2,0,-2,3,0,-3,9,0,-1,16,0,-2,21,0,-3,22,0,-4,24,0,-5,26,0,-1,19,0,-2,8,0,-3,28,0,-4,33,0,-5,34,0,0,4,0,3,28,0,0,4,0,0,5,0,0,5,0,0,6,0,0,6,0,0,8,0,-1,10,0,-2,13,0,-3,20,0,7,9,0,-1,30,0,-2,31,0,-3,11,0,-4,12,0,3,19,0,0,11,0,0,11,0,0,12,0,0,12,0,-1,14,0,-3,15,0,-4,32,0,0,14,0,0,14,0,0,15,0,0,15,0,0,16,0,66,21,0,0,19,0,-1,35,0,-2,36,0,-3,37,0,-1,23,0,2,23,0,-1,25,0,2,25,0,-1,27,0,2,27,0,0,28,0,0,29,0,0,30,0,0,31,0,0,32,0,0,34,0,0,35,0,0,36,0,0,37,0,9,1,4,7,13,5,7,16,6,7,16,29,7,33,92],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,-1,10,-1,10,8,11,8,11,8,11,-1,-2,-3,39,34],[337,32,338,32,339,32,340,1,341,12,342,12,343,344,345,45,24]],[[[62],[47,"SM_TowerElectroneerBody_01",[-2],[2,"12sIxAd4xbv59W3ANKj2X7",-1,0]],[53,"SM_TowerElectroneerBody_01",1,[[52,-3,[1,"366PFgp3dcA6jQhh5OaNY0"],[0],[34],1]],[2,"bbsFprwHlZVKqGRbFGqwTW",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[346,180]],[[[63,"SM_TowerElectroneerBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",2524180393,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":80448,"length":22500,"count":5625,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":80448,"count":1676,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2846771776676178,-0.6407873630523682,-0.1203923374414444],"maxPosition",8,[1,0.2846771776676178,0.19153396785259247,0.40582022070884705]]],-1],0,0,[],[],[]],[[[50,"Game Victory Controller"],[217,"Game Victory Controller",[-4],[[607,0.5,0.9,1,-2,[1,"54NiE4ONhFtrWwkVELx2To"]],[55,-3,[1,"cd+Y4glNBGgqr1KvfWI8V9"]]],[2,"485iyaahFDNIyx781avzqz",-1,0]],[35,"Events",1,[-5,-6,-7],[2,"56+VNBOnhIoLw0etlqSncL",1,0]],[35,"Cube Tower HP",2,[-8,-9],[2,"36wUMhv8BDiYUP0xj+zNtc",1,0]],[54,"Final Wave Completed",2,[[406,3,-10,[1,"8egc8QzbZFaL9wuxDmuaGK"],[[7,"4b49aIoOPNJGbyOKIzv2YTd","victory",1]]]],[2,"90c2lI/7FHy6z8MrOQ3MGC",1,0]],[54,"Changed",3,[[264,1,-11,[1,"a0TtExOSZG5Js6ms6NwDG+"],[[7,"4b49aIoOPNJGbyOKIzv2YTd","updateTowerHP",1]]]],[2,"81fAT0PGFKzoBIhN31pJn9",1,0]],[54,"Set",3,[[264,2,-12,[1,"30Qf+RSIpKJa5Jy3FTFsLr"],[[7,"4b49aIoOPNJGbyOKIzv2YTd","updateTowerHP",1]]]],[2,"b7vVb9rhJDF7KSfrI90QQC",1,0]],[54,"On Game Defeat",2,[[169,4,-13,[1,"92DGeTx6xO6IjI8WXjTvQF"],[[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",1]]]],[2,"93PDIHrRlB9q7AuuAteaRf",1,0]]],0,[0,2,1,0,0,1,0,0,1,0,-1,2,0,-1,4,0,-2,3,0,-3,7,0,-1,5,0,-2,6,0,0,4,0,0,5,0,0,6,0,0,7,0,9,1,13],[],[],[]],[[{"name":"default_sprite","rect":{"x":0,"y":2,"width":40,"height":36},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[21],[347]],[[[57,".bin",457442077,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":17424,"length":2376,"count":594,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":17424,"count":363,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3134799599647522,-0.14206379652023315,0.06674867868423462],"maxPosition",8,[1,0.3134799301624298,0.3270822763442993,0.4353870153427124]]],-1],0,0,[],[],[]],[[[63,"SM_EnemyTank_03__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[62],[47,"SM_EnemyTank_03",[-2],[2,"6fmtIknt9barIS5y55aJtq",-1,0]],[53,"SM_EnemyTank_03",1,[[52,-3,[1,"66o7UDfllVyr9MoWFmTbga"],[0],[34],1]],[2,"7a5v6ewJBcY6bQHuXc2hJF",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[348,349]],[[[50,"Game Over Controller"],[217,"Game Over Controller",[-3],[[608,-2,[1,"f9uLnig5tIPK6K7EOTBBJ2"]]],[2,"640VKea5NIK4USuLAyLBs1",-1,0]],[35,"Events",1,[-4],[2,"21R2qCEwBESoIVLQn+UlM3",1,0]],[54,"Cube Towe HP Listener",2,[[264,1,-5,[1,"5eNgccoCJLOp9WXV2Exktu"],[[7,"42f642WIEJAjprBy1WVF7oY","setCubeTowerHP",1]]]],[2,"1eKiZOwCZH94k7XhwBrXpi",1,0]]],0,[0,2,1,0,0,1,0,-1,2,0,-1,3,0,0,3,0,9,1,5],[],[],[]],[[{"name":"Icon_Currency Outline 100","rect":{"x":0,"y":0,"width":104,"height":104},"offset":{"x":0,"y":0},"originalSize":{"width":104,"height":104},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[21],[350]],[[[57,".bin",1170482504,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":43584,"length":12744,"count":3186,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":43584,"count":908,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.20033572614192963,-0.46827825903892517,-0.05078723281621933],"maxPosition",8,[1,0.20010216534137726,0.15148843824863434,0.37866008281707764]]],-1],0,0,[],[],[]],[[[62],[47,"SM_TowerLaserBody_01",[-2],[2,"c3aOBtjPNU96Ex7+KDGHdh",-1,0]],[53,"SM_TowerLaserBody_01",1,[[52,-3,[1,"c79Byda9tSsLPjCdZFbGni"],[0],[34],1]],[2,"99ijk+7RNW9aCPpwsQ5cLp",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[351,148]],[[[63,"SM_TowerLaserBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[50,"P-TowerConstruction-UI"],[133,"P-TowerConstruction-UI",33554432,[-29,-30,-31],[[18,-25,[1,"95uJmQ46FAtJ+af/b8eogh"],[5,414,896]],[282,-26,[1,"82fdObAedBfKXPa5YRt+Pl"]],[381,45,5.684341886080802e-14,5.684341886080802e-14,-27,[1,"89/nTdM8RJPpPYUUL/sQy8"]],[258,-28,[1,"6bb7HJ0dtEeqFwICkXptOq"]]],[86,"c46/YsCPVOJYA4mWEpNYRx",-24,0,[[116,["_animator"],-5,[4,["f13UGmbg5KLrhluQFmxr/w"]]],[74,["_entries","0","entryNode"],-7,-6,[4,["74XRvRkuBPX6zuG43ddIDV","0fJEdVoOpA/qcZPGFboeiN"]]],[74,["_entries","1","entryNode"],-9,-8,[4,["c1RSk6NUhFVYmVRsNR9Aqa","0fJEdVoOpA/qcZPGFboeiN"]]],[74,["_entries","2","entryNode"],-11,-10,[4,["0aSc2CSmNOv7gy3zhm972w","0fJEdVoOpA/qcZPGFboeiN"]]],[74,["_showTowerInfo","1","target"],-13,-12,[4,["bb7Kak23hMTYfuoFKHjabu"]]],[61,["_animator"],-15,[4,["ffZ2Ct4zBH+Zt94rHKmSpg"]],-14,[4,["f13UGmbg5KLrhluQFmxr/w"]]],[61,["clickEvents","0","target"],-17,[4,["1ayGJX7NFLw4ZV5ksbBfGW"]],-16,[4,["559OljkmVJbb40T1JglvS/"]]],[74,["_button"],-19,-18,[4,["1ayGJX7NFLw4ZV5ksbBfGW"]]],[74,["_onEventRaised","0","target"],-21,-20,[4,["559OljkmVJbb40T1JglvS/"]]],[74,["_onEventRaised","0","target"],-23,-22,[4,["559OljkmVJbb40T1JglvS/"]]]],[-1,-2,-3,-4]],[1,207,448.00000000000006,0]],[82,0,{},[29,"46k0m6lkdE7LjR/vInpkl2",-65,[69,"615Zd7XYRLqKkUnNrgpIIW",1,[[249,[4,["559OljkmVJbb40T1JglvS/"]],[-64]]],[[28,"Holder_TowerUpgradeMenu",["_name"],[4,["46k0m6lkdE7LjR/vInpkl2"]]],[22,["_lpos"],[4,["46k0m6lkdE7LjR/vInpkl2"]],[1,0,0,0]],[22,["_lrot"],[4,["46k0m6lkdE7LjR/vInpkl2"]],[3,0,0,0,1]],[22,["_euler"],[4,["46k0m6lkdE7LjR/vInpkl2"]],[1,0,0,0]],[14,"Button_Color",["_name"],-32],[10,["_lpos"],-33,[1,0,0,0]],[14,"Button_Color",["_name"],-34],[10,["_lpos"],-35,[1,0,0,0]],[14,"Button_Color",["_name"],-36],[10,["_lpos"],-37,[1,0,0,0]],[14,"Stats 01",["_name"],-38],[10,["_lpos"],-39,[1,-62,-5.182,0]],[14,"Stats 02",["_name"],-40],[10,["_lpos"],-41,[1,0,-5.182,0]],[14,"Stats 03",["_name"],-42],[10,["_lpos"],-43,[1,62,-5.182,0]],[28,"Dot_Outline",["_name"],[4,["fad6l15HhESar9QeacgpaJ"]]],[14,"Panel_Outline",["_name"],-44],[10,["_lpos"],-45,[1,0,0,0]],[14,"Panel_Energy Color",["_name"],-46],[10,["_lpos"],-47,[1,0,0,0]],[14,"Panel_Outline",["_name"],-48],[10,["_lpos"],-49,[1,0,0,0]],[14,"Panel_Energy Color",["_name"],-50],[10,["_lpos"],-51,[1,0,0,0]],[14,"Panel_Outline",["_name"],-52],[10,["_lpos"],-53,[1,0,0,0]],[14,"Panel_Energy Color",["_name"],-54],[10,["_lpos"],-55,[1,0,0,0]],[28,0,["_opacity"],[4,["18PnzBvKpPm5jHmDihqUZ9"]]],[28,false,["_active"],[4,["37Eb9ZL+JM5azHm5AEqitc"]]],[28,false,["_debug"],[4,["ffZ2Ct4zBH+Zt94rHKmSpg"]]],[14,3,["clickEvents","length"],-56],[387,["clickEvents","1","target"],-58,-57],[172,["clickEvents","2"],-60,[7,"1bb54x5k2ZLwpsDBRHVFrFw","hideButtons",-59]],[14,1,["_animationEvents","0","_actions","length"],-61],[172,["_animationEvents","0","_actions","0"],-63,[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",-62]]]],20]],[429,"Content Holder",false,33554432,[-69,2],[[18,-66,[1,"eeC23LjqpL8Zp2iqWz9mMc"],[5,414,896]],[154,45,100,100,0,-67,[1,"315MNXKoBHGqbLafl7aZSr"]],[55,-68,[1,"eeX4253xVOAahKoNu/WDMw"]]],[2,"ccWqG40j1HuaRb//VxdCCV",1,0]],[236,"Buttons",false,33554432,3,[-73,-74,-75,-76],[[18,-70,[1,"06JvfeFK9PZJqzK66yahZv"],[5,150,205]],[390,1,2,15,0,true,-71,[1,"d4Jpd6HqJKO7sifEr+4Ms0"]],[507,36,15,15,1,-72,[1,"510EMGrlxHgoFEzd88J2WH"]]],[2,"3dQyPIlhJKSLv+XQaGGMqP",1,0],[1,117,-330.5,0]],[76,"Close Button",33554432,4,[-83],[[18,-77,[1,"1arCJaIFNJPbFOm57VNnVO"],[5,150,40]],[214,1,0,-78,[1,"41voYhcVNFIJlfzmqWT5r2"],0],[262,2,-81,[1,"2dyVdZLX9Ev5i4dzn3e2Oh"],[[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",3],[7,"cd32dlNM6hEkokUGHlLV8y+","raise",-80]],[4,4292269782],-79,1,2,3,4],[192,3,-82,[1,"31DPtQ5dBGX4TnyppOp6RY"]]],[2,"82Hvf5O9BNTpiRGFwcxfri",1,0],[1,0,-82.5,0]],[76,"Laser Tower Button",33554432,4,[-90],[[18,-84,[1,"4cdjOlkltFOrMFluMI1+Ao"],[5,150,40]],[214,1,0,-85,[1,"fftRO1OuZOC7ZlhzKesX+2"],5],[262,2,-88,[1,"d60ZwDJ9pIaoSfk1UIW/Pu"],[[7,"cd32dlNM6hEkokUGHlLV8y+","raise",-87],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",3]],[4,4292269782],-86,6,7,8,9],[332,2,"lasertower",-89,[1,"59dJuOjxZI3ZJb3CrJ4F7W"]]],[2,"df6iHgGMVH94zvGqdhOyEM",1,0],[1,0,-27.5,0]],[76,"Cannon Tower Button",33554432,4,[-97],[[18,-91,[1,"9buIgTnm1OvJQxBJ0/n3YB"],[5,150,40]],[214,1,0,-92,[1,"fcKDWEonlCJYI1SgVcAzyK"],10],[262,2,-95,[1,"48vZcqZY5JK5l0ja+SrheU"],[[7,"cd32dlNM6hEkokUGHlLV8y+","raise",-94],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",3]],[4,4292269782],-93,11,12,13,14],[332,2,"cannontower",-96,[1,"57i75WshJJv56KfgCIqGtS"]]],[2,"b5iMy99YhBqI5MhgBWibXD",1,0],[1,0,27.5,0]],[76,"Gun Tower Button",33554432,4,[-104],[[18,-98,[1,"6dYrahi65PZLokcZSYtgJs"],[5,150,40]],[214,1,0,-99,[1,"12u23TnPdPUZYMjhxdTDgK"],15],[262,2,-102,[1,"f8Mi4fc8lPdIPc9DOeqJa7"],[[7,"cd32dlNM6hEkokUGHlLV8y+","raise",-101],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",3]],[4,4292269782],-100,16,17,18,19],[332,2,"guntower",-103,[1,"90c9O8jpxO+YSCPMsN/r4y"]]],[2,"0dC9809LdIy7lDqF7j418J",1,0],[1,0,82.5,0]],[455,"Tower Construction UI",33554432,[[[48,-105,[1,"8awb8E5ctFNZOksbBSw4Cd"]],-106],4,1],[2,"85RFf5TYJDUoOpac3hdnNr",1,0]],[85,"Events",33554432,1,[-108,-109,-110,-111,-112],[[48,-107,[1,"adtl2NYaJGULyWwtwcmTl2"]]],[2,"6fpt+lGQpIVJ4V+8y2ZYGK",1,0]],[85,"Scripts",33554432,1,[-114,9,-115],[[48,-113,[1,"06O+tp2G5HmrtZw1nKlSq/"]]],[2,"81fF2Gj/xIObmd7lsdiMQK",1,0]],[609,9,[1,"11+S8z3EZGC5ktwSiCAMH5"],[[339,0,-118],[339,2,-119],[339,1,-120]],[[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",2],[7,"ac879rTendCEbpZWFz/jexs","playSFX",-117]],[[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","towerClick",2],[153,"9724cyw/qJC54XASWo2Oks7","setTowerInfo"],[7,"ac879rTendCEbpZWFz/jexs","playSFX",-116]]],[4,["0fJEdVoOpA/qcZPGFboeiN"]],[4,["0fJEdVoOpA/qcZPGFboeiN"]],[4,["0fJEdVoOpA/qcZPGFboeiN"]],[39,"Game Over",33554432,10,[[48,-121,[1,"98dyk79pJOLITTq611+Uk9"]],[169,4,-123,[1,"27CHaTIl1MabqNE42WLp25"],[[7,"cd32dlNM6hEkokUGHlLV8y+","raise",-122],[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",2],[7,"1bb54x5k2ZLwpsDBRHVFrFw","hideButtons",9]]],[192,3,-124,[1,"c5UG691QhLSr5pAvddu0S5"]]],[2,"a2Tp600XZIopO9SlB3L1+R",1,0]],[39,"Game Victory",33554432,10,[[48,-125,[1,"abSEn4IMlK1pDXkE/bFbjh"]],[169,3,-127,[1,"89k8nbP7ZNAoQ4doS59mYR"],[[7,"cd32dlNM6hEkokUGHlLV8y+","raise",-126],[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",2],[7,"1bb54x5k2ZLwpsDBRHVFrFw","hideButtons",9]]],[192,3,-128,[1,"06QstgLpVP14VtYI+eADMy"]]],[2,"7f7mKlPNlDq6tK0iVZHJb9",1,0]],[85,"Art",33554432,1,[3],[[18,-129,[1,"1e/+EiHY9MLJyBATiW7SFo"],[5,414,896]],[154,45,100,100,0,-130,[1,"315MNXKoBHGqbLafl7aZSr"]]],[2,"08Ww6G8aRNBJeV17NK55//",1,0]],[85,"Audio",33554432,11,[-132,-133],[[48,-131,[1,"77N7e3aNhGO5U9Vw80WcMV"]]],[2,"4agay1KaFG5KxrBBAK5SdF",1,0]],[39,"Click SFX",33554432,19,[[48,-134,[1,"d5LMAtfHBN0qD7LmZ1Aoq/"]],[144,"sfx-ui-gametap",-135,[1,"27Yjqnsb1H6p/YVw32FWza"]]],[2,"d3glgw3NRMbI31EaDLYZC2",1,0]],[39,"Construct  SFX",33554432,19,[[48,-136,[1,"5cBDcw8AFLqrYK4EBDv9eb"]],[144,"sfx-player-towerbuilded",-137,[1,"9clWneP+1GYJwzRPN4jcPs"]]],[2,"071TFz4+tHCZ6f25g/lnx0",1,0]],[4,["78bCuqtM5FvINnH01nOP6N"]],[4,["8bBj36fMNOUZFpmts6EkfF"]],[4,["78bCuqtM5FvINnH01nOP6N"]],[4,["78bCuqtM5FvINnH01nOP6N"]],[85,"Tutorial",33554432,10,[-139,-140],[[48,-138,[1,"3eTQdqoKdNo7MncFp0vbSf"]]],[2,"c42AtI0UZAeKBZ2+8BpGfX",1,0]],[272,"Label",512,33554432,5,[[18,-141,[1,"81lGj/xpZPcaOq9Xl7JAzg"],[5,150,40]],[232,"Close",20,20,1,false,-142,[1,"e2i1G7aS1FjrwjnaBviPt0"],[4,4278190080]]],[2,"cbyjbSbhRLzLQurDaotHvB",1,0]],[272,"Label",512,33554432,6,[[18,-143,[1,"fb/r3C0dpJEoORsa9fMh4r"],[5,150,40]],[232,"Laser Tower (4)",16,16,1,false,-144,[1,"bdMV6BdHtJxZ8V3qVc3eXt"],[4,4278190080]]],[2,"170U31SS1JCYdVogNNx8Ke",1,0]],[272,"Label",512,33554432,7,[[18,-145,[1,"e7WWONzodL96LS1mGkqf7f"],[5,150,40]],[232,"Cannon Tower (3)",16,16,1,false,-146,[1,"f6BqU9OYFJJrpqZklyxEGD"],[4,4278190080]]],[2,"9dmQHVL4tI6qeGyo5Ws476",1,0]],[272,"Label",512,33554432,8,[[18,-147,[1,"bfqBEChbZGlIPZy+HEA216"],[5,150,40]],[232,"Gun Tower (2)",16,16,1,false,-148,[1,"9cMvGRTDdB55/Hll7X9+w/"],[4,4278190080]]],[2,"dff+iOL05K3rHHJLyXaqQu",1,0]],[4,["1ayGJX7NFLw4ZV5ksbBfGW"]],[39,"Line Positioner",33554432,11,[[48,-149,[1,"d8TjdnJpBOjIEA0bbJ4D1W"]],[610,-150,[1,"6fQyGE1n9AQ6BunD+bjSz4"]]],[2,"35aWqEhTtJE63+7rx6hNcZ",1,0]],[165,0,null,[152,"New Node"],[29,"0fJEdVoOpA/qcZPGFboeiN",-161,[42,"74XRvRkuBPX6zuG43ddIDV",2,[[14,"Holder_Tower Button 01",["_name"],13],[10,["_lpos"],13,[1,0,0,0]],[10,["_lrot"],13,[3,0,0,0,1]],[10,["_euler"],13,[1,0,0,0]],[14,"Button_Color",["_name"],-151],[10,["_lpos"],-152,[1,0,0,0]],[14,"Button_Outline",["_name"],22],[10,["_lpos"],22,[1,0,0,0]],[10,["_lrot"],22,[3,0,0,0.3826834323650898,0.9238795325112867]],[10,["_euler"],22,[1,0,0,45]],[14,true,["_active"],13],[14,"Button_Outline 2",["_name"],-153],[10,["_lpos"],-154,[1,0,0,0]],[14,"Button_Outline 1",["_name"],-155],[10,["_lpos"],-156,[1,0,0,0]],[28,false,["_active"],[4,["e9EkiL/+1I4KWEMpMRNY1g"]]],[14,2,["_clips","length"],23],[143,["_clips","0"],23,22],[143,["_defaultClip"],23,23],[14,"Panel_Outline",["_name"],-157],[10,["_lpos"],-158,[1,0,0,0]],[14,"Panel_Energy Color",["_name"],-159],[10,["_lpos"],-160,[1,0,0,0]],[28,false,["_active"],[4,["07J8NL3JNE+J1JbZaH9Gkn"]]],[143,["_clips","1"],23,24]]],21]],[165,0,null,[152,"New Node"],[29,"0fJEdVoOpA/qcZPGFboeiN",-168,[42,"c1RSk6NUhFVYmVRsNR9Aqa",2,[[14,"Holder_Tower Button 02",["_name"],14],[10,["_lpos"],14,[1,0,0,0]],[10,["_lrot"],14,[3,0,0,0,1]],[10,["_euler"],14,[1,0,0,0]],[14,"Button_Color",["_name"],-162],[10,["_lpos"],-163,[1,0,0,0]],[14,"Button_Outline",["_name"],24],[10,["_lpos"],24,[1,0,0,0]],[10,["_lrot"],24,[3,0,0,0.3826834323650898,0.9238795325112867]],[10,["_euler"],24,[1,0,0,45]],[14,"Panel_Outline",["_name"],-164],[10,["_lpos"],-165,[1,0,0,0]],[14,"Panel_Energy Color",["_name"],-166],[10,["_lpos"],-167,[1,0,0,0]],[14,true,["_active"],14]]],25]],[165,0,null,[152,"New Node"],[29,"0fJEdVoOpA/qcZPGFboeiN",-175,[42,"0aSc2CSmNOv7gy3zhm972w",2,[[14,"Holder_Tower Button 03",["_name"],15],[10,["_lpos"],15,[1,0,0,0]],[10,["_lrot"],15,[3,0,0,0,1]],[10,["_euler"],15,[1,0,0,0]],[14,"Button_Color",["_name"],-169],[10,["_lpos"],-170,[1,0,0,0]],[14,"Button_Outline",["_name"],25],[10,["_lpos"],25,[1,0,0,0]],[10,["_lrot"],25,[3,0,0,0.3826834323650898,0.9238795325112867]],[10,["_euler"],25,[1,0,0,45]],[14,"Panel_Outline",["_name"],-171],[10,["_lpos"],-172,[1,0,0,0]],[14,"Panel_Energy Color",["_name"],-173],[10,["_lpos"],-174,[1,0,0,0]],[14,true,["_active"],15]]],26]],[39,"Show UI Listener",33554432,10,[[48,-176,[1,"900bExSKZDC6d9wBE0dYCr"]],[190,1,-177,[1,"e0d2zlw9tDVIoOqwjZIDuQ"],[[7,"99672sUg5NFw4x7bEPAiyHE","activate",3],[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","intro",2],[7,"1bb54x5k2ZLwpsDBRHVFrFw","showUI",9]]]],[2,"0bxHAa3FBBw41esiCXI79M",1,0]],[39,"Hide UI Listener",33554432,10,[[48,-178,[1,"55bEAJEFlHiZprxA35s3Gc"]],[190,4,-179,[1,"14kGvYRoFKiLb8w1VhC/9e"],[[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",3]]]],[2,"22oTyZ1mxOQbCrvsN86YRd",1,0]],[142,"Started",33554432,26,[[[48,-180,[1,"4bFLTllvhFG59A4wyD8//w"]],-181],4,1],[2,"daTRqhxoFEMoPd4xXh72bh",1,0]],[142,"Finished",33554432,26,[[[48,-182,[1,"4eds4XYeROpKCTLOhs9SON"]],-183],4,1],[2,"a95xHFixFLN6SI4DY/Ayew",1,0]],[251,[1,"f73Gqm8NxNwIPuL/MNLazi"]],[4,["74XRvRkuBPX6zuG43ddIDV","a6az63RfpIg6Gg/gQf45Dh"]],[4,["c1RSk6NUhFVYmVRsNR9Aqa","a6az63RfpIg6Gg/gQf45Dh"]],[4,["0aSc2CSmNOv7gy3zhm972w","a6az63RfpIg6Gg/gQf45Dh"]],[4,["cdN/iXwS9EWaea7ROuvyKb"]],[4,["0325m7PSVKEJgP6FqjArxY"]],[4,["35oTOUcq5LW6sLAKY0sSNr"]],[4,["74XRvRkuBPX6zuG43ddIDV","b4p3nx06pA3q2OOmIuPIqT"]],[4,["74XRvRkuBPX6zuG43ddIDV","a4xPBm209GU5Mh8eoXMqG3"]],[4,["c1RSk6NUhFVYmVRsNR9Aqa","b4p3nx06pA3q2OOmIuPIqT"]],[4,["c1RSk6NUhFVYmVRsNR9Aqa","a4xPBm209GU5Mh8eoXMqG3"]],[4,["0aSc2CSmNOv7gy3zhm972w","b4p3nx06pA3q2OOmIuPIqT"]],[4,["0aSc2CSmNOv7gy3zhm972w","a4xPBm209GU5Mh8eoXMqG3"]],[4,["a6az63RfpIg6Gg/gQf45Dh"]],[4,["42ZSZDURBPuYxZbUVkytNk"]],[4,["64o7LRB4FEdaQLAV4SPsYe"]],[4,["b4p3nx06pA3q2OOmIuPIqT"]],[4,["a4xPBm209GU5Mh8eoXMqG3"]],[4,["a6az63RfpIg6Gg/gQf45Dh"]],[4,["b4p3nx06pA3q2OOmIuPIqT"]],[4,["a4xPBm209GU5Mh8eoXMqG3"]],[4,["a6az63RfpIg6Gg/gQf45Dh"]],[4,["b4p3nx06pA3q2OOmIuPIqT"]],[4,["a4xPBm209GU5Mh8eoXMqG3"]],[4,["99UzDZa6pHQ4VtG5vEXqut"]],[250,3,38,[1,"2eh0VwqqVIzpf/h5Ck3nOJ"],[[186,"b2629pBo9BDtrAXL8hN6QoS","setInteractable","false"]]],[250,4,39,[1,"3e76EkRTVKx5R56c+uB3Xi"],[[186,"b2629pBo9BDtrAXL8hN6QoS","setInteractable","true"]]]],0,[0,-1,2,0,-2,33,0,-3,34,0,-4,35,0,3,2,0,3,2,0,13,12,0,3,2,0,13,12,0,3,2,0,13,12,0,3,2,0,13,12,0,3,2,0,13,2,0,3,2,0,13,2,0,3,2,0,13,40,0,3,2,0,13,65,0,3,2,0,13,66,0,2,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,18,0,-2,11,0,-3,10,0,1,41,0,1,41,0,1,42,0,1,42,0,1,43,0,1,43,0,1,44,0,1,44,0,1,45,0,1,45,0,1,46,0,1,46,0,1,47,0,1,47,0,1,48,0,1,48,0,1,49,0,1,49,0,1,50,0,1,50,0,1,51,0,1,51,0,1,52,0,1,52,0,1,31,0,11,2,0,1,31,0,3,9,0,1,31,0,1,64,0,3,3,0,1,64,0,-1,40,0,2,2,0,0,3,0,0,3,0,0,3,0,-1,4,0,0,4,0,0,4,0,0,4,0,-1,5,0,-2,6,0,-3,7,0,-4,8,0,0,5,0,0,5,0,17,5,0,3,5,0,0,5,0,0,5,0,-1,27,0,0,6,0,0,6,0,17,6,0,3,6,0,0,6,0,0,6,0,-1,28,0,0,7,0,0,7,0,17,7,0,3,7,0,0,7,0,0,7,0,-1,29,0,0,8,0,0,8,0,17,8,0,3,8,0,0,8,0,0,8,0,-1,30,0,0,9,0,-2,12,0,0,10,0,-1,36,0,-2,37,0,-3,16,0,-4,17,0,-5,26,0,0,11,0,-1,32,0,-3,19,0,3,20,0,3,21,0,40,33,0,40,34,0,40,35,0,0,16,0,3,16,0,0,16,0,0,16,0,0,17,0,3,17,0,0,17,0,0,17,0,0,18,0,0,18,0,0,19,0,-1,20,0,-2,21,0,0,20,0,0,20,0,0,21,0,0,21,0,0,26,0,-1,38,0,-2,39,0,0,27,0,0,27,0,0,28,0,0,28,0,0,29,0,0,29,0,0,30,0,0,30,0,0,32,0,0,32,0,1,53,0,1,53,0,1,54,0,1,54,0,1,55,0,1,55,0,1,56,0,1,56,0,1,57,0,1,57,0,2,33,0,1,58,0,1,58,0,1,59,0,1,59,0,1,60,0,1,60,0,2,34,0,1,61,0,1,61,0,1,62,0,1,62,0,1,63,0,1,63,0,2,35,0,0,36,0,0,36,0,0,37,0,0,37,0,0,38,0,-2,65,0,0,39,0,-2,66,0,9,1,2,7,3,3,7,18,9,7,11,183],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12],[6,25,35,36,37,6,25,35,36,37,6,25,35,36,37,6,25,35,36,37,8,8,11,11,11,8,8,39],[17,17,17,27,28,17,17,17,27,28,17,17,17,27,28,17,17,17,27,28,71,30,35,35,52,30,30,45]],[[[63,"SM_EnemyCharger_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",3336827991,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5184,"length":696,"count":174,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5184,"count":108,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3009660840034485,-0.25036337971687317,0.0424368791282177],"maxPosition",8,[1,0.30096614360809326,0.22721247375011444,0.5172187089920044]]],-1],0,0,[],[],[]],[[[62],[47,"SM_EnemyCharger_02",[-2],[2,"fbcmmbHnpbkKfFI1OpgAzY",-1,0]],[53,"SM_EnemyCharger_02",1,[[52,-3,[1,"b2FzVpdT5WjYWZcvkiHil1"],[0],[34],1]],[2,"68I7jgr3Ffeb9oCqZlx96t",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[352,353]],[[[50,"P-Overcharger-2"],[125,"P-Overcharger-2",[[-16,-17,[80,"Events",-19,[2,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[156,"Overcharger-2",-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[55,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[164,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[2,"4505kBZFlJebjm5k8fm2Li",1,0]],[124,"Movement",[-26],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,2,[29,"79BYQtfNNbj4YT0sLCxBU2",-32,[69,"551bENhodEAZe4W6/YWoAM",1,[[67,[4,["79BYQtfNNbj4YT0sLCxBU2"]],[[55,-31,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[14,"SM_Model",["_name"],-27],[10,["_lpos"],-28,[1,0,-0.137,0]],[10,["_lrot"],-29,[3,0,0,0,1]],[10,["_euler"],-30,[1,0,0,0]],[40,["_materials","0"],[4,["5b4dml5JZZSpEFLZ2t+IcI"]],3],[28,"SM_Model",["_name"],[4,["b2leN5NINUyYLt7KA/my5j"]]]]],2]],[35,"Scripts",1,[3,-33,-34,-35],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[4,["79BYQtfNNbj4YT0sLCxBU2"]],[35,"VFX",2,[-36,-37,-38],[2,"2fvAhII+9Fm6VftcYNaBV0",1,0]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-46,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[14,"P-HP-Bar",["_name"],-39],[10,["_lpos"],-40,[1,207,448.00000000000006,0]],[10,["_lrot"],-41,[3,0,0,0,1]],[10,["_euler"],-42,[1,0,0,0]],[14,"Art",["_name"],-43],[10,["_lpos"],-44,[1,0,0,0]]]],15]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Death_Erupt",7,[-47],[2,"158qjT4X9O+YZSRtT4/XZc",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,10,[1,"72+9o6wOVIYb1G7zBW2cg8"],[4],[5],[3,0.4],[0],[0],[0],[0],[0],[0],[0],[3,0.16],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.3169642857142857],[13,0.4575892857142857,[4,4294938922]],[13,1,[4,4289817645]]],[[9,255,0.5736607142857143],[9,0,1]]]]],[31,[0]],[78,true,true,[111,2,2,[8,[0,1],[[6,2,0.02962962962962963,1.913888888888889,1.913888888888889],[11,2,1]]],[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-48],[26,5]],[59,"VFX_Death_Shards",7,[-49],[2,"48VTdxlqtKa7J1GYgO9NYw",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,12,[1,"2buEt2Sm1AqrVURnQZ9cKx"],[6],[5],[23,3,0.05,0.1],[0],[0],[23,3,3,5],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.3,0.8],[3,1],[0],[0],[[25,[23,3,5,7]]],[20,true,[16,1,[33,[[43,0.16964285714285715],[13,0.33035714285714285,[4,4294938368]],[13,0.7991071428571429,[4,4284748062]]],[[9,255,0.23883928571428573],[9,0,1]]]]],[109,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-8.726646259971647,8.726646259971647]],[123,true,2,2,[0],[0]],[19,[0],[0],[5],[5],-50],[26,7]],[59,"VFX_Spawn",7,[-51,-52],[2,"92v65OgehO2Lz2T0Hd+qJV",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[46,"HP Controller",5,[-53],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[139,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[7,"cc.ParticleSystem","play",10],[7,"cc.ParticleSystem","play",12],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[54,"On Death VFX Finished",5,[[96,-55,[1,"f7UjCPLLBPsI25Z2YsmJTM"],[11,13],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"afYRQ4qXxHTKANwTL+NRan",1,0]],[430,"Temp-Model",2,[[79,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",2,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,14,[1,"10xEfDXShJrJSWy3P1omNo"],[8],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-57],[26,9]],[97,0.3,false,14,[1,"2dTmc137xOzYtOFST+Gdq+"],[[10,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-58],[26,11]],[104,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[46,"Stun",5,[-59],[2,"bcv1jnY9FKt6CX3J6PwFCB",1,0]],[117,23,[1,"2ak1/y/YZNQ7zEf/bollr3"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[35,"UI",1,[8],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,3,8,0,13,16,0,2,1,0,20,24,0,27,22,0,28,16,0,3,3,0,3,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,2,1,0,7,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,6,0,1,6,0,1,6,0,1,6,0,0,4,0,2,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,17,19,0,2,8,0,-1,11,0,4,11,0,-1,13,0,4,13,0,-1,20,0,-2,21,0,-1,16,0,3,17,0,0,17,0,0,18,0,4,20,0,4,21,0,-1,24,0,9,1,3,7,5,8,7,25,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,-2,18,8],[14,13,354,1,20,19,10,18,4,3,11,9,5,15,5,16]],[[[63,"SM_BlockDetail_06__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[62],[47,"SM_BlockDetail_06",[-2],[2,"2c3ig9FjFS+bF3iVcd7QWx",-1,0]],[53,"SM_BlockDetail_06",1,[[52,-3,[1,"feSFXUciRfzZUBkwwC679a"],[0],[34],1]],[2,"d63gG51PxXZ5fXAFCfbFqM",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[355,356]],[[[57,".bin",3917431414,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":19152,"length":5952,"count":1488,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":19152,"count":399,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4350086748600006,-0.3728209137916565,-0.06465183943510056],"maxPosition",8,[1,0.4037121832370758,0.5027304291725159,0.6001492142677307]]],-1],0,0,[],[],[]],[[{"name":"Reference_Rewards","rect":{"x":0,"y":0,"width":841,"height":960},"offset":{"x":0,"y":0},"originalSize":{"width":841,"height":960},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[21],[357]],[[[57,".bin",1816390270,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":960,"length":360,"count":90,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":960,"count":20,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.29834288358688354,-0.25131955742836,-0.4000000059604645],"maxPosition",8,[1,0.22939303517341614,0.27641621232032776,1.1082842350006104]]],-1],0,0,[],[],[]],[[[50,"P-Cargo-1"],[185,"P-Cargo-1",[[-11,-12,[80,"Events",-14,[2,"d95EadoVJHU5W5txftTQiE",-13,0]],-15],1,1,4,1],[[-6,[55,-7,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-8,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-9,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-10,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],1,4,4,4,4],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[362,"Art",1,[[-17,-18,-19,-20,[89,"Spawn Enemies Position",-21,[2,"e6El/YWgVD5oRcHAtTGkLY",1,0],[1,0,0,0.342]]],1,1,1,1,4],[[88,true,-16,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[2,"4505kBZFlJebjm5k8fm2Li",1,0]],[35,"Scripts",1,[-22,-23,-24,-25,-26],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[46,"Movement",3,[-27],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,2,[29,"30XKbfMTNf97kxPRwjyic5",-34,[69,"219Vme8JpGDKpJHgjU3X0j",1,[[67,[4,["30XKbfMTNf97kxPRwjyic5"]],[[55,-33,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[28,"SM_Model",["_name"],[4,["30XKbfMTNf97kxPRwjyic5"]]],[22,["_lpos"],[4,["30XKbfMTNf97kxPRwjyic5"]],[1,0,0,0]],[22,["_lrot"],[4,["30XKbfMTNf97kxPRwjyic5"]],[3,0,0,0,1]],[22,["_euler"],[4,["30XKbfMTNf97kxPRwjyic5"]],[1,0,0,0]],[40,["_materials","0"],[4,["03kt8efSpXE6Pxg+UKrU++"]],3],[10,["_lrot"],-28,[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474]],[10,["_euler"],-29,[1,-90.00000000000001,-0.0000025044781562438674,0]],[10,["_lscale"],-30,[1,1.25,1.25,1.8]],[10,["_lpos"],-31,[1,0,0,0]],[14,"SM_Model",["_name"],-32]]],2]],[4,["62Thw20TRVIrkE0s7tlGnj"]],[35,"VFX",2,[-35,-36,-37],[2,"c0UE+8/W1Is56DZ9SiFRLq",1,0]],[115,"Spawn Enemies",[[191,-39,[1,"caD/QiCsdOOKI6Au82xibj"],-38]],[2,"01lZ0Bx5BPOpxhjt0vIDhW",1,0]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-47,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-46]]]],[[14,"P-HP-Bar",["_name"],-40],[10,["_lpos"],-41,[1,207,448.00000000000006,0]],[10,["_lrot"],-42,[3,0,0,0,1]],[10,["_euler"],-43,[1,0,0,0]],[14,"Art",["_name"],-44],[10,["_lpos"],-45,[1,0,0,0]]]],15]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Death_Erupt",7,[-48],[2,"5fFE0PBC9G/4PQiGRisZyE",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,11,[1,"4eS95Jyt9O8JMtx/PCA/Zm"],[4],[5],[3,0.4],[0],[0],[0],[0],[0],[0],[0],[3,0.16],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.3169642857142857],[13,0.4575892857142857,[4,4294938922]],[13,1,[4,4289817645]]],[[9,255,0.5736607142857143],[9,0,1]]]]],[31,[0]],[78,true,true,[111,2,2,[8,[0,1],[[6,2,0.02962962962962963,1.913888888888889,1.913888888888889],[11,2,1]]],[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-49],[26,5]],[59,"VFX_Death_Shards",7,[-50],[2,"23v8aoKBZPwI5RwLp4kQTx",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,13,[1,"a2pZYfEYxDbbpL3w5UWlyu"],[6],[5],[23,3,0.05,0.1],[0],[0],[23,3,3,5],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.3,0.8],[3,1],[0],[0],[[25,[23,3,5,7]]],[20,true,[16,1,[33,[[43,0.16964285714285715],[13,0.33035714285714285,[4,4294938368]],[13,0.7991071428571429,[4,4284748062]]],[[9,255,0.23883928571428573],[9,0,1]]]]],[109,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-8.726646259971647,8.726646259971647]],[123,true,2,2,[0],[0]],[19,[0],[0],[5],[5],-51],[26,7]],[59,"VFX_Spawn",7,[-52,-53],[2,"19Zql1TXZNKr32f29+c4Ol",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[46,"HP Controller",3,[-54],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[139,16,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-55],[7,"cc.ParticleSystem","play",11],[7,"cc.ParticleSystem","play",13],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",4],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",5],[7,"71b59j50pJOQYyfqjE0LpJs","spawnEnemies",8]]],[54,"On Death VFX Finished",3,[[96,-56,[1,"bc7qD5wXZLnaSSufvnjaKT"],[12,14],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"1dsl3h/khGmqhtx6oA7yz6",1,0]],[105,"Temp-Model",false,2,[[79,"Sphere<ModelComponent>",-57,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",2,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,15,[1,"24jhv+LWFEiJFPJVMqWuly"],[8],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-58],[26,9]],[97,0.3,false,15,[1,"65YTGGNVBHeYD+ovDbXnP9"],[[10,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-59],[26,11]],[104,4,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[35,"Specials",3,[8],[2,"adb886i0dNM6iXEWqT6nFX",1,0]],[233,"Cargo-1",1,1,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",4],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",16],[7,"71b59j50pJOQYyfqjE0LpJs","initialize",8]],17,23],[234,[1,"c3ae4MCbxK8YUgB7h5tdE2"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",4]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",4]]],[46,"Stun",3,[26],[2,"dac7ZgdvtBBILxt/AUoxlG",1,0]],[35,"UI",1,[9],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,5,0,-2,9,0,3,9,0,13,17,0,2,1,0,-1,25,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,2,1,0,7,1,0,-4,28,0,0,2,0,-1,19,0,-2,20,0,-3,5,0,-4,7,0,7,2,0,-1,4,0,-2,16,0,-3,27,0,-4,18,0,-5,24,0,-1,23,0,1,6,0,1,6,0,1,6,0,1,6,0,1,6,0,0,5,0,2,5,0,-1,11,0,-2,13,0,-3,15,0,38,25,0,0,8,0,1,10,0,1,10,0,1,10,0,1,10,0,1,29,0,1,29,0,17,20,0,2,9,0,-1,12,0,4,12,0,-1,14,0,4,14,0,-1,21,0,-2,22,0,-1,17,0,3,18,0,0,18,0,0,19,0,4,21,0,4,22,0,9,1,8,7,24,9,7,28,25,20,26,26,0,27,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,-2,18,8],[14,13,358,1,20,19,10,18,4,3,11,9,5,15,5,16]],[[[62],[47,"SM_EnemyTank_02",[-2],[2,"e9sWoOVvNVwo0GrlOAB0il",-1,0]],[53,"SM_EnemyTank_02",1,[[52,-3,[1,"74zazU+fFZw4SmAIcDIvSl"],[0],[34],1]],[2,"cb7PsgIpBZC70RwMIQADHk",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[359,360]],[[[57,".bin",4261149351,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":17424,"length":2376,"count":594,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":17424,"count":363,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3134799599647522,-0.14206379652023315,0.06674867868423462],"maxPosition",8,[1,0.3134799301624298,0.3270822763442993,0.4353870153427124]]],-1],0,0,[],[],[]],[[[63,"SM_EnemyTank_02__0.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[50,"Waves"],[217,"Waves",[-3],[[611,true,-2,[1,"21VbBxpYJNpbJR7jg+4CQQ"]]],[2,"d9LIHxHFhFXIOgqeR/0ow3",-1,0]],[35,"Events",1,[-4],[2,"aeDMDpEKRLxapHGV63pFCG",1,0]],[54,"On Activate Spawn",2,[[563,0.5,5,-5,[1,"65DHiRGJ1IIrn14d2vmIXt"],[[7,"85ba8zO9clG9KMZhnWVluYT","activateSpawn",1]]]],[2,"a1K4nmK+hD/qbEZmL7gaHF",1,0]]],0,[0,2,1,0,0,1,0,-1,2,0,-1,3,0,0,3,0,9,1,5],[],[],[]],[[[50,"SM_TowerElectroneerBody_01"],[47,"SM_TowerElectroneerBody_01",[-2],[2,"12sIxAd4xbv59W3ANKj2X7",-1,0]],[53,"SM_TowerElectroneerBody_01",1,[[52,-3,[1,"366PFgp3dcA6jQhh5OaNY0"],[0],[34],1]],[2,"bbsFprwHlZVKqGRbFGqwTW",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[1,180]],[[[57,".bin",1590516929,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9696,"length":1224,"count":306,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9696,"count":202,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.24423977732658386,-0.15887238085269928,-0.24002273380756378],"maxPosition",8,[1,0.24423974752426147,0.3754769563674927,0.4861389696598053]]],-1],0,0,[],[],[]],[[[63,"SM_EnemyRunner_03__0.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[62],[47,"SM_EnemyRunner_03",[-2],[2,"e9aXVNzZtaRJscaZ3oH2lT",-1,0]],[53,"SM_EnemyRunner_03",1,[[52,-3,[1,"82KrnAfSpZG69ZHuCZgscH"],[0],[34],1]],[2,"c4b+YlD25S86pnrjGBd2Oa",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[361,362]],[[[50,"P-GunTower-Bullet-Tunneller"],[132,"P-GunTower-Bullet-Tunneller",32,[-9,-10,-11,-12,-13,-14],[[197,-8,[1,"beD6AbwclCQbdYQiBsHcVK"],[[7,"12ea43w32ZDAL2+IVCNZlsZ","play",-7]],[[7,"cc.ParticleSystem","play",-3],[7,"12ea43w32ZDAL2+IVCNZlsZ","play",-4],[7,"cc.ParticleSystem","play",-5],[7,"cc.ParticleSystem","play",-6]],[-2]]],[2,"e8sP6FFh9D17STW5Nbkx1m",-1,0]],[220,"Projectile",32,1,[[[222,"Quad<ModelComponent>",false,-15,[1,"0bELSWeDdO65djlx1RiPJl"],[34],7],-16,-17],4,1,1],[2,"caJ4o2c5FOda7/HE7o5QFR",1,0],[1,0.15,0.15,1]],[64,"Bullet_Burst_Flash",512,1,[-18],[2,"8awZgQiLFMo788WeoWcrPq",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[130,0.5,false,false,1,3,[1,"807LSdEE5OBp7IMkuUEYXk"],[[0,null],6,0],[5],[3,1],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[0],[3,0.15],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[119],[13,0.05357142857142855,[4,4292723871]],[13,1,[4,4284358679]]],[[38,255],[9,255,0.6026785714285714],[9,0,1]]]]],[77,0,[3,1]],[32,true,[30,1,[8,[0,0.1794871794871795,0.7538461538461538,0.9794871794871794],[[6,2,0.6148148148148148,1.8227513227513228,1.8227513227513228],[6,2,0.8814814814814815,0.9950617283950617,0.9950617283950617],[6,2,0.6962962962962963,-1.4444444444444435,-1.4444444444444435],[189,2,-4.6222222222222245,-4.6222222222222245]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-19],[26,1]],[64,"Bullet_Burst_Square",32,1,[-20],[2,"29U8hsJUlB8JTNpooxjqiO",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[64,"Bullet_Burst_Fragments",32,1,[-21],[2,"5f4rBTIrlFLIY0/YUL0d89",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[221,"Bullet_Trail",false,512,1,[-22,-23],[2,"4b8ydGY/tOzKGDYewdhT94",1,0]],[146,"Temporary",32,1,[-24,-25],[2,"c5GgaVw6FFeY9mnByY+aKX",1,0]],[39,"Projectile Collision Fade Out",32,8,[[200,0.2,-26,[1,"19qrhSA9JAiY0e2WHN8oh5"],2,[1,1,1,1],[1,0,0,0]]],[2,"f0ugCEKBdHQ6kkJpq8eD1a",1,0]],[39,"Projectile Fade In",32,8,[[201,0,-27,[1,"efl6QMDlhPKIhp/XlQhmzg"],2,[1,0.15,0.15,1]]],[2,"7eZgQmg7BJiKSV6+V3wpmf",1,0]],[130,0.25,false,false,1,5,[1,"2b2XIBV3ZD/r5Jd0n4bDrC"],[[2,null],6,0],[5],[3,0.8],[0],[0],[0],[0],[0],[23,3,0.7853981633974483,0.7853981633974483],[0],[3,0.24],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[87,[4,33554431]],[13,0.044642857142857144,[4,32281173]],[13,0.8191964285714286,[4,22023713]]],[[38,255],[9,255,0.18749999999999997],[9,0,1]]]]],[31,[0]],[32,true,[12,1,1.5,[8,[0,0.30256410256410254,1],[[6,2,0.09629629629629628,2.7575757575757573,2.7575757575757573],[6,2,0.7777777777777778,0.9883040935672519,0.9883040935672519],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-28],[26,3]],[73,0.5,false,false,6,[1,"bem915BoBG47GEjN4PVAEW"],[[4,null],6,0],[5],[23,3,0.05,0.15],[0],[0],[23,3,0.2,0.8],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.2,0.4],[0],[0],[0],[[25,[23,3,4,8]]],[20,true,[16,1,[33,[[13,0.026785714285714315,[4,4293187241]],[13,0.14732142857142858,[4,4291465556]],[13,0.7142857142857143,[4,4282851095]]],[[9,255,0.12946428571428573],[9,0,1]]]]],[208,true,3,2,true,0.25,[0]],[32,true,[30,1,[8,[0,1],[[41,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[41,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[21,[3,6],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,40,[8,[0,1],[[126,1,1,1,1],[106,1,1,1,1,1]]]]],[138,true,2,2,1,[83,4],[44,3,2]],[19,[0],[0],[5],[5],-29],[108]],[198,false,0,7,[1,"6dAiuo47BO6rg9Yf8NI3vX"],[[5,null],6,0],[56,[4,2412752452]],[23,3,0.05,0.1],[0],[0],[3,1],[0],[0],[44,3,6.283185307179586],[0],[23,3,1,1],[0],[0],[3,2],[20,true,[16,1,[33,[[13,0.026785714285714315,[4,4293187241]],[13,0.2767857142857143,[4,4291465556]],[13,1,[4,4282851095]]],[[9,255,0.12946428571428573],[9,0,1]]]]],[187,true,2,true,0.1,1,0.17453292519943295,[0],[1,0,180,0]],[49,[30,1,[8,[0,1],[[41,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[41,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[21,[3,6],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[12,1,40,[8,[0,1],[[126,1,1,1,1],[106,1,1,1,1,1]]]]],[138,true,2,2,1,[83,4],[44,3,2]],[19,[0],[0],[5],[5],-30],[108]],[224,7,[1,"02KzFZOkpHzqdL7Lhw+09B"],[[null,6],0,6],[5],[3,1],[0],[0],[3,5],[0],[0],[0],[0],[3,5],[0],[0],[0],[[25,[3,1]]],[122,[5]],[31,[0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[147,true,false,[3,1],[3,3],[16,1,[127,[[87,[4,4294287463]],[13,1,[4,4283307025]]]]],[5],-31],[108]],[225,0,0.5,false,2,[1,"02KzFZOkpHzqdL7Lhw+09B"],[[null,8],0,6],[56,[4,16777215]],[0],[0],[0],[0],[0],[0],[0],[0],[3,5],[0],[0],[0],[[25,[3,1]]],[122,[5]],[31,[0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[147,true,false,[3,0.2],[3,0.5],[16,1,[127,[[87,[4,4294287463]],[13,1,[4,4283307025]]]]],[5],-32],[108]],[226,1,[null,null],2,[1,"e6875CztlE0JXWurEQgEej"],[5],[3,1],[0],[0],[0],[0],[0],[0],[0],[3,1],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[127,[[119],[13,0.49999999999999994,[4,4293381654]],[43,1]]]]],[31,[0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[227,false,[0],[0],[5],[5],-33],[228,2]]],0,[0,2,1,0,-1,4,0,3,3,0,3,9,0,3,5,0,3,6,0,3,10,0,0,1,0,-1,3,0,-2,5,0,-3,6,0,-4,7,0,-5,2,0,-6,8,0,0,2,0,-2,15,0,-3,16,0,-1,4,0,4,4,0,-1,11,0,-1,12,0,-1,13,0,-2,14,0,-1,9,0,-2,10,0,0,9,0,0,10,0,4,11,0,4,12,0,4,13,0,4,14,0,4,15,0,4,16,0,9,1,33],[0,0,0,0,0,0,0,0,0],[-1,5,-1,5,-1,-1,-2,10,-2],[48,44,42,39,10,10,31,49,31]],[[[62],[47,"SM_EnemyOvercharger_01",[-2],[2,"ebMyHo+DpajbSAeu+BC28S",-1,0]],[53,"SM_EnemyOvercharger_01",1,[[52,-3,[1,"59XJRz2Z9QB54rkS1H61b+"],[0],[34],1]],[2,"94ebrzFXlSs63g90ZtG/Tt",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[363,364]],[[[57,".bin",1966016415,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9216,"length":1344,"count":336,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9216,"count":192,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.30566802620887756,-0.2593323588371277,-0.09883619844913483],"maxPosition",8,[1,0.3056679964065552,0.5301661491394043,0.3970951735973358]]],-1],0,0,[],[],[]],[[[63,"SM_EnemyOvercharger_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[50,"P-Overcharger-0"],[125,"P-Overcharger-0",[[-16,-17,[80,"Events",-19,[2,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[156,"OverCharger-0",-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[55,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[164,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[2,"4505kBZFlJebjm5k8fm2Li",1,0]],[124,"Movement",[-26],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,2,[29,"ebMyHo+DpajbSAeu+BC28S",-33,[69,"16tmuTjUhNO6sVQg4OtiUY",1,[[67,[4,["ebMyHo+DpajbSAeu+BC28S"]],[[55,-32,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[14,"SM_Model",["_name"],-27],[10,["_lpos"],-28,[1,0,-0.141,0]],[10,["_lrot"],-29,[3,0,0,0,1]],[10,["_euler"],-30,[1,0,0,0]],[40,["_materials","0"],[4,["59XJRz2Z9QB54rkS1H61b+"]],3],[10,["_lscale"],-31,[1,0.8,0.8,1]],[28,"SM_Model",["_name"],[4,["94ebrzFXlSs63g90ZtG/Tt"]]]]],2]],[4,["ebMyHo+DpajbSAeu+BC28S"]],[35,"Scripts",1,[3,-34,-35,-36],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[35,"VFX",2,[-37,-38,-39],[2,"6aJL29Os1LLJPFf8HuLRg0",1,0]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-47,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-46]]]],[[14,"P-HP-Bar",["_name"],-40],[10,["_lpos"],-41,[1,207,448.00000000000006,0]],[10,["_lrot"],-42,[3,0,0,0,1]],[10,["_euler"],-43,[1,0,0,0]],[14,"Art",["_name"],-44],[10,["_lpos"],-45,[1,0,0,0]]]],15]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Death_Erupt",7,[-48],[2,"0a/97oueVKCpNI9/207GJz",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,10,[1,"8dAsSCRBRKPqj40HM+g9WM"],[4],[5],[3,0.4],[0],[0],[0],[0],[0],[0],[0],[3,0.16],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.3169642857142857],[13,0.4575892857142857,[4,4294938922]],[13,1,[4,4289817645]]],[[9,255,0.5736607142857143],[9,0,1]]]]],[31,[0]],[78,true,true,[111,2,2,[8,[0,1],[[6,2,0.02962962962962963,1.913888888888889,1.913888888888889],[11,2,1]]],[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-49],[26,5]],[59,"VFX_Death_Shards",7,[-50],[2,"e0kJcVMNlO077/Hd8bjP6e",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,12,[1,"9cqGH7jy9KGrV1eKLRRTln"],[6],[5],[23,3,0.05,0.1],[0],[0],[23,3,3,5],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.3,0.8],[3,1],[0],[0],[[25,[23,3,5,7]]],[20,true,[16,1,[33,[[43,0.16964285714285715],[13,0.33035714285714285,[4,4294938368]],[13,0.7991071428571429,[4,4284748062]]],[[9,255,0.23883928571428573],[9,0,1]]]]],[109,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-8.726646259971647,8.726646259971647]],[123,true,2,2,[0],[0]],[19,[0],[0],[5],[5],-51],[26,7]],[59,"VFX_Spawn",7,[-52,-53],[2,"87XhpQ2Z9JYJxkgfe/X5sU",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[46,"HP Controller",6,[-54],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[139,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-55],[7,"cc.ParticleSystem","play",10],[7,"cc.ParticleSystem","play",12],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[54,"On Death VFX Finished",6,[[96,-56,[1,"79d4ilCalHwqSpDM/a6679"],[11,13],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"16k32pm/tIqJzFatObtvry",1,0]],[105,"Temp-Model",false,2,[[79,"Sphere<ModelComponent>",-57,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",2,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,14,[1,"e9RMzE7PJD1ZBVfSlELjM3"],[8],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-58],[26,9]],[97,0.3,false,14,[1,"63EjFHRGFNHLbzfXpFcDbu"],[[10,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-59],[26,11]],[104,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[46,"Stun",6,[-60],[2,"eb1PUSJWBPb4REDU2QD/O4",1,0]],[117,23,[1,"5an7UNtuRD0798ta65rDEw"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[35,"UI",1,[8],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,3,8,0,13,16,0,2,1,0,20,24,0,27,22,0,28,16,0,3,3,0,3,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,6,0,2,1,0,7,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,5,0,1,5,0,1,5,0,1,5,0,1,5,0,0,4,0,2,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,17,19,0,2,8,0,-1,11,0,4,11,0,-1,13,0,4,13,0,-1,20,0,-2,21,0,-1,16,0,3,17,0,0,17,0,0,18,0,4,20,0,4,21,0,-1,24,0,9,1,3,7,6,8,7,25,60],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,-2,18,8],[14,13,365,1,20,19,10,18,4,3,11,9,5,15,5,16]],[[[63,"SM_BlockDetail_04__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[62],[47,"SM_BlockDetail_04",[-2],[2,"d29whoas9ct6gAWpHxYcDc",-1,0]],[53,"SM_BlockDetail_04",1,[[52,-3,[1,"b4Cl6HSUJYAI6DNuXBqPYC"],[0],[34],1]],[2,"3bQhxUckdRfIVg4eKiX6e6",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[366,367]],[[[57,".bin",968456012,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14448,"length":5580,"count":1395,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14448,"count":301,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.34500908851623535,-0.37846487760543823,-1.6810679070999868e-8],"maxPosition",8,[1,0.4063314199447632,0.33203941583633423,0.3392953872680664]]],-1],0,0,[],[],[]],[[[50,"P-Tank-1"],[125,"P-Tank-1",[[-16,-17,[80,"Events",-19,[2,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[156,"Tank-1",-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[55,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[164,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[2,"4505kBZFlJebjm5k8fm2Li",1,0]],[124,"Movement",[-26],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,2,[29,"e9sWoOVvNVwo0GrlOAB0il",-32,[69,"f3RlqJaeZJlZl0cPiV4In5",1,[[67,[4,["e9sWoOVvNVwo0GrlOAB0il"]],[[55,-31,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[14,"SM_Model",["_name"],-27],[10,["_lpos"],-28,[1,0,-0.161,0.091]],[10,["_lrot"],-29,[3,0,0,0,1]],[10,["_euler"],-30,[1,0,0,0]],[40,["_materials","0"],[4,["74zazU+fFZw4SmAIcDIvSl"]],3],[28,"SM_Model",["_name"],[4,["cb7PsgIpBZC70RwMIQADHk"]]]]],2]],[35,"Scripts",1,[3,-33,-34,-35],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[4,["e9sWoOVvNVwo0GrlOAB0il"]],[35,"VFX",2,[-36,-37,-38],[2,"03YfoWPTZF26EKruJGqlOF",1,0]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-46,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[14,"P-HP-Bar",["_name"],-39],[10,["_lpos"],-40,[1,207,448.00000000000006,0]],[10,["_lrot"],-41,[3,0,0,0,1]],[10,["_euler"],-42,[1,0,0,0]],[14,"Art",["_name"],-43],[10,["_lpos"],-44,[1,0,0,0]]]],15]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Death_Erupt",7,[-47],[2,"84MQLZccJPaZi1YLxii/1z",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,10,[1,"68bRp3MJNAtoC2TkdHq/qL"],[4],[5],[3,0.4],[0],[0],[0],[0],[0],[0],[0],[3,0.16],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.3169642857142857],[13,0.4575892857142857,[4,4294938922]],[13,1,[4,4289817645]]],[[9,255,0.5736607142857143],[9,0,1]]]]],[31,[0]],[78,true,true,[111,2,2,[8,[0,1],[[6,2,0.02962962962962963,1.913888888888889,1.913888888888889],[11,2,1]]],[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-48],[26,5]],[59,"VFX_Death_Shards",7,[-49],[2,"9dC8VBH2NJVqhz0qOJcZvR",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,12,[1,"fawCxf0bxPBJsRGZB2YFyo"],[6],[5],[23,3,0.05,0.1],[0],[0],[23,3,3,5],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.3,0.8],[3,1],[0],[0],[[25,[23,3,5,7]]],[20,true,[16,1,[33,[[43,0.16964285714285715],[13,0.33035714285714285,[4,4294938368]],[13,0.7991071428571429,[4,4284748062]]],[[9,255,0.23883928571428573],[9,0,1]]]]],[109,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-8.726646259971647,8.726646259971647]],[24,[0],[0]],[19,[0],[0],[5],[5],-50],[26,7]],[59,"VFX_Spawn",7,[-51,-52],[2,"25X51qJNxDVZCWBQq0aAsO",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[46,"HP Controller",5,[-53],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[139,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[7,"cc.ParticleSystem","play",10],[7,"cc.ParticleSystem","play",12],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[54,"On Death VFX Finished",5,[[96,-55,[1,"9b64QebVRL3Yncn1bST/1z"],[11,13],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"e5yN5jszRE67ezEh/Mhp5i",1,0]],[105,"Temp-Model",false,2,[[79,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",2,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,14,[1,"c9DFSxLqFPa6Avx3CbmU5h"],[8],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[123,true,2,2,[0],[0]],[19,[0],[0],[5],[5],-57],[26,9]],[97,0.3,false,14,[1,"f8L8FYRM5IQIJhZBGOaew4"],[[10,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-58],[26,11]],[104,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[46,"Stun",5,[-59],[2,"f49xfTeY9IjY/nYOUawfpm",1,0]],[117,23,[1,"080faU4LdLeL+EWwp81mU+"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[35,"UI",1,[8],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,3,8,0,13,16,0,2,1,0,20,24,0,27,22,0,28,16,0,3,3,0,3,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,2,1,0,7,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,6,0,1,6,0,1,6,0,1,6,0,0,4,0,2,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,17,19,0,2,8,0,-1,11,0,4,11,0,-1,13,0,4,13,0,-1,20,0,-2,21,0,-1,16,0,3,17,0,0,17,0,0,18,0,4,20,0,4,21,0,-1,24,0,9,1,3,7,5,8,7,25,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,-2,18,8],[14,13,368,1,20,19,10,18,4,3,11,9,5,15,5,16]],[[[50,"P-LaserTower-Beam-Pulsar"],[47,"P-LaserTower-Beam-Pulsar",[-2,-3,-4],[2,"c46/YsCPVOJYA4mWEpNYRx",-1,0]],[462,"VFX_Pulse",1,[-6,-7],[-5],[2,"5dwkJQqGtO9LuHvx1hUNRw",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[54,"Temp",1,[[612,-8,[1,"6bE16mDyVM2rbu8cMQ5OnY"],[3,0.08],[5]]],[2,"b5twpQgB9KKoMf5U6SpAil",1,0]],[348,"Cylinder",false,1,[[79,"Cylinder<ModelComponent>",-9,[1,"54MsEcZCFMYZnJEGaPxSCn"],[0],[34],1]],[2,"34rpI92rdHE7Ew7Z4q5ZvA",1,0],[1,0,-0.23,0],[1,2,0.2,2]],[241,"VFX_PulseSmall",2,[-10],[2,"2cpk1AGBlL7IiDIQbPQc6b",1,0],[1,0,0,-0.762]],[368,2,true,5,[1,"34INvH7RpMa5z3S07jaEa5"],[[2,null],6,0],[5],[3,1.2],[0],[0],[0],[0],[0],[0],[0],[3,5],[0],[161,1.5,10],[0],[20,true,[16,1,[33,[[87,[4,4294952941]],[13,0.2299107142857143,[4,4294923007]],[13,0.8727678571428571,[4,4283635741]]],[[38,255],[9,158,0.3169642857142857],[9,110,0.6941964285714286],[9,0,1]]]]],[77,0,[3,1]],[32,true,[12,1,2,[8,[0,1],[[45,2,1.091358024691358,1,1.091358024691358,1],[41,2,1,1.0942760942760934,1,1.0942760942760934,1]]]],[0],[0],[0]],[110,true,[0],[0],[30,1,[8,[0.005128205128205128,1],[[189,2,1.9259259259259258,1.9259259259259258],[11,2,1]]]],[3,0.15]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-11],[243,2,3]],[46,"VFX_Edge",2,[-12],[2,"bbyvAIxDJJfIkEJTLXLhOa",1,0]],[479,true,5,7,[1,"74SiaoVhRNAYoVY90NW+vk"],[[4,null],6,0],[56,[4,2013265919]],[3,2.5],[0],[0],[0],[0],[0],[0],[0],[3,3],[0],[3,0.6],[0],[20,true,[16,1,[33,[[119],[43,0.10714285714285715],[13,0.22544642857142858,[4,4292557026]],[13,1,[4,4283636514]]],[[38,0],[9,255,0.1830357142857143],[9,255,0.7321428571428571],[9,0,1]]]]],[77,0,[3,1]],[32,true,[12,1,2,[8,[0,1],[[41,2,0.44074074074074077,0.14739229024943287,1,0.14739229024943287,1],[41,2,0.5333333333333333,0.13978494623655865,1,0.13978494623655865,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-13],[243,2,5]],[368,3,true,2,[1,"a6a9w6/j9GZ6fVirAQhXU8"],[[6,null],6,0],[5],[3,1.2],[0],[0],[0],[0],[0],[0],[0],[3,2],[0],[161,2.2,10],[0],[20,true,[16,1,[33,[[43,0.024553571428571428],[13,0.13839285714285712,[4,4294957173]],[13,0.5825892857142857,[4,4287568667]],[13,1,[4,4280225287]]],[[9,0,0.09151785714285714],[9,255,0.25],[9,255,0.6004464285714286],[9,0,1]]]]],[77,0,[3,1]],[32,true,[12,1,2,[8,[0.07692307692307693,0.2205128205128205,0.46153846153846156,1],[[41,2,0.25925925925925924,7.864197530864196,1,7.864197530864196,1],[6,2,0.7518518518518519,1.1851851851851842,1.1851851851851842],[6,2,0.9333333333333333,0.30232558139534876,0.30232558139534876],[41,2,1,0.05252525252525258,1,0.05252525252525258,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-14],[243,2,7]]],0,[0,2,1,0,-1,3,0,-2,4,0,-3,2,0,-1,9,0,-1,5,0,-2,7,0,0,3,0,0,4,0,-1,6,0,4,6,0,-1,8,0,4,8,0,4,9,0,9,1,14],[0,0,0,0,0,0,0,0],[-1,10,-1,5,-1,5,-1,5],[369,370,67,53,371,181,372,53]],[[[50,"P-TheGang4"],[125,"P-TheGang4",[[-16,-17,[80,"Events",-19,[2,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[179,"TheGang4",2,-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[55,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[47,"VFX",[-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35],[2,"44lmI5C0dPj4Z8erRpRtG2",1,0]],[151,"Art",1,[-37,-38,-39,2],[[88,true,-36,[1,"16mUt5j0BPfLyhp6c95pwE"],[36,37],38]],[2,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[124,"Movement",[-40],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,3,[29,"77rOjdJ21R1KKIOlYM4BQr",-47,[69,"b0zVPKtXNDBqBPhFVjhVsT",1,[[67,[4,["77rOjdJ21R1KKIOlYM4BQr"]],[[55,-46,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[14,"SM_Model",["_name"],-41],[10,["_lpos"],-42,[1,0,0,0]],[10,["_lrot"],-43,[3,0,0,0,1]],[10,["_euler"],-44,[1,0,0,0]],[10,["_lscale"],-45,[1,0.6,0.6,0.6]],[40,["_materials","0"],[4,["407oAt4+lSGbdC+vtR9xCJ"]],3],[28,"SM_Model",["_name"],[4,["41Jrlqi2tdbKkcy+f7Uc1y"]]]]],2]],[4,["77rOjdJ21R1KKIOlYM4BQr"]],[35,"Scripts",1,[4,-48,-49,-50],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-58,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-57]]]],[[14,"P-HP-Bar",["_name"],-51],[10,["_lpos"],-52,[1,207,448.00000000000006,0]],[10,["_lrot"],-53,[3,0,0,0,1]],[10,["_euler"],-54,[1,0,0,0]],[14,"Art",["_name"],-55],[10,["_lpos"],-56,[1,0,0,0]]]],39]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Death_Erupt",2,[-59],[2,"08xCVrxlxEhq50E/NF55eY",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,10,[1,"85Rhrv4bxC9Idj1S+Tsdep"],[4],[5],[3,0.4],[0],[0],[0],[0],[0],[0],[0],[3,0.16],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.3169642857142857],[13,0.4575892857142857,[4,4294938922]],[13,1,[4,4289817645]]],[[9,255,0.5736607142857143],[9,0,1]]]]],[31,[0]],[78,true,true,[111,2,2,[8,[0,1],[[6,2,0.02962962962962963,1.913888888888889,1.913888888888889],[11,2,1]]],[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-60],[26,5]],[59,"VFX_Death_Shards",2,[-61],[2,"01JvLqmMhDBa4s8CIc/iMl",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,12,[1,"6c2cTofuBCBZlCca6zWUXz"],[6],[5],[23,3,0.05,0.1],[0],[0],[23,3,3,5],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.3,0.8],[3,1],[0],[0],[[25,[23,3,5,7]]],[20,true,[16,1,[33,[[43,0.16964285714285715],[13,0.33035714285714285,[4,4294938368]],[13,0.7991071428571429,[4,4284748062]]],[[9,255,0.23883928571428573],[9,0,1]]]]],[109,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-8.726646259971647,8.726646259971647]],[24,[0],[0]],[19,[0],[0],[5],[5],-62],[26,7]],[59,"VFX_Spawn",2,[-63,-64],[2,"026s6SWrxLW5uEsAZqfRek",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[46,"HP Controller",7,[-65],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[166,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-66],[7,"cc.ParticleSystem","play",10],[7,"cc.ParticleSystem","play",12],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",4],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",5]],1],[54,"On Death VFX Finished",7,[[96,-67,[1,"67W+7l9PZAA4LQkNbOeiI6"],[11,13],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"54py1+24lEvosm8pG/dm8g",1,0]],[105,"Temp-Model",false,3,[[79,"Sphere<ModelComponent>",-68,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",3,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,14,[1,"aewJ8JwoNJCq33IuxeLFQ7"],[8],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-69],[26,9]],[97,0.3,false,14,[1,"36ejVK11FPAJNrDXjhhqb6"],[[10,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-70],[26,11]],[46,"VFX-BossExplosion",2,[-71],[2,"ddcECp4JFHe53/8TLBRxK3",1,0]],[73,0.2,false,false,22,[1,"d9z3gatXtOcZyimR+Jo54r"],[[12,null],6,0],[5],[3,3],[0],[0],[0],[0],[0],[135,3],[3,1.8],[3,0.2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.08258928571428571],[13,0.9241071428571428,[4,4289835441]],[13,0.9620535714285714,[4,4281084972]]],[[9,255,0.6004464285714286],[9,0,1]]]]],[31,[0]],[78,true,true,[12,1,20,[8,[0,0.6948717948717948,1],[[45,2,2.839080459770115,1,2.839080459770115,1],[6,2,0.9333333333333333,0.4622222222222221,0.4622222222222221],[72,2,1,1,1]]]],[12,1,6,[8,[0,0.7974358974358975],[[136,2,2,0.05925925925925926,-0.015204678362573122,0.09771705989047173,-0.015204678362573122],[137,2,1,0.9962962962962963,0.0288636426001776,0.0288636426001776,0.09792722000142738]]]],[12,1,5,[8,[0,0.8051282051282052],[[136,2,2,1,-0.015285126396237575,0.09720572269540514,-0.015285126396237575],[137,2,1,0.03333333333333333,-0.007150715071507141,-0.007150715071507141,0.10365593276852825]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-72],[26,13]],[92,"VFX-Flash",2,[-73],[2,"e0e9uVuRVNhaC3ktlFbCWK",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[73,0.2,false,false,24,[1,"cfwaJcyxtIUJj+ZODhd7cm"],[[14,null],6,0],[5],[3,1.5],[0],[0],[0],[0],[0],[0],[3,1.7],[3,0.2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.44642857142857145],[9,0,1]]]]],[77,0,[3,1]],[32,true,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-74],[26,15]],[92,"VFX_SprayOut",2,[-75],[2,"65A5CxwExJ8YQuFC00CIwv",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,1,false,false,26,[1,"4cr3Uit81K7Y/kHA0MvtEm"],[16],[5],[23,3,0.1,0.4],[0],[0],[23,3,2,10],[0],[0],[0],[3,1.7],[3,1],[0],[83,80],[0],[[25,[3,50]]],[20,true,[16,1,[37,[[38,255],[9,255,0.22767857142857142],[9,0,1]]]]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[110,true,[0],[0],[0],[30,1,[8,[0,1],[[11,2,1],[6,2,0.037037037037037035,-1.54074074074074,-1.54074074074074]]]]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-76],[99,1,0.1,17]],[46,"VFX_Explosion2",2,[-77],[2,"adofCUzVlEeq+DoNoiGlsG",1,0]],[73,1.5,false,false,28,[1,"d6LkeZTddKz4u3S/seI2h7"],[[18,null],6,0],[56,[4,4294506744]],[3,1],[0],[0],[0],[0],[0],[135,3],[3,2],[3,1.5],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.033482142857142856],[43,0.078125],[13,0.18973214285714285,[4,4288716960]],[13,0.8459821428571428,[4,4280624421]]],[[9,255,0.1049107142857143],[9,255,0.21651785714285715],[9,0,1]]]]],[31,[0]],[32,true,[12,1,20,[8,[0,0.38461538461538464,1],[[45,2,6.259259259259259,1,6.259259259259259,1],[6,2,0.9148148148148149,0.4622222222222221,0.4622222222222221],[72,2,1,1,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-78],[26,19]],[92,"VFX_SprayOut2",2,[-79],[2,"c6S+qSUChHEqyScK9FEnWx",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,6,false,false,30,[1,"82P/8snJlB75DBw8nThDwu"],[20],[5],[23,3,0.1,0.4],[0],[0],[23,3,10,50],[0],[0],[0],[3,2],[3,1],[0],[83,80],[0],[[25,[3,50]]],[20,true,[16,1,[37,[[38,255],[9,255,0.22767857142857142],[9,0,1]]]]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[110,true,[0],[0],[0],[30,1,[8,[0,0.27708427247702977,0.5230769230769231,1],[[11,2,1],[6,2,0.30922275440798175,-2.3928348401596575,-2.3928348401596575],[6,2,0.05925925925925926,-0.21802935010482188,-0.21802935010482188],[11,2,0.020792806452028488]]]]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-80],[99,1,0.1,21]],[92,"VFX-ScreenTone",2,[-81],[2,"8bSyKry0BJqI7vNEiNLu7J",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[160,false,false,32,[1,"96FB+4LntMCJV7ImPsehqK"],[[22,null],6,0],[56,[4,1811939327]],[3,100],[0],[0],[0],[0],[0],[0],[3,2],[3,1],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.44642857142857145],[9,0,1]]]]],[77,0,[3,1]],[49,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-82],[26,23]],[46,"VFX-CircleIn",2,[-83],[2,"a6tmq5kplKd6n6pH69gYGL",1,0]],[73,0.4,false,false,34,[1,"37b91i5qFOeKLOQtk7s08k"],[[24,null],6,0],[5],[3,0.5],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[3,0.1],[3,0.4],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[13,0.12946428571428564,[4,4280229663]],[13,0.7745535714285714,[4,4289703855]],[43,0.9464285714285714]],[[38,0],[9,255,0.5357142857142858],[9,255,1]]]]],[31,[0]],[32,true,[12,1,20,[8,[0,1],[[41,2,0.9703703703703702,0.050682261208577085,1,0.050682261208577085,1],[45,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-84],[26,25]],[46,"VFX-RingIn",2,[-85],[2,"02FAnYEQ5HMZ3wureji8Jm",1,0]],[73,0.4,false,false,36,[1,"d6z9B4IPhLApWgew36VT+y"],[[26,null],6,0],[5],[3,1.5],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[3,0.35],[3,0.4],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[13,0.12276785714285714,[4,4280887593]],[13,0.7745535714285714,[4,4290032820]],[43,0.9464285714285714]],[[38,0],[9,34,0.34151785714285715],[9,255,0.6941964285714286],[9,255,1]]]]],[31,[0]],[32,true,[12,1,8,[8,[0,1],[[41,2,0.9703703703703703,0.05068226120857707,1,0.05068226120857707,1],[45,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-86],[26,27]],[92,"VFX_SprayIn",2,[-87],[2,"d94eS1vyBARomoFxzXUoPz",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[134,1.2,false,false,38,[1,"591PCZXZlNvLflLQoRvsOp"],[28],[5],[3,0.2],[0],[0],[3,5],[0],[0],[0],[0],[3,0.1],[0],[12,1,80,[8,[0,0.7333333333333333],[[6,2,0.05555555555555556,2.781893004115226,2.781893004115226],[11,2,0.9925925925925926]]]],[0],[122,[5]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-88],[99,1,0.5,29]],[92,"VFX-ChargeFlash",2,[-89],[2,"abOtSEGkVN976oricgz69X",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,2,false,false,40,[1,"0flPmNQfhLFLEoZAnZehF0"],[30],[5],[3,0.6],[0],[0],[0],[0],[0],[0],[3,0.3],[3,2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.8191964285714286],[9,0,1]]]]],[77,0,[3,1]],[32,true,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-90],[26,31]],[92,"VFX-Sparkle",2,[-91],[2,"c8LTQ12WBGyKADstq6MD5L",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[178,0.7,false,false,42,[1,"e0CxGr9KFF/7wuB4QcQlSy"],[[32,null],6,0],[16,4,[33,[[87,[4,4294926764]],[13,0.3169642857142857,[4,4294943343]],[13,0.6517857142857143,[4,4292278146]],[13,1,[4,4284279807]]],[[38,255]]]],[23,3,0.1,1.2],[0],[0],[3,0.1],[0],[0],[0],[3,1],[3,0.15],[0],[161,30,30],[0],[20,true,[16,1,[37,[[38,0],[9,255,0.12723214285714285],[9,255,0.2879464285714286],[9,0,1]]]]],[188,true,3,2,1.2,[3,1]],[32,true,[12,1,2,[8,[0,0.12307692307692308,0.3128205128205128,0.9974358974358974],[[11,2,0.48518518518518516],[6,2,1,0.18055555555555491,0.18055555555555491],[11,2,0.5074074074074074],[11,2,0.4962962962962963]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-92],[26,33]],[92,"VFX_LightRay",2,[-93],[2,"14SGr/8wFDfZNGC1Gfoi6J",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[134,1,false,false,44,[1,"31iUV3JxdCr4lKPY8+kRCF"],[34],[5],[12,1,4,[8,[0,1],[[6,2,0.48148148148148145,1.0000000000000002,1.0000000000000002],[11,2,1]]]],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[0],[3,1],[0],[12,1,10,[8,[0,1],[[6,2,0.3555555555555555,1.9740740740740748,1.9740740740740748],[11,2,1]]]],[0],[20,true,[16,1,[37,[[38,0],[9,133,0.09375],[9,255,0.15401785714285715],[9,153,0.24330357142857142],[9,0,1]]]]],[77,0,[3,1]],[78,true,true,[0],[30,1,[8,[0,0.2717948717948718,1],[[6,2,1,-3.2828282828282838,-3.2828282828282838],[6,2,0.45925925925925926,-1.155555555555555,-1.155555555555555],[6,2,0.16666666666666666,0.03073286052009456,0.03073286052009456]]]],[12,1,2,[8,[0,0.2717948717948718,0.9923076923076923],[[6,2,0.5,2.4246031746031744,2.4246031746031744],[6,2,0.8814814814814815,0.36111111111111127,0.36111111111111127],[11,2,1]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-0.17453292519943295,0.17453292519943295]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-94],[26,35]],[104,4,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[46,"Stun",7,[-95],[2,"28wv4th1pNs6qDNkpOR9dx",1,0]],[117,47,[1,"92X5rq9oNDNouphSNFIziH"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",4]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",4]]],[35,"UI",1,[8],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,5,0,-2,8,0,3,8,0,13,16,0,2,1,0,20,48,0,27,46,0,28,16,0,3,4,0,3,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-2,7,0,2,1,0,7,1,0,-4,49,0,-1,10,0,-2,12,0,-3,14,0,-4,22,0,-5,24,0,-6,26,0,-7,28,0,-8,30,0,-9,32,0,-10,34,0,-11,36,0,-12,38,0,-13,40,0,-14,42,0,-15,44,0,0,3,0,-1,18,0,-2,19,0,-3,5,0,-1,46,0,1,6,0,1,6,0,1,6,0,1,6,0,1,6,0,0,5,0,2,5,0,-2,15,0,-3,47,0,-4,17,0,1,9,0,1,9,0,1,9,0,1,9,0,1,50,0,1,50,0,17,19,0,2,8,0,-1,11,0,4,11,0,-1,13,0,4,13,0,-1,20,0,-2,21,0,-1,16,0,3,17,0,0,17,0,0,18,0,4,20,0,4,21,0,-1,23,0,4,23,0,-1,25,0,4,25,0,-1,27,0,4,27,0,-1,29,0,4,29,0,-1,31,0,4,31,0,-1,33,0,4,33,0,-1,35,0,4,35,0,-1,37,0,4,37,0,-1,39,0,4,39,0,-1,41,0,4,41,0,-1,43,0,4,43,0,-1,45,0,4,45,0,-1,48,0,9,1,2,7,3,4,7,7,8,7,49,95],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,-2,18,8],[14,13,90,1,20,19,10,18,4,3,11,9,4,3,7,6,7,6,4,3,7,6,7,6,4,3,11,9,7,6,7,6,33,29,43,41,5,15,5,16]],[[[57,".bin",1106816748,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":5760,"length":480,"count":120,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":5760,"count":120,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.28526073694229126,-0.3019552230834961,0.8038041591644287],"maxPosition",8,[1,0.3544756770133972,0.31409966945648193,1.1679835319519043]]],-1],0,0,[],[],[]],[[[62],[47,"SM_Crystal_01",[-2],[2,"bb0RXNBHxTGI42/b2Cnubv",-1,0]],[53,"SM_Crystal_01",1,[[52,-3,[1,"ccVb+VfBxQMYPT+MwU2grc"],[0],[34],1]],[2,"aaRlFzdUNVLYxzzD2+ZOMc",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[373,374]],[[[63,"SM_Crystal_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[50,"P-GunTower-Bullet-01HKO"],[132,"P-GunTower-Bullet-01HKO",32,[-9,-10,-11,-12,-13,-14],[[197,-8,[1,"beD6AbwclCQbdYQiBsHcVK"],[[7,"12ea43w32ZDAL2+IVCNZlsZ","play",-7]],[[7,"cc.ParticleSystem","play",-3],[7,"12ea43w32ZDAL2+IVCNZlsZ","play",-4],[7,"cc.ParticleSystem","play",-5],[7,"cc.ParticleSystem","play",-6]],[-2]]],[2,"e8sP6FFh9D17STW5Nbkx1m",-1,0]],[220,"Projectile",32,1,[[[222,"Quad<ModelComponent>",false,-15,[1,"0bELSWeDdO65djlx1RiPJl"],[34],7],-16,-17],4,1,1],[2,"caJ4o2c5FOda7/HE7o5QFR",1,0],[1,0.15,0.15,1]],[64,"Bullet_Burst_Flash",512,1,[-18],[2,"8awZgQiLFMo788WeoWcrPq",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[130,0.5,false,false,1,3,[1,"807LSdEE5OBp7IMkuUEYXk"],[[0,null],6,0],[5],[3,1],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[0],[3,0.15],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[119],[13,0.05357142857142855,[4,4292723871]],[13,1,[4,4284358679]]],[[38,255],[9,255,0.6026785714285714],[9,0,1]]]]],[77,0,[3,1]],[32,true,[30,1,[8,[0,0.1794871794871795,0.7538461538461538,0.9794871794871794],[[6,2,0.6148148148148148,1.8227513227513228,1.8227513227513228],[6,2,0.8814814814814815,0.9950617283950617,0.9950617283950617],[6,2,0.6962962962962963,-1.4444444444444435,-1.4444444444444435],[189,2,-4.6222222222222245,-4.6222222222222245]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-19],[26,1]],[64,"Bullet_Burst_Square",32,1,[-20],[2,"29U8hsJUlB8JTNpooxjqiO",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[64,"Bullet_Burst_Fragments",32,1,[-21],[2,"5f4rBTIrlFLIY0/YUL0d89",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[221,"Bullet_Trail",false,512,1,[-22,-23],[2,"4b8ydGY/tOzKGDYewdhT94",1,0]],[146,"Temporary",32,1,[-24,-25],[2,"c5GgaVw6FFeY9mnByY+aKX",1,0]],[39,"Projectile Collision Fade Out",32,8,[[200,0.2,-26,[1,"19qrhSA9JAiY0e2WHN8oh5"],2,[1,1,1,1],[1,0,0,0]]],[2,"f0ugCEKBdHQ6kkJpq8eD1a",1,0]],[39,"Projectile Fade In",32,8,[[201,0,-27,[1,"efl6QMDlhPKIhp/XlQhmzg"],2,[1,0.15,0.15,1]]],[2,"7eZgQmg7BJiKSV6+V3wpmf",1,0]],[130,0.25,false,false,1,5,[1,"2b2XIBV3ZD/r5Jd0n4bDrC"],[[2,null],6,0],[5],[3,0.8],[0],[0],[0],[0],[0],[23,3,0.7853981633974483,0.7853981633974483],[0],[3,0.24],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[87,[4,33554431]],[13,0.044642857142857144,[4,32281173]],[13,0.8191964285714286,[4,22023713]]],[[38,255],[9,255,0.18749999999999997],[9,0,1]]]]],[31,[0]],[32,true,[12,1,1.5,[8,[0,0.30256410256410254,1],[[6,2,0.09629629629629628,2.7575757575757573,2.7575757575757573],[6,2,0.7777777777777778,0.9883040935672519,0.9883040935672519],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-28],[26,3]],[73,0.5,false,false,6,[1,"bem915BoBG47GEjN4PVAEW"],[[4,null],6,0],[5],[23,3,0.05,0.15],[0],[0],[23,3,0.2,0.8],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.2,0.4],[0],[0],[0],[[25,[23,3,4,8]]],[20,true,[16,1,[33,[[13,0.026785714285714315,[4,4293187241]],[13,0.14732142857142858,[4,4291465556]],[13,0.7142857142857143,[4,4282851095]]],[[9,255,0.12946428571428573],[9,0,1]]]]],[208,true,3,2,true,0.25,[0]],[32,true,[30,1,[8,[0,1],[[41,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[41,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[21,[3,6],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,40,[8,[0,1],[[126,1,1,1,1],[106,1,1,1,1,1]]]]],[138,true,2,2,1,[83,4],[44,3,2]],[19,[0],[0],[5],[5],-29],[108]],[198,false,0,7,[1,"6dAiuo47BO6rg9Yf8NI3vX"],[[5,null],6,0],[56,[4,2412752452]],[23,3,0.05,0.1],[0],[0],[3,1],[0],[0],[44,3,6.283185307179586],[0],[23,3,1,1],[0],[0],[3,2],[20,true,[16,1,[33,[[13,0.026785714285714315,[4,4293187241]],[13,0.2767857142857143,[4,4291465556]],[13,1,[4,4282851095]]],[[9,255,0.12946428571428573],[9,0,1]]]]],[187,true,2,true,0.1,1,0.17453292519943295,[0],[1,0,180,0]],[49,[30,1,[8,[0,1],[[41,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[41,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[21,[3,6],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[12,1,40,[8,[0,1],[[126,1,1,1,1],[106,1,1,1,1,1]]]]],[138,true,2,2,1,[83,4],[44,3,2]],[19,[0],[0],[5],[5],-30],[108]],[224,7,[1,"02KzFZOkpHzqdL7Lhw+09B"],[[null,6],0,6],[5],[3,1],[0],[0],[3,5],[0],[0],[0],[0],[3,5],[0],[0],[0],[[25,[3,1]]],[122,[5]],[31,[0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[147,true,false,[3,1],[3,3],[16,1,[127,[[87,[4,4294287463]],[13,1,[4,4283307025]]]]],[5],-31],[108]],[225,0,0.5,false,2,[1,"02KzFZOkpHzqdL7Lhw+09B"],[[null,8],0,6],[56,[4,16777215]],[0],[0],[0],[0],[0],[0],[0],[0],[3,5],[0],[0],[0],[[25,[3,1]]],[122,[5]],[31,[0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[147,true,false,[3,0.2],[3,0.5],[16,1,[127,[[87,[4,4294287463]],[13,1,[4,4283307025]]]]],[5],-32],[108]],[226,1,[null,null],2,[1,"e6875CztlE0JXWurEQgEej"],[5],[3,1],[0],[0],[0],[0],[0],[0],[0],[3,1],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[127,[[119],[13,0.49999999999999994,[4,4293381654]],[43,1]]]]],[31,[0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[227,false,[0],[0],[5],[5],-33],[228,2]]],0,[0,2,1,0,-1,4,0,3,3,0,3,9,0,3,5,0,3,6,0,3,10,0,0,1,0,-1,3,0,-2,5,0,-3,6,0,-4,7,0,-5,2,0,-6,8,0,0,2,0,-2,15,0,-3,16,0,-1,4,0,4,4,0,-1,11,0,-1,12,0,-1,13,0,-2,14,0,-1,9,0,-2,10,0,0,9,0,0,10,0,4,11,0,4,12,0,4,13,0,4,14,0,4,15,0,4,16,0,9,1,33],[0,0,0,0,0,0,0,0,0],[-1,5,-1,5,-1,-1,-2,10,-2],[48,44,42,39,10,10,31,49,31]],[[[63,"SM_BlockDetail_03__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[62],[47,"SM_BlockDetail_03",[-2],[2,"9baIPWPuBegYREJ2bd45GU",-1,0]],[53,"SM_BlockDetail_03",1,[[52,-3,[1,"3cp8QxXtBa7JpQCn73Ia+U"],[0],[34],1]],[2,"bb0uLNgSNZ+oZzArvhE75t",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[375,376]],[[[57,".bin",3285477527,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":11520,"length":3960,"count":990,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":11520,"count":240,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.41306981444358826,-0.38547763228416443,-0.09105845540761948],"maxPosition",8,[1,0.45361754298210144,0.24799129366874695,0.6792443990707397]]],-1],0,0,[],[],[]],[[[57,".bin",3089916683,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":15504,"length":5244,"count":1311,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":15504,"count":323,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.49648356437683105,-0.48895084857940674,-0.08720430731773376],"maxPosition",8,[1,0.535842776298523,0.4381939470767975,0.5775967240333557]]],-1],0,0,[],[],[]],[[[62],[47,"SM_BlockDetail_02",[-2],[2,"adq/Yq1hVR5Kyey84ZN4kv",-1,0]],[53,"SM_BlockDetail_02",1,[[52,-3,[1,"49hPoZFQtfgKWF4Jpx8AbD"],[0],[34],1]],[2,"1cXE2MCStaZYiYVuLRQ0jX",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[377,378]],[[[63,"SM_BlockDetail_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[62],[47,"SM_TowerCometTBody_01",[-2],[2,"93NMATgvJXN5P2Z0Pbx6xd",-1,0]],[53,"SM_TowerCometTBody_01",1,[[52,-3,[1,"36LCcIeKVRp7Mac4l4WlzY"],[0],[34],1]],[2,"b1ynI0NRlTcr9Bc5g2lJQg",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[379,149]],[[[63,"SM_TowerCometTBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",2256427891,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":26496,"length":8040,"count":2010,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":26496,"count":552,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.23616410791873932,-0.32110682129859924,-3.000557580179475e-10],"maxPosition",8,[1,0.23616410791873932,0.23888812959194183,0.3526967465877533]]],-1],0,0,[],[],[]],[[[50,"SM_Tower01HKOBody_01"],[195,"SM_Tower01HKOBody_01",[-2],[2,"754aHt1OpZU5MrqxM/Ip4m",-1,0],[1,2000,0,0]],[53,"SM_Tower01HKOBody_01",1,[[52,-3,[1,"46S3F1J79Rz4XvfNv5iTfa"],[0],[34],1]],[2,"394Llq4YJQGJQtg3lCaMlI",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[1,182]],[[[50,"SM_TowerStarfallBody_01"],[47,"SM_TowerStarfallBody_01",[-2],[2,"33sM9enERVxYZcocgwSPwR",-1,0]],[53,"SM_TowerStarfallBody_01",1,[[52,-3,[1,"c2i6M6mIdSAJVEUjqztCnG"],[0],[34],1]],[2,"6cUxh5uoJYzKl3tC1g7j0i",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[1,183]],[[[50,"02-CubeTower-Block"],[132,"02-CubeTower-Block",2,[-17,-18,-19,-20],[[613,-16,[1,"58d5nhIZBAcZJt6y7N+uUY"]]],[86,"31e3JrBwhGvJvEf/zRkO9C",-15,0,[[513,["target"],[614,[1,"64iHIuv9hMgIyoXGxdrVC1"],[1,0,0.2,0]],[4,["f9aoEaXvFc3pfuS37vcrqA"]]],[212,["target"],-8,[4,["f9aoEaXvFc3pfuS37vcrqA"]]],[212,["_onDamage","0","target"],-9,[4,["f9aoEaXvFc3pfuS37vcrqA"]]],[212,["onComplete","0","target"],-10,[4,["f9aoEaXvFc3pfuS37vcrqA"]]],[212,["_onStart","0","target"],-11,[4,["f9aoEaXvFc3pfuS37vcrqA"]]],[212,["target"],-12,[4,["91AFEBuQdbjYsrr3G6hB8y"]]],[212,["onComplete","0","target"],-13,[4,["91AFEBuQdbjYsrr3G6hB8y"]]],[212,["_onStart","1","target"],-14,[4,["91AFEBuQdbjYsrr3G6hB8y"]]]],[-1,-2,-3,-4,-5,-6,-7]]],[361,"Art",1,[-25,-26,-27,-28,-29,-30,-31,-32,-33,-34],[[-21,[141,-23,[1,"6ejM593ONDLLsDs12HNY9q"],-22],[391,-24,[1,"59T5wofZdHf7NwQJxE9w15"],[24,25]]],1,4,4],[2,"90hZDH/U9H4KINJuNv7pI+",1,0]],[463,"VFX-Freeze-In",[-37,-38,-39,-40,-41,-42],[-35,-36],[2,"62+JMK07hK8ZWF2C2KskDE",1,0],[1,0,1.721,0]],[431,"Cube",[[79,"Cube<ModelComponent>",-43,[1,"37Q+z7wANKMYNVcLTM4VIJ"],[0],[34],1],[617,5,true,-46,[1,"aczLH8SQxPHL8HRGAM3Qqt"],-45,[[7,"925cc7HsYRKfKoUI6HIv/Em","play",-44]],[1,0,360,0]],[615,-48,[1,"64iHIuv9hMgIyoXGxdrVC1"],-47,[1,0,0.2,0]],[497,null,0.3,-49,[1,"d7TL/rrIJOJrskJ6zwj+BX"],[1,1,1,1],[1,0,0,0]]],[2,"c112Aezs5PVrXvslw8FjxL",1,0],[1,0,1,0],[1,0.6,0.6,0.6]],[305,"Scripts",1,[[-50,-51,[80,"Tweens",-52,[2,"4ecxDjgCJKEorG8jwYClAR",1,0]],-53,-54,-55],1,1,4,1,1,1],[2,"feGU5CoehHWqbEHG9TEcu5",1,0]],[4,["38TprYPCRWppYLEJoooZq3"]],[241,"VFX_CubeTowerHitSlashA",2,[-56],[2,"f7cu/3NYFAh5bRDz0PWj4V",1,0],[1,0,1.632,0]],[241,"VFX_CubeTowerHitSlashB",2,[-57],[2,"4bCTfDbfBHWaLTrahQ4uwM",1,0],[1,0,1.632,0]],[241,"VFX_CubeTowerHitMotes",2,[-58],[2,"bfG9YROi9M/5JGZaJuPUlB",1,0],[1,0,1.632,0]],[241,"VFX_CubeTowerHitFlash",2,[-59],[2,"6aV1F5LTFPmofXVW7fM9ZQ",1,0],[1,0,1.632,0]],[464,"VFX-Freeze-Out",2,[-61,-62],[-60],[2,"bfBuXTXsRHAI4OROHIW0gR",1,0],[1,0,1.721,0]],[347,"TEMP-Model",false,2,[4],[[79,"Cube<ModelComponent>",-63,[1,"8cycEUsRtG27/Lisehtj8j"],[2],[34],3],[55,-64,[1,"321xTfs/JOdYNfymQAhi3j"]]],[2,"bf5uh9CNtNJ49UX09o+cf8",1,0]],[4,["2ftx87dFpbdKiqdLuVoOoe"]],[4,["08DnfqaRBUD5xquxkMkyx7"]],[4,["bf/rqmxy1RI6d5s9dt63bw"]],[35,"Path",2,[-65,-66,-67],[2,"6adClE7bNKmr2tA1kIUgaY",1,0]],[4,["38TprYPCRWppYLEJoooZq3"]],[4,["fefPIkSBJemp8PPyjHLGkW"]],[4,["e9QGVwjwRRNYH2wTOhd0ZX"]],[35,"Events",1,[-68,-69,-70],[2,"375TkXESBFx43QESBtG7+v",1,0]],[92,"VFX-MotesLinger",3,[-71],[2,"83JxMy5aZPbKfnzYaDI7Ju",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[36,0,null,2,[29,"38TprYPCRWppYLEJoooZq3",-72,[42,"7b1X42VmxK17p1BL8g3gzd",1,[[14,"SM_BlockPath_01",["_name"],6],[10,["_lpos"],6,[1,0,0,0]],[10,["_lrot"],6,[3,0,0,0,1]],[10,["_euler"],6,[1,0,0,0]],[40,["_materials","0"],[4,["c6ETENbq5XL5UBZI2bIgRH"]],5],[14,false,["_active"],6]]],4]],[36,0,null,2,[29,"2ftx87dFpbdKiqdLuVoOoe",-73,[42,"30n37VJ+dJ3JQ+t6hfsRGl",1,[[14,"SM_TowerCubeBase_01",["_name"],13],[10,["_lpos"],13,[1,0,0.237,0]],[10,["_lrot"],13,[3,0,0,0,1]],[10,["_euler"],13,[1,0,0,0]],[40,["_materials","0"],[4,["dbdV3sdgFULJOrqOS2M8DG"]],7]]],6]],[36,0,null,2,[29,"08DnfqaRBUD5xquxkMkyx7",-74,[42,"6bE2WPtlFLgrC2mLU3h0BN",1,[[14,"SM_TowerCubeBody_01",["_name"],14],[10,["_lpos"],14,[1,0,0.734,0]],[10,["_lrot"],14,[3,0,0,0,1]],[10,["_euler"],14,[1,0,0,0]],[40,["_materials","0"],[4,["27TVOX0m1aSIANyTsuWfnj"]],9]]],8]],[36,0,null,2,[29,"bf/rqmxy1RI6d5s9dt63bw",-75,[42,"f29IGT7LRDpLu2pWTLPXQt",1,[[14,"SM_TowerCubeSlime_01",["_name"],15],[10,["_lpos"],15,[1,0,1.5,0]],[10,["_lrot"],15,[3,0,0,0,1]],[10,["_euler"],15,[1,0,0,0]],[40,["_materials","0"],[4,["c1FqYGy+FXzrIyDY9Dcjtd"]],11]]],10]],[35,"1",16,[-76],[2,"f44Ku50VpAIr/bLYTwYgU/",1,0]],[36,0,null,26,[29,"38TprYPCRWppYLEJoooZq3",-77,[42,"20jblIKvNDC5IH9Pw+0HB2",1,[[14,"SM_BlockPath_01",["_name"],17],[10,["_lpos"],17,[1,0,0,0]],[10,["_lrot"],17,[3,0,0,0,1]],[10,["_euler"],17,[1,0,0,0]],[40,["_materials","0"],[4,["c6ETENbq5XL5UBZI2bIgRH"]],19]]],18]],[81,"2",false,16,[-78],[2,"2a930KtRdBFKRGVvePRmZB",1,0]],[36,0,null,28,[29,"fefPIkSBJemp8PPyjHLGkW",-79,[42,"75evY1vxJE0LBjhPb9Ye6j",1,[[14,"SM_BlockPath_02",["_name"],18],[10,["_lpos"],18,[1,0,0,0]],[10,["_lrot"],18,[3,0,0,0,1]],[10,["_euler"],18,[1,0,0,0]],[40,["_materials","0"],[4,["c2E9Ka2cRe7YGAxkqvC+yR"]],21]]],20]],[81,"3",false,16,[-80],[2,"3fhUa9faVAw6beDr2QOprv",1,0]],[36,0,null,30,[29,"e9QGVwjwRRNYH2wTOhd0ZX",-81,[42,"3dVf6nOm9E4ZcGOsSSg75p",1,[[14,"SM_BlockPath_03",["_name"],19],[10,["_lpos"],19,[1,0,0,0]],[10,["_lrot"],19,[3,0,0,0,1]],[10,["_euler"],19,[1,0,0,0]],[40,["_materials","0"],[4,["0fKTIDFQVVW7qzAtQnZb77"]],23]]],22]],[548,[1,"708tDXckFJgo3qZuwT/1Nm"],[[153,"925cc7HsYRKfKoUI6HIv/Em","play"],[153,"925cc7HsYRKfKoUI6HIv/Em","play"]]],[46,"CubeTowerHP",5,[-82],[2,"80AR++gxhAQYT0HkzYcbWR",1,0]],[54,"Camera Shake Event Raiser",5,[[247,"CameraShake_ShakeCamera",-83,[1,"2cq2FiHbBANJNvCSubuWnn"]]],[2,"d0JbRPSoFHh78SGfwL/eEZ",1,0]],[115,"Damage SFX",[[144,"sfx-cubetower-damaged",-84,[1,"582r7cwztIea3Ic0gWLOE9"]]],[2,"d59t4zicRAWJ+VDK1FoDiB",1,0]],[115,"HP Changed Raiser",[[418,1,-85,[1,"86HpTDg4tLGp+LLaksA97T"]]],[2,"5aKisjCMJMa5qtxOysbcwC",1,0]],[35,"Cube Tower HP Events",20,[-86,36],[2,"fdc1PD/c5FrrMlCJi4pupR",1,0]],[35,"Rewarded Ads Freeze",20,[-87,-88],[2,"eamFJ64iFF1pBxbGImX9Mp",1,0]],[146,"VFX",2,1,[3,11],[2,"e08szlCE5LWYDHxsKEd2SN",1,0]],[64,"VFX-MotesLinger",2,11,[-89],[2,"39CZtFe7VOipCL5wQqD7ik",1,0],[3,0.7071067811865475,0,0,0.7071067811865477],[1,89.99999999999999,0,0]],[94,"VFX-BlastBack",2,11,[-90],[2,"f7yej9+9xHnI/mTMZvIwDx",1,0]],[92,"VFX-MotesBurst",3,[-91],[2,"73nMU6JyhDMrB5p9+IWkLG",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[240,"VFX-Sparkle",3,[-92],[2,"f0k60rXo1LAJ75a0aSRLCi",1,0],[1,0,2.206,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[92,"VFX-Flash",3,[-93],[2,"e04Jx9TXxPZLIfNslSPyyO",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[92,"VFX-GravityShards",3,[-94],[2,"91nNxNghBM15fCGQ20lMFw",1,0],[3,1,0,0,2.220446049250313e-16],[1,179.99999999999997,0,0]],[94,"VFX-BlastLarge",2,3,[-95],[2,"c4kven+UtDm4ii+IvBJRj8",1,0]],[54,"Set Initial HP Raiser",37,[[418,2,-96,[1,"3eB4GSo+lEC6yK1AeQjnst"]]],[2,"47bC+1oRBP7L2Zbqw2AWBi",1,0]],[369,true,0.2,false,false,4,0.4259259259259258,1,7,[1,"13qeHeZOlEzISoPQooC+Rd"],[[12,null],6,0],[5],[3,2],[3,1],[0],[0],[0],[0],[44,3,6.283185307179586],[0],[3,0.2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[13,0.16741071428571427,[4,4288059135]],[13,0.29017857142857134,[4,4279635199]],[13,0.8191964285714286,[4,4278912065]]],[[38,255],[9,182,0.5758928571428572],[9,0,1]]]]],[31,[0]],[78,true,true,[30,1,[8,[0,0.30256410256410254,1],[[6,2,0.0962962962962963,2.757575757575757,2.757575757575757],[6,2,0.7777777777777778,0.9883040935672519,0.9883040935672519],[11,2,1]]]],[12,1,2,[8,[0,0.4948717948717949,1],[[45,2,0.21241830065359474,1,0.21241830065359474,1],[6,2,0.5777777777777777,1.89272030651341,1.89272030651341],[41,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[12,1,2.5,[8,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[41,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[6,2,0.8925925925925926,4.513888888888884,4.513888888888884],[6,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[41,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-97],[26,13]],[369,true,0.2,false,false,4,0.4259259259259258,1,8,[1,"64rPK7S4VJtqi14NoO163Q"],[[14,null],6,0],[5],[3,1.5],[3,0.75],[0],[0],[0],[0],[44,3,6.283185307179586],[3,0.02],[3,0.2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[13,0.16741071428571427,[4,26646271]],[13,0.29017857142857134,[4,18222335]],[13,0.8191964285714286,[4,17499201]]],[[38,255],[9,182,0.5758928571428572],[9,0,1]]]]],[31,[0]],[78,true,true,[30,1,[8,[0,0.30256410256410254,1],[[6,2,0.0962962962962963,2.757575757575757,2.757575757575757],[6,2,0.7777777777777778,0.9883040935672519,0.9883040935672519],[11,2,1]]]],[12,1,2,[8,[0,0.4948717948717949,1],[[45,2,0.21241830065359474,1,0.21241830065359474,1],[6,2,0.5777777777777777,1.89272030651341,1.89272030651341],[41,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[12,1,2.5,[8,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[41,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[6,2,0.8925925925925926,4.513888888888884,4.513888888888884],[6,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[41,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-98],[26,15]],[480,false,false,9,[1,"9fETWFCgdDVbPVi/TEZjGj"],[5],[23,3,0.05,0.1],[0],[0],[3,7],[0],[0],[44,3,6.283185307179586],[0],[3,0.4],[0],[0],[0],[[25,[23,3,8,12]]],[20,true,[16,1,[127,[[119],[13,0.4620535714285714,[4,4279045595]],[13,1,[4,4281993294]]]]]],[491,true,3,0.4,[0]],[32,true,[30,1,[8,[0.5025641025641026,1],[[106,1,-1,1,-1,1],[126,-2.0103092783505154,1,-2.0103092783505154,1]]]],[0],[0],[0]],[110,true,[0],[0],[0],[30,1,[8,[0,0.4025641025641026,0.8076923076923077],[[11,2,1],[6,2,0.15555555555555556,-0.5349794238683129,-0.5349794238683129],[6,2,0.014814814814814815,-0.0931899641577061,-0.0931899641577061]]]]],[15,[0],[0],[0]],[310,0.5,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-99],[108]],[481,0.15,false,false,4,0.4259259259259258,1,10,[1,"1b+UhHvGVApYvpzFzwByaB"],[[16,null],6,0],[5],[3,2],[3,1],[0],[0],[0],[0],[44,3,6.283185307179586],[3,0.02],[3,0.2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.16741071428571427],[13,0.29017857142857134,[4,4279635199]],[13,0.8191964285714286,[4,4278912065]]],[[38,255],[9,182,0.5758928571428572],[9,0,1]]]]],[31,[0]],[32,true,[30,1,[8,[0,0.30256410256410254,1],[[6,2,0.0962962962962963,2.757575757575757,2.757575757575757],[6,2,0.7777777777777778,0.9883040935672519,0.9883040935672519],[11,2,1]]]],[12,1,2,[8,[0,0.4948717948717949,1],[[45,2,0.21241830065359474,1,0.21241830065359474,1],[6,2,0.5777777777777777,1.89272030651341,1.89272030651341],[41,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[12,1,2.5,[8,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[41,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[6,2,0.8925925925925926,4.513888888888884,4.513888888888884],[6,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[41,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-100],[26,17]],[128,2,[1,"59T5wofZdHf7NwQJxE9w15"]],[46,"On Start",5,[32],[2,"a00ImiRlVA+JLbQ+5m/f/M",1,0]],[618,[6,8,10,12,16,20],33,[1,"67hTKa+rZNzLEm7wGCJOp8"],[[7,"a2b25EHeuNHtrhlTfnn9xoq","raise",34],[7,"ac879rTendCEbpZWFz/jexs","playSFX",35],[7,"cc.ParticleSystem","play",7],[7,"cc.ParticleSystem","play",8],[7,"cc.ParticleSystem","play",9],[7,"cc.ParticleSystem","play",10]],[[153,"12ea43w32ZDAL2+IVCNZlsZ","play"]],[[7,"31cdcvhPtdJNZjVbuOE4DwI","raise",36]],[[7,"31cdcvhPtdJNZjVbuOE4DwI","raise",47]]],[35,"Audio",5,[35],[2,"6abMWIfGNOIqS0YnAF7i4R",1,0]],[54,"On Enemy Reach Cube Tower Listener",20,[[619,2,-101,[1,"2eU05bl+RHV6TJJWH3hyhd"],[[7,"b091d/zYThK/q6JkfRYKBAK","enemyReachedCubeTower",33],[7,"cc.ParticleSystem","stop",7],[7,"cc.ParticleSystem","stop",8],[7,"cc.ParticleSystem","stop",9],[7,"cc.ParticleSystem","stop",10],[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","IsHit",2],[7,"cc.ParticleSystem","play",7],[7,"cc.ParticleSystem","play",8],[7,"cc.ParticleSystem","play",9],[7,"cc.ParticleSystem","play",10]]]],[2,"e9V4uEbXNITLunxFLjwfJc",1,0]],[54,"On Freeze Special Start",38,[[292,"FreezeEnemiesStart",-102,[1,"efngow2GVP2b6td8OH1snI"],[[7,"cc.ParticleSystem","play",3],[7,"cc.ParticleSystem","play",42],[7,"cc.ParticleSystem","play",21],[7,"cc.ParticleSystem","play",43],[7,"cc.ParticleSystem","play",44],[7,"cc.ParticleSystem","play",45],[7,"cc.ParticleSystem","play",46]]]],[2,"2f2eIhkKVMhrFstdWl/fzg",1,0]],[482,false,false,8.591356427278768,7.50554052941051,7.351178458984254,40,[1,"0anilpmQNLeZJLvEamq5Co"],[[26,null],6,0],[5],[23,3,0.1,0.2],[0],[0],[3,-30],[0],[0],[0],[0],[3,0.5],[0],[0],[0],[[25,[3,50]]],[20,true,[278,3,[37,[[38,0],[9,255,0.36607142857142855],[9,255,0.8772321428571429],[9,0,1]]],[37,[[38,0],[9,255,0.3928571428571429],[9,0,1]]]]],[492,true,3,true,0.6,0.4,[3,1],[1,10,10,10]],[49,[0],[0],[0],[0]],[110,true,[0],[0],[0],[30,1,[8,[0,0.6615384615384615,0.7974358974358975,0.9282051282051282,1],[[6,2,0.022222222222222223,0.04377104377104377,0.04377104377104377],[6,2,0.06666666666666667,0.3611111111111108,0.3611111111111108],[6,2,0.9703703703703703,0.825396825396824,0.825396825396824],[6,2,0.9111111111111111,-3.1984126984127,-3.1984126984127],[11,2,-0.014814814814814815]]]]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-103],[99,1,0.03,27]],[160,false,false,41,[1,"69ySQNvPZJaqpd/SclbCaZ"],[[28,null],6,0],[56,[4,4294506744]],[3,1],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[0],[3,0.6],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[13,0.08928571428571429,[4,33554431]],[13,0.7745535714285714,[4,30386519]],[13,0.9308035714285714,[4,21040652]]],[[9,255,0.1049107142857143],[9,255,0.20535714285714282],[9,0,1]]]]],[31,[0]],[32,true,[12,1,10,[8,[0,0.35128205128205126,0.7205128205128205],[[41,2,1,-0.4158249158249161,1,-0.4158249158249161,1],[6,2,0.6666666666666667,-1.193236714975846,-1.193236714975846],[45,2,-2.4675925925925926,1,-2.4675925925925926,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-104],[26,29]],[160,false,false,11,[1,"0950u4ZwFG0bSkiwwZp4Qm"],[[30,null],6,0],[56,[4,2097151999]],[3,1],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[0],[3,1],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[87,[4,4294950422]]],[[38,0],[9,49,0.43303571428571425],[9,45,0.7232142857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,25,[8,[0,0.3717948717948718,0.5871794871794872,1],[[41,2,0.9962962962962962,0.028888888888889713,1,0.028888888888889713,1],[6,2,0.674074074074074,-2.8201058201058196,-2.8201058201058196],[6,2,0.13333333333333333,-0.9750000000000003,-0.9750000000000003],[45,2,-0.12293144208037823,1,-0.12293144208037823,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-105],[26,31]],[276,false,false,42,[1,"50NBvYlDNA3rgjD1qmkOwQ"],[32],[5],[23,3,0.05,0.1],[0],[0],[23,3,2,15],[0],[0],[0],[0],[3,5],[0],[0],[0],[[25,[3,40]]],[20,true,[16,1,[37,[[38,255],[9,255,0.7745535714285714],[9,0,1]]]]],[493,true,2,1,1.3962634015954636,[3,1]],[49,[0],[0],[0],[0]],[110,true,[0],[0],[0],[30,1,[8,[0,0.18],[[6,2,1,-10.505050505050505,-10.505050505050505],[11,2,0.01]]]]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-106],[99,1,0.15,33]],[488,false,21,[1,"10cxGGmzdPJYQy7tTFcUjz"],[34],[5],[23,3,0.1,0.2],[0],[0],[3,0.05],[0],[0],[0],[3,0.4],[3,3],[0],[3,15],[0],[20,true,[16,1,[37,[[38,0],[9,255,0.45089285714285715],[9,0,1]]]]],[494,true,0,true,1,1,[3,1],[1,10,10,10]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-107],[26,35]],[178,6,false,false,43,[1,"74Bo8WtGNNdKd5vBxAzYcU"],[[36,null],6,0],[56,[4,2063597567]],[23,3,0.1,0.5],[0],[0],[3,0.1],[0],[0],[0],[3,0.15],[23,3,0.15,0.25],[0],[12,1,20,[8,[0,0.6666666666666666,1],[[11,2,1],[6,2,0.7185185185185186,-1.1876543209876542,-1.1876543209876542],[6,2,0.08148148148148149,-2.143369175627239,-2.143369175627239]]]],[0],[20,true,[16,1,[37,[[38,0],[9,255,0.12723214285714285],[9,255,0.2879464285714286],[9,0,1]]]]],[495,true,0,2,[3,1],[1,10,10,3]],[32,true,[12,1,2,[8,[0,0.12307692307692308,0.3128205128205128,0.9974358974358974],[[11,2,0.48518518518518516],[6,2,1,0.18055555555555491,0.18055555555555491],[11,2,0.5074074074074074],[11,2,0.4962962962962963]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-108],[26,37]],[276,false,false,44,[1,"5d1YR7IohHMaJUQuiEZRTF"],[38],[5],[3,1],[0],[0],[0],[0],[0],[0],[0],[3,0.2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.44642857142857145],[9,0,1]]]]],[77,0,[3,1]],[32,true,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-109],[26,39]],[276,false,false,45,[1,"acjIFDvWVA1KP4fDzK1fTD"],[40],[5],[23,3,0.2,0.5],[0],[0],[23,3,2,3],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.2,1],[3,0.8],[0],[0],[[25,[3,5]],[279,0.1,[3,4]]],[20,true,[16,1,[37,[[38,255],[9,255,0.5401785714285714],[9,0,1]]]]],[109,true,0,0.5,1,1.0471975511965976,[3,1],[1,-90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-3.490658503988659,3.490658503988659]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-110],[26,41]],[160,false,false,46,[1,"0d2PrRIU9Aa7Iy8Ju2Ucdp"],[[42,null],6,0],[56,[4,2097151999]],[3,1],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[0],[3,1.5],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[87,[4,4294950422]]],[[9,49,0.1852678571428571],[9,45,0.5089285714285714],[9,0,1]]]]],[31,[0]],[32,true,[12,1,25,[8,[0,0.20512820512820512,1],[[45,2,9.569444444444445,1,9.569444444444445,1],[6,2,0.9037037037037037,0.19825708061002204,0.19825708061002204],[41,2,1,0.08333333333333359,1,0.08333333333333359,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-111],[26,43]],[160,false,false,3,[1,"69ySQNvPZJaqpd/SclbCaZ"],[[44,null],6,0],[56,[4,4294506744]],[3,1],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[0],[3,0.6],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.08928571428571429],[13,0.7745535714285714,[4,4291799383]],[13,0.9308035714285714,[4,4282453516]]],[[9,255,0.1049107142857143],[9,255,0.20535714285714282],[9,0,1]]]]],[31,[0]],[32,true,[12,1,8,[8,[0,0.5974358974358974,1],[[45,2,4.7185185185185174,1,4.7185185185185174,1],[6,2,0.9888888888888889,0.08176100628930794,0.08176100628930794],[72,2,1,1,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-112],[26,45]],[483,false,3,[1,"93c85Bp6VPo4eEk9hma96z"],[[46,null],6,0],[56,[4,4294506744]],[3,1],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[0],[3,0.4],[0],[0],[0],[[279,0.07,[3,1]]],[20,true,[16,1,[33,[[43,0.08928571428571429],[13,0.7745535714285714,[4,4291799383]],[13,0.9308035714285714,[4,4282453516]]],[[38,0],[9,255,0.1049107142857143],[9,255,0.35491071428571425],[9,0,1]]]]],[31,[0]],[32,true,[12,1,5,[8,[0,0.36923076923076925,1],[[41,2,0.1962962962962963,6.303030303030303,1,6.303030303030303,1],[6,2,0.9777777777777779,0.08176100628930791,0.08176100628930791],[72,2,1,1,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[3,3.490658503988659]],[24,[0],[0]],[19,[0],[0],[5],[5],-113],[26,47]],[54,"On Freeze Special End",38,[[292,"FreezeEnemiesEnd",-114,[1,"d2OaMO8UhH45xjR2lykswK"],[[7,"cc.ParticleSystem","play",11],[7,"cc.ParticleSystem","play",40],[7,"cc.ParticleSystem","stop",21],[7,"cc.ParticleSystem","play",41]]]],[2,"34p19Wb5dMorzI8w3tvqd3",1,0]],[54,"Theme Model Chooser",5,[[140,-115,[1,"c1TUefTzxIPrMSgt10gphd"],[26,28,30],48]],[2,"cafIJQLFZIiKGYvDQPvYpP",1,0]],[417,8,true,[1,"aczLH8SQxPHL8HRGAM3Qqt"],[[153,"925cc7HsYRKfKoUI6HIv/Em","play"]],[1,0,0,360]],[417,16,true,[1,"aczLH8SQxPHL8HRGAM3Qqt"],[[153,"925cc7HsYRKfKoUI6HIv/Em","play"]],[1,0,0,-360]]],0,[0,-1,22,0,-2,23,0,-3,24,0,-4,25,0,-5,27,0,-6,29,0,-7,31,0,13,71,0,13,54,0,13,71,0,13,32,0,13,72,0,13,72,0,13,32,0,2,1,0,0,1,0,-1,2,0,-2,5,0,-3,20,0,-4,39,0,-1,52,0,33,52,0,0,2,0,0,2,0,-1,12,0,-2,22,0,-3,23,0,-4,24,0,-5,25,0,-6,7,0,-7,8,0,-8,9,0,-9,10,0,-10,16,0,-1,67,0,-2,68,0,-1,42,0,-2,21,0,-3,43,0,-4,44,0,-5,45,0,-6,46,0,0,4,0,3,4,0,3,4,0,0,4,0,3,4,0,0,4,0,0,4,0,-1,53,0,-2,33,0,7,5,0,-4,34,0,-5,55,0,-6,70,0,-1,48,0,-1,49,0,-1,50,0,-1,51,0,-1,60,0,-1,40,0,-2,41,0,0,12,0,0,12,0,-1,26,0,-2,28,0,-3,30,0,-1,56,0,-2,37,0,-3,38,0,-1,62,0,2,22,0,2,23,0,2,24,0,2,25,0,-1,27,0,2,27,0,-1,29,0,2,29,0,-1,31,0,2,31,0,-1,54,0,0,34,0,0,35,0,0,36,0,-1,47,0,-1,57,0,-2,69,0,-1,58,0,-1,59,0,-1,61,0,-1,63,0,-1,64,0,-1,65,0,-1,66,0,0,47,0,4,48,0,4,49,0,4,50,0,4,51,0,0,56,0,0,57,0,4,58,0,4,59,0,4,60,0,4,61,0,4,62,0,4,63,0,4,64,0,4,65,0,4,66,0,4,67,0,4,68,0,0,69,0,0,70,0,9,1,3,7,39,4,7,12,11,7,39,32,0,53,35,7,55,36,7,37,115],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,52],[-1,10,-1,10,8,11,8,11,8,11,8,11,-1,5,-1,5,-1,5,8,11,8,11,8,11,-1,-2,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,34,26],[380,32,381,32,63,1,382,1,383,1,384,1,91,72,91,72,4,3,63,1,81,12,82,12,163,164,7,6,92,73,184,3,7,6,7,6,33,29,7,6,42,39,184,3,92,73,92,73,24,385]],[[{"name":"UI_LifeCube Details","rect":{"x":7,"y":7,"width":20,"height":20},"offset":{"x":0,"y":0},"originalSize":{"width":34,"height":34},"rotated":false,"capInsets":[13,13,7,7],"packable":true}],[2],0,[0],[21],[386]],[[[50,"SM_TowerBullziBody_01"],[195,"SM_TowerBullziBody_01",[-2],[2,"6bEJXm3ENa5ZOriZO+0Lz9",-1,0],[1,2000,0,0]],[53,"SM_TowerBullziBody_01",1,[[52,-3,[1,"853BuGPRRQ2oL14CCvM0kL"],[0],[34],1]],[2,"e2BArGLdFbrorm0OZN+vwY",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[1,173]],[[[50,"SM_Tower0MG4Body_01"],[195,"SM_Tower0MG4Body_01",[-2],[2,"06VFwTsJJRM4OSJg2XW4Q9",-1,0],[1,2000,0,0]],[53,"SM_Tower0MG4Body_01",1,[[52,-3,[1,"9bOQ2QYGtZs4WzqtGYB9n9"],[0],[34],1]],[2,"26PODSVIdRU55mar2WcIzo",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[1,185]],[[[112,"0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[30,12],[44,25]],[[[63,"SM_TowerH311Body_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",3601853256,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":48624,"length":13128,"count":3282,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":48624,"count":1013,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.28420889377593994,-0.3207150399684906,-0.0066055720672011375],"maxPosition",8,[1,0.28420889377593994,0.2569875419139862,0.40154215693473816]]],-1],0,0,[],[],[]],[[[62],[47,"SM_TowerH311Body_01",[-2],[2,"76kmy9MSZU7qIHreg7REJV",-1,0]],[53,"SM_TowerH311Body_01",1,[[52,-3,[1,"d5Ph66/6xbPK4Q72/PB8zz"],[0],[34],1]],[2,"baQ2X4AqJelaVJs15lbapQ",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[387,169]],[[[112,"0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4294967295],"mainTexture",6,0]],11]]],0,0,[0,0],[30,12],[18,25]],[[[50,"LevelConstructor"],[115,"LevelConstructor",[[620,true,2,-2,[1,"3f3eKIpuFB765uPO2vgSSE"],[0,1,2,3,4],5,6]],[2,"6e1KAM02FA0aLvlHvC21gw",-1,0]]],0,[0,2,1,0,0,1,0,9,1,2],[0,0,0,0,0,0,0],[-1,-2,-3,-4,-5,67,68],[388,389,390,391,392,393,394]],[[[62],[47,"SM_EndBlock_03",[-2],[2,"baVlE0TcVebKnvsHiGIVYd",-1,0]],[53,"SM_EndBlock_03",1,[[52,-3,[1,"70ayJ71XlU96/U8xl8cilw"],[0],[34],1]],[2,"4aIKWpIYBXXrkkUmmbhU+j",1,0],[3,-0.7071067811865455,5.3385076829104015e-8,5.3385076829104015e-8,0.7071067811865455],[1,-89.99999999999999,0.00000865142202753775,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[395,396]],[[[57,".bin",3769852236,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":960,"length":360,"count":90,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":960,"count":20,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.249710351228714,-0.24971024692058563,-0.40000003576278687],"maxPosition",8,[1,0.24971038103103638,0.24971021711826324,0.8425394892692566]]],-1],0,0,[],[],[]],[[[63,"SM_EndBlock_03__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[149,[[150,[120,[-16,-17,-18,-19,-20,-21,-22,-23,-24],[[84,0,false,-5,-4,[[91,"clickMenu"]]],[84,0,false,-7,-6,[[91,"clickPlay"]]],[84,0,false,-9,-8,[[91,"clickReplay"]]],[193,0,-11,-10,[[91,"victory"]]],[193,0,-13,-12,[[91,"defeat"]]],[121,-15,-14]],-3,-2,-1]]],[{},"clickPlay",4,[113,2],"clickReplay",4,[113,2],"clickMenu",4,[113,2],"victory",4,[409],"defeat",4,[409]]],[65,"Any"],[216,"Empty"],[65,"Entry"],[65,"Exit"],[71,"Rewards_Intro",[75,0]],[71,"Rewards_IntroDefeat",[75,1]],[71,"Rewards_ExitMenu",[75,2]],[71,"Rewards_ExitReplay",[75,3]],[71,"Rewards_ExitPlay",[75,4]]],0,[0,22,1,0,23,4,0,24,3,0,14,7,0,15,1,0,14,9,0,15,1,0,14,8,0,15,1,0,14,5,0,15,2,0,14,6,0,15,2,0,14,2,0,15,3,0,-1,3,0,-2,4,0,-3,1,0,-4,5,0,-5,6,0,-6,7,0,-7,8,0,-8,9,0,-9,2,24],[0,0,0,0,0],[16,16,16,16,16],[129,77,397,398,130]],[[[50,"P-Syndicate"],[185,"P-Syndicate",[[-12,-13,[80,"Events",-15,[2,"d95EadoVJHU5W5txftTQiE",-14,0]],-16],1,1,4,1],[[-7,[55,-8,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-9,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-10,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-11,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],1,4,4,4,4],[86,"c46/YsCPVOJYA4mWEpNYRx",-6,0,[[116,["_uiFillbar"],-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]],[74,["_uiFillbar"],-5,-4,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[47,"VFX",[-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29],[2,"90jBanitFHibPF3jtQV8ng",1,0]],[256,"Art",1,[-34,-35,-36,2],[[[88,true,-30,[1,"16mUt5j0BPfLyhp6c95pwE"],[32,33,34],35],-31,[141,-33,[1,"ea2pe+KTdM+qjpdTLo7rqT"],-32]],4,1,4],[2,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[35,"Scripts",1,[-37,-38,-39,-40,-41],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[46,"Movement",4,[-42],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-50,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-49]]]],[[14,"P-HP-Bar",["_name"],-43],[10,["_lpos"],-44,[1,207,448.00000000000006,0]],[10,["_lrot"],-45,[3,0,0,0,1]],[10,["_euler"],-46,[1,0,0,0]],[14,"Art",["_name"],-47],[10,["_lpos"],-48,[1,0,0,0]]]],36]],[36,0,null,3,[29,"2axzyI7CVcfZRup1kGtapw",-56,[69,"04f7DNNP5MRY95F4/mujU5",1,[[67,[4,["2axzyI7CVcfZRup1kGtapw"]],[[55,-55,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[14,"SM_Model",["_name"],-51],[10,["_lpos"],-52,[1,0,0,0]],[10,["_lrot"],-53,[3,0,0,0,1]],[10,["_euler"],-54,[1,0,0,0]],[40,["_materials","0"],[4,["b6fnLcG+tQcbB2kGlXABH/"]],3],[28,"SM_Model",["_name"],[4,["6fTB9CmINSd6bm5DKa9NOW"]]]]],2]],[4,["2axzyI7CVcfZRup1kGtapw"]],[64,"VFX_SprayOut",512,2,[-57],[2,"e6CVGfL3JA+JaqGdCkt+f+",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Spawn",2,[-58,-59],[2,"b4fgk3rG5Ly7ABVv4cYTe2",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[94,"VFX-BossExplosion",512,2,[-60],[2,"b5AdMuMwFAhYuH4grqv2c6",1,0]],[73,0.2,false,false,12,[1,"daEJ0d3tdFe4nu4UlSxTav"],[[8,null],6,0],[5],[3,3],[0],[0],[0],[0],[0],[135,3],[3,1.8],[3,0.2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.08258928571428571],[13,0.9241071428571428,[4,4289835441]],[13,0.9620535714285714,[4,4281084972]]],[[9,255,0.6004464285714286],[9,0,1]]]]],[31,[0]],[78,true,true,[12,1,20,[8,[0,0.6948717948717948,1],[[45,2,2.839080459770115,1,2.839080459770115,1],[6,2,0.9333333333333333,0.4622222222222221,0.4622222222222221],[72,2,1,1,1]]]],[12,1,6,[8,[0,0.7974358974358975],[[136,2,2,0.05925925925925926,-0.015204678362573122,0.09771705989047173,-0.015204678362573122],[137,2,1,0.9962962962962963,0.0288636426001776,0.0288636426001776,0.09792722000142738]]]],[12,1,5,[8,[0,0.8051282051282052],[[136,2,2,1,-0.015285126396237575,0.09720572269540514,-0.015285126396237575],[137,2,1,0.03333333333333333,-0.007150715071507141,-0.007150715071507141,0.10365593276852825]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-61],[26,9]],[64,"VFX-Flash",512,2,[-62],[2,"d9Bq/7YalPjo1+vQefV++P",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[73,0.2,false,false,14,[1,"f4jPug8SJLjJPqpTXb7EUR"],[[10,null],6,0],[5],[3,1.5],[0],[0],[0],[0],[0],[0],[3,1.7],[3,0.2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.44642857142857145],[9,0,1]]]]],[77,0,[3,1]],[32,true,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-63],[26,11]],[60,1,false,false,9,[1,"305ctJTvRCdL5upBB5chbY"],[12],[5],[23,3,0.1,0.4],[0],[0],[23,3,2,10],[0],[0],[0],[3,1.7],[3,1],[0],[83,80],[0],[[25,[3,50]]],[20,true,[16,1,[37,[[38,255],[9,255,0.22767857142857142],[9,0,1]]]]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[110,true,[0],[0],[0],[30,1,[8,[0,1],[[11,2,1],[6,2,0.037037037037037035,-1.54074074074074,-1.54074074074074]]]]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-64],[99,1,0.1,13]],[94,"VFX_Explosion2",512,2,[-65],[2,"2ehkLq94ZEHrpcSb7GIlcY",1,0]],[73,1.5,false,false,17,[1,"970lFOmnFFnIcWcE0w5X1M"],[[14,null],6,0],[56,[4,4294506744]],[3,1],[0],[0],[0],[0],[0],[135,3],[3,2],[3,1.5],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.033482142857142856],[43,0.078125],[13,0.18973214285714285,[4,4288716960]],[13,0.8459821428571428,[4,4280624421]]],[[9,255,0.1049107142857143],[9,255,0.21651785714285715],[9,0,1]]]]],[31,[0]],[32,true,[12,1,20,[8,[0,0.38461538461538464,1],[[45,2,6.259259259259259,1,6.259259259259259,1],[6,2,0.9148148148148149,0.4622222222222221,0.4622222222222221],[72,2,1,1,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-66],[26,15]],[64,"VFX_SprayOut2",512,2,[-67],[2,"afZOLQYLNEbYPwmE9QrjwZ",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,6,false,false,19,[1,"313gHG2nlKr4KvKrWBlJUl"],[16],[5],[23,3,0.1,0.4],[0],[0],[23,3,10,50],[0],[0],[0],[3,2],[3,1],[0],[83,80],[0],[[25,[3,50]]],[20,true,[16,1,[37,[[38,255],[9,255,0.22767857142857142],[9,0,1]]]]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[110,true,[0],[0],[0],[30,1,[8,[0,0.27708427247702977,0.5230769230769231,1],[[11,2,1],[6,2,0.30922275440798175,-2.3928348401596575,-2.3928348401596575],[6,2,0.05925925925925926,-0.21802935010482188,-0.21802935010482188],[11,2,0.020792806452028488]]]]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-68],[99,1,0.1,17]],[64,"VFX-ScreenTone",512,2,[-69],[2,"ce/r1fwIFGGbWh5eOkxfPV",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[160,false,false,21,[1,"a7Afh6es9D87c240AyyIdD"],[[18,null],6,0],[56,[4,1811939327]],[3,100],[0],[0],[0],[0],[0],[0],[3,2],[3,1],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.44642857142857145],[9,0,1]]]]],[77,0,[3,1]],[49,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-70],[26,19]],[94,"VFX-CircleIn",512,2,[-71],[2,"1bRG4wtjhGZY9g+XDhEBFP",1,0]],[73,0.4,false,false,23,[1,"18jtz8YBtEHKCBQ8fOY4Jc"],[[20,null],6,0],[5],[3,0.5],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[3,0.1],[3,0.4],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[13,0.12946428571428564,[4,4280229663]],[13,0.7745535714285714,[4,4289703855]],[43,0.9464285714285714]],[[38,0],[9,255,0.5357142857142858],[9,255,1]]]]],[31,[0]],[32,true,[12,1,20,[8,[0,1],[[41,2,0.9703703703703702,0.050682261208577085,1,0.050682261208577085,1],[45,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-72],[26,21]],[94,"VFX-RingIn",512,2,[-73],[2,"f0vxCVNUJC8oKSfWKFTFjH",1,0]],[73,0.4,false,false,25,[1,"473fYXyUtHq6UM6WJWz6AX"],[[22,null],6,0],[5],[3,1.5],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[3,0.35],[3,0.4],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[13,0.12276785714285714,[4,4280887593]],[13,0.7745535714285714,[4,4290032820]],[43,0.9464285714285714]],[[38,0],[9,34,0.34151785714285715],[9,255,0.6941964285714286],[9,255,1]]]]],[31,[0]],[32,true,[12,1,8,[8,[0,1],[[41,2,0.9703703703703703,0.05068226120857707,1,0.05068226120857707,1],[45,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-74],[26,23]],[64,"VFX_SprayIn",512,2,[-75],[2,"06XBMJqKFGgaEawDdl2lbk",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[134,1.2,false,false,27,[1,"d6MT8T7rVDspoXd4NK+h53"],[24],[5],[3,0.2],[0],[0],[3,5],[0],[0],[0],[0],[3,0.1],[0],[12,1,80,[8,[0,0.7333333333333333],[[6,2,0.05555555555555556,2.781893004115226,2.781893004115226],[11,2,0.9925925925925926]]]],[0],[122,[5]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-76],[99,1,0.5,25]],[64,"VFX-ChargeFlash",512,2,[-77],[2,"4cGhI6TuhB/Lb8XfytKWOC",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,2,false,false,29,[1,"76CY/053xFe4hBt8F5UHja"],[26],[5],[3,0.6],[0],[0],[0],[0],[0],[0],[3,0.3],[3,2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.8191964285714286],[9,0,1]]]]],[77,0,[3,1]],[32,true,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-78],[26,27]],[64,"VFX-Sparkle",512,2,[-79],[2,"6d0LqgX3ZDdLYlGaggETsW",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[178,0.7,false,false,31,[1,"33wmev+7VHHqvhalm7l0ab"],[[28,null],6,0],[16,4,[33,[[87,[4,4294926764]],[13,0.3169642857142857,[4,4294943343]],[13,0.6517857142857143,[4,4292278146]],[13,1,[4,4284279807]]],[[38,255]]]],[23,3,0.1,1.2],[0],[0],[3,0.1],[0],[0],[0],[3,1],[3,0.15],[0],[161,30,30],[0],[20,true,[16,1,[37,[[38,0],[9,255,0.12723214285714285],[9,255,0.2879464285714286],[9,0,1]]]]],[188,true,3,2,1.2,[3,1]],[32,true,[12,1,2,[8,[0,0.12307692307692308,0.3128205128205128,0.9974358974358974],[[11,2,0.48518518518518516],[6,2,1,0.18055555555555491,0.18055555555555491],[11,2,0.5074074074074074],[11,2,0.4962962962962963]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-80],[26,29]],[64,"VFX_LightRay",512,2,[-81],[2,"d7ejQQCrZNzIkpPkZ/RWr2",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[134,1,false,false,33,[1,"29HJQiEEdCxbxPl0ZlS6ck"],[30],[5],[12,1,4,[8,[0,1],[[6,2,0.48148148148148145,1.0000000000000002,1.0000000000000002],[11,2,1]]]],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[0],[3,1],[0],[12,1,10,[8,[0,1],[[6,2,0.3555555555555555,1.9740740740740748,1.9740740740740748],[11,2,1]]]],[0],[20,true,[16,1,[37,[[38,0],[9,133,0.09375],[9,255,0.15401785714285715],[9,153,0.24330357142857142],[9,0,1]]]]],[77,0,[3,1]],[78,true,true,[0],[30,1,[8,[0,0.2717948717948718,1],[[6,2,1,-3.2828282828282838,-3.2828282828282838],[6,2,0.45925925925925926,-1.155555555555555,-1.155555555555555],[6,2,0.16666666666666666,0.03073286052009456,0.03073286052009456]]]],[12,1,2,[8,[0,0.2717948717948718,0.9923076923076923],[[6,2,0.5,2.4246031746031744,2.4246031746031744],[6,2,0.8814814814814815,0.36111111111111127,0.36111111111111127],[11,2,1]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-0.17453292519943295,0.17453292519943295]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-82],[26,31]],[46,"HP Controller",4,[-83],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[166,35,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-84],[7,"cc.ParticleSystem","play",12],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",5],[7,"cc.ParticleSystem","play",14],[7,"cc.ParticleSystem","play",9],[7,"cc.ParticleSystem","play",9],[7,"cc.ParticleSystem","play",17],[7,"cc.ParticleSystem","play",19],[7,"cc.ParticleSystem","play",21],[7,"cc.ParticleSystem","play",23],[7,"cc.ParticleSystem","play",25],[7,"cc.ParticleSystem","play",27],[7,"cc.ParticleSystem","play",29],[7,"cc.ParticleSystem","play",31],[7,"cc.ParticleSystem","play",33],[68,"2022ebMdchE2pNL1SpqTm8g","setBool","isDead,true",3]],1],[54,"On Death VFX Finished",4,[[96,-85,[1,"fe+CZItjxMyb9f2BHbTpon"],[13,15,16,18,20,22,24,26,28,30,32,34],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"b67GIBJUdN6qixP7x+E94e",1,0]],[115,"Spawn Enemies",[[191,-87,[1,"6f+qVoBZtASr10AxRy966f"],-86]],[2,"60e3j3xxFEN6sxgrUDw45N",1,0]],[105,"Temp-Model",false,3,[[79,"Sphere<ModelComponent>",-88,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",3,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,11,[1,"84KU+um7hPNYOClMRjIMmi"],[4],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-89],[26,5]],[97,0.3,false,11,[1,"d2FQc7I0tJ6JPMaHytev0l"],[[6,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-90],[26,7]],[128,3,[1,"1bJDh8y11OC66YrOHdxFCO"]],[104,5,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[46,"Stun",4,[-91],[2,"28wv4th1pNs6qDNkpOR9dx",1,0]],[117,45,[1,"92X5rq9oNDNouphSNFIziH"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",5]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",5]]],[35,"Specials",4,[38],[2,"62R6RgLjhMRberQEA4kCzJ",1,0]],[179,"Syndicate",2,1,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",5],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",35],[7,"71b59j50pJOQYyfqjE0LpJs","initialize",38]],36,44,46],[35,"UI",1,[6],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,7,0,-2,6,0,3,6,0,3,6,0,13,36,0,2,1,0,-1,48,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-2,4,0,2,1,0,7,1,0,-4,49,0,-1,11,0,-2,12,0,-3,14,0,-4,9,0,-5,17,0,-6,19,0,-7,21,0,-8,23,0,-9,25,0,-10,27,0,-11,29,0,-12,31,0,-13,33,0,0,3,0,-2,43,0,33,43,0,0,3,0,-1,39,0,-2,40,0,-3,7,0,-1,5,0,-2,35,0,-3,45,0,-4,37,0,-5,47,0,-1,44,0,1,10,0,1,10,0,1,10,0,1,10,0,1,50,0,1,50,0,17,40,0,2,6,0,1,8,0,1,8,0,1,8,0,1,8,0,0,7,0,2,7,0,-1,16,0,-1,41,0,-2,42,0,-1,13,0,4,13,0,-1,15,0,4,15,0,4,16,0,-1,18,0,4,18,0,-1,20,0,4,20,0,-1,22,0,4,22,0,-1,24,0,4,24,0,-1,26,0,4,26,0,-1,28,0,4,28,0,-1,30,0,4,30,0,-1,32,0,4,32,0,-1,34,0,4,34,0,-1,36,0,3,37,0,0,37,0,38,48,0,0,38,0,0,39,0,4,41,0,4,42,0,-1,46,0,9,1,2,7,3,6,7,49,38,7,47,91],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,43],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,-2,-3,18,8,26],[14,13,93,1,4,3,11,9,4,3,7,6,7,6,4,3,7,6,7,6,4,3,11,9,7,6,7,6,33,29,43,41,5,15,51,5,16,57]],[[[50,"SM_TowerMeteorUBody_01"],[47,"SM_TowerMeteorUBody_01",[-2],[2,"6ba5eX4SReyqm+Vbwgfquh",-1,0]],[53,"SM_TowerMeteorUBody_01",1,[[52,-3,[1,"2aeozPTBpe75ML5ovX4gHo"],[0],[34],1]],[2,"951PfNhQddLokvIk63kqxu",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[1,179]],[[[57,".bin",3873407985,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":960,"length":360,"count":90,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":960,"count":20,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.48000001907348633,-0.47999992966651917,-0.5],"maxPosition",8,[1,0.47999992966651917,0.48000001907348633,0.699999988079071]]],-1],0,0,[],[],[]],[[[63,"SM_BlockHigh_02__0.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[62],[47,"SM_BlockHigh_02",[-2],[2,"73iHBgzzVTcYYBmRlHhAuY",-1,0]],[53,"SM_BlockHigh_02",1,[[52,-3,[1,"a6Qiv9LN5Y0ok4uMtmSOe6"],[0],[34],1]],[2,"c3I7ToK0NTa66xLQFxEnev",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[399,400]],[[[50,"P-Gun-Tower"],[306,"P-Gun-Tower",32,[[-11,-12,[80,"Events",-14,[2,"ef4CiMUqFFBLxbigVGcbkS",-13,0]],-15,-16],1,1,4,1,1],[-10],[470,"c7FBgV+GNP8JXw9YieWPKB",[],-9,0,[-1,-2,-3,-4,-5,-6,-7,-8]]],[350,"Tower Gun Head Pivot",[-17,-18,-19,-20,-21,-22,-23,-24],[2,"95CaMLvgdP0Y7kF1XtNNYe",1,0],[1,0,0.30000001192092896,0],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[35,"Scripts",1,[-25,-26,-27,-28,-29,-30,-31,-32],[2,"395/jqomdNs4i+MZIAv9Bl",1,0]],[54,"Tower Attack",3,[[621,1,1.5,1,4,-39,[1,"85IMpye2dCJbYZCei/2DoT"],1,-38,-37,[-34,-35,-36],-33,28]],[2,"f40ywYz1xDCq70ENky8ahk",1,0]],[47,"Head Tower Gun",[2,-40],[2,"23qMfBgI5KhaWK7bqmOuca",1,0]],[363,"Gun Tower Model",[[5,-41,[80,"Temp Head 2",-42,[2,"b2JisrljVNLprLAj5XAYrs",1,0]],[80,"Temp Head 3",-43,[2,"8eWXrvALRJQ6h22lIYR5cC",1,0]]],1,1,4,4],[2,"78vTfIwKVC3raO7/7FZFL5",1,0]],[36,0,null,2,[29,"1bEwzooBRYiLITAV26DhPq",-48,[42,"71xxc/DbhD0rRu5h/PIdOT",1,[[14,"SM_TowerGunBody_01",["_name"],-44],[10,["_lpos"],-45,[1,0,0,0]],[10,["_lrot"],-46,[3,0,0,0,1]],[10,["_euler"],-47,[1,0,0,0]],[40,["_materials","0"],[4,["eee7bsTeFUS4J0Fkyz/23b"]],1]]],0]],[36,0,null,2,[29,"4d/LLVKgJfRaWh6CVtkvdN",-54,[42,"04rw3Sv7hAxqXQpK9ufFuC",1,[[14,"SM_Tower0MG2Body_01",["_name"],-49],[10,["_lpos"],-50,[1,0,0,0]],[10,["_lrot"],-51,[3,0,0,0,1]],[10,["_euler"],-52,[1,0,0,0]],[40,["_materials","0"],[4,["91rnZr2NlU+5mkmycELrbU"]],3],[14,false,["_active"],-53]]],2]],[4,["4d/LLVKgJfRaWh6CVtkvdN"]],[36,0,null,2,[29,"6bEJXm3ENa5ZOriZO+0Lz9",-60,[42,"a1/GH8p1BCb582GfDd6CUW",1,[[14,"SM_TowerBullziBody_01",["_name"],-55],[10,["_lpos"],-56,[1,0,0,0]],[10,["_lrot"],-57,[3,0,0,0,1]],[10,["_euler"],-58,[1,0,0,0]],[40,["_materials","0"],[4,["853BuGPRRQ2oL14CCvM0kL"]],5],[14,false,["_active"],-59]]],4]],[4,["6bEJXm3ENa5ZOriZO+0Lz9"]],[36,0,null,2,[29,"06VFwTsJJRM4OSJg2XW4Q9",-66,[42,"a8inBhb/xEVa49txIEipo9",1,[[14,"SM_Tower0MG4Body_01",["_name"],-61],[10,["_lpos"],-62,[1,0,0,0]],[10,["_lrot"],-63,[3,0,0,0,1]],[10,["_euler"],-64,[1,0,0,0]],[40,["_materials","0"],[4,["9bOQ2QYGtZs4WzqtGYB9n9"]],7],[14,false,["_active"],-65]]],6]],[4,["06VFwTsJJRM4OSJg2XW4Q9"]],[36,0,null,2,[29,"efp8IlO8deIZfWSlH1z7o0",-72,[42,"37C3qQMoZCnp8IHjSfkQgi",1,[[14,"SM_Tower3MGvBody_01",["_name"],-67],[10,["_lpos"],-68,[1,0,0,0]],[10,["_lrot"],-69,[3,0,0,0,1]],[10,["_euler"],-70,[1,0,0,0]],[40,["_materials","0"],[4,["49Ry8eFLhb25C1Q8wGk6C1"]],9],[14,false,["_active"],-71]]],8]],[4,["efp8IlO8deIZfWSlH1z7o0"]],[36,0,null,2,[29,"d2WuMenSdQdr89Jfpld4zw",-78,[42,"21v6MpRr9PiKyZSFSi56V3",1,[[14,"SM_TowerTunnelerBody_01",["_name"],-73],[10,["_lpos"],-74,[1,0,0,0]],[10,["_lrot"],-75,[3,0,0,0,1]],[10,["_euler"],-76,[1,0,0,0]],[40,["_materials","0"],[4,["9dDxbuCdVYVYsfEinJuqgr"]],11],[14,false,["_active"],-77]]],10]],[4,["d2WuMenSdQdr89Jfpld4zw"]],[36,0,null,2,[29,"754aHt1OpZU5MrqxM/Ip4m",-84,[42,"e03iMJEBdKb5MNmTaMCbd1",1,[[14,"SM_Tower01HKOBody_01",["_name"],-79],[10,["_lpos"],-80,[1,0,0,0]],[10,["_lrot"],-81,[3,0,0,0,1]],[10,["_euler"],-82,[1,0,0,0]],[40,["_materials","0"],[4,["46S3F1J79Rz4XvfNv5iTfa"]],13],[14,false,["_active"],-83]]],12]],[4,["754aHt1OpZU5MrqxM/Ip4m"]],[159,"Physics",32,1,[[-85,[328,4,-86,[1,"97e/OxmxpCU4rWbyCxoizi"]],[622,1.5,-88,[1,"77wdxGna1B7bf0InuKhifc"],-87]],1,4,4],[2,"9e2QPGtlxGhY+FpgLqB+0P",1,0],[1,0,0.25,0]],[270,"Art",1,[6],[[316,-89,[1,"1cExk6cY1DqJFxzG81z79Q"],[26],27]],[2,"f6510qCkdPhZ5QPlFG7sjV",1,0],[1,0,0.25,0]],[4,["1bEwzooBRYiLITAV26DhPq"]],[465,"Bullet_Muzzle_Flash",512,[-90,-91],[2,"b9GONXlARCiIUvDvMdPHvS",1,0],[1,0,0.472,-0.32],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[4,["a6UoiMmTtU6YsbaNPx5rqf"]],[456,"Shoot VFX",3,[[-92,[520,[null],-93,[1,"a88Ndd09RINaAOp8kwAraC"]]],1,4],[2,"fflr5KflJDBpUFihWmy7fH",1,0]],[337,"guntower",2,"guntower",0,1,[1,"92UYE5HlRLmKMlLGBWVR4U"],[[158,"guntower","guntower-plus",4,"Level Up (4)",7],[158,"guntower-plus","0.mg-2",5,"0.MG-2 (5)",8],[158,"guntower-plus","bullz-i",5,"Bullz-i (5)",10],[158,"0.mg-2","0.mg-2-plus",6,"Level Up (6)",8],[158,"0.mg-2-plus","0.mg-4",8,"0.MG-4 (8)",12],[158,"0.mg-2-plus","3.mg-v",8,"3.MG-V (8)",14],[158,"0.mg-4","0.mg-4-plus",9,"Level Up (9)",12],[158,"3.mg-v","3.mg-v-plus",9,"Level Up (9)",14],[158,"bullz-i","bullz-i-plus",7,"Level Up (7)",10],[158,"bullz-i-plus","01.hko",8,"01.HKO (8)",18],[158,"bullz-i-plus","tunneller",8,"Tunneller (8)",16],[158,"01.hko","01.hko-plus",9,"Level Up (9)",18],[158,"tunneller","tunneller-plus",9,"Level Up (9)",16],[114,"-","guntower",-1,-1,"-",7]],[[7,"d99f8q9JitMHpjrz0o8jKu2","towerDestroyed",4]]],[35,"VFXs",5,[-94,-95],[2,"3dcqfgoEpJkJpSG4Rsr+t+",1,0]],[35,"Muzzles",27,[23,-96],[2,"0avaJ8IONPGIFZV6qcF5Mu",1,0]],[240,"Bullet_Muzzle-Square",28,[-97],[2,"41t1ushhRA0I36nkzy0hCi",1,0],[1,0,0.472,-0.32],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[351,"VFX_TowerUpgrade",27,[-98,-99],[2,"bb7OGdKoNI7o98RO+UeI9k",1,0],[1,0,0.554,0]],[199,false,[1,"16eTtTPcRDmJOGIJcRV5eD"],[[20,null],6,0],[56,[4,3668826087]],[23,3,0.03,0.08],[0],[0],[23,3,0.2,1.5],[0],[0],[44,3,1.5707963267948966],[0],[23,3,0.9,1.6],[0],[3,3],[0],[20,true,[278,3,[37,[[38,0],[9,255,0.04910714285714286],[9,0,1]]],[37,[[38,0],[9,255,0.06696428571428571],[9,0,1]]]]],[309,true,0.6,0.5,0,[0],[1,0,-0.2,0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-1.7453292519943295,1.7453292519943295]],[24,[0],[0]],[19,[0],[0],[5],[5],-100],[26,21]],[199,false,[1,"46QAUjonNOLJaQmvk0pLqe"],[[22,null],6,0],[277,2,[4,2285688290],[4,2318556644]],[23,3,2,3],[0],[0],[0],[0],[0],[0],[0],[3,3],[0],[3,2],[0],[20,true,[16,1,[37,[[38,255],[9,0,1]]]]],[31,[0]],[32,true,[30,1,[8,[0,0.41794871794871796,1],[[6,2,0.3814814814814815,0.4896421845574388,0.4896421845574388],[6,2,0.8444444444444444,0.5947712418300657,0.5947712418300657],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-101],[26,23]],[82,0,null,[29,"a6UoiMmTtU6YsbaNPx5rqf",-102,[42,"24UEq9OedLSZNel7quMmk8",1,[[14,"SM_TowerBase_01",["_name"],24],[10,["_lpos"],24,[1,0,0,0]],[10,["_lrot"],24,[3,0,0,0,1]],[10,["_euler"],24,[1,0,0,0]],[40,["_materials","0"],[4,["c8x41wezhYTop9GywitTd7"]],25]]],24]],[93,true,3,20,[1,"4eMDs4lP1E65tyxVoUMp7G"]],[115,"Shoot SFX",[[144,"sfx-towers-gun-shoot",-103,[1,"9c7BOtz65ChqCAUMxuzOr6"]]],[2,"9aMoCVHpxPfLN1d1eK3uCJ",1,0]],[432,"Sniper Raycast Holder",false,32,[-104],[2,"8aqJov/UpL94/gpei7S0vJ",1,0],[1,0,1,0]],[146,"Debug",32,1,[-105,36],[2,"c5P03BmLRMW7wv+cKS4MkT",1,0]],[433,"Bullet Spawn Position",32,2,[2,"d7JX2AyHlGkrzxY8poc3iP",1,0],[1,0,0.172,0.318],[3,0,1,0,-6.123233995736766e-17],[1,0,-180,0]],[484,true,0.2,false,false,1,23,[1,"13qeHeZOlEzISoPQooC+Rd"],[[14,null],6,0],[5],[3,1],[3,0.5],[0],[0],[0],[0],[0],[0],[3,0.2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.296875],[13,0.4151785714285714,[4,4293694037]],[13,0.8191964285714286,[4,4283436577]]],[[38,255],[9,182,0.5758928571428572],[9,0,1]]]]],[31,[0]],[78,true,true,[30,1,[8,[0,0.30256410256410254,1],[[6,2,0.0962962962962963,2.757575757575757,2.757575757575757],[6,2,0.7777777777777778,0.9883040935672519,0.9883040935672519],[11,2,1]]]],[12,1,2,[8,[0,0.4948717948717949,1],[[45,2,0.21241830065359474,1,0.21241830065359474,1],[6,2,0.5777777777777777,1.89272030651341,1.89272030651341],[41,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[12,1,2.5,[8,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[41,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[6,2,0.8925925925925926,4.513888888888884,4.513888888888884],[6,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[41,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-106],[26,15]],[485,false,0.2,false,false,1,23,[1,"abbnJPEiVBYoHm91Jzs4Ma"],[[16,null],6,0],[5],[3,0.8],[0],[0],[0],[0],[0],[3,0.7853981633974483],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.296875],[13,0.4151785714285714,[4,4293694037]],[13,0.8191964285714286,[4,4283436577]]],[[38,255],[9,182,0.16294642857142866],[9,0,1]]]]],[31,[0]],[32,true,[30,1,[8,[0,0.3717948717948718,1],[[6,2,0.04814814814814815,2.757575757575757,2.757575757575757],[6,2,0.6851851851851852,0.9883040935672519,0.9883040935672519],[11,2,1]]]],[12,1,2,[8,[0,0.4948717948717949,1],[[45,2,0.21241830065359474,1,0.21241830065359474,1],[6,2,0.5777777777777777,1.89272030651341,1.89272030651341],[41,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[12,1,2.5,[8,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[41,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[6,2,0.8925925925925926,4.513888888888884,4.513888888888884],[6,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[41,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-107],[26,17]],[130,0.2,false,false,1,29,[1,"bbZPx2kjxCMJgS5/iCI9Gj"],[[18,null],6,0],[5],[3,0.8],[0],[0],[0],[0],[0],[3,0.7853981633974483],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.296875],[13,0.4151785714285714,[4,4293694037]],[13,0.8191964285714286,[4,4283436577]]],[[38,255],[9,182,0.16294642857142866],[9,0,1]]]]],[31,[0]],[32,true,[30,1,[8,[0,0.3717948717948718,1],[[6,2,0.04814814814814815,2.757575757575757,2.757575757575757],[6,2,0.6851851851851852,0.9883040935672519,0.9883040935672519],[11,2,1]]]],[12,1,2,[8,[0,0.4948717948717949,1],[[45,2,0.21241830065359474,1,0.21241830065359474,1],[6,2,0.5777777777777777,1.89272030651341,1.89272030651341],[41,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[12,1,2.5,[8,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[41,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[6,2,0.8925925925925926,4.513888888888884,4.513888888888884],[6,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[41,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-108],[26,19]],[46,"VFX_TowerGlow",30,[31],[2,"6b1barr/xKZawpl1lNYEkz",1,0]],[46,"VFX_TowerDots",30,[32],[2,"8elJXrPWlKLouESC8nGm7C",1,0]],[35,"Base Gun Tower",6,[33],[2,"66wpTYMdJAeo7/giEMoibn",1,0]],[623,0.15,25,[1,"2dThepwftABpuLugIaRmoX"],26,[[131,"guntower",29],[131,"0.mg-2",30],[131,"0.mg-4",31],[131,"3.mg-v",32],[131,"bullz-i",33],[131,"01.hko",34],[131,"tunneller",35]],38,[[7,"cc.ParticleSystem","play",23],[7,"cc.ParticleSystem","play",29],[7,"cc.Animation","play",21],[7,"ac879rTendCEbpZWFz/jexs","playSFX",35]]],[35,"Audio",3,[35],[2,"6dvjS9zONAZ409hFK9MfyQ",1,0]],[268,[1,"3fJatBO/JI/Zd6RX24MIdg"],5],[46,"Look At Target",3,[47],[2,"da30qhiqZKUZjkhX+DhdMH",1,0]],[268,[1,"1eDzRe0mZItLjfyKoTzmdV"],5],[46,"TEMP Tower Head 2",3,[49],[2,"72wUVS6zFPuJTGA2AUpFIv",1,0]],[268,[1,"ceHVyvmlpOGZS5QpTwCZ2I"],5],[46,"TEMP Tower Head 3",3,[51],[2,"65e9jtD6pKv4r1cuCOXpcK",1,0]],[255,"Radius Sphere",false,32,37,[[79,"Sphere<ModelComponent>",-109,[1,"0cZhNLD85HH5MFbxfIpZNi"],[36],[34],37]],[2,"d96R4JVqFFAYKUs3lr7ZMs",1,0],[1,6,6,6]],[167,"Cube",32,36,[[79,"Cube<ModelComponent>",-110,[1,"9dTYUSyh1PMZqp64FIlNzn"],[38],[34],39]],[2,"6aWik0/UdP+JlVbQck/GJW",1,0],[1,0,0,-1],[1,0.05,0.05,2]],[54,"Upgrade Handler",3,[[624,-111,[1,"f24lX7DxFEOpXeFzB2hlh9"],26,[[7,"d99f8q9JitMHpjrz0o8jKu2","setDamage",4]],[[7,"d99f8q9JitMHpjrz0o8jKu2","setShootFrequency",4]],[[7,"d99f8q9JitMHpjrz0o8jKu2","setRange",4],[7,"da0622vv4BBe4nNeJ2WOyKd","setRadius",20]],[[7,"d99f8q9JitMHpjrz0o8jKu2","setCCTargets",4]],[[7,"d99f8q9JitMHpjrz0o8jKu2","setBulletPenetration",4],[7,"d955ajLtu5AIoknVee9/pvJ","setBulletPenetration",25]]]],[2,"56+c2O1KZNSq0gltfznOx8",1,0]],[54,"Aura VFX Controller",3,[[338,-112,[1,"32nfcT9KxN3IhJnpkeOz2R"],26,[31,32]]],[2,"ef0zb3HtdLTJ3Tz/4EDrBi",1,0]]],0,[0,-1,7,0,-2,8,0,-3,10,0,-4,12,0,-5,14,0,-6,16,0,-7,18,0,-8,33,0,2,1,0,-1,26,0,-1,21,0,-2,3,0,2,1,0,7,1,0,-4,20,0,-5,37,0,-1,7,0,-2,8,0,-3,10,0,-4,12,0,-5,14,0,-6,16,0,-7,18,0,-8,38,0,-1,4,0,-2,55,0,-3,25,0,-4,48,0,-5,50,0,-6,52,0,-7,56,0,-8,46,0,69,36,0,-1,47,0,-2,49,0,-3,51,0,44,45,0,45,34,0,0,4,0,-2,27,0,-2,44,0,7,6,0,7,6,0,1,22,0,1,22,0,1,22,0,1,22,0,2,7,0,1,9,0,1,9,0,1,9,0,1,9,0,1,9,0,2,8,0,1,11,0,1,11,0,1,11,0,1,11,0,1,11,0,2,10,0,1,13,0,1,13,0,1,13,0,1,13,0,1,13,0,2,12,0,1,15,0,1,15,0,1,15,0,1,15,0,1,15,0,2,14,0,1,17,0,1,17,0,1,17,0,1,17,0,1,17,0,2,16,0,1,19,0,1,19,0,1,19,0,1,19,0,1,19,0,2,18,0,-1,34,0,0,20,0,49,34,0,0,20,0,0,21,0,-1,39,0,-2,40,0,-1,45,0,0,25,0,-1,28,0,-2,30,0,-2,29,0,-1,41,0,-1,42,0,-2,43,0,4,31,0,4,32,0,2,33,0,0,35,0,-1,54,0,-1,53,0,4,39,0,4,40,0,4,41,0,0,53,0,0,54,0,0,55,0,0,56,0,9,1,2,7,5,5,7,6,6,7,21,23,7,28,31,0,42,32,0,43,33,7,44,35,7,46,36,7,37,47,0,48,49,0,50,51,0,52,112],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26],[8,11,8,11,8,11,8,11,8,11,8,11,8,11,-1,5,-1,5,-1,5,-1,5,-1,5,8,11,-1,18,46,31,31,31,31,31,31,31,-1,10,-1,10,39],[401,1,402,1,403,1,404,1,405,1,406,1,407,1,91,72,42,39,42,39,4,3,4,3,66,1,94,94,186,408,409,410,411,412,413,414,89,13,415,32,45]],[[[50,"SM_TowerThunderBBody_01"],[47,"SM_TowerThunderBBody_01",[-2],[2,"9aoAAYJKJR56nsyDVR3xr1",-1,0]],[53,"SM_TowerThunderBBody_01",1,[[52,-3,[1,"a174aNwnFUq6B+C8hupOtt"],[0],[34],1]],[2,"71MWaMDMlRTpG7nD0b8naJ",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[1,187]],[[[168,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainColor",8,[4,4281094263]]],11]]],0,0,[0],[12],[34]],[[[50,"P-BossTank"],[125,"P-BossTank",[[-16,-17,[80,"Events",-19,[2,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[179,"BossTank",2,-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[55,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[47,"VFX",[-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33],[2,"f8ioSR2nhAnp4NBck49gbA",1,0]],[256,"Art",1,[-38,-39,-40,2],[[[315,false,true,-34,[1,"16mUt5j0BPfLyhp6c95pwE"],[32,33,34],35],-35,[141,-37,[1,"73KBPKSapEbocHClbC5F+r"],-36]],4,1,4],[2,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[124,"Movement",[-41],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[35,"Scripts",1,[4,-42,-43,-44],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[36,0,null,3,[29,"cd95syhwpUepqE3C3l751A",-46,[69,"bfLKkf2BRC4rp9scg9oa1f",1,[[67,[4,["cd95syhwpUepqE3C3l751A"]],[[55,-45,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[28,"SM_Model",["_name"],[4,["cd95syhwpUepqE3C3l751A"]]],[22,["_lpos"],[4,["cd95syhwpUepqE3C3l751A"]],[1,0,0,0]],[22,["_lrot"],[4,["cd95syhwpUepqE3C3l751A"]],[3,0,0,0,1]],[22,["_euler"],[4,["cd95syhwpUepqE3C3l751A"]],[1,0,0,0]],[40,["_materials","0"],[4,["e25UQYor5ZNbIp+/V5aQLy"]],3],[28,"SM_Model",["_name"],[4,["8fxyDu/BpQqqQZ5UcV64Vs"]]]]],2]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-54,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-53]]]],[[14,"P-HP-Bar",["_name"],-47],[10,["_lpos"],-48,[1,207,448,0]],[10,["_lrot"],-49,[3,0,0,0,1]],[10,["_euler"],-50,[1,0,0,0]],[14,"Art",["_name"],-51],[10,["_lpos"],-52,[1,0,0,0]],[22,["_contentSize"],[4,["c64LiUsQNM4LjiTXqu/AKi"]],[5,414,896]]]],36]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Spawn",2,[-55,-56],[2,"5eVIzZb/FKNYl0KAw3fTTn",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[64,"VFX-Flash",512,2,[-57],[2,"260YjfEbhLzIzeEJZ/Dniy",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[73,0.2,false,false,10,[1,"25AnD9QSFESLJKM6B/1Cz8"],[[8,null],6,0],[5],[3,1.5],[0],[0],[0],[0],[0],[0],[3,1.7],[3,0.2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.44642857142857145],[9,0,1]]]]],[77,0,[3,1]],[32,true,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-58],[26,9]],[64,"VFX_SprayOut",512,2,[-59],[2,"41FlzhQIRPU7wWvK1fmoqH",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,1,false,false,12,[1,"3edKQuK0RMVIyXIMMUbVkM"],[10],[5],[23,3,0.1,0.4],[0],[0],[23,3,2,10],[0],[0],[0],[3,1.7],[3,1],[0],[83,80],[0],[[25,[3,50]]],[20,true,[16,1,[37,[[38,255],[9,255,0.22767857142857142],[9,0,1]]]]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[110,true,[0],[0],[0],[30,1,[8,[0,1],[[11,2,1],[6,2,0.037037037037037035,-1.54074074074074,-1.54074074074074]]]]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-60],[99,1,0.1,11]],[94,"VFX_Explosion2",512,2,[-61],[2,"2fX7eROs9E95ho7AcszIaL",1,0]],[73,1.5,false,false,14,[1,"9cOIIe7M1MrahFP1MRCIQk"],[[12,null],6,0],[56,[4,4294506744]],[3,1],[0],[0],[0],[0],[0],[135,3],[3,2],[3,1.5],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.033482142857142856],[43,0.078125],[13,0.18973214285714285,[4,4288716960]],[13,0.8459821428571428,[4,4280624421]]],[[9,255,0.1049107142857143],[9,255,0.21651785714285715],[9,0,1]]]]],[31,[0]],[32,true,[12,1,20,[8,[0,0.38461538461538464,1],[[45,2,6.259259259259259,1,6.259259259259259,1],[6,2,0.9148148148148149,0.4622222222222221,0.4622222222222221],[72,2,1,1,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-62],[26,13]],[64,"VFX_SprayOut2",512,2,[-63],[2,"0aauLvWjpFu6IzecZjBRGP",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,6,false,false,16,[1,"1dpEiD4RRFK4gHOtYw9PoL"],[14],[5],[23,3,0.1,0.4],[0],[0],[23,3,10,50],[0],[0],[0],[3,2],[3,1],[0],[83,80],[0],[[25,[3,50]]],[20,true,[16,1,[37,[[38,255],[9,255,0.22767857142857142],[9,0,1]]]]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[110,true,[0],[0],[0],[30,1,[8,[0,0.27708427247702977,0.5230769230769231,1],[[11,2,1],[6,2,0.30922275440798175,-2.3928348401596575,-2.3928348401596575],[6,2,0.05925925925925926,-0.21802935010482188,-0.21802935010482188],[11,2,0.020792806452028488]]]]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-64],[99,1,0.1,15]],[64,"VFX-ScreenTone",512,2,[-65],[2,"8eKgdpdN1IT6p2ZMhmpEaL",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[160,false,false,18,[1,"651Wl61kVHTJnqS/hTAlly"],[[16,null],6,0],[56,[4,1811939327]],[3,100],[0],[0],[0],[0],[0],[0],[3,2],[3,1],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.44642857142857145],[9,0,1]]]]],[77,0,[3,1]],[49,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-66],[26,17]],[94,"VFX-CircleIn",512,2,[-67],[2,"1fyQSx7jVJLab0VstxB3cw",1,0]],[73,0.4,false,false,20,[1,"6cS3OWiChIkK/HZ5dle38S"],[[18,null],6,0],[5],[3,0.5],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[3,0.1],[3,0.4],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[13,0.12946428571428564,[4,4280229663]],[13,0.7745535714285714,[4,4289703855]],[43,0.9464285714285714]],[[38,0],[9,255,0.5357142857142858],[9,255,1]]]]],[31,[0]],[32,true,[12,1,20,[8,[0,1],[[41,2,0.9703703703703702,0.050682261208577085,1,0.050682261208577085,1],[45,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-68],[26,19]],[94,"VFX-RingIn",512,2,[-69],[2,"26EI+4fAZL762EwaVKIp1r",1,0]],[73,0.4,false,false,22,[1,"05c3Ihr+pLlYPI29+fvaO3"],[[20,null],6,0],[5],[3,1.5],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[3,0.35],[3,0.4],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[13,0.12276785714285714,[4,4280887593]],[13,0.7745535714285714,[4,4290032820]],[43,0.9464285714285714]],[[38,0],[9,34,0.34151785714285715],[9,255,0.6941964285714286],[9,255,1]]]]],[31,[0]],[32,true,[12,1,8,[8,[0,1],[[41,2,0.9703703703703703,0.05068226120857707,1,0.05068226120857707,1],[45,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-70],[26,21]],[64,"VFX_SprayIn",512,2,[-71],[2,"30y5Rc1Z9JM6O2hbA2NYNF",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[134,1.2,false,false,24,[1,"b1IRn1/aJEOpLAr9m1EStu"],[22],[5],[3,0.2],[0],[0],[3,5],[0],[0],[0],[0],[3,0.1],[0],[12,1,80,[8,[0,0.7333333333333333],[[6,2,0.05555555555555556,2.781893004115226,2.781893004115226],[11,2,0.9925925925925926]]]],[0],[122,[5]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-72],[99,1,0.5,23]],[64,"VFX-ChargeFlash",512,2,[-73],[2,"31+xIN6RlI6761AQMkfeto",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,2,false,false,26,[1,"e2L7tSj5ZGaaTvdjQBxwjg"],[24],[5],[3,0.6],[0],[0],[0],[0],[0],[0],[3,0.3],[3,2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.8705357142857143],[9,0,1]]]]],[77,0,[3,1]],[32,true,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-74],[26,25]],[64,"VFX-Sparkle",512,2,[-75],[2,"f6zzalzrRALbXnIchil+0t",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[178,0.7,false,false,28,[1,"5d2n1TNG5DwqsfqDdPXfn+"],[[26,null],6,0],[16,4,[33,[[87,[4,4294926764]],[13,0.3169642857142857,[4,4294943343]],[13,0.6517857142857143,[4,4292278146]],[13,1,[4,4284279807]]],[[38,255]]]],[23,3,0.1,1.2],[0],[0],[3,0.1],[0],[0],[0],[3,1],[3,0.15],[0],[161,30,30],[0],[20,true,[16,1,[37,[[38,0],[9,255,0.12723214285714285],[9,255,0.2879464285714286],[9,0,1]]]]],[188,true,3,2,1.2,[3,1]],[32,true,[12,1,2,[8,[0,0.12307692307692308,0.3128205128205128,0.9974358974358974],[[11,2,0.48518518518518516],[6,2,1,0.18055555555555491,0.18055555555555491],[11,2,0.5074074074074074],[11,2,0.4962962962962963]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-76],[26,27]],[64,"VFX_LightRay",512,2,[-77],[2,"ca0M+C4DVD7Y7N9h4HKj61",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[134,1,false,false,30,[1,"71f3eD7bRNBr0QfAiiq/jt"],[28],[5],[12,1,4,[8,[0,1],[[6,2,0.48148148148148145,1.0000000000000002,1.0000000000000002],[11,2,1]]]],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[0],[3,1],[0],[12,1,10,[8,[0,1],[[6,2,0.3555555555555555,1.9740740740740748,1.9740740740740748],[11,2,1]]]],[0],[20,true,[16,1,[37,[[38,0],[9,133,0.09375],[9,255,0.15401785714285715],[9,153,0.24330357142857142],[9,0,1]]]]],[77,0,[3,1]],[78,true,true,[0],[30,1,[8,[0,0.2717948717948718,1],[[6,2,1,-3.2828282828282838,-3.2828282828282838],[6,2,0.45925925925925926,-1.155555555555555,-1.155555555555555],[6,2,0.16666666666666666,0.03073286052009456,0.03073286052009456]]]],[12,1,2,[8,[0,0.2717948717948718,0.9923076923076923],[[6,2,0.5,2.4246031746031744,2.4246031746031744],[6,2,0.8814814814814815,0.36111111111111127,0.36111111111111127],[11,2,1]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-0.17453292519943295,0.17453292519943295]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-78],[26,29]],[94,"VFX-BossExplosion",512,2,[-79],[2,"17xBa39jBE3oaViuxgYjTA",1,0]],[73,0.2,false,false,32,[1,"9aNKV4waVMCIVb+c4l/yw4"],[[30,null],6,0],[5],[3,3],[0],[0],[0],[0],[0],[135,3],[3,1.8],[3,0.2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.08258928571428571],[13,0.9241071428571428,[4,4289835441]],[13,0.9620535714285714,[4,4281084972]]],[[9,255,0.6004464285714286],[9,0,1]]]]],[31,[0]],[78,true,true,[12,1,20,[8,[0,0.6948717948717948,1],[[45,2,2.839080459770115,1,2.839080459770115,1],[6,2,0.9333333333333333,0.4622222222222221,0.4622222222222221],[72,2,1,1,1]]]],[12,1,6,[8,[0,0.7974358974358975],[[136,2,2,0.05925925925925926,-0.015204678362573122,0.09771705989047173,-0.015204678362573122],[137,2,1,0.9962962962962963,0.0288636426001776,0.0288636426001776,0.09792722000142738]]]],[12,1,5,[8,[0,0.8051282051282052],[[136,2,2,1,-0.015285126396237575,0.09720572269540514,-0.015285126396237575],[137,2,1,0.03333333333333333,-0.007150715071507141,-0.007150715071507141,0.10365593276852825]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-80],[26,31]],[46,"HP Controller",5,[-81],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[166,34,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"cc.ParticleSystem","play",10],[7,"cc.ParticleSystem","play",12],[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-82],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",4],[7,"cc.ParticleSystem","play",14],[7,"cc.ParticleSystem","play",16],[7,"cc.ParticleSystem","play",18],[7,"cc.ParticleSystem","play",20],[7,"cc.ParticleSystem","play",22],[7,"cc.ParticleSystem","play",24],[7,"cc.ParticleSystem","play",26],[7,"cc.ParticleSystem","play",28],[7,"cc.ParticleSystem","play",30],[7,"cc.ParticleSystem","play",32],[68,"2022ebMdchE2pNL1SpqTm8g","setBool","isDead,true",3]],1],[54,"On Death VFX Finished",5,[[96,-83,[1,"3as3Ac2/9Py7g8V74jqngv"],[11,13,15,17,19,21,23,25,27,29,31,33],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"bc3fHZzrFEU4zkOZUcbuQ1",1,0]],[105,"Temp-Model",false,3,[[79,"Sphere<ModelComponent>",-84,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",3,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,9,[1,"69Pan/I41DWqTUloOfsyBV"],[4],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-85],[26,5]],[97,0.3,false,9,[1,"a7wgfQZINKOKGeo4/k/VRz"],[[6,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-86],[26,7]],[128,3,[1,"c2SS5kcGlLebzHn6Wkq3uJ"]],[104,4,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[46,"Stun",5,[-87],[2,"28wv4th1pNs6qDNkpOR9dx",1,0]],[117,43,[1,"92X5rq9oNDNouphSNFIziH"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",4]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",4]]],[35,"UI",1,[7],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,6,0,-2,7,0,3,7,0,13,35,0,2,1,0,20,44,0,27,42,0,28,35,0,3,4,0,3,34,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-2,5,0,2,1,0,7,1,0,-4,45,0,-1,9,0,-2,10,0,-3,12,0,-4,14,0,-5,16,0,-6,18,0,-7,20,0,-8,22,0,-9,24,0,-10,26,0,-11,28,0,-12,30,0,-13,32,0,0,3,0,-2,41,0,33,41,0,0,3,0,-1,37,0,-2,38,0,-3,6,0,-1,42,0,-2,34,0,-3,43,0,-4,36,0,0,6,0,2,6,0,1,8,0,1,8,0,1,8,0,1,8,0,1,46,0,1,46,0,17,38,0,2,7,0,-1,39,0,-2,40,0,-1,11,0,4,11,0,-1,13,0,4,13,0,-1,15,0,4,15,0,-1,17,0,4,17,0,-1,19,0,4,19,0,-1,21,0,4,21,0,-1,23,0,4,23,0,-1,25,0,4,25,0,-1,27,0,4,27,0,-1,29,0,4,29,0,-1,31,0,4,31,0,-1,33,0,4,33,0,-1,35,0,3,36,0,0,36,0,0,37,0,4,39,0,4,40,0,-1,44,0,9,1,2,7,3,4,7,5,7,7,45,87],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,41],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,-2,-3,18,8,26],[14,13,416,1,4,3,11,9,7,6,7,6,4,3,7,6,7,6,4,3,11,9,7,6,7,6,33,29,43,41,4,3,5,15,51,5,16,57]],[[[63,"SM_TowerCubeBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",3722693,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":30144,"length":9288,"count":2322,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":30144,"count":628,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.44971001148223877,-0.4497530162334442,-2.9802322387695312e-8],"maxPosition",8,[1,0.4496259093284607,0.4495793879032135,0.6503934264183044]]],-1],0,0,[],[],[]],[[[62],[47,"SM_TowerCubeBody_01",[-2],[2,"08DnfqaRBUD5xquxkMkyx7",-1,0]],[53,"SM_TowerCubeBody_01",1,[[52,-3,[1,"27TVOX0m1aSIANyTsuWfnj"],[0],[34],1]],[2,"70nm3Bpz5XiKTdThuamjWz",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[417,418]],[[[62],[47,"SM_Tower0MG2Body_01",[-2],[2,"4d/LLVKgJfRaWh6CVtkvdN",-1,0]],[53,"SM_Tower0MG2Body_01",1,[[52,-3,[1,"91rnZr2NlU+5mkmycELrbU"],[0],[34],1]],[2,"1bNv8OFqZfVYpfEynFuksV",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[419,188]],[[[63,"SM_Tower0MG2Body_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",994567446,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":43200,"length":8628,"count":2157,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":43200,"count":900,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.21314796805381775,-0.3677055537700653,-0.013292109593749046],"maxPosition",8,[1,0.2131478637456894,0.2435551881790161,0.3264767527580261]]],-1],0,0,[],[],[]],[[[50,"P-Biker-1"],[185,"P-Biker-1",[[-11,-12,[80,"Events",-14,[2,"d95EadoVJHU5W5txftTQiE",-13,0]],-15],1,1,4,1],[[-6,[55,-7,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-8,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-9,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-10,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],1,4,4,4,4],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[164,"Art",1,[-17,-18,-19,-20],[[88,true,-16,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[2,"4505kBZFlJebjm5k8fm2Li",1,0]],[35,"Scripts",1,[-21,-22,-23,-24,-25],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[46,"Movement",3,[-26],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,2,[29,"b7Sl95+MZf9bANHYjJnknT",-34,[69,"785FrVaRVMKbVI3a7MEVkn",1,[[67,[4,["b7Sl95+MZf9bANHYjJnknT"]],[[55,-33,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[14,"SM_Model",["_name"],-27],[10,["_lpos"],-28,[1,0,0,0]],[10,["_lrot"],-29,[3,0,0,0,1]],[10,["_euler"],-30,[1,0,0,0]],[10,["_lpos"],-31,[1,0,0,0.164]],[40,["_materials","0"],[4,["2dUztD+cNX8aVf/J8P3X7o"]],3],[14,"SM_Model",["_name"],-32]]],2]],[4,["b7Sl95+MZf9bANHYjJnknT"]],[35,"VFX",2,[-35,-36,-37],[2,"beUR6ZvGxHjYfAo13/LNUk",1,0]],[115,"Spawn Enemies",[[191,-39,[1,"d8B5Ku2I9N3oAZqD+w7xJA"],-38]],[2,"9atA4YpAZGQbNfMWDOYhy1",1,0]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-47,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-46]]]],[[14,"P-HP-Bar",["_name"],-40],[10,["_lpos"],-41,[1,207,448.00000000000006,0]],[10,["_lrot"],-42,[3,0,0,0,1]],[10,["_euler"],-43,[1,0,0,0]],[14,"Art",["_name"],-44],[10,["_lpos"],-45,[1,0,0,0]]]],15]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Death_Erupt",7,[-48],[2,"a7u6pUK1tBNLKPNo/rMTuR",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,11,[1,"15L8ZofkJOYo1pfb2Hbqa6"],[4],[5],[3,0.4],[0],[0],[0],[0],[0],[0],[0],[3,0.16],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.3169642857142857],[13,0.4575892857142857,[4,4294938922]],[13,1,[4,4289817645]]],[[9,255,0.5736607142857143],[9,0,1]]]]],[31,[0]],[78,true,true,[111,2,2,[8,[0,1],[[6,2,0.02962962962962963,1.913888888888889,1.913888888888889],[11,2,1]]],[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-49],[26,5]],[59,"VFX_Death_Shards",7,[-50],[2,"f1qDZ1WhRAlKKbZFgneJ4V",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,13,[1,"94QMdpWqJG6LkYGJEyKw4V"],[6],[5],[23,3,0.05,0.1],[0],[0],[23,3,3,5],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.3,0.8],[3,1],[0],[0],[[25,[23,3,5,7]]],[20,true,[16,1,[33,[[43,0.16964285714285715],[13,0.33035714285714285,[4,4294938368]],[13,0.7991071428571429,[4,4284748062]]],[[9,255,0.23883928571428573],[9,0,1]]]]],[109,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-8.726646259971647,8.726646259971647]],[123,true,2,2,[0],[0]],[19,[0],[0],[5],[5],-51],[26,7]],[59,"VFX_Spawn",7,[-52,-53],[2,"2eHEAYWLJF/KGD1bH1HNNp",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[46,"HP Controller",3,[-54],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[139,16,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-55],[7,"cc.ParticleSystem","play",11],[7,"cc.ParticleSystem","play",13],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",4],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",5],[7,"71b59j50pJOQYyfqjE0LpJs","spawnEnemies",8]]],[54,"On Death VFX Finished",3,[[96,-56,[1,"38frJY46tNxb0ME1JGaZ3s"],[12,14],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"bc/rv5T4dMb6MKo9MW/61A",1,0]],[105,"Temp-Model",false,2,[[79,"Sphere<ModelComponent>",-57,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",2,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[4,["a0vkGbwHRdCYZf+gRDRxfR"]],[98,0.3,false,15,[1,"e35A+JtzJOfaHEGDJxjfeJ"],[8],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-58],[26,9]],[97,0.3,false,15,[1,"c1qTJSzltE1aqTjzW2G+KK"],[[10,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-59],[26,11]],[104,4,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[35,"Specials",3,[8],[2,"68Ykm2swBNqbmLafWcTeB7",1,0]],[233,"Biker-1",1,1,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",4],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",16],[7,"71b59j50pJOQYyfqjE0LpJs","initialize",8]],17,24],[234,[1,"c3ae4MCbxK8YUgB7h5tdE2"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",4]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",4]]],[46,"Stun",3,[27],[2,"dac7ZgdvtBBILxt/AUoxlG",1,0]],[35,"UI",1,[9],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,5,0,-2,9,0,3,9,0,13,17,0,2,1,0,-1,26,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,2,1,0,7,1,0,-4,29,0,0,2,0,-1,19,0,-2,20,0,-3,5,0,-4,7,0,-1,4,0,-2,16,0,-3,28,0,-4,18,0,-5,25,0,-1,24,0,1,6,0,1,6,0,1,6,0,1,6,0,1,21,0,1,21,0,0,5,0,2,5,0,-1,11,0,-2,13,0,-3,15,0,38,26,0,0,8,0,1,10,0,1,10,0,1,10,0,1,10,0,1,30,0,1,30,0,17,20,0,2,9,0,-1,12,0,4,12,0,-1,14,0,4,14,0,-1,22,0,-2,23,0,-1,17,0,3,18,0,0,18,0,0,19,0,4,22,0,4,23,0,9,1,8,7,25,9,7,29,26,20,27,27,0,28,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,-2,18,8],[14,13,420,1,20,19,10,18,4,3,11,9,5,15,5,16]],[[[57,".bin",2192038472,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6624,"length":792,"count":198,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6624,"count":138,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.25525224208831787,-0.058665115386247635,-0.1477106660604477],"maxPosition",8,[1,0.25525224208831787,0.37976759672164917,0.48866382241249084]]],-1],0,0,[],[],[]],[[[62],[47,"SM_EnemyCrowder_02",[-2],[2,"b72WmV0l9c1KqFhtvygc0y",-1,0]],[53,"SM_EnemyCrowder_02",1,[[52,-3,[1,"b3aDCHVaVYjbgLKMR2nL+J"],[0],[34],1]],[2,"01qnpmKihVjaWNSQR8aYkQ",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[421,422]],[[[63,"SM_EnemyCrowder_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[{"name":"UI_Freeze","rect":{"x":0,"y":0,"width":42,"height":42},"offset":{"x":0,"y":0},"originalSize":{"width":42,"height":42},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[21],[423]],[[[50,"P-Base-Tower"],[363,"P-Base-Tower",[[-3,[80,"Scripts",-5,[2,"395/jqomdNs4i+MZIAv9Bl",-4,0]],[80,"Events",-7,[2,"ef4CiMUqFFBLxbigVGcbkS",-6,0]]],1,4,4],[196,"c7FBgV+GNP8JXw9YieWPKB",-2,0,[-1]]],[4,["a6UoiMmTtU6YsbaNPx5rqf"]],[82,0,null,[29,"a6UoiMmTtU6YsbaNPx5rqf",-8,[42,"d55+XoqRFGso2sF2xHqo1e",1,[[14,"SM_TowerBase_01",["_name"],2],[10,["_lpos"],2,[1,0,0,0]],[10,["_lrot"],2,[3,0,0,0,1]],[10,["_euler"],2,[1,0,0,0]],[40,["_materials","0"],[4,["c8x41wezhYTop9GywitTd7"]],1]]],0]],[35,"Art",1,[3],[2,"f6510qCkdPhZ5QPlFG7sjV",1,0]]],0,[0,-1,3,0,2,1,0,-1,4,0,2,1,0,7,1,0,2,1,0,7,1,0,2,3,0,9,1,3,7,4,8],[0,0],[8,11],[66,1]],[[{"name":"Icon_Play","rect":{"x":0,"y":0,"width":48,"height":64},"offset":{"x":0,"y":0},"originalSize":{"width":48,"height":64},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[21],[424]],[[{"name":"default_btn_disabled","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[12,12,12,12],"packable":true}],[2],0,[0],[21],[425]],[[[112,"2",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,1464539398],"mainTexture",6,0]],11]]],0,0,[0,0],[30,12],[53,25]],[[[50,"06-Terrain"],[257,"06-Terrain",16,[[-6,-7,[80,"Events",-9,[2,"26v2eHDtlCM7ivoqBF7TjE",-8,0]]],1,1,4],[[413,-5,[1,"a89E+Jrq1Hr6jEGUCmTbE5"]]],[196,"a0J5bKqYFEmaKO4oONshDj",-4,0,[-1,-2,-3]]],[35,"Art",1,[-10,-11,-12,-13],[2,"55qqtzXrZI0LhFh/yPSZLQ",1,0]],[4,["41a5+qz5hYnIPWfy1FW12A"]],[4,["c2ITubO5BY0ZR5scOChS6x"]],[4,["41a5+qz5hYnIPWfy1FW12A"]],[81,"1",false,2,[-14],[2,"3aRuZ4J/FKN6zDQxv/N7TH",1,0]],[36,0,null,6,[29,"41a5+qz5hYnIPWfy1FW12A",-15,[42,"0164JrUQpMVq4RrmEgCj6M",1,[[14,"SM_Terrain_01",["_name"],3],[10,["_lpos"],3,[1,0,0,0]],[10,["_lrot"],3,[3,0,0,0,1]],[10,["_euler"],3,[1,0,0,0]],[40,["_materials","0"],[4,["acGj9fHzdeWYNWvKyhsFEP"]],3]]],2]],[81,"2",false,2,[-16],[2,"a1em3faopCzIYZpbLG+rD3",1,0]],[36,0,null,8,[29,"c2ITubO5BY0ZR5scOChS6x",-17,[42,"2dJCeuzNtNmKSGNcyquwjV",1,[[14,"SM_Terrain_02",["_name"],4],[10,["_lpos"],4,[1,0,0,0]],[10,["_lrot"],4,[3,0,0,0,1]],[10,["_euler"],4,[1,0,0,0]],[40,["_materials","0"],[4,["018VhKq6ZVZbAm171nxoLE"]],5]]],4]],[81,"3",false,2,[-18],[2,"d6KcaBUhRIFrO6ELI5Te7V",1,0]],[36,0,null,10,[29,"41a5+qz5hYnIPWfy1FW12A",-19,[42,"78cgbAqLRHtLEOQvhY7JoU",1,[[14,"SM_Terrain_02",["_name"],5],[10,["_lpos"],5,[1,0,0,0]],[10,["_lrot"],5,[3,0,0,0,1]],[10,["_euler"],5,[1,0,0,0]],[40,["_materials","0"],[4,["acGj9fHzdeWYNWvKyhsFEP"]],7]]],6]],[194,"TEMP-Model",false,2,[[79,"Cube<ModelComponent>",-20,[1,"3eq+2PhbRKu6WNSyYqYlmc"],[0],[34],1]],[2,"e4KNNUxLBOiaIrybrwqbAS",1,0]],[35,"Scripts",1,[-21],[2,"1cB2ZUhadFO48t4WKrMPxi",1,0]],[54,"Theme Models Chooser",13,[[140,-22,[1,"437t0LZOhD4o82yHY4OSaz"],[6,8,10],8]],[2,"7bUXw8HipMCr3JlbAaqCfY",1,0]]],0,[0,-1,7,0,-2,9,0,-3,11,0,2,1,0,0,1,0,-1,2,0,-2,13,0,2,1,0,7,1,0,-1,12,0,-2,6,0,-3,8,0,-4,10,0,-1,7,0,2,7,0,-1,9,0,2,9,0,-1,11,0,2,11,0,0,12,0,-1,14,0,0,14,0,9,1,22],[0,0,0,0,0,0,0,0,0],[-1,10,8,11,8,11,8,11,34],[165,32,189,1,426,12,189,12,24]],[[[50,"P-WorldsSettings"],[115,"P-WorldsSettings",[[625,-2,[1,"f3nyQPtxVJB4WPg6PMzwQY"],[[626,11],[419,2,12,23],[419,1,24,36]]]],[2,"c46/YsCPVOJYA4mWEpNYRx",-1,0]]],0,[0,2,1,0,0,1,0,9,1,2],[],[],[]],[[[63,"SM_EnemyStunner_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[62],[47,"SM_EnemyStunner_01",[-2],[2,"1edAXY0UBcjIIUC2qW4Qqc",-1,0]],[53,"SM_EnemyStunner_01",1,[[52,-3,[1,"0bpaVy6q1YuIQflgT+j8KX"],[0],[34],1]],[2,"e3hH5Ei39RPpmb2lhMVpUH",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[427,428]],[[[57,".bin",2525663973,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":10656,"length":1320,"count":330,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":10656,"count":222,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2883804142475128,-0.38122305274009705,0],"maxPosition",8,[1,0.2883804142475128,0.27011871337890625,0.46827760338783264]]],-1],0,0,[],[],[]],[[[50,"SM_TowerS4RBody_01"],[47,"SM_TowerS4RBody_01",[-2],[2,"b8JcZpYRhbA7dBnVFp97b+",-1,0]],[53,"SM_TowerS4RBody_01",1,[[52,-3,[1,"aa2p+GekNcwr3d84smoPpV"],[0],[34],1]],[2,"42d3cbnwxfy6Z3GE8KKuaQ",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[1,190]],[[[57,".bin",1567242580,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":54672,"length":15552,"count":3888,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":54672,"count":1139,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2563151717185974,-0.25497379899024963,-0.08813595771789551],"maxPosition",8,[1,0.25377020239830017,0.25511202216148376,0.7254630923271179]]],-1],0,0,[],[],[]],[[[62],[47,"SM_TowerPulsarBody_01",[-2],[2,"27Yce2+45c87fcrQ+S23Kt",-1,0]],[53,"SM_TowerPulsarBody_01",1,[[52,-3,[1,"c1qYGglmVbiJ63kvX3SnJg"],[0],[34],1]],[2,"72+J2CTu9RoYwXYPv5sSUS",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[429,144]],[[[63,"SM_TowerPulsarBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[62],[47,"SM_EnemyTank_01",[-2],[2,"e2Vx3eAWdfubrymQP2YNGI",-1,0]],[53,"SM_EnemyTank_01",1,[[52,-3,[1,"bboftuCNdUUatqfu6RAfMf"],[0],[34],1]],[2,"b9niJVKBFTDZ9RF32cDoT7",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[430,431]],[[[57,".bin",4129080837,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":17424,"length":2376,"count":594,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":17424,"count":363,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3134799599647522,-0.14206379652023315,0.06674867868423462],"maxPosition",8,[1,0.3134799301624298,0.3270822763442993,0.4353870153427124]]],-1],0,0,[],[],[]],[[[63,"SM_EnemyTank_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[50,"P-Charger-2"],[125,"P-Charger-2",[[-16,-17,[80,"Events",-19,[2,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[156,"Charger-2",-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[55,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[151,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[2,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[124,"Movement",[-26],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,2,[29,"eerPSLgTJdH7hLSNuCTtVc",-32,[69,"a2mjm70D9GSqAonN8g8xv6",1,[[67,[4,["eerPSLgTJdH7hLSNuCTtVc"]],[[55,-31,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[14,"SM_Model",["_name"],-27],[10,["_lpos"],-28,[1,0,-0.2,0]],[10,["_lrot"],-29,[3,0,0,0,1]],[10,["_euler"],-30,[1,0,0,0]],[40,["_materials","0"],[4,["c8h0R7kAVVrrw0yFT3+4z0"]],3],[28,"SM_Model",["_name"],[4,["69IPnlhZJZXItc4Tb0npin"]]]]],2]],[35,"Scripts",1,[3,-33,-34,-35],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[4,["eerPSLgTJdH7hLSNuCTtVc"]],[35,"VFX",2,[-36,-37,-38],[2,"abZwOxUF1JxLFWA9gxrDQW",1,0]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-46,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[14,"P-HP-Bar",["_name"],-39],[10,["_lpos"],-40,[1,207,448.00000000000006,0]],[10,["_lrot"],-41,[3,0,0,0,1]],[10,["_euler"],-42,[1,0,0,0]],[14,"Art",["_name"],-43],[10,["_lpos"],-44,[1,0,0,0]]]],15]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Death_Erupt",7,[-47],[2,"703+D7wElCJIiMNu1rP9aA",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,10,[1,"e32WOzuchD/IwiQE82iywB"],[4],[5],[3,0.4],[0],[0],[0],[0],[0],[0],[0],[3,0.16],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.3169642857142857],[13,0.4575892857142857,[4,4294938922]],[13,1,[4,4289817645]]],[[9,255,0.5736607142857143],[9,0,1]]]]],[31,[0]],[78,true,true,[111,2,2,[8,[0,1],[[6,2,0.02962962962962963,1.913888888888889,1.913888888888889],[11,2,1]]],[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-48],[26,5]],[59,"VFX_Death_Shards",7,[-49],[2,"01ad4VsOdJOb7POlIynuu6",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,12,[1,"13oCwfT6tLA43xKPz+NEp6"],[6],[5],[23,3,0.05,0.1],[0],[0],[23,3,3,5],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.3,0.8],[3,1],[0],[0],[[25,[23,3,5,7]]],[20,true,[16,1,[33,[[43,0.16964285714285715],[13,0.33035714285714285,[4,4294938368]],[13,0.7991071428571429,[4,4284748062]]],[[9,255,0.23883928571428573],[9,0,1]]]]],[109,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-8.726646259971647,8.726646259971647]],[123,true,2,2,[0],[0]],[19,[0],[0],[5],[5],-50],[26,7]],[59,"VFX_Spawn",7,[-51,-52],[2,"cd+APrHvJCE7hr4Z4s4Fq0",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[46,"HP Controller",5,[-53],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[139,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[7,"cc.ParticleSystem","play",10],[7,"cc.ParticleSystem","play",12],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[54,"On Death VFX Finished",5,[[96,-55,[1,"61JXa/h31PG5PV9F7KPu2F"],[11,13],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"a4bc4GHeBB9pBTbgbZKvU/",1,0]],[105,"Temp-Model",false,2,[[79,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",2,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,14,[1,"584jUbJ89NS7f6bkdnGV5s"],[8],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-57],[26,9]],[97,0.3,false,14,[1,"f75+l+zcVHJroBKOLL4kIN"],[[10,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-58],[26,11]],[104,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[46,"Stun",5,[-59],[2,"28wv4th1pNs6qDNkpOR9dx",1,0]],[117,23,[1,"92X5rq9oNDNouphSNFIziH"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[35,"UI",1,[8],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,3,8,0,13,16,0,2,1,0,20,24,0,27,22,0,28,16,0,3,3,0,3,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,2,1,0,7,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,6,0,1,6,0,1,6,0,1,6,0,0,4,0,2,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,17,19,0,2,8,0,-1,11,0,4,11,0,-1,13,0,4,13,0,-1,20,0,-2,21,0,-1,16,0,3,17,0,0,17,0,0,18,0,4,20,0,4,21,0,-1,24,0,9,1,3,7,5,8,7,25,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,-2,18,8],[14,13,432,1,20,19,10,18,4,3,11,9,5,15,5,16]],[[[57,".bin",3240220128,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":46992,"length":13968,"count":3492,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":46992,"count":979,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2508014440536499,-0.6403793096542358,0],"maxPosition",8,[1,0.2508014440536499,0.3611346185207367,0.46040260791778564]]],-1],0,0,[],[],[]],[[[62],[47,"SM_TowerTunnelerBody_01",[-2],[2,"d2WuMenSdQdr89Jfpld4zw",-1,0]],[53,"SM_TowerTunnelerBody_01",1,[[52,-3,[1,"9dDxbuCdVYVYsfEinJuqgr"],[0],[34],1]],[2,"bac3BKSlVQpqE9QB4VllW4",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[433,191]],[[[63,"SM_TowerTunnelerBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[411,"../Internal/Shaders/Laser/LaserShader",[{"ROUGHNESS":[1,2,3,4,5,6],"BEAMS_COUNT":[1,2,3,4,5,6]},{},{},{}],[{"hash":2240480017,"name":"../Internal/Shaders/Laser/LaserShader|particle-trail:vs_main|tinted-fs:add","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"mainColor","type":16,"count":1},{"name":"outlineColor","type":16,"count":1},{"name":"noise_scale","type":14,"count":1}],"defines":[]},{"name":"BeamData","stageFlags":16,"binding":2,"members":[{"name":"frequency","type":5,"count":1},{"name":"energy","type":13,"count":1},{"name":"speed","type":13,"count":1},{"name":"thickness","type":13,"count":1},{"name":"outline_thickness","type":13,"count":1},{"name":"beam_difference","type":13,"count":1},{"name":"glow","type":13,"count":1},{"name":"outline_glow","type":13,"count":1},{"name":"progress","type":13,"count":1},{"name":"y_offset","type":13,"count":1},{"name":"fixed_edge_size","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":3,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":44,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"vBarycentric","type":15,"count":1,"stageFlags":17,"location":2,"defines":["CC_DRAW_WIRE_FRAME"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision mediump float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec4 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  layout(location = 2) out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\n#if CC_DRAW_WIRE_FRAME\n  layout(location = 2) in vec3 vBarycentric;\n#endif\nlayout(set = 1, binding = 3) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform FragConstants {\n  vec4 mainColor;\n  vec4 outlineColor;\n  vec2 noise_scale;\n};\nlayout(set = 1, binding = 2) uniform BeamData {\n  int frequency;\n  float energy;\n  float speed;\n  float thickness;\n  float outline_thickness;\n  float beam_difference;\n  float glow;\n  float outline_glow;\n  float progress;\n  float y_offset;\n  float fixed_edge_size;\n};\nfloat random(vec2 uv) {\n    return fract(sin(dot(uv.xy,\n        vec2(12.9898,78.233))) *\n            43758.5453123);\n}\nfloat noise(vec2 uv) {\n    vec2 uv_index = floor(uv);\n    vec2 uv_fract = fract(uv);\n    float a = random(uv_index);\n    float b = random(uv_index + vec2(1.0, 0.0));\n    float c = random(uv_index + vec2(0.0, 1.0));\n    float d = random(uv_index + vec2(1.0, 1.0));\n    vec2 blur = smoothstep(0.0, 1.0, uv_fract);\n    return mix(a, b, blur.x) +\n            (c - a) * blur.y * (1.0 - blur.x) +\n            (d - b) * blur.x * blur.y;\n}\nfloat fbm(vec2 uv, float time) {\n  #if ROUGHNESS == 1\n  const int octaves = 1;\n  #elif ROUGHNESS == 2\n  const int octaves = 2;\n  #elif ROUGHNESS == 3\n  const int octaves = 3;\n  #elif ROUGHNESS == 4\n  const int octaves = 4;\n  #elif ROUGHNESS == 5\n  const int octaves = 5;\n  #elif ROUGHNESS == 6\n  const int octaves = 6;\n  #endif\n  float amp = 0.01 * energy * progress;\n  float freq = float(frequency);\n  float value = 0.0;\n  for(int i = 0; i < octaves; i++) {\n      value += amp * noise(freq * vec2(uv.x, uv.y + time));\n      amp *= 0.5;\n      freq *= 2.0;\n  }\n  return value;\n}\nvec4 difference(vec4 base, vec4 blend){\n  return abs(base - blend);\n}\nvec4 bolt(vec2 uv, float time, float i){\n  float falloff = smoothstep(0.0, fixed_edge_size, uv.x) * smoothstep(0.0, fixed_edge_size, 1.0 - uv.x);\n  vec4 clouds = vec4(fbm((uv + vec2(i)) * noise_scale, time * speed)) * falloff;\n  vec4 diff_clouds = difference(clouds, vec4(uv.y - 0.5 + y_offset + (uv.y * falloff * 0.02 * energy * progress)));\n  vec4 clouds2 = vec4(fbm((uv * 2.0) * noise_scale, time * 1.)) * 5.0;\n  diff_clouds += smoothstep(0.0, 0.8, clouds2) * 0.1 * (1.-progress);\n  float thickness2 =  1. -\n  ( thickness / (min(i + beam_difference, 1.0) + (1.0-beam_difference))) * progress ;\n  float easeIn = mix(2.1,1.,clamp(uv.x+.9,0.,1.));\n  vec4 beam = clamp(smoothstep(thickness2 * easeIn, (thickness2 * easeIn + 0.005 * progress), 1.0 - diff_clouds), vec4(0.0), vec4(1.0));\n  vec4 beam_outline;\n  float outline = thickness2 - (outline_thickness * progress);\n  beam_outline = clamp(smoothstep(outline * easeIn, outline * easeIn + 0.04, 1.0 - diff_clouds), 0.0, 1.0);\n  beam_outline = clamp(beam_outline - beam, 0.0, 1.0);\n  return (beam * (mainColor + vec4(glow, glow, glow, 0.))) + (beam_outline * (outlineColor + vec4(outline_glow, outline_glow, outline_glow, 0.)));\n}\nvec4 add () {\n  vec4 beam = vec4(0.0);\n  #if BEAMS_COUNT == 1\n  const float beamsCount = 1.0;\n  #elif BEAMS_COUNT == 2\n  const float beamsCount = 2.0;\n  #elif BEAMS_COUNT == 3\n  const float beamsCount = 3.0;\n  #elif BEAMS_COUNT == 4\n  const float beamsCount = 4.0;\n  #elif BEAMS_COUNT == 5\n  const float beamsCount = 5.0;\n  #elif BEAMS_COUNT == 6\n  const float beamsCount = 6.0;\n  #endif\n  for (float i = 0.0; i < beamsCount; i+=1.0){\n    beam = max(beam, bolt(uv, cc_time.x, i));\n  }\n  return CCFragOutput(beam);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl3":{"vert":"\nprecision mediump float;\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nin vec3 a_position;\nin vec4 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  out vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\n#if CC_DRAW_WIRE_FRAME\n  in vec3 vBarycentric;\n#endif\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 mainColor;\n  vec4 outlineColor;\n  vec2 noise_scale;\n};\nlayout(std140) uniform BeamData {\n  int frequency;\n  float energy;\n  float speed;\n  float thickness;\n  float outline_thickness;\n  float beam_difference;\n  float glow;\n  float outline_glow;\n  float progress;\n  float y_offset;\n  float fixed_edge_size;\n};\nfloat random(vec2 uv) {\n    return fract(sin(dot(uv.xy,\n        vec2(12.9898,78.233))) *\n            43758.5453123);\n}\nfloat noise(vec2 uv) {\n    vec2 uv_index = floor(uv);\n    vec2 uv_fract = fract(uv);\n    float a = random(uv_index);\n    float b = random(uv_index + vec2(1.0, 0.0));\n    float c = random(uv_index + vec2(0.0, 1.0));\n    float d = random(uv_index + vec2(1.0, 1.0));\n    vec2 blur = smoothstep(0.0, 1.0, uv_fract);\n    return mix(a, b, blur.x) +\n            (c - a) * blur.y * (1.0 - blur.x) +\n            (d - b) * blur.x * blur.y;\n}\nfloat fbm(vec2 uv, float time) {\n  #if ROUGHNESS == 1\n  const int octaves = 1;\n  #elif ROUGHNESS == 2\n  const int octaves = 2;\n  #elif ROUGHNESS == 3\n  const int octaves = 3;\n  #elif ROUGHNESS == 4\n  const int octaves = 4;\n  #elif ROUGHNESS == 5\n  const int octaves = 5;\n  #elif ROUGHNESS == 6\n  const int octaves = 6;\n  #endif\n  float amp = 0.01 * energy * progress;\n  float freq = float(frequency);\n  float value = 0.0;\n  for(int i = 0; i < octaves; i++) {\n      value += amp * noise(freq * vec2(uv.x, uv.y + time));\n      amp *= 0.5;\n      freq *= 2.0;\n  }\n  return value;\n}\nvec4 difference(vec4 base, vec4 blend){\n  return abs(base - blend);\n}\nvec4 bolt(vec2 uv, float time, float i){\n  float falloff = smoothstep(0.0, fixed_edge_size, uv.x) * smoothstep(0.0, fixed_edge_size, 1.0 - uv.x);\n  vec4 clouds = vec4(fbm((uv + vec2(i)) * noise_scale, time * speed)) * falloff;\n  vec4 diff_clouds = difference(clouds, vec4(uv.y - 0.5 + y_offset + (uv.y * falloff * 0.02 * energy * progress)));\n  vec4 clouds2 = vec4(fbm((uv * 2.0) * noise_scale, time * 1.)) * 5.0;\n  diff_clouds += smoothstep(0.0, 0.8, clouds2) * 0.1 * (1.-progress);\n  float thickness2 =  1. -\n  ( thickness / (min(i + beam_difference, 1.0) + (1.0-beam_difference))) * progress ;\n  float easeIn = mix(2.1,1.,clamp(uv.x+.9,0.,1.));\n  vec4 beam = clamp(smoothstep(thickness2 * easeIn, (thickness2 * easeIn + 0.005 * progress), 1.0 - diff_clouds), vec4(0.0), vec4(1.0));\n  vec4 beam_outline;\n  float outline = thickness2 - (outline_thickness * progress);\n  beam_outline = clamp(smoothstep(outline * easeIn, outline * easeIn + 0.04, 1.0 - diff_clouds), 0.0, 1.0);\n  beam_outline = clamp(beam_outline - beam, 0.0, 1.0);\n  return (beam * (mainColor + vec4(glow, glow, glow, 0.))) + (beam_outline * (outlineColor + vec4(outline_glow, outline_glow, outline_glow, 0.)));\n}\nvec4 add () {\n  vec4 beam = vec4(0.0);\n  #if BEAMS_COUNT == 1\n  const float beamsCount = 1.0;\n  #elif BEAMS_COUNT == 2\n  const float beamsCount = 2.0;\n  #elif BEAMS_COUNT == 3\n  const float beamsCount = 3.0;\n  #elif BEAMS_COUNT == 4\n  const float beamsCount = 4.0;\n  #elif BEAMS_COUNT == 5\n  const float beamsCount = 5.0;\n  #elif BEAMS_COUNT == 6\n  const float beamsCount = 6.0;\n  #endif\n  for (float i = 0.0; i < beamsCount; i+=1.0){\n    beam = max(beam, bolt(uv, cc_time.x, i));\n  }\n  return CCFragOutput(beam);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl1":{"vert":"\nprecision mediump float;\n   uniform vec4 mainTiling_Offset;\nuniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nattribute vec3 a_position;\nattribute vec4 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_DRAW_WIRE_FRAME\n  varying vec3 vBarycentric;\n#endif\nvec4 vs_main() {\n  highp vec4 pos = vec4(a_position, 1);\n  vec4 velocity = vec4(a_texCoord1.xyz, 0);\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    velocity = cc_matWorld * velocity;\n  #endif\n  float vertOffset = (a_texCoord.x - 0.5) * a_texCoord.y;\n  vec3 camUp = normalize(cross(pos.xyz - cc_cameraPos.xyz, velocity.xyz));\n  pos.xyz += camUp * vertOffset;\n  pos = cc_matViewProj * pos;\n  uv = a_texCoord.zw * mainTiling_Offset.xy + mainTiling_Offset.zw;;\n  color = a_color;\n  #if CC_DRAW_WIRE_FRAME\n    vBarycentric = a_texCoord2;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vs_main(); }","frag":"\nprecision mediump float;\nuniform highp vec4 cc_time;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\n#if CC_DRAW_WIRE_FRAME\n  varying vec3 vBarycentric;\n#endif\nuniform sampler2D mainTexture;\n  uniform vec4 mainColor;\n  uniform vec4 outlineColor;\n  uniform vec2 noise_scale;\n    uniform int frequency;\n    uniform float energy;\n    uniform float speed;\n    uniform float thickness;\n    uniform float outline_thickness;\n    uniform float beam_difference;\n    uniform float glow;\n    uniform float outline_glow;\n    uniform float progress;\n    uniform float y_offset;\n    uniform float fixed_edge_size;\nfloat random(vec2 uv) {\n    return fract(sin(dot(uv.xy,\n        vec2(12.9898,78.233))) *\n            43758.5453123);\n}\nfloat noise(vec2 uv) {\n    vec2 uv_index = floor(uv);\n    vec2 uv_fract = fract(uv);\n    float a = random(uv_index);\n    float b = random(uv_index + vec2(1.0, 0.0));\n    float c = random(uv_index + vec2(0.0, 1.0));\n    float d = random(uv_index + vec2(1.0, 1.0));\n    vec2 blur = smoothstep(0.0, 1.0, uv_fract);\n    return mix(a, b, blur.x) +\n            (c - a) * blur.y * (1.0 - blur.x) +\n            (d - b) * blur.x * blur.y;\n}\nfloat fbm(vec2 uv, float time) {\n  #if ROUGHNESS == 1\n  const int octaves = 1;\n  #elif ROUGHNESS == 2\n  const int octaves = 2;\n  #elif ROUGHNESS == 3\n  const int octaves = 3;\n  #elif ROUGHNESS == 4\n  const int octaves = 4;\n  #elif ROUGHNESS == 5\n  const int octaves = 5;\n  #elif ROUGHNESS == 6\n  const int octaves = 6;\n  #endif\n  float amp = 0.01 * energy * progress;\n  float freq = float(frequency);\n  float value = 0.0;\n  for(int i = 0; i < octaves; i++) {\n      value += amp * noise(freq * vec2(uv.x, uv.y + time));\n      amp *= 0.5;\n      freq *= 2.0;\n  }\n  return value;\n}\nvec4 difference(vec4 base, vec4 blend){\n  return abs(base - blend);\n}\nvec4 bolt(vec2 uv, float time, float i){\n  float falloff = smoothstep(0.0, fixed_edge_size, uv.x) * smoothstep(0.0, fixed_edge_size, 1.0 - uv.x);\n  vec4 clouds = vec4(fbm((uv + vec2(i)) * noise_scale, time * speed)) * falloff;\n  vec4 diff_clouds = difference(clouds, vec4(uv.y - 0.5 + y_offset + (uv.y * falloff * 0.02 * energy * progress)));\n  vec4 clouds2 = vec4(fbm((uv * 2.0) * noise_scale, time * 1.)) * 5.0;\n  diff_clouds += smoothstep(0.0, 0.8, clouds2) * 0.1 * (1.-progress);\n  float thickness2 =  1. -\n  ( thickness / (min(i + beam_difference, 1.0) + (1.0-beam_difference))) * progress ;\n  float easeIn = mix(2.1,1.,clamp(uv.x+.9,0.,1.));\n  vec4 beam = clamp(smoothstep(thickness2 * easeIn, (thickness2 * easeIn + 0.005 * progress), 1.0 - diff_clouds), vec4(0.0), vec4(1.0));\n  vec4 beam_outline;\n  float outline = thickness2 - (outline_thickness * progress);\n  beam_outline = clamp(smoothstep(outline * easeIn, outline * easeIn + 0.04, 1.0 - diff_clouds), 0.0, 1.0);\n  beam_outline = clamp(beam_outline - beam, 0.0, 1.0);\n  return (beam * (mainColor + vec4(glow, glow, glow, 0.))) + (beam_outline * (outlineColor + vec4(outline_glow, outline_glow, outline_glow, 0.)));\n}\nvec4 add () {\n  vec4 beam = vec4(0.0);\n  #if BEAMS_COUNT == 1\n  const float beamsCount = 1.0;\n  #elif BEAMS_COUNT == 2\n  const float beamsCount = 2.0;\n  #elif BEAMS_COUNT == 3\n  const float beamsCount = 3.0;\n  #elif BEAMS_COUNT == 4\n  const float beamsCount = 4.0;\n  #elif BEAMS_COUNT == 5\n  const float beamsCount = 5.0;\n  #elif BEAMS_COUNT == 6\n  const float beamsCount = 6.0;\n  #endif\n  for (float i = 0.0; i < beamsCount; i+=1.0){\n    beam = max(beam, bolt(uv, cc_time.x, i));\n  }\n  return CCFragOutput(beam);\n}\nvoid main() { gl_FragColor = add(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":53,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":53}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_DRAW_WIRE_FRAME","type":"boolean","defines":[]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROUGHNESS","type":"number","defines":[],"range":[1,6]},{"name":"BEAMS_COUNT","type":"number","defines":[],"range":[1,6]}]}],[{"name":"add","passes":[{"program":"../Internal/Shaders/Laser/LaserShader|particle-trail:vs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"frameTile_velLenScale":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}},"outlineColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}},"frequency":{"type":5,"value":[10]},"energy":{"type":13,"value":[3]},"speed":{"type":13,"value":[1]},"thickness":{"type":13,"value":[0.006]},"outline_thickness":{"type":13,"value":[0.03]},"beam_difference":{"type":13,"value":[0]},"glow":{"type":13,"value":[0]},"outline_glow":{"type":13,"value":[0]},"progress":{"type":13,"value":[1]},"y_offset":{"type":13,"value":[0]},"fixed_edge_size":{"type":13,"value":[0.05]},"noise_scale":{"type":14,"value":[1,0]}}}]}]]],0,0,[],[],[]],[[[112,"0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4294967295],"mainTexture",6,0]],11]]],0,0,[0,0],[30,12],[29,25]],[[[112,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4294967295],"mainTexture",6,0]],11]]],0,0,[0,0],[30,12],[64,25]],[[[50,"SM_TowerSmash3RBody_01"],[47,"SM_TowerSmash3RBody_01",[-2],[2,"424JMWZcNT+7LUIxhmggm+",-1,0]],[53,"SM_TowerSmash3RBody_01",1,[[52,-3,[1,"6dld1XsrhbprQRWAgl+86p"],[0],[34],1]],[2,"01bmdrW4JXtZt850BsSA/w",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[1,192]],[[[168,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainColor",8,[4,4288810092]]],11]]],0,0,[0],[12],[34]],[[[168,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainColor",8,[4,4285098345]]],11]]],0,0,[0],[12],[34]],[[[63,"SM_TowerStarfallBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",3344625144,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":42000,"length":11004,"count":2751,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":42000,"count":875,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.26049327850341797,-0.3358308672904968,-0.009908358566462994],"maxPosition",8,[1,0.2604946792125702,0.26236942410469055,0.5138998627662659]]],-1],0,0,[],[],[]],[[[62],[47,"SM_TowerStarfallBody_01",[-2],[2,"33sM9enERVxYZcocgwSPwR",-1,0]],[53,"SM_TowerStarfallBody_01",1,[[52,-3,[1,"c2i6M6mIdSAJVEUjqztCnG"],[0],[34],1]],[2,"6cUxh5uoJYzKl3tC1g7j0i",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[434,183]],[[[62],[47,"SM_EnemyCargo_01",[-2],[2,"891ZPn4nZbPKViqxf9B2Lw",-1,0]],[53,"SM_EnemyCargo_01",1,[[52,-3,[1,"2bPtrJwrJaRbWH2ryoR9YV"],[0],[34],1]],[2,"e0BhHAhhZUvI7kUr1l9BXG",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[435,436]],[[[63,"SM_EnemyCargo_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",3756885045,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27264,"length":3528,"count":882,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27264,"count":568,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3752727508544922,-0.405847430229187,-0.05720945820212364],"maxPosition",8,[1,0.37538644671440125,0.5373253226280212,0.39562320709228516]]],-1],0,0,[],[],[]],[[{"name":"Icon_Replay","rect":{"x":1,"y":0,"width":46,"height":48},"offset":{"x":0,"y":0},"originalSize":{"width":48,"height":48},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[21],[437]],[[[63,"SM_EnemyRunner_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[62],[47,"SM_EnemyRunner_02",[-2],[2,"56wQT6ekRbMpczHSaWzAPR",-1,0]],[53,"SM_EnemyRunner_02",1,[[52,-3,[1,"313Q+KY7xZ5rxcBAcijvSt"],[0],[34],1]],[2,"4akHIYctheZYlBuf7N3NQy",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[438,439]],[[[57,".bin",581612013,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9696,"length":1224,"count":306,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9696,"count":202,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.24423977732658386,-0.15887238085269928,-0.24002273380756378],"maxPosition",8,[1,0.24423974752426147,0.3754769563674927,0.4861389696598053]]],-1],0,0,[],[],[]],[[[50,"P-TowerUpgrades-UI"],[82,0,{},[29,"46k0m6lkdE7LjR/vInpkl2",-51,[386,"84oPhfCVNNepRzTDrc/qVl",-50,[[215,[4,["0aSc2CSmNOv7gy3zhm972w","b88SOLEf1G8Llh8jZIyZGc"]],[-47]],[215,[4,["175KhMRQRDzrwjR+Y/XD8F"]],[-48]],[215,[4,["basO3xNKRMubx47MkKLOyR"]],[-49]]],[[249,[4,["c4JryQ715OxZEXyEuY811m"]],[-45]],[249,[4,["559OljkmVJbb40T1JglvS/"]],[-46]]],[[14,"Holder_TowerUpgradeMenu",["_name"],-1],[10,["_lpos"],-2,[1,0,0,0]],[10,["_lrot"],-3,[3,0,0,0,1]],[10,["_euler"],-4,[1,0,0,0]],[14,1,["_animationEvents","0","_actions","length"],-5],[172,["_animationEvents","0","_actions","0"],-7,[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",-6]],[28,false,["_debug"],[4,["ffZ2Ct4zBH+Zt94rHKmSpg"]]],[14,"Button_Color",["_name"],-8],[10,["_lpos"],-9,[1,0,0,0]],[14,"Button_Color",["_name"],-10],[10,["_lpos"],-11,[1,0,0,0]],[14,"Button_Color",["_name"],-12],[10,["_lpos"],-13,[1,0,0,0]],[28,"Dot_Outline",["_name"],[4,["fad6l15HhESar9QeacgpaJ"]]],[14,"Panel_Outline",["_name"],-14],[10,["_lpos"],-15,[1,0,0,0]],[14,"Panel_Energy Color",["_name"],-16],[10,["_lpos"],-17,[1,0,0,0]],[14,"Panel_Outline",["_name"],-18],[10,["_lpos"],-19,[1,0,0,0]],[14,"Panel_Energy Color",["_name"],-20],[10,["_lpos"],-21,[1,0,0,0]],[14,"Panel_Outline",["_name"],-22],[10,["_lpos"],-23,[1,0,0,0]],[14,"Panel_Energy Color",["_name"],-24],[10,["_lpos"],-25,[1,0,0,0]],[28,0,["_opacity"],[4,["18PnzBvKpPm5jHmDihqUZ9"]]],[28,false,["_active"],[4,["37Eb9ZL+JM5azHm5AEqitc"]]],[14,"Stats 01",["_name"],-26],[10,["_lpos"],-27,[1,-62,-5.182,0]],[14,"Stats 02",["_name"],-28],[10,["_lpos"],-29,[1,0,-5.182,0]],[14,"Stats 03",["_name"],-30],[10,["_lpos"],-31,[1,62,-5.182,0]],[14,true,["_active"],-32],[14,"Holder_Tower Button 03",["_name"],-33],[10,["_color"],-34,[4,4281401599]],[14,"Destroy",["_string"],-35],[14,1,["clickEvents","length"],-36],[172,["clickEvents","1"],-38,[7,"ac879rTendCEbpZWFz/jexs","playSFX",-37]],[14,1,["clickEvents","length"],-39],[172,["clickEvents","1"],-41,[7,"ac879rTendCEbpZWFz/jexs","playSFX",-40]],[14,1,["clickEvents","length"],-42],[172,["clickEvents","1"],-44,[7,"ac879rTendCEbpZWFz/jexs","playSFX",-43]],[28,false,["_debug"],[4,["82+Qldi0dJcJTsSoTpzmOs"]]],[28,true,["_debug"],[4,["99AQyBFexBdqAz+WiT48yy"]]],[28,8,["_eventID"],[4,["2dmSthkmBFhqDzGkvuZcgk"]]]]],15]],[133,"P-TowerUpgrades-UI",33554432,[-76,-77,-78],[[18,-72,[1,"2ewIMej8xFo5kz4JgY2bkv"],[5,414,896]],[282,-73,[1,"9d2KX1VUROYr/ruG1NwdBU"]],[381,45,5.684341886080802e-14,5.684341886080802e-14,-74,[1,"b3PXiLDqJO3b6ito6Imtxc"]],[258,-75,[1,"83QfGN5bdHRJOu+OogZfkV"]]],[86,"d2vYEIV9FA2ZrKggRnx1pJ",-71,0,[[61,["_animator"],1,[4,["ffZ2Ct4zBH+Zt94rHKmSpg"]],1,[4,["f13UGmbg5KLrhluQFmxr/w"]]],[74,["_tierUpUpgrades","0","entryNode"],-55,1,[4,["74XRvRkuBPX6zuG43ddIDV","0fJEdVoOpA/qcZPGFboeiN"]]],[74,["_tierUpUpgrades","1","entryNode"],-56,1,[4,["c1RSk6NUhFVYmVRsNR9Aqa","0fJEdVoOpA/qcZPGFboeiN"]]],[74,["_tierUpUpgrades","2","entryNode"],-57,1,[4,["0aSc2CSmNOv7gy3zhm972w","0fJEdVoOpA/qcZPGFboeiN"]]],[74,["_commonUpgrades","0","entryNode"],-58,1,[4,["175KhMRQRDzrwjR+Y/XD8F"]]],[74,["_commonUpgrades","1","entryNode"],-59,1,[4,["basO3xNKRMubx47MkKLOyR"]]],[74,["_showUpgradeInfo","0","target"],-60,1,[4,["bb7Kak23hMTYfuoFKHjabu"]]],[74,["_setTierUpUI","0","target"],-61,1,[4,["165POIGiVCTbJeF4ypPaek"]]],[74,["_setTierUpUI","1","target"],-62,1,[4,["34GO02mHFBr7SAk+hQxhbP"]]],[74,["_setLevelUpUI","0","target"],-63,1,[4,["165POIGiVCTbJeF4ypPaek"]]],[74,["_setLevelUpUI","1","target"],-64,1,[4,["34GO02mHFBr7SAk+hQxhbP"]]],[61,["clickEvents","0","target"],1,[4,["0aSc2CSmNOv7gy3zhm972w","bfWHMMhHhHZppymV9Y7kAU"]],1,[4,["0aSc2CSmNOv7gy3zhm972w","0fJEdVoOpA/qcZPGFboeiN"]]],[61,["_target"],1,[4,["0aSc2CSmNOv7gy3zhm972w","bfWHMMhHhHZppymV9Y7kAU"]],1,[4,["0aSc2CSmNOv7gy3zhm972w","a6az63RfpIg6Gg/gQf45Dh"]]],[61,["clickEvents","0","target"],1,[4,["50hrJYbf9IHLRR1ePLEmnJ"]],1,[4,["basO3xNKRMubx47MkKLOyR"]]],[61,["clickEvents","0","target"],1,[4,["e0iQibPDNGYIKJsHwZFwIm"]],1,[4,["175KhMRQRDzrwjR+Y/XD8F"]]],[61,["_animator"],1,[4,["82+Qldi0dJcJTsSoTpzmOs"]],1,[4,["47yBIwvkZE2aGBAdlhkSNv"]]],[61,["_onEnable","0","target"],1,[4,["44hjLkOIxHkqZ37y3El6fN"]],1,[4,["175KhMRQRDzrwjR+Y/XD8F"]]],[61,["_onEnable","0","target"],1,[4,["5aPj7mhcBJsoJqrNFRjFCq"]],1,[4,["basO3xNKRMubx47MkKLOyR"]]],[61,["_animator"],1,[4,["99AQyBFexBdqAz+WiT48yy"]],1,[4,["56JKwaJhFDV5L2wgkKwUbU"]]],[74,["_onEventRaised","0","target"],-65,1,[4,["c4JryQ715OxZEXyEuY811m"]]],[74,["_onEventRaised","0","target"],-66,1,[4,["c4JryQ715OxZEXyEuY811m"]]],[74,["_button"],-67,1,[4,["50hrJYbf9IHLRR1ePLEmnJ"]]],[74,["_button"],-68,1,[4,["1ayGJX7NFLw4ZV5ksbBfGW"]]],[74,["_onEventRaised","1","target"],-69,1,[4,["559OljkmVJbb40T1JglvS/"]]],[74,["_onEventRaised","1","target"],-70,1,[4,["559OljkmVJbb40T1JglvS/"]]]],[1,-52,-53,-54]],[1,207,448.00000000000006,0]],[206,"Content Holder",false,33554432,2,[-82,-83,-84,1],[[18,-79,[1,"bbYbk4IzlJ6481IbySBUTv"],[5,414,896]],[154,45,100,100,1,-80,[1,"b8Ki3TWiBD64iVR3i5Nv36"]],[55,-81,[1,"f8VlTJb/FN7Zvk7iPrTSxg"]]],[2,"e6+CrXE2lGoKjlvtgfAyZr",2,0]],[627,[1,"d5H7nmQmBHdaoxK+4Fz2ad"],[[7,"99672sUg5NFw4x7bEPAiyHE","activate",3],[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","intro",1]],[[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",1]],[[340,1,-88],[340,1,-89],[340,2,-90]],[[420,1],[420,2]],[[153,"9724cyw/qJC54XASWo2Oks7","setTowerInfo"],[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","towerClick",1],[7,"ac879rTendCEbpZWFz/jexs","playSFX",-87]],[[7,"ac879rTendCEbpZWFz/jexs","playSFX",-86]],[[7,"ac879rTendCEbpZWFz/jexs","playSFX",-85]],[[153,"99672sUg5NFw4x7bEPAiyHE","activate"],[153,"99672sUg5NFw4x7bEPAiyHE","deactivate"]],[[153,"99672sUg5NFw4x7bEPAiyHE","deactivate"],[153,"99672sUg5NFw4x7bEPAiyHE","activate"]]],[133,"Close Button",33554432,[-97],[[18,-91,[1,"cfcosrmlNEH5U8U1HB3UsA"],[5,150,35]],[214,1,0,-92,[1,"38kh+l6ipB/ZkzumoEOcTo"],0],[262,2,-95,[1,"945LpHThdHTbhHc54iypft"],[[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",3],[7,"cd32dlNM6hEkokUGHlLV8y+","raise",-94]],[4,4292269782],-93,1,2,3,4],[192,8,-96,[1,"0eFwvNjyBI2banO23AlzEY"]]],[2,"6fyIjr3g9M0KP4Nze67uYA",2,0],[1,0,17.5,0]],[133,"Upgrades",33554432,[5,-101,-102],[[95,-98,[1,"f06VnbEK1MZJ6dXB3psGwM"],[5,150,125],[0,0.5,0]],[390,1,2,10,0,true,-99,[1,"262YJceVRH2qvEXphaGYTT"]],[508,36,15,15,15,-100,[1,"84QsAggHRGZo+3Ek4+1kb/"]]],[2,"0f9TPVP/BEZ5g8JLjynszA",2,0],[1,117,-433,0]],[85,"Events",33554432,2,[-104,-105,-106,-107,-108],[[18,-103,[1,"9bSOC/aNxIC6HltJU6gGdZ"],[5,0,0]]],[2,"faxweChyxEr5Rq/j6i+ssH",2,0]],[76,"Upgrade 1",33554432,6,[-113],[[18,-109,[1,"3bx0q8Tc9LNLUSz9tWgw/J"],[5,150,35]],[214,1,0,-110,[1,"ffRQfAysZMLoTjybyUpZSZ"],5],[395,2,-112,[1,"d3R/XUX6pJ+JzGZTYbOaV3"],[4,4292269782],-111,6,7,8,9]],[2,"ff9gCexFRGor/4ZapCYGC3",2,0],[1,0,62.5,0]],[76,"Upgrade 2",33554432,6,[-118],[[18,-114,[1,"c3iaFHNrhD5Y855YtYJj5q"],[5,150,35]],[214,1,0,-115,[1,"27yvlibyVIfaM+/yli0K5/"],10],[395,2,-117,[1,"7aqSQo9ddKEZWqRdyi3QPM"],[4,4292269782],-116,11,12,13,14]],[2,"90G+cBh2FEcKP75QclqzKI",2,0],[1,0,107.5,0]],[177,"Destroy SFX",33554432,[[48,-119,[1,"4d75DvBQFLhZCFjNey0XBq"]],[144,"sfx-player-towerdestroyed",-120,[1,"caR5PfbWlEI4nXfzR+GDGc"]]],[2,"f3p+W1vxhC1bRiNh4b1AtK",2,0]],[85,"Scripts",33554432,2,[-122,-123,-124,-125],[[18,-121,[1,"3eXrS4eWFKMKZrUQP7fPCE"],[5,0,0]]],[2,"b3lUtl74dPk49K0kbClTaX",2,0]],[85,"Audio",33554432,11,[-127,-128,10],[[48,-126,[1,"5efpW2PANCi7TRH7Ga4XL4"]]],[2,"f3RefTpvZPgYZWoqi6SFZq",2,0]],[142,"Tower Upgrades UI",33554432,11,[[[48,-129,[1,"0fMMjpEPxLw4mwdRw61gmn"]],4],4,1],[2,"34rHfGnN1AY4Jy+uZOINFt",2,0]],[4,["0fJEdVoOpA/qcZPGFboeiN"]],[4,["0fJEdVoOpA/qcZPGFboeiN"]],[4,["0fJEdVoOpA/qcZPGFboeiN"]],[39,"Upgrade SFX",33554432,12,[[48,-130,[1,"acMSN8duRHboPoluY43pJB"]],[144,"sfx-player-upgrade",-131,[1,"95qkOP2RVHW5WNS/v/7zJ0"]]],[2,"adJQMJRk1MHL3ydCAVWJ1w",2,0]],[39,"Game Victory",33554432,7,[[48,-132,[1,"f643UGEb9GN4euRkol95pX"]],[169,3,-134,[1,"d0avuTEIRP8Jhx3VESCszr"],[[7,"cd32dlNM6hEkokUGHlLV8y+","raise",-133],[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",1]]],[192,8,-135,[1,"44CkfMgqRJWYPVc9tQSKQ3"]]],[2,"d7onHVG+lNT4t+KRaPwCCM",2,0]],[39,"Game Over",33554432,7,[[48,-136,[1,"f45yUurZdA25EwoPawcIhE"]],[169,4,-138,[1,"07eCaTZ9xLia0KwZdX/6QN"],[[7,"cd32dlNM6hEkokUGHlLV8y+","raise",-137],[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",1]]],[192,8,-139,[1,"2dvCvEWJlC85EQtOO4ppn6"]]],[2,"561B01PUFP0LFEKCbi7+mH",2,0]],[206,"MidPanel",false,33554432,3,[6],[[18,-140,[1,"39XDHQ5stLBacRQRPl3138"],[5,414,896]],[162,45,100,100,-141,[1,"24UvozfwVB57p0MHCN90KR"]]],[2,"760hgsZr5BTYrdIuawNRVW",2,0]],[300,"Text_+",33554432,[[18,-142,[1,"d60lqCvyBOV51j5Yq5uq1K"],[5,15.38,34.239999999999995]],[155,"+",24,24,24,false,-143,[1,"4bqh9sDHhGzopYpFv+F8KY"],[4,4287102766],16],[334,-144,[1,"26pVjKDeBKJquFLBwrT5zf"],[4,4282974275]]],[2,"9eOM8cT8tD/KTEb2GtywTH",2,0],[1,-18.862,-0.695,0]],[4,["46k0m6lkdE7LjR/vInpkl2"]],[4,["78bCuqtM5FvINnH01nOP6N"]],[4,["8bBj36fMNOUZFpmts6EkfF"]],[4,["78bCuqtM5FvINnH01nOP6N"]],[4,["78bCuqtM5FvINnH01nOP6N"]],[39,"Click SFX",33554432,12,[[48,-145,[1,"a0ubLdgoZES7dGmps+6E9m"]],[144,"sfx-ui-gametap",-146,[1,"daFGxdTp1EganwrX/2g+je"]]],[2,"1eKghDtylD0K49y5sO7iog",2,0]],[85,"Tutorial",33554432,7,[-148,-149],[[48,-147,[1,"b0DuE4l/5Djohnk2qpiXUj"]]],[2,"56dk3ro+xJd61UNtHp8ERZ",2,0]],[298,"TopPanel",false,33554432,3,[[18,-150,[1,"dcHgoCC+hEr7BIl7/GljSC"],[5,414,100]],[382,41,100,-151,[1,"13BvCAQ41JzqPkz2Gq6r5O"]]],[2,"a4IClDx9JHK7twxHHyg5DJ",2,0],[1,0,398,0]],[39,"Label",33554432,5,[[18,-152,[1,"9buCLlUOpAG48Qu6YNdaOw"],[5,100,40]],[232,"Close",17,17,1,false,-153,[1,"79gm+29PFEHIsnZmQ6Zppu"],[4,4278190080]]],[2,"52v9EhtApGmr4PLiscehs6",2,0]],[39,"Label",33554432,8,[[18,-154,[1,"a8TibKElpPgoAxC+/3mY5O"],[5,100,40]],[232,"Upgrade 1",17,17,1,false,-155,[1,"dd+9sZ68lNCbIlbe+Wklyk"],[4,4278190080]]],[2,"79J1oSyTRPoptHro9w40eu",2,0]],[39,"Label",33554432,9,[[18,-156,[1,"083TRRVmhCIZcuy2dJTWYB"],[5,100,40]],[232,"Upgrade 2",17,17,1,false,-157,[1,"c5zBeo4HRDRYdXDzxP1MwV"],[4,4278190080]]],[2,"948kmtdmpFPLlOHhkAwamg",2,0]],[298,"BotPanel",false,33554432,3,[[18,-158,[1,"eeRIPARs5EPK5eXRIsHJ7/"],[5,414,100]],[382,44,100,-159,[1,"02EphyL4xKRJ3Wj1YVqKPN"]]],[2,"16VOZ1xNFAAK8aJWNzPoH/",2,0],[1,0,-398,0]],[177,"On Enable",33554432,[[48,-160,[1,"230Nm3xu9HS5fTq148/bUF"]],[252,-161,[1,"44hjLkOIxHkqZ37y3El6fN"],[[186,"2022ebMdchE2pNL1SpqTm8g","setTrigger","intro"]]]],[2,"640RFaY5hOWogyWMP69QTl",2,0]],[177,"On Enable",33554432,[[48,-162,[1,"d3IhF/959G6pZY5aWTWu3x"]],[252,-163,[1,"5aPj7mhcBJsoJqrNFRjFCq"],[[186,"2022ebMdchE2pNL1SpqTm8g","setTrigger","intro"]]]],[2,"74yGjUCfZLOZH/wxmjTQgg",2,0]],[165,0,null,[152,"New Node"],[29,"0fJEdVoOpA/qcZPGFboeiN",-174,[42,"74XRvRkuBPX6zuG43ddIDV",1,[[14,"Holder_Tower Button 01",["_name"],14],[10,["_lpos"],14,[1,0,0,0]],[10,["_lrot"],14,[3,0,0,0,1]],[10,["_euler"],14,[1,0,0,0]],[14,"Button_Color",["_name"],-164],[10,["_lpos"],-165,[1,0,0,0]],[14,"Button_Outline",["_name"],23],[10,["_lpos"],23,[1,0,0,0]],[10,["_lrot"],23,[3,0,0,0.3826834323650898,0.9238795325112867]],[10,["_euler"],23,[1,0,0,45]],[14,true,["_active"],14],[14,"Button_Outline 2",["_name"],-166],[10,["_lpos"],-167,[1,0,0,0]],[14,"Button_Outline 1",["_name"],-168],[10,["_lpos"],-169,[1,0,0,0]],[28,false,["_active"],[4,["e9EkiL/+1I4KWEMpMRNY1g"]]],[14,2,["_clips","length"],24],[143,["_clips","0"],24,18],[143,["_defaultClip"],24,19],[14,"Panel_Outline",["_name"],-170],[10,["_lpos"],-171,[1,0,0,0]],[14,"Panel_Energy Color",["_name"],-172],[10,["_lpos"],-173,[1,0,0,0]],[28,false,["_active"],[4,["07J8NL3JNE+J1JbZaH9Gkn"]]],[143,["_clips","1"],24,20]]],17]],[165,0,null,[152,"New Node"],[29,"0fJEdVoOpA/qcZPGFboeiN",-181,[42,"c1RSk6NUhFVYmVRsNR9Aqa",1,[[14,"Holder_Tower Button 02",["_name"],15],[10,["_lpos"],15,[1,0,0,0]],[10,["_lrot"],15,[3,0,0,0,1]],[10,["_euler"],15,[1,0,0,0]],[14,"Button_Color",["_name"],-175],[10,["_lpos"],-176,[1,0,0,0]],[14,"Button_Outline",["_name"],25],[10,["_lpos"],25,[1,0,0,0]],[10,["_lrot"],25,[3,0,0,0.3826834323650898,0.9238795325112867]],[10,["_euler"],25,[1,0,0,45]],[14,"Panel_Outline",["_name"],-177],[10,["_lpos"],-178,[1,0,0,0]],[14,"Panel_Energy Color",["_name"],-179],[10,["_lpos"],-180,[1,0,0,0]],[14,true,["_active"],15]]],21]],[165,0,null,[152,"New Node"],[29,"0fJEdVoOpA/qcZPGFboeiN",-188,[42,"0aSc2CSmNOv7gy3zhm972w",1,[[14,"Holder_Tower Button 03",["_name"],16],[10,["_lpos"],16,[1,0,0,0]],[10,["_lrot"],16,[3,0,0,0,1]],[10,["_euler"],16,[1,0,0,0]],[14,"Button_Color",["_name"],-182],[10,["_lpos"],-183,[1,0,0,0]],[14,"Button_Outline",["_name"],26],[10,["_lpos"],26,[1,0,0,0]],[10,["_lrot"],26,[3,0,0,0.3826834323650898,0.9238795325112867]],[10,["_euler"],26,[1,0,0,45]],[14,"Panel_Outline",["_name"],-184],[10,["_lpos"],-185,[1,0,0,0]],[14,"Panel_Energy Color",["_name"],-186],[10,["_lpos"],-187,[1,0,0,0]],[14,true,["_active"],16]]],22]],[39,"Entrance Tween",33554432,11,[[48,-189,[1,"c5S5z/jEFO6JAnfFfxfU7P"]],[561,0.5,-190,[1,"9aiq4QQkBKPa50x/gGDdlR"]]],[2,"e0pssaD6NIlYaPEpnxpPDq",2,0]],[39,"Exit Tween",33554432,11,[[48,-191,[1,"84oMcdBWVIiqaD0PGhfUkW"]],[562,0.5,255,0,-192,[1,"89qqDBSwhJ44SD+VTo/vR2"]]],[2,"b1vgGPs/ZKE6BcMuQ4pmJQ",2,0]],[39,"Show UI Listener",33554432,7,[[48,-193,[1,"d7UvftNAdJ2ZYMCCvBlTtF"]],[190,5,-194,[1,"64E/yhfyhGvbKVip5RKmYP"],[[7,"90668MDLy5GBJFMTozjY7sY","showUI",13]]]],[2,"61+/9H3YVL1q044zfDtisN",2,0]],[39,"Hide UI Listener",33554432,7,[[48,-195,[1,"9cSu8Z4ylHk5ioiJm3q8l+"]],[190,6,-196,[1,"f2rQNNcbdNnKFDcunIEgwi"],[[7,"90668MDLy5GBJFMTozjY7sY","hideUI",13]]]],[2,"fev6V9Fd1AyotLT40rpZJa",2,0]],[142,"Started",33554432,28,[[[48,-197,[1,"2dz1+BhpJNKp2UK4hd9sQo"]],-198],4,1],[2,"f2wBGBCr5Nva5ulVG10sPN",2,0]],[250,3,43,[1,"d1eKVOOLVGU7G9e8+5J8ov"],[[186,"b2629pBo9BDtrAXL8hN6QoS","setInteractable","false"],[186,"b2629pBo9BDtrAXL8hN6QoS","setInteractable","false"]]],[142,"Finished",33554432,28,[[[48,-199,[1,"2dCcObPZVMbKXNSLZm51rr"]],-200],4,1],[2,"fdlAOdn2BJEIJS5PWgcdTT",2,0]],[250,4,45,[1,"d1eKVOOLVGU7G9e8+5J8ov"],[[186,"b2629pBo9BDtrAXL8hN6QoS","setInteractable","true"],[186,"b2629pBo9BDtrAXL8hN6QoS","setInteractable","true"]]],[251,[1,"53ipIgQFdFtrBLm6Y7q+Qj"]],[251,[1,"f2jk0YGmtIIrlBFk1nTV3M"]],[4,["99UzDZa6pHQ4VtG5vEXqut"]],[4,["74XRvRkuBPX6zuG43ddIDV","a6az63RfpIg6Gg/gQf45Dh"]],[4,["c1RSk6NUhFVYmVRsNR9Aqa","a6az63RfpIg6Gg/gQf45Dh"]],[4,["0aSc2CSmNOv7gy3zhm972w","a6az63RfpIg6Gg/gQf45Dh"]],[4,["74XRvRkuBPX6zuG43ddIDV","b4p3nx06pA3q2OOmIuPIqT"]],[4,["74XRvRkuBPX6zuG43ddIDV","a4xPBm209GU5Mh8eoXMqG3"]],[4,["c1RSk6NUhFVYmVRsNR9Aqa","b4p3nx06pA3q2OOmIuPIqT"]],[4,["c1RSk6NUhFVYmVRsNR9Aqa","a4xPBm209GU5Mh8eoXMqG3"]],[4,["0aSc2CSmNOv7gy3zhm972w","b4p3nx06pA3q2OOmIuPIqT"]],[4,["0aSc2CSmNOv7gy3zhm972w","a4xPBm209GU5Mh8eoXMqG3"]],[4,["cdN/iXwS9EWaea7ROuvyKb"]],[4,["0325m7PSVKEJgP6FqjArxY"]],[4,["35oTOUcq5LW6sLAKY0sSNr"]],[4,["0aSc2CSmNOv7gy3zhm972w","0fJEdVoOpA/qcZPGFboeiN"]],[4,["0aSc2CSmNOv7gy3zhm972w","69yyRlXrpMd62pIm5Z3QYa"]],[4,["0aSc2CSmNOv7gy3zhm972w","bfWHMMhHhHZppymV9Y7kAU"]],[4,["a6az63RfpIg6Gg/gQf45Dh"]],[4,["42ZSZDURBPuYxZbUVkytNk"]],[4,["64o7LRB4FEdaQLAV4SPsYe"]],[4,["b4p3nx06pA3q2OOmIuPIqT"]],[4,["a4xPBm209GU5Mh8eoXMqG3"]],[4,["a6az63RfpIg6Gg/gQf45Dh"]],[4,["b4p3nx06pA3q2OOmIuPIqT"]],[4,["a4xPBm209GU5Mh8eoXMqG3"]],[4,["a6az63RfpIg6Gg/gQf45Dh"]],[4,["b4p3nx06pA3q2OOmIuPIqT"]],[4,["a4xPBm209GU5Mh8eoXMqG3"]],[4,["50hrJYbf9IHLRR1ePLEmnJ"]],[4,["e0iQibPDNGYIKJsHwZFwIm"]]],0,[0,1,22,0,1,22,0,1,22,0,1,22,0,1,49,0,3,3,0,1,49,0,1,50,0,1,50,0,1,51,0,1,51,0,1,52,0,1,52,0,1,53,0,1,53,0,1,54,0,1,54,0,1,55,0,1,55,0,1,56,0,1,56,0,1,57,0,1,57,0,1,58,0,1,58,0,1,59,0,1,59,0,1,60,0,1,60,0,1,61,0,1,61,0,1,62,0,1,62,0,1,63,0,1,63,0,1,64,0,3,10,0,1,64,0,1,76,0,3,10,0,1,76,0,1,77,0,3,17,0,1,77,0,-1,47,0,-1,48,0,-1,21,0,-1,34,0,-1,35,0,43,2,0,2,1,0,-2,36,0,-3,37,0,-4,38,0,13,4,0,13,4,0,13,4,0,13,4,0,13,4,0,13,4,0,13,4,0,13,4,0,13,4,0,13,4,0,13,44,0,13,46,0,13,47,0,13,48,0,13,44,0,13,46,0,2,2,0,0,2,0,0,2,0,0,2,0,0,2,0,-1,3,0,-2,11,0,-3,7,0,0,3,0,0,3,0,0,3,0,-1,29,0,-2,20,0,-3,33,0,3,10,0,3,17,0,3,27,0,40,36,0,40,37,0,40,38,0,0,5,0,0,5,0,17,5,0,3,5,0,0,5,0,0,5,0,-1,30,0,0,6,0,0,6,0,0,6,0,-2,8,0,-3,9,0,0,7,0,-1,41,0,-2,42,0,-3,18,0,-4,19,0,-5,28,0,0,8,0,0,8,0,17,8,0,0,8,0,-1,31,0,0,9,0,0,9,0,17,9,0,0,9,0,-1,32,0,0,10,0,0,10,0,0,11,0,-1,13,0,-2,39,0,-3,40,0,-4,12,0,0,12,0,-1,27,0,-2,17,0,0,13,0,0,17,0,0,17,0,0,18,0,3,18,0,0,18,0,0,18,0,0,19,0,3,19,0,0,19,0,0,19,0,0,20,0,0,20,0,0,21,0,0,21,0,0,21,0,0,27,0,0,27,0,0,28,0,-1,43,0,-2,45,0,0,29,0,0,29,0,0,30,0,0,30,0,0,31,0,0,31,0,0,32,0,0,32,0,0,33,0,0,33,0,0,34,0,0,34,0,0,35,0,0,35,0,1,65,0,1,65,0,1,66,0,1,66,0,1,67,0,1,67,0,1,68,0,1,68,0,1,69,0,1,69,0,2,36,0,1,70,0,1,70,0,1,71,0,1,71,0,1,72,0,1,72,0,2,37,0,1,73,0,1,73,0,1,74,0,1,74,0,1,75,0,1,75,0,2,38,0,0,39,0,0,39,0,0,40,0,0,40,0,0,41,0,0,41,0,0,42,0,0,42,0,0,43,0,-2,44,0,0,45,0,-2,46,0,9,2,1,7,3,4,0,13,5,7,6,6,7,20,10,7,12,200],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4],[6,25,35,36,37,6,25,35,36,37,6,25,35,36,37,8,19,8,11,11,11,8,8,39],[17,17,17,27,28,17,17,17,27,28,17,17,17,27,28,71,8,30,35,35,52,30,30,45]],[[[50,"P-Charger-1"],[125,"P-Charger-1",[[-16,-17,[80,"Events",-19,[2,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[156,"Charger-1",-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[55,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[151,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[2,"4505kBZFlJebjm5k8fm2Li",1,0],[1,0.9,0.9,1]],[124,"Movement",[-26],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,2,[29,"fbcmmbHnpbkKfFI1OpgAzY",-32,[69,"a8SW1Faz9InYyK96nQrWtr",1,[[67,[4,["fbcmmbHnpbkKfFI1OpgAzY"]],[[55,-31,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[14,"SM_Model",["_name"],-27],[10,["_lpos"],-28,[1,0,-0.2,0]],[10,["_lrot"],-29,[3,0,0,0,1]],[10,["_euler"],-30,[1,0,0,0]],[40,["_materials","0"],[4,["b2FzVpdT5WjYWZcvkiHil1"]],3],[28,"SM_Model",["_name"],[4,["68I7jgr3Ffeb9oCqZlx96t"]]]]],2]],[35,"Scripts",1,[3,-33,-34,-35],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[4,["fbcmmbHnpbkKfFI1OpgAzY"]],[35,"VFX",2,[-36,-37,-38],[2,"bdNGNXBQ9KTLo/bx+BUMIf",1,0]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-46,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[14,"P-HP-Bar",["_name"],-39],[10,["_lpos"],-40,[1,207,448.00000000000006,0]],[10,["_lrot"],-41,[3,0,0,0,1]],[10,["_euler"],-42,[1,0,0,0]],[14,"Art",["_name"],-43],[10,["_lpos"],-44,[1,0,0,0]]]],15]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Death_Erupt",7,[-47],[2,"daMwfGc4NL/auxQL8Q4JCQ",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,10,[1,"17o8Y07eNF/b1c3HMAfd1L"],[4],[5],[3,0.4],[0],[0],[0],[0],[0],[0],[0],[3,0.16],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.3169642857142857],[13,0.4575892857142857,[4,4294938922]],[13,1,[4,4289817645]]],[[9,255,0.5736607142857143],[9,0,1]]]]],[31,[0]],[78,true,true,[111,2,2,[8,[0,1],[[6,2,0.02962962962962963,1.913888888888889,1.913888888888889],[11,2,1]]],[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-48],[26,5]],[59,"VFX_Death_Shards",7,[-49],[2,"aanBhtfPdPlYQWdTIR4r+Y",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,12,[1,"7aXOGkfxlNB6KIdMBW0PEI"],[6],[5],[23,3,0.05,0.1],[0],[0],[23,3,3,5],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.3,0.8],[3,1],[0],[0],[[25,[23,3,5,7]]],[20,true,[16,1,[33,[[43,0.16964285714285715],[13,0.33035714285714285,[4,4294938368]],[13,0.7991071428571429,[4,4284748062]]],[[9,255,0.23883928571428573],[9,0,1]]]]],[109,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-8.726646259971647,8.726646259971647]],[123,true,2,2,[0],[0]],[19,[0],[0],[5],[5],-50],[26,7]],[59,"VFX_Spawn",7,[-51,-52],[2,"312++yuaZFqKnSTOCLaFu5",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[46,"HP Controller",5,[-53],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[139,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[7,"cc.ParticleSystem","play",10],[7,"cc.ParticleSystem","play",12],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[54,"On Death VFX Finished",5,[[96,-55,[1,"99+kQz+NdFNb+r9ZWyIgMO"],[11,13],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"d73932Ss1LSY14pUMC8EnN",1,0]],[105,"Temp-Model",false,2,[[79,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",2,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,14,[1,"4edAx2gE9MXaM6VmiiC0Sv"],[8],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-57],[26,9]],[97,0.3,false,14,[1,"fcSPK6NplLd5EgIKaLsVnz"],[[10,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-58],[26,11]],[104,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[46,"Stun",5,[-59],[2,"a7lJh34g9IM4Ukk1My+Bit",1,0]],[117,23,[1,"7973OshxtNs6o8Rndp256l"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[35,"UI",1,[8],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,3,8,0,13,16,0,2,1,0,20,24,0,27,22,0,28,16,0,3,3,0,3,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,2,1,0,7,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,6,0,1,6,0,1,6,0,1,6,0,0,4,0,2,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,17,19,0,2,8,0,-1,11,0,4,11,0,-1,13,0,4,13,0,-1,20,0,-2,21,0,-1,16,0,3,17,0,0,17,0,0,18,0,4,20,0,4,21,0,-1,24,0,9,1,3,7,5,8,7,25,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,-2,18,8],[14,13,440,1,20,19,10,18,4,3,11,9,5,15,5,16]],[[[168,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainColor",8,[4,4283948521]]],11]]],0,0,[0],[12],[34]],[[[149,[[150,[120,[-22,-23,-24,-25,-26,-27,-28,-29,-30],[[330,0,-5,-4,[[157,[118,"hasEnergy"]]]],[84,0,false,-7,-6,[[91,"exit"]]],[84,0,false,-9,-8,[[91,"exitClicked"]]],[330,0,-11,-10,[[181,1,[118,"hasEnergy"]]]],[84,0,false,-13,-12,[[181,1,[118,"hasEnergy"]]]],[84,0,false,-15,-14,[[157,[118,"hasEnergy"]]]],[84,0,false,-17,-16,[[91,"exit"]]],[121,-19,-18],[84,0,false,-21,-20,[[91,"intro"]]]],-3,-2,-1]]],[{},"exit",4,[113,2],"exitClicked",4,[113,2],"hasEnergy",4,[174,1,true],"intro",4,[113,2]]],[71,"LevelUpButton_Idle",[75,2]],[71,"LevelUpButton_NoEnergyIdle",[75,4]],[71,"LevelUpButton_Intro",[75,0]],[65,"Entry"],[65,"Any"],[71,"LevelUpButton_Exit",[75,1]],[65,"Exit"],[71,"LevelUpButton_Exit Upgrade",[75,3]],[71,"Empty",[180]]],0,[0,22,5,0,23,7,0,24,4,0,14,1,0,15,3,0,14,6,0,15,1,0,14,8,0,15,1,0,14,2,0,15,3,0,14,2,0,15,1,0,14,1,0,15,2,0,14,6,0,15,2,0,14,9,0,15,4,0,14,3,0,15,5,0,-1,4,0,-2,7,0,-3,5,0,-4,3,0,-5,6,0,-6,1,0,-7,8,0,-8,2,0,-9,9,30],[0,0,0,0,0],[16,16,16,16,16],[152,151,153,150,154]],[[[112,"3",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[30,12],[53,25]],[[[267,"builtin-unlit",[{"hash":3152709001,"name":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","blocks":[{"name":"TexCoords","stageFlags":1,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1}],"defines":["USE_TEXTURE"]},{"name":"Constant","stageFlags":16,"binding":1,"members":[{"name":"mainColor","type":16,"count":1},{"name":"colorScaleAndCutoff","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_TEXTURE"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":14,"defines":["USE_VERTEX_COLOR"]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":17,"location":0,"defines":["!CC_USE_ACCURATE_FOG"]},{"name":"v_color","type":16,"count":1,"stageFlags":17,"location":1,"defines":["USE_VERTEX_COLOR"]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":2,"defines":["USE_TEXTURE"]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  layout(location = 14) in lowp vec4 a_color;\n  layout(location = 1) out lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  layout(location = 2) out vec2 v_uv;\n  layout(set = 1, binding = 0) uniform TexCoords {\n    vec4 tilingOffset;\n  };\n#endif\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) in float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  layout(location = 2) in vec2 v_uv;\n  layout(set = 1, binding = 2) uniform sampler2D mainTexture;\n#endif\nlayout(set = 1, binding = 1) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScaleAndCutoff;\n};\n#if USE_VERTEX_COLOR\n  layout(location = 1) in lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec4 texColor = texture(mainTexture, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  in lowp vec4 a_color;\n  out lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  out vec2 v_uv;\n  layout(std140) uniform TexCoords {\n    vec4 tilingOffset;\n  };\n#endif\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nin float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  in vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\nlayout(std140) uniform Constant {\n  vec4 mainColor;\n  vec4 colorScaleAndCutoff;\n};\n#if USE_VERTEX_COLOR\n  in lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec4 texColor = texture(mainTexture, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout vec4 In)\n{\n    In = vec4(a_position, 1.0);\n  #if CC_USE_MORPH\n    applyMorph(In);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  #endif\n#endif\nvoid CCGetWorldMatrix(out mat4 matWorld)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n  #else\n    matWorld = cc_matWorld;\n  #endif\n}\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\n#if USE_VERTEX_COLOR\n  attribute lowp vec4 a_color;\n  varying lowp vec4 v_color;\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n      uniform vec4 tilingOffset;\n#endif\nvec4 vert () {\n  vec4 position;\n  CCVertInput(position);\n  mat4 matWorld;\n  CCGetWorldMatrix(matWorld);\n  #if USE_TEXTURE\n    v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n    #if SAMPLE_FROM_RT\n      v_uv = cc_cameraPos.w > 1.0 ? vec2(v_uv.x, 1.0 - v_uv.y) : v_uv;\n    #endif\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(matWorld * position);\n  return cc_matProj * (cc_matView * matWorld) * position;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nvec3 ACESToneMap (vec3 color) {\n  color = min(color, vec3(8.0));\n  const float A = 2.51;\n  const float B = 0.03;\n  const float C = 2.43;\n  const float D = 0.59;\n  const float E = 0.14;\n  return (color * (A * color + B)) / (color * (C * color + D) + E);\n}\nvec3 SRGBToLinear (vec3 gamma) {\n  return gamma * gamma;\n}\nvec4 CCFragOutput (vec4 color) {\n  #if CC_USE_HDR\n    color.rgb = ACESToneMap(color.rgb);\n  #endif\n  color.rgb = sqrt(color.rgb);\n  return color;\n}\nuniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\nvoid CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n  color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_APPLY_FOG(inout vec4 color) {\n#if !CC_USE_ACCURATE_FOG\n    CC_APPLY_FOG_BASE(color, v_fog_factor);\n#endif\n}\nvoid CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n#if CC_USE_ACCURATE_FOG\n    float factor;\n    CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n#else\n    float factor = v_fog_factor;\n#endif\n    CC_APPLY_FOG_BASE(color, factor);\n}\n#if USE_ALPHA_TEST\n#endif\n#if USE_TEXTURE\n  varying vec2 v_uv;\n  uniform sampler2D mainTexture;\n#endif\n   uniform vec4 mainColor;\n   uniform vec4 colorScaleAndCutoff;\n#if USE_VERTEX_COLOR\n  varying lowp vec4 v_color;\n#endif\nvec4 frag () {\n  vec4 o = mainColor;\n  o.rgb *= colorScaleAndCutoff.xyz;\n  #if USE_VERTEX_COLOR\n    o.rgb *= SRGBToLinear(v_color.rgb);\n    o.a *= v_color.a;\n  #endif\n  #if USE_TEXTURE\n    vec4 texColor = texture2D(mainTexture, v_uv);\n    texColor.rgb = SRGBToLinear(texColor.rgb);\n    o *= texColor;\n  #endif\n  #if USE_ALPHA_TEST\n    if (o.ALPHA_TEST_CHANNEL < colorScaleAndCutoff.w) discard;\n  #endif\n  CC_APPLY_FOG(o);\n  return CCFragOutput(o);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":198,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":41}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"SAMPLE_FROM_RT","type":"boolean","defines":["USE_TEXTURE"]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"ALPHA_TEST_CHANNEL","type":"string","defines":["USE_ALPHA_TEST"],"options":["a","r","g","b"]}]}],[{"name":"opaque","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"transparent","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"add","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]},{"name":"alpha-blend","passes":[{"program":"builtin-unlit|unlit-vs:vert|unlit-fs:frag","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":2,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"type":"color"}},"colorScale":{"type":15,"value":[1,1,1],"handleInfo":["colorScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["colorScaleAndCutoff",3,13]},"color":{"linear":true,"type":16,"editor":{"visible":false},"handleInfo":["mainColor",0,16]},"colorScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]}},"migrations":{"properties":{"mainColor":{"formerlySerializedAs":"color"}}}}]}]]],0,0,[],[],[]],[[[112,"0",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,4294967295],"mainTexture",6,0]],11]]],0,0,[0,0],[30,12],[72,25]],[[[50,"SM_TowerCanonBody_01"],[47,"SM_TowerCanonBody_01",[-2],[2,"71Cqetuz1TIrfKXzSRo+z5",-1,0]],[53,"SM_TowerCanonBody_01",1,[[52,-3,[1,"d9wgbH4UlZC7nUms8aIXK/"],[0],[34],1]],[2,"a0vA4SVVBXN5xQ94MS7y5I",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[1,193]],[[[168,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainColor",8,[4,4285082325]]],11]]],0,0,[0],[12],[34]],[[[50,"P-Overcharger-1"],[125,"P-Overcharger-1",[[-16,-17,[80,"Events",-19,[2,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[156,"OverCharger-1",-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[55,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[164,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[2,"4505kBZFlJebjm5k8fm2Li",1,0]],[124,"Movement",[-26],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,2,[29,"7862h+dgVbk5QFM+q8blZa",-32,[69,"87ezNMSW1Pj7eH2L+9FW6e",1,[[67,[4,["7862h+dgVbk5QFM+q8blZa"]],[[55,-31,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[14,"SM_Model",["_name"],-27],[10,["_lpos"],-28,[1,0,-0.117,0]],[10,["_lrot"],-29,[3,0,0,0,1]],[10,["_euler"],-30,[1,0,0,0]],[40,["_materials","0"],[4,["33p2XKWl9b4LU6vlryeMiU"]],3],[28,"SM_Model",["_name"],[4,["29mesNITFSQo4+2eDCD29U"]]]]],2]],[35,"Scripts",1,[3,-33,-34,-35],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[4,["7862h+dgVbk5QFM+q8blZa"]],[35,"VFX",2,[-36,-37,-38],[2,"e7q2ZZEtBG4b05YDeprIFJ",1,0]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-46,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[14,"P-HP-Bar",["_name"],-39],[10,["_lpos"],-40,[1,207,448.00000000000006,0]],[10,["_lrot"],-41,[3,0,0,0,1]],[10,["_euler"],-42,[1,0,0,0]],[14,"Art",["_name"],-43],[10,["_lpos"],-44,[1,0,0,0]]]],15]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Death_Erupt",7,[-47],[2,"07/D0H+hBOtbLTh3kwjVNO",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,10,[1,"b9+99mXE5Dp7fls5nddwxi"],[4],[5],[3,0.4],[0],[0],[0],[0],[0],[0],[0],[3,0.16],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.3169642857142857],[13,0.4575892857142857,[4,4294938922]],[13,1,[4,4289817645]]],[[9,255,0.5736607142857143],[9,0,1]]]]],[31,[0]],[78,true,true,[111,2,2,[8,[0,1],[[6,2,0.02962962962962963,1.913888888888889,1.913888888888889],[11,2,1]]],[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-48],[26,5]],[59,"VFX_Death_Shards",7,[-49],[2,"b7hfQ4rSRPtacQqIjZ47YU",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,12,[1,"9ayf/cIaZLp5LmqS/M7KzR"],[6],[5],[23,3,0.05,0.1],[0],[0],[23,3,3,5],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.3,0.8],[3,1],[0],[0],[[25,[23,3,5,7]]],[20,true,[16,1,[33,[[43,0.16964285714285715],[13,0.33035714285714285,[4,4294938368]],[13,0.7991071428571429,[4,4284748062]]],[[9,255,0.23883928571428573],[9,0,1]]]]],[109,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-8.726646259971647,8.726646259971647]],[123,true,2,2,[0],[0]],[19,[0],[0],[5],[5],-50],[26,7]],[59,"VFX_Spawn",7,[-51,-52],[2,"e6XGWXmiFHU7OwSIe3qbCm",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[46,"HP Controller",5,[-53],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[139,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[7,"cc.ParticleSystem","play",10],[7,"cc.ParticleSystem","play",12],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[54,"On Death VFX Finished",5,[[96,-55,[1,"f0AW0tnyVIP7WSDcrl8H1E"],[11,13],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"0fanKKi7VFgpz6lRDDtuCi",1,0]],[105,"Temp-Model",false,2,[[79,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",2,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,14,[1,"d9Casq+5JFaJWAQA/CiQiE"],[8],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-57],[26,9]],[97,0.3,false,14,[1,"e7edqMXKhFeoc9iMoSUZ36"],[[10,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-58],[26,11]],[104,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[46,"Stun",5,[-59],[2,"32M7FxrCVKI7Xft3OiHENL",1,0]],[117,23,[1,"fdeu2EU09DaabKimvdRlii"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[35,"UI",1,[8],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,3,8,0,13,16,0,2,1,0,20,24,0,27,22,0,28,16,0,3,3,0,3,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,2,1,0,7,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,6,0,1,6,0,1,6,0,1,6,0,0,4,0,2,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,17,19,0,2,8,0,-1,11,0,4,11,0,-1,13,0,4,13,0,-1,20,0,-2,21,0,-1,16,0,3,17,0,0,17,0,0,18,0,4,20,0,4,21,0,-1,24,0,9,1,3,7,5,8,7,25,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,-2,18,8],[14,13,441,1,20,19,10,18,4,3,11,9,5,15,5,16]],[[[50,"P-LaserTower-Beam"],[47,"P-LaserTower-Beam",[-2],[2,"c46/YsCPVOJYA4mWEpNYRx",-1,0]],[54,"Temp",1,[[295,-3,[1,"222iH/EhhPB7NCHRxT98+N"],[3,0.5],[5],0]],[2,"b5twpQgB9KKoMf5U6SpAil",1,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0],[42],[65]],[[[474,[{}],[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}]]],0,0,[0],[12],[34]],[[[50,"SM_Tower0MG2Body_01"],[195,"SM_Tower0MG2Body_01",[-2],[2,"4d/LLVKgJfRaWh6CVtkvdN",-1,0],[1,2000,0,0]],[53,"SM_Tower0MG2Body_01",1,[[52,-3,[1,"91rnZr2NlU+5mkmycELrbU"],[0],[34],1]],[2,"1bNv8OFqZfVYpfEynFuksV",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[1,188]],[[[168,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[30,12],[442,443]],[[[50,"P-Runner-1"],[125,"P-Runner-1",[[-16,-17,[80,"Events",-19,[2,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[156,"Runner-1",-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[55,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[164,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[2,"4505kBZFlJebjm5k8fm2Li",1,0]],[124,"Movement",[-26],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,2,[29,"56wQT6ekRbMpczHSaWzAPR",-32,[69,"b6ThQi+45HXJ7pB6s0AduF",1,[[67,[4,["56wQT6ekRbMpczHSaWzAPR"]],[[55,-31,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[14,"SM_Model",["_name"],-27],[10,["_lpos"],-28,[1,0,0,0]],[10,["_lrot"],-29,[3,0,0,0,1]],[10,["_euler"],-30,[1,0,0,0]],[40,["_materials","0"],[4,["313Q+KY7xZ5rxcBAcijvSt"]],3],[28,"SM_Model",["_name"],[4,["4akHIYctheZYlBuf7N3NQy"]]]]],2]],[35,"Scripts",1,[3,-33,-34,-35],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[4,["56wQT6ekRbMpczHSaWzAPR"]],[35,"VFX",2,[-36,-37,-38],[2,"bbDJc4k1dGxLjq6D2UwBeq",1,0]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-46,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[14,"P-HP-Bar",["_name"],-39],[10,["_lpos"],-40,[1,207,448.00000000000006,0]],[10,["_lrot"],-41,[3,0,0,0,1]],[10,["_euler"],-42,[1,0,0,0]],[14,"Art",["_name"],-43],[10,["_lpos"],-44,[1,0,0,0]]]],15]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Death_Erupt",7,[-47],[2,"fcPEsGvepKOrTUJB6fcWs6",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,10,[1,"b9P5pZ9LdBOpokTLjsJd8b"],[4],[5],[3,0.4],[0],[0],[0],[0],[0],[0],[0],[3,0.16],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.3169642857142857],[13,0.4575892857142857,[4,4294938922]],[13,1,[4,4289817645]]],[[9,255,0.5736607142857143],[9,0,1]]]]],[31,[0]],[78,true,true,[111,2,2,[8,[0,1],[[6,2,0.02962962962962963,1.913888888888889,1.913888888888889],[11,2,1]]],[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-48],[26,5]],[59,"VFX_Death_Shards",7,[-49],[2,"f4EvwtfG5OEogC0/xgRL4P",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,12,[1,"67o5WKLpNAwIAELigkkEUx"],[6],[5],[23,3,0.05,0.1],[0],[0],[23,3,3,5],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.3,0.8],[3,1],[0],[0],[[25,[23,3,5,7]]],[20,true,[16,1,[33,[[43,0.16964285714285715],[13,0.33035714285714285,[4,4294938368]],[13,0.7991071428571429,[4,4284748062]]],[[9,255,0.23883928571428573],[9,0,1]]]]],[109,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-8.726646259971647,8.726646259971647]],[123,true,2,2,[0],[0]],[19,[0],[0],[5],[5],-50],[26,7]],[59,"VFX_Spawn",7,[-51,-52],[2,"beHSMfbpBALKwfas+0RiYc",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[46,"HP Controller",5,[-53],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[166,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[7,"cc.ParticleSystem","play",10],[7,"cc.ParticleSystem","play",12],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]],1],[54,"On Death VFX Finished",5,[[96,-55,[1,"28DttneaJIGraTVbpNQ4Be"],[11,13],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"57lJ/zOTBOxr/hzZtVWldU",1,0]],[105,"Temp-Model",false,2,[[79,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",2,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,14,[1,"59F1T5lkdGbooM7lYreasT"],[8],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-57],[26,9]],[97,0.3,false,14,[1,"aaf3NUvhhATKlLF3MaFyPO"],[[10,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-58],[26,11]],[104,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[46,"Stun",5,[-59],[2,"1bDC3INmZDPKSD+VXGoFWT",1,0]],[117,23,[1,"5blfnh3mZEKY21waVs51Q/"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[35,"UI",1,[8],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,3,8,0,13,16,0,2,1,0,20,24,0,27,22,0,28,16,0,3,3,0,3,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,2,1,0,7,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,6,0,1,6,0,1,6,0,1,6,0,0,4,0,2,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,17,19,0,2,8,0,-1,11,0,4,11,0,-1,13,0,4,13,0,-1,20,0,-2,21,0,-1,16,0,3,17,0,0,17,0,0,18,0,4,20,0,4,21,0,-1,24,0,9,1,3,7,5,8,7,25,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,-2,18,8],[14,13,444,1,20,19,10,18,4,3,11,9,5,15,5,16]],[[[63,"SM_CubeDetail_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[62],[47,"SM_CubeDetail_01",[-2],[2,"37AJz6L3dTxa3usvYy5S1i",-1,0]],[53,"SM_CubeDetail_01",1,[[52,-3,[1,"9bRA9bc99UN4/jH8hpKpSw"],[0],[34],1]],[2,"b7OTkN7zJbQaLfYZ0r1fCN",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[445,446]],[[[57,".bin",220353745,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6144,"length":1824,"count":456,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6144,"count":128,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3242543339729309,-0.32377660274505615,0.6501219272613525],"maxPosition",8,[1,0.32335513830184937,0.3234686851501465,1.0834296941757202]]],-1],0,0,[],[],[]],[[[63,"SM_BlockPath_03__0.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[62],[47,"SM_BlockPath_03",[-2],[2,"e9QGVwjwRRNYH2wTOhd0ZX",-1,0]],[53,"SM_BlockPath_03",1,[[52,-3,[1,"0fKTIDFQVVW7qzAtQnZb77"],[0],[34],1]],[2,"d5MAXqwNBQ37lQWF+m2Yc7",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[447,448]],[[[57,".bin",3128253248,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4032,"length":1128,"count":282,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4032,"count":84,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.48000001907348633,-0.47999992966651917,0],"maxPosition",8,[1,0.47999992966651917,0.48000001907348633,0.20543640851974487]]],-1],0,0,[],[],[]],[[[63,"SM_TowerThunderBBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[62],[47,"SM_TowerThunderBBody_01",[-2],[2,"9aoAAYJKJR56nsyDVR3xr1",-1,0]],[53,"SM_TowerThunderBBody_01",1,[[52,-3,[1,"a174aNwnFUq6B+C8hupOtt"],[0],[34],1]],[2,"71MWaMDMlRTpG7nD0b8naJ",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[449,187]],[[[57,".bin",2163548195,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":47088,"length":11256,"count":2814,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":47088,"count":981,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4354470372200012,-0.26893654465675354,-0.041434984654188156],"maxPosition",8,[1,0.4385400414466858,0.26907116174697876,0.7261096835136414]]],-1],0,0,[],[],[]],[[[63,"SM_Portal_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",1334893654,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":8640,"length":1056,"count":264,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":8640,"count":180,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5758242011070251,-0.13157989084720612,0.02858945168554783],"maxPosition",8,[1,0.5758242011070251,0.436624675989151,1.8215761184692383]]],-1],0,0,[],[],[]],[[[62],[47,"SM_Portal_01",[-2],[2,"8eEEusTA5fJb9F/OdJ08Sj",-1,0]],[434,"SM_Portal_01",1,[[52,-3,[1,"63JiEgzJZUH4IaEhPAqvsa"],[0],[34],1]],[2,"25hFHXaUhVr4TfyO0rKYFI",1,0],[3,-0.12415452954984084,0.6961218663368202,0.6961218663368202,0.12415452954984084],[1,0.972308337688446,0.972308337688446,0.972308337688446],[1,-90.00000000000001,159.77505676497233,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[450,451]],[[[149,[[203,"idleBase",[120,[-6,-7,-8,-9],[[121,-5,-4]],-3,-2,-1]],[203,"spawn",[120,[-25,-26,-27,-28,-29,-30],[[121,-14,-13],[193,0,-16,-15,[[91,"spawn"]]],[572,0,false,-18,-17],[84,0,false,-20,-19,[[91,"spawn"]]],[266,0,-22,-21],[84,0,false,-24,-23,[[91,"spawn"]]]],-12,-11,-10]]],[{},"spawn",4,[113,2]]],[71,"Spawn",[75,1]],[216,"Empty"],[71,"Spawn2",[75,2]],[65,"Entry"],[65,"Entry"],[65,"Exit"],[65,"Any"],[71,"Idle",[75,0]],[65,"Exit"],[65,"Any"]],0,[0,22,7,0,23,6,0,24,4,0,14,8,0,15,4,0,-1,4,0,-2,6,0,-3,7,0,-4,8,0,22,10,0,23,9,0,24,5,0,14,2,0,15,5,0,14,1,0,15,2,0,14,2,0,15,1,0,14,3,0,15,1,0,14,2,0,15,3,0,14,1,0,15,3,0,-1,5,0,-2,9,0,-3,10,0,-4,1,0,-5,2,0,-6,3,30],[0,0,0],[16,16,16],[84,85,85]],[[[62],[47,"SM_TowerCanonBody_01",[-2],[2,"71Cqetuz1TIrfKXzSRo+z5",-1,0]],[53,"SM_TowerCanonBody_01",1,[[52,-3,[1,"d9wgbH4UlZC7nUms8aIXK/"],[0],[34],1]],[2,"a0vA4SVVBXN5xQ94MS7y5I",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[452,193]],[[[57,".bin",1420947421,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":20736,"length":7296,"count":1824,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":20736,"count":432,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2249182164669037,-0.3272516429424286,0],"maxPosition",8,[1,0.2249182164669037,0.22491823136806488,0.3301343023777008]]],-1],0,0,[],[],[]],[[[63,"SM_TowerCanonBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[50,"P-Shielder-0"],[125,"P-Shielder-0",[[-16,-17,[80,"Events",-19,[2,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[179,"Shielder-0",1,-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[55,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[151,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[2,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[124,"Movement",[-26],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,2,[29,"d8e+2t58lRg7KkNuP6KtFQ",-28,[69,"ccW/QR3s5FuJ9hbrA2GmFi",1,[[67,[4,["d8e+2t58lRg7KkNuP6KtFQ"]],[[55,-27,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[28,"SM_Model",["_name"],[4,["d8e+2t58lRg7KkNuP6KtFQ"]]],[22,["_lpos"],[4,["d8e+2t58lRg7KkNuP6KtFQ"]],[1,0,0,0]],[22,["_lrot"],[4,["d8e+2t58lRg7KkNuP6KtFQ"]],[3,0,0,0,1]],[22,["_euler"],[4,["d8e+2t58lRg7KkNuP6KtFQ"]],[1,0,0,0]],[40,["_materials","0"],[4,["39boRnqgtbo5vuS2ne40Wb"]],3],[28,"SM_Model",["_name"],[4,["45PDynTphbp7AfDJkFxT6/"]]]]],2]],[35,"Scripts",1,[3,-29,-30,-31],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[35,"VFX",2,[-32,-33,-34],[2,"e6dPxkiN9DiYK38qG8I1ir",1,0]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-42,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-41]]]],[[14,"P-HP-Bar",["_name"],-35],[10,["_lpos"],-36,[1,207,448.00000000000006,0]],[10,["_lrot"],-37,[3,0,0,0,1]],[10,["_euler"],-38,[1,0,0,0]],[14,"Art",["_name"],-39],[10,["_lpos"],-40,[1,0,0,0]]]],15]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Death_Erupt",6,[-43],[2,"61k08KTwdFQp6Gnmd7inar",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,9,[1,"c2gTn9B2RJgaa8a3Mo7TZT"],[4],[5],[3,0.4],[0],[0],[0],[0],[0],[0],[0],[3,0.16],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.3169642857142857],[13,0.4575892857142857,[4,4294938922]],[13,1,[4,4289817645]]],[[9,255,0.5736607142857143],[9,0,1]]]]],[31,[0]],[78,true,true,[111,2,2,[8,[0,1],[[6,2,0.02962962962962963,1.913888888888889,1.913888888888889],[11,2,1]]],[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-44],[26,5]],[59,"VFX_Death_Shards",6,[-45],[2,"1cupfJzExEXI2WWcv4uspZ",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,11,[1,"9b+9coGHxDd48nz53pmpI4"],[6],[5],[23,3,0.05,0.1],[0],[0],[23,3,3,5],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.3,0.8],[3,1],[0],[0],[[25,[23,3,5,7]]],[20,true,[16,1,[33,[[43,0.16964285714285715],[13,0.33035714285714285,[4,4294938368]],[13,0.7991071428571429,[4,4284748062]]],[[9,255,0.23883928571428573],[9,0,1]]]]],[109,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-8.726646259971647,8.726646259971647]],[123,true,2,2,[0],[0]],[19,[0],[0],[5],[5],-46],[26,7]],[59,"VFX_Spawn",6,[-47,-48],[2,"d0zJGFhpVFTYAP9KQdjrWF",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[46,"HP Controller",5,[-49],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[568,14,[1,"f3B793wMZKGovjAcwFxNT/"],[[275]],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-50],[7,"cc.ParticleSystem","play",9],[7,"cc.ParticleSystem","play",11],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[54,"On Death VFX Finished",5,[[96,-51,[1,"5by60KLslI8Yp9MLRmjcsq"],[10,12],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"85NYyP5KVIw5rOErjiILU0",1,0]],[105,"Temp-Model",false,2,[[79,"Sphere<ModelComponent>",-52,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",2,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,13,[1,"85faTLaH1LVJBcnSLkivNM"],[8],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-53],[26,9]],[97,0.3,false,13,[1,"0d8sGCaKxJ+ZUHSBS3ioBR"],[[10,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-54],[26,11]],[104,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[46,"Stun",5,[-55],[2,"28wv4th1pNs6qDNkpOR9dx",1,0]],[117,22,[1,"92X5rq9oNDNouphSNFIziH"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[35,"UI",1,[7],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,7,0,3,7,0,13,15,0,2,1,0,20,23,0,27,21,0,28,15,0,3,3,0,3,14,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,2,1,0,7,1,0,-4,24,0,0,2,0,-1,17,0,-2,18,0,-3,4,0,-4,6,0,-1,21,0,0,4,0,2,4,0,-2,14,0,-3,22,0,-4,16,0,-1,9,0,-2,11,0,-3,13,0,1,8,0,1,8,0,1,8,0,1,8,0,1,25,0,1,25,0,17,18,0,2,7,0,-1,10,0,4,10,0,-1,12,0,4,12,0,-1,19,0,-2,20,0,-1,15,0,3,16,0,0,16,0,0,17,0,4,19,0,4,20,0,-1,23,0,9,1,3,7,5,7,7,24,55],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,-2,18,8],[14,13,453,1,20,19,10,18,4,3,11,9,5,15,5,16]],[[[628,"AGENCYB","AGENCYB.ttf"],-1],0,0,[],[],[]],[[[50,"SM_TowerPlasmaQBody_01"],[47,"SM_TowerPlasmaQBody_01",[-2],[2,"19dqAvhYZW66LFXyVsSUYV",-1,0]],[53,"SM_TowerPlasmaQBody_01",1,[[52,-3,[1,"d1WspVTtle/Jp16o0xqn79"],[0],[34],1]],[2,"fbzvYb5AVdtq1H47hzSAAe",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[1,194]],[[[149,[[150,[120,[-12,-13,-14,-15,-16,-17],[[121,-5,-4],[84,0,false,-7,-6,[[157,[118,"inScene"]]]],[84,0,false,-9,-8,[[181,1,[118,"inScene"]]]],[84,0,false,-11,-10,[[157,[118,"inScene"]]]]],-3,-2,-1]],[203,"Idle Layer",[120,[-23,-24,-25,-26],[[121,-22,-21]],-20,-19,-18]]],[{},"inScene",4,[174,1,false]]],[71,"Pointer_Intro",[75,0]],[65,"Entry"],[71,"Pointer_Exit",[75,1]],[71,"Empty",[180]],[65,"Entry"],[65,"Exit"],[65,"Any"],[65,"Exit"],[65,"Any"],[71,"Pointer_Idle",[75,2]]],0,[0,22,7,0,23,6,0,24,2,0,14,4,0,15,2,0,14,1,0,15,4,0,14,3,0,15,1,0,14,1,0,15,3,0,-1,2,0,-2,6,0,-3,7,0,-4,1,0,-5,3,0,-6,4,0,22,9,0,23,8,0,24,5,0,14,10,0,15,5,0,-1,5,0,-2,8,0,-3,9,0,-4,10,26],[0,0,0],[16,16,16],[195,196,95]],[[[112,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"tintColor",8,[4,3120562175],"mainTexture",6,0]],11]]],0,0,[0,0],[30,12],[86,25]],[[[63,"SM_Tower01HKOBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[62],[47,"SM_Tower01HKOBody_01",[-2],[2,"754aHt1OpZU5MrqxM/Ip4m",-1,0]],[53,"SM_Tower01HKOBody_01",1,[[52,-3,[1,"46S3F1J79Rz4XvfNv5iTfa"],[0],[34],1]],[2,"394Llq4YJQGJQtg3lCaMlI",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[454,182]],[[[57,".bin",2786443526,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27024,"length":9300,"count":2325,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27024,"count":563,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2534458637237549,-0.6484761238098145,1.065432986280257e-8],"maxPosition",8,[1,0.2534458637237549,0.3838222026824951,0.44677677750587463]]],-1],0,0,[],[],[]],[[[50,"P-Cannon-Tower"],[306,"P-Cannon-Tower",64,[[-11,-12,[80,"Events",-14,[2,"ef4CiMUqFFBLxbigVGcbkS",-13,0]],-15,-16],1,1,4,1,1],[-10],[196,"c7FBgV+GNP8JXw9YieWPKB",-9,0,[-1,-2,-3,-4,-5,-6,-7,-8]]],[435,"Head Pivot",[-17,-18,-19,-20,-21,-22,-23,-24],[2,"8aAB0jLY5MWZXHyr3JbC+S",1,0],[3,0,1,0,6.123233995736766e-17],[1,0,180,0]],[115,"Tower Attack",[[629,3,2,2,1,-28,[1,"46n88TmQFJgZL3l6vHb/n1"],1,-27,-26,[-25],33,41]],[2,"f40ywYz1xDCq70ENky8ahk",1,0]],[195,"Head",[2,-29,-30,-31,-32],[2,"adz0F6B8NHH7q2XNNslumG",1,0],[1,0,0.4,0]],[4,["424JMWZcNT+7LUIxhmggm+"]],[35,"Scripts",1,[3,-33,-34,-35,-36],[2,"395/jqomdNs4i+MZIAv9Bl",1,0]],[270,"Art",1,[-38,-39],[[316,-37,[1,"b6WTiqI1JLQKJpWDVCDXcn"],[30,31],32]],[2,"f6510qCkdPhZ5QPlFG7sjV",1,0],[1,0,0.25,0]],[36,0,null,2,[29,"71Cqetuz1TIrfKXzSRo+z5",-44,[42,"2apbKhEaRH9q60s+SY4v1z",1,[[14,"SM_TowerCanonBody_01",["_name"],-40],[10,["_lpos"],-41,[1,0,0,0]],[10,["_lrot"],-42,[3,0,0,0,1]],[10,["_euler"],-43,[1,0,0,0]],[40,["_materials","0"],[4,["d9wgbH4UlZC7nUms8aIXK/"]],5]]],4]],[36,0,null,2,[29,"424JMWZcNT+7LUIxhmggm+",-45,[42,"4baFVhGZJJXI4/2YGNo2W3",1,[[14,"SM_TowerSmash3RBody_01",["_name"],5],[10,["_lpos"],5,[1,0,0,0]],[10,["_lrot"],5,[3,0,0,0,1]],[10,["_euler"],5,[1,0,0,0]],[40,["_materials","0"],[4,["6dld1XsrhbprQRWAgl+86p"]],7],[14,false,["_active"],5],[10,["_lscale"],5,[1,1,1,1]]]],6]],[36,0,null,2,[29,"93NMATgvJXN5P2Z0Pbx6xd",-51,[42,"8c7nZwMMBOPrhH04yHD4Pq",1,[[14,"SM_TowerCometTBody_01",["_name"],-46],[10,["_lpos"],-47,[1,0,0,0]],[10,["_lrot"],-48,[3,0,0,0,1]],[10,["_euler"],-49,[1,0,0,0]],[40,["_materials","0"],[4,["36LCcIeKVRp7Mac4l4WlzY"]],9],[14,false,["_active"],-50]]],8]],[4,["93NMATgvJXN5P2Z0Pbx6xd"]],[36,0,null,2,[29,"76kmy9MSZU7qIHreg7REJV",-57,[42,"f0rq2kGH9BVIOzx6vwUFxp",1,[[14,"SM_TowerH311Body_01",["_name"],-52],[10,["_lpos"],-53,[1,0,0,0]],[10,["_lrot"],-54,[3,0,0,0,1]],[10,["_euler"],-55,[1,0,0,0]],[40,["_materials","0"],[4,["d5Ph66/6xbPK4Q72/PB8zz"]],11],[14,false,["_active"],-56]]],10]],[4,["76kmy9MSZU7qIHreg7REJV"]],[36,0,null,2,[29,"b8JcZpYRhbA7dBnVFp97b+",-63,[42,"f9oFE+OLhGkaOipP0J6xB0",1,[[14,"SM_TowerS4RBody_01",["_name"],-58],[10,["_lpos"],-59,[1,0,0,0]],[10,["_lrot"],-60,[3,0,0,0,1]],[10,["_euler"],-61,[1,0,0,0]],[40,["_materials","0"],[4,["aa2p+GekNcwr3d84smoPpV"]],13],[14,false,["_active"],-62]]],12]],[4,["b8JcZpYRhbA7dBnVFp97b+"]],[36,0,null,2,[29,"6ba5eX4SReyqm+Vbwgfquh",-69,[42,"448OA+EgZLjIAV7MPAl44Y",1,[[14,"SM_TowerMeteorUBody_01",["_name"],-64],[10,["_lpos"],-65,[1,0,0,0]],[10,["_lrot"],-66,[3,0,0,0,1]],[10,["_euler"],-67,[1,0,0,0]],[40,["_materials","0"],[4,["2aeozPTBpe75ML5ovX4gHo"]],15],[14,false,["_active"],-68]]],14]],[4,["6ba5eX4SReyqm+Vbwgfquh"]],[36,0,null,2,[29,"33sM9enERVxYZcocgwSPwR",-75,[42,"2c5InsZIxAw54BbRBHbLJS",1,[[14,"SM_TowerStarfallBody_01",["_name"],-70],[10,["_lpos"],-71,[1,0,0,0]],[10,["_lrot"],-72,[3,0,0,0,1]],[10,["_euler"],-73,[1,0,0,0]],[40,["_materials","0"],[4,["c2i6M6mIdSAJVEUjqztCnG"]],17],[14,false,["_active"],-74]]],16]],[4,["33sM9enERVxYZcocgwSPwR"]],[4,["71Cqetuz1TIrfKXzSRo+z5"]],[4,["a6UoiMmTtU6YsbaNPx5rqf"]],[337,"cannontower",3,"cannontower",1,1,[1,"92UYE5HlRLmKMlLGBWVR4U"],[[114,"cannontower","cannontower-plus",4,-1,"Level Up (4)",8],[158,"cannontower-plus","smash.3r",5,"Smash.3R (5)",9],[114,"cannontower-plus","comet-t",5,1,"Comet-T (5)",10],[114,"smash.3r","smash.3r-plus",6,-1,"Level Up (6)",9],[114,"smash.3r-plus","s.4r",8,2,"S.4R (8)",14],[114,"smash.3r-plus","h3ll",8,3,"H3LL (8)",12],[114,"s.4r","s.4r-plus",9,-1,"Level Up (9)",14],[114,"h3ll","h3ll-plus",9,-1,"Level Up (9)",12],[114,"comet-t","comet-t-plus",6,-1,"Level Up (6)",10],[114,"comet-t-plus","meteor-u",8,4,"Meteor-U (8)",16],[114,"comet-t-plus","starfall",6,5,"Starfall (6)",18],[114,"meteor-u","meteor-u-plus",9,-1,"Level Up (9)",16],[114,"starfall","starfall-plus",9,-1,"Level Up (9)",18],[114,"-","cannontower",-1,-1,"-",8]],[[7,"a7f6bBnGXlLbINkQ05pYpA3","towerDestroyed",3]]],[352,"TEMP-Model-Base",false,7,[-77],[[79,"Cube<ModelComponent>",-76,[1,"7bG1DGF3VI0JZiYz5rIjhD"],[2],[34],3]],[2,"085+2asOdGZYXXlS21L1NF",1,0],[1,0.5,0.5,0.5]],[35,"Cannon Tower Model",7,[4,-78],[2,"0asWtFjFNIhrWk5ZT8ESYR",1,0]],[466,"Bullet_Muzzle_Ring",512,4,[-79],[2,"40ZckTtjBCRofnNXry6G6r",1,0],[1,0,0.221,-0.277],[3,0.7071067811865475,-1.169810040804576e-24,-1.1698100408045763e-24,0.7071067811865476],[1,89.99999999999999,0,-1.895758319773386e-22]],[240,"Bullet_Muzzle_Fragments",4,[-80],[2,"68UqoyA5xGLYLkmj0PFCsi",1,0],[1,0,0.221,-0.277],[3,0.7071067811865475,-1.169810040804576e-24,-1.1698100408045763e-24,0.7071067811865476],[1,89.99999999999999,0,-1.895758319773386e-22]],[240,"Bullet_Muzzle_Flash_A",4,[-81],[2,"16nFLyiHVOHreKv6xR01kw",1,0],[1,0,0.221,-0.277],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[353,"VFX_TowerUpgrade",64,4,[-82,-83],[2,"e7MfxMqbpLeK9xgRaH0TIK",1,0],[1,0,0.158,0]],[199,false,[1,"34axcLrxpNPoYeRmEfqFBX"],[[24,null],6,0],[56,[4,3668826087]],[23,3,0.03,0.08],[0],[0],[23,3,0.2,1.5],[0],[0],[44,3,1.5707963267948966],[0],[23,3,0.9,1.6],[0],[3,3],[0],[20,true,[278,3,[37,[[38,0],[9,255,0.04910714285714286],[9,0,1]]],[37,[[38,0],[9,255,0.06696428571428571],[9,0,1]]]]],[309,true,0.6,0.5,0,[0],[1,0,-0.2,0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-1.7453292519943295,1.7453292519943295]],[24,[0],[0]],[19,[0],[0],[5],[5],-84],[26,25]],[199,false,[1,"1dP6VpE6RHwL3Ew5Ht9UFe"],[[26,null],6,0],[277,2,[4,2285688290],[4,2318556644]],[23,3,1.8,2.8],[0],[0],[0],[0],[0],[0],[0],[3,3],[0],[3,2],[0],[20,true,[16,1,[37,[[38,255],[9,0,1]]]]],[31,[0]],[32,true,[30,1,[8,[0,0.41794871794871796,1],[[6,2,0.3814814814814815,0.4896421845574388,0.4896421845574388],[6,2,0.8444444444444444,0.5947712418300657,0.5947712418300657],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-85],[26,27]],[82,0,null,[29,"a6UoiMmTtU6YsbaNPx5rqf",-86,[42,"14r4/EoxNPTZOfvqwJZymE",1,[[14,"SM_TowerBase_01",["_name"],21],[10,["_lpos"],21,[1,0,0,0]],[10,["_lrot"],21,[3,0,0,0,1]],[10,["_euler"],21,[1,0,0,0]],[40,["_materials","0"],[4,["c8x41wezhYTop9GywitTd7"]],29]]],28]],[159,"Physics",32,1,[[-87,[328,4,-88,[1,"97e/OxmxpCU4rWbyCxoizi"]]],1,4],[2,"9e2QPGtlxGhY+FpgLqB+0P",1,0],[1,0,0.25,0]],[35,"VFX",6,[-89,-90],[2,"c4pQRqFbpCoq07gB0Ki9/Q",1,0]],[115,"Shoot SFX",[[144,"sfx-towers-cannon-shoot",-91,[1,"34jpi96CJH4LCfi8bG0Dz0"]]],[2,"55MMh1S+ZGALk/v/emywL5",1,0]],[354,"Cube",23,[[79,"Cube<ModelComponent>",-92,[1,"97Ufor9GlN64W+hZraFqg3"],[0],[34],1]],[2,"c7K8ONC+dATbpE1sB25eRu",1,0],[1,0,0.75,0],[1,0.5,0.5,0.8]],[302,"Bullet Spawn Pivot",2,[2,"3anVnTxohH2pXT2TED77tE",1,0],[1,0,0.223,0.269],[3,0,1,0,-6.123233995736766e-17],[1,0,-180,0]],[130,0.2,false,false,1,25,[1,"79Rzr+uvdNF7T2Pvq1Jfvo"],[[18,null],6,0],[56,[4,2986344447]],[3,0.6],[0],[0],[0],[0],[0],[3,0.7853981633974483],[0],[3,0.25],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[13,0.09598214285714286,[4,4294753015]],[13,0.3147321428571428,[4,4293678506]],[13,0.8191964285714286,[4,4283436566]]],[[38,255],[9,255,0.19642857142857154],[9,0,1]]]]],[31,[0]],[32,true,[12,1,1.5,[8,[0,0.4846153846153846,1],[[6,2,0.14814814814814814,2.7575757575757565,2.7575757575757565],[6,2,0.9333333333333332,0.37555555555555636,0.37555555555555636],[11,2,1]]]],[12,1,2,[8,[0,0.4948717948717949,1],[[45,2,0.21241830065359474,1,0.21241830065359474,1],[6,2,0.5777777777777777,1.89272030651341,1.89272030651341],[41,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[12,1,2.5,[8,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[41,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[6,2,0.8925925925925926,4.513888888888884,4.513888888888884],[6,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[41,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-93],[26,19]],[73,0.5,false,false,26,[1,"e1Fd06BhRL8oiNVSMV9hig"],[[20,null],6,0],[5],[23,3,0.1,0.3],[0],[0],[23,3,0.2,0.8],[0],[0],[0],[0],[23,3,0.3,0.5],[44,3,0.3],[0],[0],[[25,[23,3,4,8]]],[20,true,[16,1,[33,[[119],[13,0.05133928571428574,[4,4293175768]],[13,0.2767857142857143,[4,4291450006]],[13,1,[4,4282851095]]],[[9,255,0.12946428571428573],[9,0,1]]]]],[208,true,3,2,true,0.25,[0]],[32,true,[30,1,[8,[0,1],[[41,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[41,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[21,[3,6],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[12,1,40,[8,[0,1],[[126,1,1,1,1],[106,1,1,1,1,1]]]]],[280,2,2,1,[83,4],[44,3,2]],[19,[0],[0],[5],[5],-94],[26,21]],[130,0.3,false,false,1,27,[1,"2cjMEBy9pBeJgv0nVoW0M3"],[[22,null],6,0],[5],[3,1.5],[3,1],[0],[0],[0],[0],[0],[0],[3,0.25],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.11830357142857142],[13,0.4151785714285714,[4,4293678518]],[13,0.8191964285714286,[4,4283436577]]],[[38,255],[9,182,0.5758928571428572],[9,0,1]]]]],[31,[0]],[32,true,[30,1,[8,[0,0.6512820512820513,1],[[41,2,1,0.027777777777778234,1,0.027777777777778234,1],[6,2,0.6814814814814815,-1.0432098765432094,-1.0432098765432094],[45,2,-3.020202020202019,1,-3.020202020202019,1]]]],[12,1,2,[8,[0,0.4948717948717949,1],[[45,2,0.21241830065359474,1,0.21241830065359474,1],[6,2,0.5777777777777777,1.89272030651341,1.89272030651341],[41,2,1,0.024074074074073987,1,0.024074074074073987,1]]]],[12,1,2.5,[8,[0,0.24615384615384617,0.29743589743589743,0.9948717948717949],[[41,2,0.17037037037037034,-0.027253668763102763,1,-0.027253668763102763,1],[6,2,0.8925925925925926,4.513888888888884,4.513888888888884],[6,2,0.9370370370370369,-2.5999999999999996,-2.5999999999999996],[41,2,0.025925925925925925,-0.0320987654320988,1,-0.0320987654320988,1]]]],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-95],[26,23]],[46,"VFX_TowerGlow",28,[29],[2,"75Y823RixCSo81r2/e9EZx",1,0]],[46,"VFX_TowerDots",28,[30],[2,"aaRxgnQTJGu6jkeiVFavd8",1,0]],[35,"Base",24,[-96],[2,"67LrFav61MSKViQ3O8Fp51",1,0]],[35,"Base Pivot",42,[31],[2,"81yE+LS/NEFblvHUGGg48U",1,0]],[93,true,3,32,[1,"4eMDs4lP1E65tyxVoUMp7G"]],[630,0.6,0,0,[1,"98A8nrqfpPmLQXeM5sAbvh"],22,[[131,"cannontower",34],[131,"smash.3r",35],[131,"s.4r",36],[131,"h3ll",37],[131,"comet-t",38],[131,"meteor-u",39],[131,"starfall",40]],36,[[7,"cc.ParticleSystem","play",25],[7,"cc.ParticleSystem","play",26],[7,"cc.ParticleSystem","play",27],[7,"cc.Animation","play",7],[7,"ac879rTendCEbpZWFz/jexs","playSFX",34]]],[46,"Cannon Attack VFX",33,[45],[2,"87QaRbqdVFaZ4sVn71oDNo",1,0]],[39,"Aura VFX Controller",64,33,[[338,-97,[1,"e0WsZoaU5E+ZFgS3xEACa3"],22,[29,30]]],[2,"6cWFGwLYtJdLMhm/ktb0YR",1,0]],[35,"Audio",6,[34],[2,"5cXLYlxJpJu45TjPkQidod",1,0]],[268,[1,"58hT8GWIRPNaY6fJrBaaJb"],4],[46,"Look At Target",6,[49],[2,"889oxCJrBMWLmFe3eY/1Gk",1,0]],[54,"Upgrade Handler",6,[[631,1,-98,[1,"f8KyFnbQZI8byKuDWSm+zV"],22,[[7,"a7f6bBnGXlLbINkQ05pYpA3","setShootFrequency",3]],[[7,"a7f6bBnGXlLbINkQ05pYpA3","setShootFrequency",3]],[[7,"a7f6bBnGXlLbINkQ05pYpA3","setRange",3]],[[7,"a7f6bBnGXlLbINkQ05pYpA3","setExplosionRange",3]],[[7,"a7f6bBnGXlLbINkQ05pYpA3","setCCTargets",3]],[[7,"a7f6bBnGXlLbINkQ05pYpA3","setBurn",3]]]],[2,"36JqN9SdFIwpXf+iY/w2Zw",1,0]],[146,"Debug",32,1,[-99],[2,"c5P03BmLRMW7wv+cKS4MkT",1,0]],[255,"Radius Sphere",false,32,52,[[79,"Sphere<ModelComponent>",-100,[1,"0cZhNLD85HH5MFbxfIpZNi"],[42],[34],43]],[2,"d96R4JVqFFAYKUs3lr7ZMs",1,0],[1,3,3,3]]],0,[0,-1,8,0,-2,9,0,-3,10,0,-4,12,0,-5,14,0,-6,16,0,-7,18,0,-8,31,0,2,1,0,-1,22,0,-1,7,0,-2,6,0,2,1,0,7,1,0,-4,32,0,-5,52,0,-1,8,0,-2,9,0,-3,10,0,-4,12,0,-5,14,0,-6,16,0,-7,18,0,-8,36,0,-1,49,0,44,45,0,45,44,0,0,3,0,-2,25,0,-3,26,0,-4,27,0,-5,28,0,-2,51,0,-3,50,0,-4,48,0,-5,33,0,0,7,0,-1,23,0,-2,24,0,1,20,0,1,20,0,1,20,0,1,20,0,2,8,0,2,9,0,1,11,0,1,11,0,1,11,0,1,11,0,1,11,0,2,10,0,1,13,0,1,13,0,1,13,0,1,13,0,1,13,0,2,12,0,1,15,0,1,15,0,1,15,0,1,15,0,1,15,0,2,14,0,1,17,0,1,17,0,1,17,0,1,17,0,1,17,0,2,16,0,1,19,0,1,19,0,1,19,0,1,19,0,1,19,0,2,18,0,0,23,0,-1,35,0,-2,42,0,-1,37,0,-1,38,0,-1,39,0,-1,40,0,-2,41,0,4,29,0,4,30,0,2,31,0,-1,44,0,0,32,0,-1,46,0,-2,47,0,0,34,0,0,35,0,4,37,0,4,38,0,4,39,0,-1,43,0,0,47,0,0,51,0,-1,53,0,0,53,0,9,1,2,7,4,3,7,6,4,7,24,29,0,40,30,0,41,31,7,43,34,7,48,45,0,46,49,0,50,100],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,45],[-1,10,-1,10,8,11,8,11,8,11,8,11,8,11,8,11,8,11,-1,5,-1,5,-1,5,-1,5,-1,5,8,11,-1,-2,18,46,31,31,31,31,31,31,31,70,-1,10,39,71],[455,32,170,32,456,1,457,1,458,1,459,1,460,1,461,1,462,1,11,9,4,3,33,29,4,3,4,3,66,1,197,94,197,186,54,54,54,463,54,54,54,464,89,13,45,54]],[[[149,[[150,[120,[-10,-11,-12,-13,-14,-15],[[121,-5,-4],[193,0,-7,-6,[[91,"notCompleted"]]],[193,0,-9,-8,[[91,"complete"]]]],-3,-2,-1]]],[{},"complete",4,[113,2],"notCompleted",4,[113,2]]],[216,"Empty"],[65,"Entry"],[65,"Exit"],[65,"Any"],[71,"Star_Empty_Intro",[75,0]],[71,"Star_Gold_Intro",[75,1]]],0,[0,22,4,0,23,3,0,24,2,0,14,1,0,15,2,0,14,5,0,15,1,0,14,6,0,15,1,0,-1,2,0,-2,3,0,-3,4,0,-4,5,0,-5,6,0,-6,1,15],[0,0],[16,16],[131,132]],[[{"name":"UI_Degrade_Light","rect":{"x":0,"y":0,"width":32,"height":32},"offset":{"x":0,"y":0},"originalSize":{"width":32,"height":32},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[21],[465]],[[[50,"P-Shielder-1"],[125,"P-Shielder-1",[[-16,-17,[80,"Events",-19,[2,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[179,"Shielder-1",1,-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[55,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[151,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[2,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[124,"Movement",[-26],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,2,[29,"6aGvFRzrhcy6Pvc0BNb/OY",-32,[69,"34WZxUbadHVq2T1lkTRiL7",1,[[67,[4,["6aGvFRzrhcy6Pvc0BNb/OY"]],[[55,-31,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[14,"SM_Model",["_name"],-27],[10,["_lpos"],-28,[1,0,0,0]],[10,["_lrot"],-29,[3,0,0,0,1]],[10,["_euler"],-30,[1,0,0,0]],[40,["_materials","0"],[4,["b1gGjB+ixTeo5mURKnQwqu"]],3],[28,"SM_Model",["_name"],[4,["cdMyiT4ZBYyoo8D8TLDR7U"]]]]],2]],[35,"Scripts",1,[3,-33,-34,-35],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[4,["6aGvFRzrhcy6Pvc0BNb/OY"]],[35,"VFX",2,[-36,-37,-38],[2,"e3fMtzbZZFM60zevO1/LpO",1,0]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-46,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[14,"P-HP-Bar",["_name"],-39],[10,["_lpos"],-40,[1,207,448.00000000000006,0]],[10,["_lrot"],-41,[3,0,0,0,1]],[10,["_euler"],-42,[1,0,0,0]],[14,"Art",["_name"],-43],[10,["_lpos"],-44,[1,0,0,0]]]],15]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Death_Erupt",7,[-47],[2,"85aTtJf8ZHJY0Yjl9hKJiB",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,10,[1,"a2tTo/ZUFKcLg5wwLes5gf"],[4],[5],[3,0.4],[0],[0],[0],[0],[0],[0],[0],[3,0.16],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.3169642857142857],[13,0.4575892857142857,[4,4294938922]],[13,1,[4,4289817645]]],[[9,255,0.5736607142857143],[9,0,1]]]]],[31,[0]],[78,true,true,[111,2,2,[8,[0,1],[[6,2,0.02962962962962963,1.913888888888889,1.913888888888889],[11,2,1]]],[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-48],[26,5]],[59,"VFX_Death_Shards",7,[-49],[2,"c9oR6xJ79JnrYVLNGhWEWp",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,12,[1,"7bLQWxTAZLfLoqxTgiZLFu"],[6],[5],[23,3,0.05,0.1],[0],[0],[23,3,3,5],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.3,0.8],[3,1],[0],[0],[[25,[23,3,5,7]]],[20,true,[16,1,[33,[[43,0.16964285714285715],[13,0.33035714285714285,[4,4294938368]],[13,0.7991071428571429,[4,4284748062]]],[[9,255,0.23883928571428573],[9,0,1]]]]],[109,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-8.726646259971647,8.726646259971647]],[123,true,2,2,[0],[0]],[19,[0],[0],[5],[5],-50],[26,7]],[59,"VFX_Spawn",7,[-51,-52],[2,"a3QtghbXVCM6BxOrtuOmDQ",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[46,"HP Controller",5,[-53],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[166,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[7,"cc.ParticleSystem","play",10],[7,"cc.ParticleSystem","play",12],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]],1],[54,"On Death VFX Finished",5,[[96,-55,[1,"25g+wzznBBuqSvIHX8VeNS"],[11,13],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"c1+Dxs8PJFFY00wmp2+H/O",1,0]],[105,"Temp-Model",false,2,[[79,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",2,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,14,[1,"97fFIOQB5DL7QNygxzb5md"],[8],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-57],[26,9]],[97,0.3,false,14,[1,"4b/qpMl9ZPZr7UuqbZ/OYR"],[[10,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-58],[26,11]],[104,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[46,"Stun",5,[-59],[2,"28wv4th1pNs6qDNkpOR9dx",1,0]],[117,23,[1,"92X5rq9oNDNouphSNFIziH"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[35,"UI",1,[8],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,3,8,0,13,16,0,2,1,0,20,24,0,27,22,0,28,16,0,3,3,0,3,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,2,1,0,7,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,6,0,1,6,0,1,6,0,1,6,0,0,4,0,2,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,17,19,0,2,8,0,-1,11,0,4,11,0,-1,13,0,4,13,0,-1,20,0,-2,21,0,-1,16,0,3,17,0,0,17,0,0,18,0,4,20,0,4,21,0,-1,24,0,9,1,3,7,5,8,7,25,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,-2,18,8],[14,13,466,1,20,19,10,18,4,3,11,9,5,15,5,16]],[[[50,"P-TheGang2"],[185,"P-TheGang2",[[-11,-12,[80,"Events",-14,[2,"d95EadoVJHU5W5txftTQiE",-13,0]],-15],1,1,4,1],[[-6,[55,-7,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-8,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-9,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-10,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],1,4,4,4,4],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[47,"VFX",[-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30],[2,"44lmI5C0dPj4Z8erRpRtG2",1,0]],[151,"Art",1,[-32,-33,-34,2],[[88,true,-31,[1,"16mUt5j0BPfLyhp6c95pwE"],[36,37],38]],[2,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[35,"Scripts",1,[-35,-36,-37,-38,-39],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[46,"Movement",4,[-40],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,3,[29,"77rOjdJ21R1KKIOlYM4BQr",-47,[69,"b0zVPKtXNDBqBPhFVjhVsT",1,[[67,[4,["77rOjdJ21R1KKIOlYM4BQr"]],[[55,-46,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[14,"SM_Model",["_name"],-41],[10,["_lpos"],-42,[1,0,0,0]],[10,["_lrot"],-43,[3,0,0,0,1]],[10,["_euler"],-44,[1,0,0,0]],[10,["_lscale"],-45,[1,0.9,0.9,0.9]],[40,["_materials","0"],[4,["407oAt4+lSGbdC+vtR9xCJ"]],3],[28,"SM_Model",["_name"],[4,["41Jrlqi2tdbKkcy+f7Uc1y"]]]]],2]],[4,["77rOjdJ21R1KKIOlYM4BQr"]],[115,"Spawn Enemies",[[191,-49,[1,"04N/OeyoRFkJL647STjw+j"],-48]],[2,"299KP2UGxDH48w1UfpNTfY",1,0]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-57,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-56]]]],[[14,"P-HP-Bar",["_name"],-50],[10,["_lpos"],-51,[1,207,448.00000000000006,0]],[10,["_lrot"],-52,[3,0,0,0,1]],[10,["_euler"],-53,[1,0,0,0]],[14,"Art",["_name"],-54],[10,["_lpos"],-55,[1,0,0,0]]]],39]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Death_Erupt",2,[-58],[2,"08xCVrxlxEhq50E/NF55eY",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,11,[1,"85Rhrv4bxC9Idj1S+Tsdep"],[4],[5],[3,0.4],[0],[0],[0],[0],[0],[0],[0],[3,0.16],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.3169642857142857],[13,0.4575892857142857,[4,4294938922]],[13,1,[4,4289817645]]],[[9,255,0.5736607142857143],[9,0,1]]]]],[31,[0]],[78,true,true,[111,2,2,[8,[0,1],[[6,2,0.02962962962962963,1.913888888888889,1.913888888888889],[11,2,1]]],[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-59],[26,5]],[59,"VFX_Death_Shards",2,[-60],[2,"01JvLqmMhDBa4s8CIc/iMl",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,13,[1,"6c2cTofuBCBZlCca6zWUXz"],[6],[5],[23,3,0.05,0.1],[0],[0],[23,3,3,5],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.3,0.8],[3,1],[0],[0],[[25,[23,3,5,7]]],[20,true,[16,1,[33,[[43,0.16964285714285715],[13,0.33035714285714285,[4,4294938368]],[13,0.7991071428571429,[4,4284748062]]],[[9,255,0.23883928571428573],[9,0,1]]]]],[109,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-8.726646259971647,8.726646259971647]],[24,[0],[0]],[19,[0],[0],[5],[5],-61],[26,7]],[59,"VFX_Spawn",2,[-62,-63],[2,"026s6SWrxLW5uEsAZqfRek",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[46,"HP Controller",4,[-64],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[166,16,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-65],[7,"cc.ParticleSystem","play",11],[7,"cc.ParticleSystem","play",13],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",5],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",6],[7,"71b59j50pJOQYyfqjE0LpJs","spawnEnemies",8]],1],[54,"On Death VFX Finished",4,[[96,-66,[1,"67W+7l9PZAA4LQkNbOeiI6"],[12,14],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"54py1+24lEvosm8pG/dm8g",1,0]],[105,"Temp-Model",false,3,[[79,"Sphere<ModelComponent>",-67,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",3,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,15,[1,"aewJ8JwoNJCq33IuxeLFQ7"],[8],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-68],[26,9]],[97,0.3,false,15,[1,"36ejVK11FPAJNrDXjhhqb6"],[[10,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-69],[26,11]],[46,"VFX-BossExplosion",2,[-70],[2,"b3i7PVkoZDJbVrCr3/8fIH",1,0]],[73,0.2,false,false,23,[1,"3cIqBt2hlNc7PS6I28JLfI"],[[12,null],6,0],[5],[3,3],[0],[0],[0],[0],[0],[135,3],[3,1.8],[3,0.2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.08258928571428571],[13,0.9241071428571428,[4,4289835441]],[13,0.9620535714285714,[4,4281084972]]],[[9,255,0.6004464285714286],[9,0,1]]]]],[31,[0]],[78,true,true,[12,1,20,[8,[0,0.6948717948717948,1],[[45,2,2.839080459770115,1,2.839080459770115,1],[6,2,0.9333333333333333,0.4622222222222221,0.4622222222222221],[72,2,1,1,1]]]],[12,1,6,[8,[0,0.7974358974358975],[[136,2,2,0.05925925925925926,-0.015204678362573122,0.09771705989047173,-0.015204678362573122],[137,2,1,0.9962962962962963,0.0288636426001776,0.0288636426001776,0.09792722000142738]]]],[12,1,5,[8,[0,0.8051282051282052],[[136,2,2,1,-0.015285126396237575,0.09720572269540514,-0.015285126396237575],[137,2,1,0.03333333333333333,-0.007150715071507141,-0.007150715071507141,0.10365593276852825]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-71],[26,13]],[92,"VFX-Flash",2,[-72],[2,"far0d2xtZGg76X1RiZlptu",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[73,0.2,false,false,25,[1,"29ObAiEIZPTpEKMWJ8wJRd"],[[14,null],6,0],[5],[3,1.5],[0],[0],[0],[0],[0],[0],[3,1.7],[3,0.2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.44642857142857145],[9,0,1]]]]],[77,0,[3,1]],[32,true,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-73],[26,15]],[92,"VFX_SprayOut",2,[-74],[2,"daTbKVTSJHd6a2s5CtnEAd",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,1,false,false,27,[1,"01BYfFtOlFgLlsTKgfiqGt"],[16],[5],[23,3,0.1,0.4],[0],[0],[23,3,2,10],[0],[0],[0],[3,1.7],[3,1],[0],[83,80],[0],[[25,[3,50]]],[20,true,[16,1,[37,[[38,255],[9,255,0.22767857142857142],[9,0,1]]]]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[110,true,[0],[0],[0],[30,1,[8,[0,1],[[11,2,1],[6,2,0.037037037037037035,-1.54074074074074,-1.54074074074074]]]]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-75],[99,1,0.1,17]],[46,"VFX_Explosion2",2,[-76],[2,"a6ycLOVt5Nm6UmGywbn8QG",1,0]],[73,1.5,false,false,29,[1,"23U2rlcfdCHbDARkWAMMpU"],[[18,null],6,0],[56,[4,4294506744]],[3,1],[0],[0],[0],[0],[0],[135,3],[3,2],[3,1.5],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.033482142857142856],[43,0.078125],[13,0.18973214285714285,[4,4288716960]],[13,0.8459821428571428,[4,4280624421]]],[[9,255,0.1049107142857143],[9,255,0.21651785714285715],[9,0,1]]]]],[31,[0]],[32,true,[12,1,20,[8,[0,0.38461538461538464,1],[[45,2,6.259259259259259,1,6.259259259259259,1],[6,2,0.9148148148148149,0.4622222222222221,0.4622222222222221],[72,2,1,1,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-77],[26,19]],[92,"VFX_SprayOut2",2,[-78],[2,"e8WEpBD4hNJ5kJMUsDXN2O",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,6,false,false,31,[1,"bbCigUyOxCaJH7inZq0aTt"],[20],[5],[23,3,0.1,0.4],[0],[0],[23,3,10,50],[0],[0],[0],[3,2],[3,1],[0],[83,80],[0],[[25,[3,50]]],[20,true,[16,1,[37,[[38,255],[9,255,0.22767857142857142],[9,0,1]]]]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[110,true,[0],[0],[0],[30,1,[8,[0,0.27708427247702977,0.5230769230769231,1],[[11,2,1],[6,2,0.30922275440798175,-2.3928348401596575,-2.3928348401596575],[6,2,0.05925925925925926,-0.21802935010482188,-0.21802935010482188],[11,2,0.020792806452028488]]]]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-79],[99,1,0.1,21]],[92,"VFX-ScreenTone",2,[-80],[2,"2d+wQP1/hEjK1Onmy5gI2V",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[160,false,false,33,[1,"e2sTsJQeZA7KNO759raE3U"],[[22,null],6,0],[56,[4,1811939327]],[3,100],[0],[0],[0],[0],[0],[0],[3,2],[3,1],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.44642857142857145],[9,0,1]]]]],[77,0,[3,1]],[49,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-81],[26,23]],[46,"VFX-CircleIn",2,[-82],[2,"59qjoNyUxJQL5y+7NhHfn8",1,0]],[73,0.4,false,false,35,[1,"20Celuqx5DULWiADZOYOHv"],[[24,null],6,0],[5],[3,0.5],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[3,0.1],[3,0.4],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[13,0.12946428571428564,[4,4280229663]],[13,0.7745535714285714,[4,4289703855]],[43,0.9464285714285714]],[[38,0],[9,255,0.5357142857142858],[9,255,1]]]]],[31,[0]],[32,true,[12,1,20,[8,[0,1],[[41,2,0.9703703703703702,0.050682261208577085,1,0.050682261208577085,1],[45,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-83],[26,25]],[46,"VFX-RingIn",2,[-84],[2,"27E7PxAQJPKJjOofpk8Ytn",1,0]],[73,0.4,false,false,37,[1,"86QNokLjtAg63pJbt5Qozy"],[[26,null],6,0],[5],[3,1.5],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[3,0.35],[3,0.4],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[13,0.12276785714285714,[4,4280887593]],[13,0.7745535714285714,[4,4290032820]],[43,0.9464285714285714]],[[38,0],[9,34,0.34151785714285715],[9,255,0.6941964285714286],[9,255,1]]]]],[31,[0]],[32,true,[12,1,8,[8,[0,1],[[41,2,0.9703703703703703,0.05068226120857707,1,0.05068226120857707,1],[45,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-85],[26,27]],[92,"VFX_SprayIn",2,[-86],[2,"56uTKIQNZJW5CaUHwPatNd",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[134,1.2,false,false,39,[1,"03c48BEJFG1IVbfRfXb1Gk"],[28],[5],[3,0.2],[0],[0],[3,5],[0],[0],[0],[0],[3,0.1],[0],[12,1,80,[8,[0,0.7333333333333333],[[6,2,0.05555555555555556,2.781893004115226,2.781893004115226],[11,2,0.9925925925925926]]]],[0],[122,[5]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-87],[99,1,0.5,29]],[92,"VFX-ChargeFlash",2,[-88],[2,"2cvT3Wk0VAIq41coA3JDNZ",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,2,false,false,41,[1,"55XvcIcyROGK2MvdRABg8f"],[30],[5],[3,0.6],[0],[0],[0],[0],[0],[0],[3,0.3],[3,2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.8191964285714286],[9,0,1]]]]],[77,0,[3,1]],[32,true,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-89],[26,31]],[92,"VFX-Sparkle",2,[-90],[2,"37DlejBYRPyb3Br/ZWpkRv",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[178,0.7,false,false,43,[1,"3cA5Wmv9FBMrd/jAwxni0G"],[[32,null],6,0],[16,4,[33,[[87,[4,4294926764]],[13,0.3169642857142857,[4,4294943343]],[13,0.6517857142857143,[4,4292278146]],[13,1,[4,4284279807]]],[[38,255]]]],[23,3,0.1,1.2],[0],[0],[3,0.1],[0],[0],[0],[3,1],[3,0.15],[0],[161,30,30],[0],[20,true,[16,1,[37,[[38,0],[9,255,0.12723214285714285],[9,255,0.2879464285714286],[9,0,1]]]]],[188,true,3,2,1.2,[3,1]],[32,true,[12,1,2,[8,[0,0.12307692307692308,0.3128205128205128,0.9974358974358974],[[11,2,0.48518518518518516],[6,2,1,0.18055555555555491,0.18055555555555491],[11,2,0.5074074074074074],[11,2,0.4962962962962963]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-91],[26,33]],[92,"VFX_LightRay",2,[-92],[2,"1c0/9e5fVF17wdh6mQkfPi",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[134,1,false,false,45,[1,"0fTCj3c41HPojBtTq6g0Km"],[34],[5],[12,1,4,[8,[0,1],[[6,2,0.48148148148148145,1.0000000000000002,1.0000000000000002],[11,2,1]]]],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[0],[3,1],[0],[12,1,10,[8,[0,1],[[6,2,0.3555555555555555,1.9740740740740748,1.9740740740740748],[11,2,1]]]],[0],[20,true,[16,1,[37,[[38,0],[9,133,0.09375],[9,255,0.15401785714285715],[9,153,0.24330357142857142],[9,0,1]]]]],[77,0,[3,1]],[78,true,true,[0],[30,1,[8,[0,0.2717948717948718,1],[[6,2,1,-3.2828282828282838,-3.2828282828282838],[6,2,0.45925925925925926,-1.155555555555555,-1.155555555555555],[6,2,0.16666666666666666,0.03073286052009456,0.03073286052009456]]]],[12,1,2,[8,[0,0.2717948717948718,0.9923076923076923],[[6,2,0.5,2.4246031746031744,2.4246031746031744],[6,2,0.8814814814814815,0.36111111111111127,0.36111111111111127],[11,2,1]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-0.17453292519943295,0.17453292519943295]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-93],[26,35]],[104,5,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[35,"Specials",4,[8],[2,"75f0ZlA1tFNbD5bXAVHqFR",1,0]],[233,"TheGang2",2,1,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",5],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",16],[7,"71b59j50pJOQYyfqjE0LpJs","initialize",8]],17,47],[234,[1,"92X5rq9oNDNouphSNFIziH"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",5]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",5]]],[46,"Stun",4,[50],[2,"28wv4th1pNs6qDNkpOR9dx",1,0]],[35,"UI",1,[9],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,6,0,-2,9,0,3,9,0,13,17,0,2,1,0,-1,49,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-2,4,0,2,1,0,7,1,0,-4,52,0,-1,11,0,-2,13,0,-3,15,0,-4,23,0,-5,25,0,-6,27,0,-7,29,0,-8,31,0,-9,33,0,-10,35,0,-11,37,0,-12,39,0,-13,41,0,-14,43,0,-15,45,0,0,3,0,-1,19,0,-2,20,0,-3,6,0,-1,5,0,-2,16,0,-3,51,0,-4,18,0,-5,48,0,-1,47,0,1,7,0,1,7,0,1,7,0,1,7,0,1,7,0,0,6,0,2,6,0,38,49,0,0,8,0,1,10,0,1,10,0,1,10,0,1,10,0,1,53,0,1,53,0,17,20,0,2,9,0,-1,12,0,4,12,0,-1,14,0,4,14,0,-1,21,0,-2,22,0,-1,17,0,3,18,0,0,18,0,0,19,0,4,21,0,4,22,0,-1,24,0,4,24,0,-1,26,0,4,26,0,-1,28,0,4,28,0,-1,30,0,4,30,0,-1,32,0,4,32,0,-1,34,0,4,34,0,-1,36,0,4,36,0,-1,38,0,4,38,0,-1,40,0,4,40,0,-1,42,0,4,42,0,-1,44,0,4,44,0,-1,46,0,4,46,0,9,1,2,7,3,8,7,48,9,7,52,49,20,50,50,0,51,93],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,-2,18,8],[14,13,90,1,20,19,10,18,4,3,11,9,4,3,7,6,7,6,4,3,7,6,7,6,4,3,11,9,7,6,7,6,33,29,43,41,5,15,5,16]],[[[112,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{},{}],[[[{},"mainColor",8,[4,3187702527],"emissive",8,[4,4278190264]],{},{}],11,0,0]]],0,0,[0],[12],[58]],[[{"name":"default_panel","rect":{"x":0,"y":0,"width":20,"height":20},"offset":{"x":0,"y":0},"originalSize":{"width":20,"height":20},"rotated":false,"capInsets":[8,8,8,8],"packable":true}],[2],0,[0],[21],[467]],[[[57,".bin",943121267,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":40992,"length":12060,"count":3015,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":40992,"count":854,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3001744747161865,-0.28390058875083923,-7.990747263875164e-8],"maxPosition",8,[1,0.29635441303253174,0.2936505079269409,0.8477445840835571]]],-1],0,0,[],[],[]],[[[62],[47,"SM_TowerPuls3rBody_01",[-2],[2,"bbqAjalhlRdoiOW0dhSoUC",-1,0]],[53,"SM_TowerPuls3rBody_01",1,[[52,-3,[1,"1fCLEjPmBTW6Y7Y/vYCPCL"],[0],[34],1]],[2,"97vFv7UilZ+5/FaYF3Os3e",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[468,198]],[[[63,"SM_TowerPuls3rBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[{"name":"Icon_Pause","rect":{"x":0,"y":0,"width":16,"height":24},"offset":{"x":0,"y":0},"originalSize":{"width":16,"height":24},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[21],[469]],[[[112,"3",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[30,12],[39,25]],[[[57,".bin",558920944,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3072,"length":576,"count":144,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3072,"count":64,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.30012208223342896,-0.2995493412017822,0.6501219272613525],"maxPosition",8,[1,0.2992830276489258,0.2995187044143677,0.7541868090629578]]],-1],0,0,[],[],[]],[[[63,"SM_CubeDetail_03__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[62],[47,"SM_CubeDetail_03",[-2],[2,"deBsgn88dR46R0UuPdg7fm",-1,0]],[53,"SM_CubeDetail_03",1,[[52,-3,[1,"95XT6Y7ppZgLhssma9tJt7"],[0],[34],1]],[2,"fcdmTYr61QxrM7T/OeRr2j",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[470,471]],[[[50,"Holder_TutorialPointer"],[132,"Holder_TutorialPointer",33554432,[-6,-7],[[48,-2,[1,"b9PfOAZgFN6p0BKEDc5YB7"]],[315,false,true,-3,[1,"d9aA9XKDNDxaXBmqxi8M0X"],[6,7,8],9],[566,-4,[1,"ae3DV85ZpCVIN/Ff+LHNbZ"],10],[90,-5,[1,"f0QX8qm+pEO6NGuROfxZtL"]]],[2,"a6yEVxZJJG26dGeFT9ITlD",-1,0]],[85,"VFX Glow",33554432,1,[-9,-10,-11,-12],[[18,-8,[1,"9eXTj+6GFMmJ+DrwDEAwS7"],[5,52,52]]],[2,"3d4OXdCCREjLpeUZ185I/w",1,0]],[132,"Mask",33554432,[-16],[[18,-13,[1,"64/pLw+hBMqrR6wexzhn6n"],[5,40,40]],[632,-14,[1,"fe+g6neQ1E2K4KV3Cf5FVm"]],[154,45,40,40,1,-15,[1,"512qGMvHJHEKBqN9iYIt4O"]]],[2,"37XAMfFZtLaoIlD0b/rdz1",1,0]],[85,"Outline",33554432,1,[3],[[18,-17,[1,"d9EiA0ZrVNUKmHfGiJKs9p"],[5,40,40]],[70,1,0,-18,[1,"8cfm9j6IpMcL8oZh4ba1ye"],[4,4280250623],5]],[2,"1fwO7+2OVOQbfeOE872+jR",1,0]],[39,"Outline 01",33554432,2,[[18,-19,[1,"65krB14ZBHq5oRYV0/E85K"],[5,54,54]],[70,1,0,-20,[1,"41wskz7/JLNJjUm9FZJGod"],[4,3036676095],0]],[2,"3b0++ptxZAsYMC7V7tB1mj",1,0]],[39,"Outline 02",33554432,2,[[18,-21,[1,"92VmHWebNJybjapv4+OImX"],[5,62,62]],[70,1,0,-22,[1,"60kIgjxUFLbJR+nCJxXz5a"],[4,2030043135],1]],[2,"16fpiNKaJI4Jr+Kmez8b43",1,0]],[39,"Outline 03",33554432,2,[[18,-23,[1,"c2718n8m1A2IJfoGKKH0ri"],[5,70,70]],[70,1,0,-24,[1,"6dabJrM19EiJFnj8u7PCk6"],[4,1023410175],2]],[2,"16bi+c369EyLkumh1TZTB4",1,0]],[39,"Outline 04",33554432,2,[[18,-25,[1,"37eMQdkAZL74DfnvxhveYq"],[5,70,70]],[70,1,0,-26,[1,"ad9xS5a6pOnY2SmfNqXvU2"],[4,1023410175],3]],[2,"fa1NwgeYhL142Sdcn5hZ6m",1,0]],[39,"Pointer_Outline",33554432,3,[[18,-27,[1,"c9uiQ7v79B+qTaxOAclA7O"],[5,48,48]],[173,0,false,-28,[1,"d1m6Y1lvNGdIQGY0LApDe4"],[4,4280250623],4]],[2,"1fo2oAL5pNHZfIBGAHTJOW",1,0]]],0,[0,2,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,4,0,0,2,0,-1,5,0,-2,6,0,-3,7,0,-4,8,0,0,3,0,0,3,0,0,3,0,-1,9,0,0,4,0,0,4,0,0,5,0,0,5,0,0,6,0,0,6,0,0,7,0,0,7,0,0,8,0,0,8,0,0,9,0,0,9,0,9,1,3,7,4,28],[0,0,0,0,0,0,0,0,0,0,0],[6,6,6,6,6,6,-1,-2,-3,18,26],[26,26,26,26,472,21,95,195,196,95,473]],[[[168,[{"rasterizerState":{"shadeModel":1,"cullMode":0},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_INSTANCING":true,"USE_TEXTURE":true}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[30,12],[474,34]],[[[50,"SM_TowerGunBody_01"],[195,"SM_TowerGunBody_01",[-2],[2,"1bEwzooBRYiLITAV26DhPq",-1,0],[1,2000,0,0]],[53,"SM_TowerGunBody_01",1,[[52,-3,[1,"eee7bsTeFUS4J0Fkyz/23b"],[0],[34],1]],[2,"40sd+ebzdfxaPzPgpSi8i0",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[1,199]],[[[50,"SM_TowerPuls3rBody_01"],[47,"SM_TowerPuls3rBody_01",[-2],[2,"bbqAjalhlRdoiOW0dhSoUC",-1,0]],[53,"SM_TowerPuls3rBody_01",1,[[52,-3,[1,"1fCLEjPmBTW6Y7Y/vYCPCL"],[0],[34],1]],[2,"97vFv7UilZ+5/FaYF3Os3e",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[1,198]],[[[50,"Holder_Tower Button 01"],[360,"Holder_Tower Button 01",33554432,[-24,-25,-26,-27,-28,-29],[[[18,-2,[1,"25bZG6qtVDLqKUsnFbkHph"],[5,70,70]],[245,false,-3,[1,"8bBj36fMNOUZFpmts6EkfF"],[10,11,12,13,14,15,16,17]],-4,-5,[576,1,-18,[1,"94p6swXrpO+Zjkt35b0SDd"],[[7,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-17]],[[7,"c4d68jIEQZKZ5AKzGQQzzsP","setText",-16]],-15,[[68,"2022ebMdchE2pNL1SpqTm8g","setBool","hasEnergy,true",-14]],[[68,"2022ebMdchE2pNL1SpqTm8g","setBool","hasEnergy,false",-13]],[[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","exit",-12]],[[7,"99672sUg5NFw4x7bEPAiyHE","activate",-11]],[[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",-10]],[[68,"2022ebMdchE2pNL1SpqTm8g","setBool","select,true",-9]],[[68,"2022ebMdchE2pNL1SpqTm8g","setBool","select,false",-8]],[[68,"2022ebMdchE2pNL1SpqTm8g","setBool","locked,true",-7]],[[68,"2022ebMdchE2pNL1SpqTm8g","setBool","locked,false",-6]]],[410,-20,[1,"057Isi53xPlon1QQ7CeoD3"],-19],[141,-22,[1,"55Bs3F+NlNNZr+da6KbvRs"],-21],[55,-23,[1,"cdPwqjUQxFCr3/WBq2ESBP"]]],4,4,1,1,4,4,4,4],[2,"0fJEdVoOpA/qcZPGFboeiN",-1,0],[1,-100,10,0]],[76,"Holder_Energy Cost",33554432,1,[-32,-33,-34,-35],[[18,-30,[1,"1bYw0vYBlNNLRWjiaMIHt6"],[5,44,44]],[51,0,-31,[1,"e93959MTBBpomAW/Y/+XxF"],[4,4282974275],9]],[2,"b88SOLEf1G8Llh8jZIyZGc",1,0],[1,0.729,-20.353,0]],[142,"Text_Cost",33554432,2,[[[18,-36,[1,"efhgosR0JK/Jm5K2Xml5tk"],[5,30,30]],-37,[294,false,1,-38,[1,"1460ImerxABY/nzyvkIux4"],[4,4281532425]],[145,-40,[1,"18Ab96S/NIhqWdzUNKKVoa"],-39]],4,1,4,4],[2,"88LfI7dS1NjrL8YcAEfH/E",1,0]],[206,"Panel_Lock",false,33554432,2,[-44,-45],[[18,-41,[1,"62xNBVLJlGXoECOKHDOYWa"],[5,44,44]],[51,0,-42,[1,"983Qz8AEVEKZr7ggufIeNR"],[4,4282187811],8],[162,45,20,20,-43,[1,"a56ogD9YxMk6TGd+tobCok"]]],[2,"07J8NL3JNE+J1JbZaH9Gkn",1,0]],[206,"Select_VFX",false,33554432,1,[-48,-49],[[48,-46,[1,"b6oLel7jpOKZZoilUXwEea"]],[90,-47,[1,"610z2KPIdBZbuaMlBZs7lz"]]],[2,"e9EkiL/+1I4KWEMpMRNY1g",1,0]],[159,"Text_Tower Name",33554432,1,[[[18,-50,[1,"efnxDkWnFAoqsoPFJA8RnK"],[5,64,30]],-51,[145,-53,[1,"e2gItzYPxPsabMF8tROWDM"],-52]],4,1,4],[2,"342psUUPBA4bgrW+GKuf1H",1,0],[1,0,17.208,0]],[39,"Button_Color",33554432,1,[[18,-54,[1,"a1URUecQZFMKrW1v6gLiJw"],[5,70,70]],[51,0,-55,[1,"1cdt9yu/dBB7zqOsgHxDIs"],[4,4293450459],3]],[2,"a6az63RfpIg6Gg/gQf45Dh",1,0]],[39,"Panel_Outline",33554432,2,[[18,-56,[1,"a8ssls5EhOSK0Ed0RNyOvE"],[5,44,44]],[51,0,-57,[1,"51kUbKOopKY7AQKPP9rWsY"],[4,4293450459],4],[162,45,20,20,-58,[1,"6e1XzmtapDe7vJR5MKsblI"]]],[2,"b4p3nx06pA3q2OOmIuPIqT",1,0]],[39,"Panel_Energy Color",33554432,2,[[18,-59,[1,"44AnkAPldEk5VlWryWvx+O"],[5,34,34]],[51,0,-60,[1,"d7jnCqbkJCf6ILjGxYiWzq"],[4,4291874560],5],[170,45,5,5,5,5,32,32,-61,[1,"e4RRNXGpRIeLQ6pal9dc0/"]]],[2,"a4xPBm209GU5Mh8eoXMqG3",1,0]],[39,"Button_Outline 2",33554432,5,[[18,-62,[1,"45PSXa5rZH07hOZ7iSdS4M"],[5,84,84]],[70,1,0,-63,[1,"8eYSa67uFLZbTRHhKmrHyj"],[4,1177457151],0]],[2,"42ZSZDURBPuYxZbUVkytNk",1,0]],[39,"Button_Outline 1",33554432,5,[[18,-64,[1,"88iMIohbhOLr2VcCgYTqHO"],[5,77,77]],[70,1,0,-65,[1,"92ZFpV2KxL85DrB1TrbNTy"],[4,2196298459],1]],[2,"64o7LRB4FEdaQLAV4SPsYe",1,0]],[184,"Button_Outline",33554432,1,[[18,-66,[1,"dfbJ7c+W1MELPyPf6kRZrm"],[5,60,60]],[51,0,-67,[1,"7c9KNm1rREtZ4NWitSU7H/"],[4,4293450459],2]],[2,"78bCuqtM5FvINnH01nOP6N",1,0],[3,0,0,0.38268343236508984,0.9238795325112867],[1,0,0,45.000000000000014]],[39,"Panel_Color",33554432,4,[[18,-68,[1,"c935UvIfJOXqxQ1MtM3cUt"],[5,36,36]],[51,0,-69,[1,"b7JWPVQFtKVoXipP2h7Jtp"],[4,4289238409],6]],[2,"be+BVdgytGg4WwPrKtdPrt",1,0]],[39,"Icon_Lock",33554432,4,[[18,-70,[1,"2dNg4mK1xDIZaxD8DPTwyJ"],[5,16,20]],[287,-71,[1,"c3XPNhv/dGM5SxpOrj8yZI"],[4,4282187811],7]],[2,"53X2+0Vn1Mq7gRmjdVGvYB",1,0]],[39,"On Enable",33554432,1,[[48,-72,[1,"1dPOhA97BNxqF5SytZdFWv"]],[252,-73,[1,"24Qb9T6zpHU4YDHutwgLhy"],[[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","intro",1]]]],[2,"167yW9OrRIL6YqRj0MFYRz",1,0]],[526,3,0.9,1,[1,"bfWHMMhHhHZppymV9Y7kAU"],[[7,"80495HhBfdC64qEifbVQrbr","onClicked",1]],7],[542,"CANNON",22,23,23,2,false,false,6,[1,"69yyRlXrpMd62pIm5Z3QYa"],[4,4281532425]],[327,"2",33,32,28,2,false,3,[1,"fdqTZt2D5LBbb2BdiWmcs2"]],[128,1,[1,"e9ztg1W2VLEKkbhoJBjjZP"]]],0,[0,2,1,0,0,1,0,0,1,0,-3,19,0,-4,16,0,3,1,0,3,1,0,3,1,0,3,1,0,3,1,0,3,1,0,3,1,0,3,1,0,3,1,0,41,16,0,3,3,0,3,6,0,0,1,0,41,16,0,0,1,0,33,19,0,0,1,0,0,1,0,-1,5,0,-2,12,0,-3,7,0,-4,6,0,-5,2,0,-6,15,0,0,2,0,0,2,0,-1,8,0,-2,9,0,-3,3,0,-4,4,0,0,3,0,-2,18,0,0,3,0,29,18,0,0,3,0,0,4,0,0,4,0,0,4,0,-1,13,0,-2,14,0,0,5,0,0,5,0,-1,10,0,-2,11,0,0,6,0,-2,17,0,29,17,0,0,6,0,0,7,0,0,7,0,0,8,0,0,8,0,0,8,0,0,9,0,0,9,0,0,9,0,0,10,0,0,10,0,0,11,0,0,11,0,0,12,0,0,12,0,0,13,0,0,13,0,0,14,0,0,14,0,0,15,0,0,15,0,9,1,73],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,18,19],[6,6,6,6,6,6,6,6,6,6,-1,-2,-3,-4,-5,-6,-7,-8,19,19,26],[21,21,22,0,22,0,0,40,0,0,35,200,201,202,203,204,52,205,8,8,475]],[[{"name":"Icon_Lock","rect":{"x":0,"y":0,"width":16,"height":20},"offset":{"x":0,"y":0},"originalSize":{"width":16,"height":20},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[21],[476]],[[[57,".bin",3160802190,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":960,"length":360,"count":90,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":960,"count":20,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.249710351228714,-0.24971024692058563,-0.3999999761581421],"maxPosition",8,[1,0.24971038103103638,0.24971021711826324,0.9448086023330688]]],-1],0,0,[],[],[]],[[[63,"SM_EndBlock_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[62],[47,"SM_EndBlock_02",[-2],[2,"02IhkEmuRXK63cdwkK5zZa",-1,0]],[53,"SM_EndBlock_02",1,[[52,-3,[1,"32LRqVqIxUXrhRaZjufCFa"],[0],[34],1]],[2,"4flHvjPe5Z1qmiSfhf+rvk",1,0],[3,-0.7071067811865455,5.3385076829104015e-8,5.3385076829104015e-8,0.7071067811865455],[1,-89.99999999999999,0.00000865142202753775,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[477,478]],[[[50,"P-Biker-0"],[185,"P-Biker-0",[[-11,-12,[80,"Events",-14,[2,"d95EadoVJHU5W5txftTQiE",-13,0]],-15],1,1,4,1],[[-6,[55,-7,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-8,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-9,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-10,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],1,4,4,4,4],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[164,"Art",1,[-17,-18,-19,-20],[[88,true,-16,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[2,"4505kBZFlJebjm5k8fm2Li",1,0]],[35,"Scripts",1,[-21,-22,-23,-24,-25],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[46,"Movement",3,[-26],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,2,[29,"94xHiK0AJcG7HhDtrTSJEu",-33,[69,"41lLw7bWpMPKP1Z0umF78z",1,[[67,[4,["94xHiK0AJcG7HhDtrTSJEu"]],[[55,-32,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[14,"SM_Model",["_name"],-27],[10,["_lpos"],-28,[1,0,0,0.133]],[10,["_lrot"],-29,[3,0,0,0,1]],[10,["_euler"],-30,[1,0,0,0]],[10,["_lscale"],-31,[1,1,1,1]],[40,["_materials","0"],[4,["b13/XLHw9X17XAy1C9bbJp"]],3],[28,"SM_Model",["_name"],[4,["40xe0mc49a/5+K5jzHdd0S"]]]]],2]],[4,["94xHiK0AJcG7HhDtrTSJEu"]],[35,"VFX",2,[-34,-35,-36],[2,"eeyvk3jpFNP7GmzA8XJ74Z",1,0]],[115,"Spawn Enemies",[[191,-38,[1,"64WVBj+DBCkLuka36EpKwz"],-37]],[2,"aeKtktO2BMGodiKFF+UfbX",1,0]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-46,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[14,"P-HP-Bar",["_name"],-39],[10,["_lpos"],-40,[1,207,448.00000000000006,0]],[10,["_lrot"],-41,[3,0,0,0,1]],[10,["_euler"],-42,[1,0,0,0]],[14,"Art",["_name"],-43],[10,["_lpos"],-44,[1,0,0,0]]]],15]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Death_Erupt",7,[-47],[2,"29nzqz6+BGM5GWnSmYYIQk",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,11,[1,"59XwAM6GhGRq9NIhu7AJyO"],[4],[5],[3,0.4],[0],[0],[0],[0],[0],[0],[0],[3,0.16],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.3169642857142857],[13,0.4575892857142857,[4,4294938922]],[13,1,[4,4289817645]]],[[9,255,0.5736607142857143],[9,0,1]]]]],[31,[0]],[78,true,true,[111,2,2,[8,[0,1],[[6,2,0.02962962962962963,1.913888888888889,1.913888888888889],[11,2,1]]],[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-48],[26,5]],[59,"VFX_Death_Shards",7,[-49],[2,"77cQJQ0wxLtYGOusmsgk3x",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,13,[1,"c5CW/8bKhJN5pLomjUAi0e"],[6],[5],[23,3,0.05,0.1],[0],[0],[23,3,3,5],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.3,0.8],[3,1],[0],[0],[[25,[23,3,5,7]]],[20,true,[16,1,[33,[[43,0.16964285714285715],[13,0.33035714285714285,[4,4294938368]],[13,0.7991071428571429,[4,4284748062]]],[[9,255,0.23883928571428573],[9,0,1]]]]],[109,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-8.726646259971647,8.726646259971647]],[123,true,2,2,[0],[0]],[19,[0],[0],[5],[5],-50],[26,7]],[59,"VFX_Spawn",7,[-51,-52],[2,"57OatTSHxKw4Iego89Dz7K",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[46,"HP Controller",3,[-53],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[139,16,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[7,"cc.ParticleSystem","play",11],[7,"cc.ParticleSystem","play",13],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",4],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",5],[7,"71b59j50pJOQYyfqjE0LpJs","spawnEnemies",8]]],[54,"On Death VFX Finished",3,[[96,-55,[1,"3aOOHWMg1Cw7Cnt0lH88Sy"],[12,14],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"48Oiy3VmNAMpvMxNyZXXAv",1,0]],[105,"Temp-Model",false,2,[[79,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",2,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,15,[1,"d7CP0Wtl5NAqCPNpobPZlM"],[8],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-57],[26,9]],[97,0.3,false,15,[1,"07chXauGRE/rZIjO2CwDyM"],[[10,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-58],[26,11]],[104,4,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[35,"Specials",3,[8],[2,"e4LCrp8d5Fb5h1ZfgGE9m9",1,0]],[233,"Biker-0",1,1,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",4],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",16],[7,"71b59j50pJOQYyfqjE0LpJs","initialize",8]],17,23],[234,[1,"c3ae4MCbxK8YUgB7h5tdE2"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",4]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",4]]],[46,"Stun",3,[26],[2,"dac7ZgdvtBBILxt/AUoxlG",1,0]],[35,"UI",1,[9],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,5,0,-2,9,0,3,9,0,13,17,0,2,1,0,-1,25,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,2,1,0,7,1,0,-4,28,0,0,2,0,-1,19,0,-2,20,0,-3,5,0,-4,7,0,-1,4,0,-2,16,0,-3,27,0,-4,18,0,-5,24,0,-1,23,0,1,6,0,1,6,0,1,6,0,1,6,0,1,6,0,0,5,0,2,5,0,-1,11,0,-2,13,0,-3,15,0,38,25,0,0,8,0,1,10,0,1,10,0,1,10,0,1,10,0,1,29,0,1,29,0,17,20,0,2,9,0,-1,12,0,4,12,0,-1,14,0,4,14,0,-1,21,0,-2,22,0,-1,17,0,3,18,0,0,18,0,0,19,0,4,21,0,4,22,0,9,1,8,7,24,9,7,28,25,20,26,26,0,27,58],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,-2,18,8],[14,13,479,1,20,19,10,18,4,3,11,9,5,15,5,16]],[[[57,".bin",3962567776,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6624,"length":792,"count":198,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6624,"count":138,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.25525224208831787,-0.058665115386247635,-0.1477106660604477],"maxPosition",8,[1,0.25525224208831787,0.37976759672164917,0.48866382241249084]]],-1],0,0,[],[],[]],[[[63,"SM_EnemyCrowder_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[62],[47,"SM_EnemyCrowder_01",[-2],[2,"7fciu/Gg9S/bnu8xJWbMom",-1,0]],[53,"SM_EnemyCrowder_01",1,[[52,-3,[1,"9efmySxl5TsIXK39+yLHpg"],[0],[34],1]],[2,"ee6J7zZuhZ7ZlMxt5O9sjf",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[480,481]],[[[50,"P-Syndicate2"],[185,"P-Syndicate2",[[-11,-12,[80,"Events",-14,[2,"d95EadoVJHU5W5txftTQiE",-13,0]],-15],1,1,4,1],[[-6,[55,-7,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-8,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-9,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-10,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],1,4,4,4,4],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[47,"VFX",[-16,-17,-18,-19,-20,-21,-22,-23,-24,-25,-26,-27,-28,-29,-30],[2,"90jBanitFHibPF3jtQV8ng",1,0]],[151,"Art",1,[-32,-33,-34,2],[[88,true,-31,[1,"16mUt5j0BPfLyhp6c95pwE"],[36,37],38]],[2,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[35,"Scripts",1,[-35,-36,-37,-38,-39],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[46,"Movement",4,[-40],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,3,[29,"2axzyI7CVcfZRup1kGtapw",-47,[69,"04f7DNNP5MRY95F4/mujU5",1,[[67,[4,["2axzyI7CVcfZRup1kGtapw"]],[[55,-46,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[14,"SM_Model",["_name"],-41],[10,["_lpos"],-42,[1,0,0,0]],[10,["_lrot"],-43,[3,0,0,0,1]],[10,["_euler"],-44,[1,0,0,0]],[40,["_materials","0"],[4,["b6fnLcG+tQcbB2kGlXABH/"]],3],[28,"SM_Model",["_name"],[4,["6fTB9CmINSd6bm5DKa9NOW"]]],[10,["_lscale"],-45,[1,0.75,0.75,0.75]]]],2]],[4,["2axzyI7CVcfZRup1kGtapw"]],[115,"Spawn Enemies",[[191,-49,[1,"6f+qVoBZtASr10AxRy966f"],-48]],[2,"60e3j3xxFEN6sxgrUDw45N",1,0]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-57,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-56]]]],[[14,"P-HP-Bar",["_name"],-50],[10,["_lpos"],-51,[1,207,448.00000000000006,0]],[10,["_lrot"],-52,[3,0,0,0,1]],[10,["_euler"],-53,[1,0,0,0]],[14,"Art",["_name"],-54],[10,["_lpos"],-55,[1,0,0,0]]]],39]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Death_Erupt",2,[-58],[2,"e4fVLBSLVNSp7p/dfOjBoR",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,11,[1,"badnIvfeBBZJiVfl9k3hRp"],[4],[5],[3,0.4],[0],[0],[0],[0],[0],[0],[0],[3,0.16],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.3169642857142857],[13,0.4575892857142857,[4,4294938922]],[13,1,[4,4289817645]]],[[9,255,0.5736607142857143],[9,0,1]]]]],[31,[0]],[78,true,true,[111,2,2,[8,[0,1],[[6,2,0.02962962962962963,1.913888888888889,1.913888888888889],[11,2,1]]],[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-59],[26,5]],[59,"VFX_Death_Shards",2,[-60],[2,"76L9PqnRlGorfSHRkkuKUW",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,13,[1,"62IbtjxB9FnI1G4XSy0m16"],[6],[5],[23,3,0.05,0.1],[0],[0],[23,3,3,5],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.3,0.8],[3,1],[0],[0],[[25,[23,3,5,7]]],[20,true,[16,1,[33,[[43,0.16964285714285715],[13,0.33035714285714285,[4,4294938368]],[13,0.7991071428571429,[4,4284748062]]],[[9,255,0.23883928571428573],[9,0,1]]]]],[109,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-8.726646259971647,8.726646259971647]],[24,[0],[0]],[19,[0],[0],[5],[5],-61],[26,7]],[59,"VFX_Spawn",2,[-62,-63],[2,"b4fgk3rG5Ly7ABVv4cYTe2",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[46,"HP Controller",4,[-64],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[166,16,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-65],[7,"cc.ParticleSystem","play",11],[7,"cc.ParticleSystem","play",13],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",5],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",6],[7,"71b59j50pJOQYyfqjE0LpJs","spawnEnemies",8]],1],[54,"On Death VFX Finished",4,[[96,-66,[1,"fe+CZItjxMyb9f2BHbTpon"],[12,14],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"b67GIBJUdN6qixP7x+E94e",1,0]],[105,"Temp-Model",false,3,[[79,"Sphere<ModelComponent>",-67,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",3,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,15,[1,"84KU+um7hPNYOClMRjIMmi"],[8],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-68],[26,9]],[97,0.3,false,15,[1,"d2FQc7I0tJ6JPMaHytev0l"],[[10,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-69],[26,11]],[46,"VFX-BossExplosion",2,[-70],[2,"f4rwwJua9JxbhIH5yNN3N1",1,0]],[73,0.2,false,false,23,[1,"4fTqtST9FEW78SerDtuh0g"],[[12,null],6,0],[5],[3,3],[0],[0],[0],[0],[0],[135,3],[3,1.8],[3,0.2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.08258928571428571],[13,0.9241071428571428,[4,4289835441]],[13,0.9620535714285714,[4,4281084972]]],[[9,255,0.6004464285714286],[9,0,1]]]]],[31,[0]],[78,true,true,[12,1,20,[8,[0,0.6948717948717948,1],[[45,2,2.839080459770115,1,2.839080459770115,1],[6,2,0.9333333333333333,0.4622222222222221,0.4622222222222221],[72,2,1,1,1]]]],[12,1,6,[8,[0,0.7974358974358975],[[136,2,2,0.05925925925925926,-0.015204678362573122,0.09771705989047173,-0.015204678362573122],[137,2,1,0.9962962962962963,0.0288636426001776,0.0288636426001776,0.09792722000142738]]]],[12,1,5,[8,[0,0.8051282051282052],[[136,2,2,1,-0.015285126396237575,0.09720572269540514,-0.015285126396237575],[137,2,1,0.03333333333333333,-0.007150715071507141,-0.007150715071507141,0.10365593276852825]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-71],[26,13]],[92,"VFX-Flash",2,[-72],[2,"46d1aA9ytNTJzIyfw2xqq2",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[73,0.2,false,false,25,[1,"4ej+amSApK3qdtvs+82BNN"],[[14,null],6,0],[5],[3,1.5],[0],[0],[0],[0],[0],[0],[3,1.7],[3,0.2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.44642857142857145],[9,0,1]]]]],[77,0,[3,1]],[32,true,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-73],[26,15]],[92,"VFX_SprayOut",2,[-74],[2,"36AS4VbsJC+qWvW/6Tm4AW",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,1,false,false,27,[1,"1acAYY1O1JYLSgyq7sNLYa"],[16],[5],[23,3,0.1,0.4],[0],[0],[23,3,2,10],[0],[0],[0],[3,1.7],[3,1],[0],[83,80],[0],[[25,[3,50]]],[20,true,[16,1,[37,[[38,255],[9,255,0.22767857142857142],[9,0,1]]]]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[110,true,[0],[0],[0],[30,1,[8,[0,1],[[11,2,1],[6,2,0.037037037037037035,-1.54074074074074,-1.54074074074074]]]]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-75],[99,1,0.1,17]],[46,"VFX_Explosion2",2,[-76],[2,"8asHkIt1hEAZDlqfz+jvt2",1,0]],[73,1.5,false,false,29,[1,"41fT42rEFEgpXLsHnIp6T0"],[[18,null],6,0],[56,[4,4294506744]],[3,1],[0],[0],[0],[0],[0],[135,3],[3,2],[3,1.5],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.033482142857142856],[43,0.078125],[13,0.18973214285714285,[4,4288716960]],[13,0.8459821428571428,[4,4280624421]]],[[9,255,0.1049107142857143],[9,255,0.21651785714285715],[9,0,1]]]]],[31,[0]],[32,true,[12,1,20,[8,[0,0.38461538461538464,1],[[45,2,6.259259259259259,1,6.259259259259259,1],[6,2,0.9148148148148149,0.4622222222222221,0.4622222222222221],[72,2,1,1,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-77],[26,19]],[92,"VFX_SprayOut2",2,[-78],[2,"6epHL9GutGN4kA5cCLl8CV",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,6,false,false,31,[1,"38x1wGsL5PU7QJ22GK5k6j"],[20],[5],[23,3,0.1,0.4],[0],[0],[23,3,10,50],[0],[0],[0],[3,2],[3,1],[0],[83,80],[0],[[25,[3,50]]],[20,true,[16,1,[37,[[38,255],[9,255,0.22767857142857142],[9,0,1]]]]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[110,true,[0],[0],[0],[30,1,[8,[0,0.27708427247702977,0.5230769230769231,1],[[11,2,1],[6,2,0.30922275440798175,-2.3928348401596575,-2.3928348401596575],[6,2,0.05925925925925926,-0.21802935010482188,-0.21802935010482188],[11,2,0.020792806452028488]]]]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-79],[99,1,0.1,21]],[92,"VFX-ScreenTone",2,[-80],[2,"batgRxJe5FOosMrn2fMPyl",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[160,false,false,33,[1,"29uEHq445K9oMFFjNEjS+q"],[[22,null],6,0],[56,[4,1811939327]],[3,100],[0],[0],[0],[0],[0],[0],[3,2],[3,1],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.44642857142857145],[9,0,1]]]]],[77,0,[3,1]],[49,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-81],[26,23]],[46,"VFX-CircleIn",2,[-82],[2,"16tOYvmMpP4bU9sHRoLuyo",1,0]],[73,0.4,false,false,35,[1,"2dguywGFhLR4QpsOlVm7u7"],[[24,null],6,0],[5],[3,0.5],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[3,0.1],[3,0.4],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[13,0.12946428571428564,[4,4280229663]],[13,0.7745535714285714,[4,4289703855]],[43,0.9464285714285714]],[[38,0],[9,255,0.5357142857142858],[9,255,1]]]]],[31,[0]],[32,true,[12,1,20,[8,[0,1],[[41,2,0.9703703703703702,0.050682261208577085,1,0.050682261208577085,1],[45,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-83],[26,25]],[46,"VFX-RingIn",2,[-84],[2,"7aKEFvM5JAHJoTN+DNXbGG",1,0]],[73,0.4,false,false,37,[1,"6890fVuTVCO4Lt6apVCkvR"],[[26,null],6,0],[5],[3,1.5],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[3,0.35],[3,0.4],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[13,0.12276785714285714,[4,4280887593]],[13,0.7745535714285714,[4,4290032820]],[43,0.9464285714285714]],[[38,0],[9,34,0.34151785714285715],[9,255,0.6941964285714286],[9,255,1]]]]],[31,[0]],[32,true,[12,1,8,[8,[0,1],[[41,2,0.9703703703703703,0.05068226120857707,1,0.05068226120857707,1],[45,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-85],[26,27]],[92,"VFX_SprayIn",2,[-86],[2,"cdcibxKh9BhaYVVcInC94s",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[134,1.2,false,false,39,[1,"a5BbbRrwFNU6/6Qto2Bu9b"],[28],[5],[3,0.2],[0],[0],[3,5],[0],[0],[0],[0],[3,0.1],[0],[12,1,80,[8,[0,0.7333333333333333],[[6,2,0.05555555555555556,2.781893004115226,2.781893004115226],[11,2,0.9925925925925926]]]],[0],[122,[5]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-87],[99,1,0.5,29]],[92,"VFX-ChargeFlash",2,[-88],[2,"6dIONV2hRBlIXywb+2Dyw2",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,2,false,false,41,[1,"1cetJnd19J6r9PFD9EPz2E"],[30],[5],[3,0.6],[0],[0],[0],[0],[0],[0],[3,0.3],[3,2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.8191964285714286],[9,0,1]]]]],[77,0,[3,1]],[32,true,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-89],[26,31]],[92,"VFX-Sparkle",2,[-90],[2,"02ILq9aG1MWrhuGVvwVMVk",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[178,0.7,false,false,43,[1,"1eQUD59A1H4Z14sGmJYNJk"],[[32,null],6,0],[16,4,[33,[[87,[4,4294926764]],[13,0.3169642857142857,[4,4294943343]],[13,0.6517857142857143,[4,4292278146]],[13,1,[4,4284279807]]],[[38,255]]]],[23,3,0.1,1.2],[0],[0],[3,0.1],[0],[0],[0],[3,1],[3,0.15],[0],[161,30,30],[0],[20,true,[16,1,[37,[[38,0],[9,255,0.12723214285714285],[9,255,0.2879464285714286],[9,0,1]]]]],[188,true,3,2,1.2,[3,1]],[32,true,[12,1,2,[8,[0,0.12307692307692308,0.3128205128205128,0.9974358974358974],[[11,2,0.48518518518518516],[6,2,1,0.18055555555555491,0.18055555555555491],[11,2,0.5074074074074074],[11,2,0.4962962962962963]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-91],[26,33]],[92,"VFX_LightRay",2,[-92],[2,"7f4NZLVidIzI+u7ZIXJd0U",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[134,1,false,false,45,[1,"5eAOiK8kVBi6DPx6gXg7Lp"],[34],[5],[12,1,4,[8,[0,1],[[6,2,0.48148148148148145,1.0000000000000002,1.0000000000000002],[11,2,1]]]],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[0],[3,1],[0],[12,1,10,[8,[0,1],[[6,2,0.3555555555555555,1.9740740740740748,1.9740740740740748],[11,2,1]]]],[0],[20,true,[16,1,[37,[[38,0],[9,133,0.09375],[9,255,0.15401785714285715],[9,153,0.24330357142857142],[9,0,1]]]]],[77,0,[3,1]],[78,true,true,[0],[30,1,[8,[0,0.2717948717948718,1],[[6,2,1,-3.2828282828282838,-3.2828282828282838],[6,2,0.45925925925925926,-1.155555555555555,-1.155555555555555],[6,2,0.16666666666666666,0.03073286052009456,0.03073286052009456]]]],[12,1,2,[8,[0,0.2717948717948718,0.9923076923076923],[[6,2,0.5,2.4246031746031744,2.4246031746031744],[6,2,0.8814814814814815,0.36111111111111127,0.36111111111111127],[11,2,1]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-0.17453292519943295,0.17453292519943295]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-93],[26,35]],[104,5,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[35,"Specials",4,[8],[2,"62R6RgLjhMRberQEA4kCzJ",1,0]],[233,"Syndicate2",2,1,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",5],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",16],[7,"71b59j50pJOQYyfqjE0LpJs","initialize",8]],17,47],[234,[1,"92X5rq9oNDNouphSNFIziH"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",5]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",5]]],[46,"Stun",4,[50],[2,"28wv4th1pNs6qDNkpOR9dx",1,0]],[35,"UI",1,[9],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,6,0,-2,9,0,3,9,0,13,17,0,2,1,0,-1,49,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-2,4,0,2,1,0,7,1,0,-4,52,0,-1,11,0,-2,13,0,-3,15,0,-4,23,0,-5,25,0,-6,27,0,-7,29,0,-8,31,0,-9,33,0,-10,35,0,-11,37,0,-12,39,0,-13,41,0,-14,43,0,-15,45,0,0,3,0,-1,19,0,-2,20,0,-3,6,0,-1,5,0,-2,16,0,-3,51,0,-4,18,0,-5,48,0,-1,47,0,1,7,0,1,7,0,1,7,0,1,7,0,1,7,0,0,6,0,2,6,0,38,49,0,0,8,0,1,10,0,1,10,0,1,10,0,1,10,0,1,53,0,1,53,0,17,20,0,2,9,0,-1,12,0,4,12,0,-1,14,0,4,14,0,-1,21,0,-2,22,0,-1,17,0,3,18,0,0,18,0,0,19,0,4,21,0,4,22,0,-1,24,0,4,24,0,-1,26,0,4,26,0,-1,28,0,4,28,0,-1,30,0,4,30,0,-1,32,0,4,32,0,-1,34,0,4,34,0,-1,36,0,4,36,0,-1,38,0,4,38,0,-1,40,0,4,40,0,-1,42,0,4,42,0,-1,44,0,4,44,0,-1,46,0,4,46,0,9,1,2,7,3,8,7,48,9,7,52,49,20,50,50,0,51,93],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,-2,18,8],[14,13,93,1,20,19,10,18,4,3,11,9,4,3,7,6,7,6,4,3,7,6,7,6,4,3,11,9,7,6,7,6,33,29,43,41,5,15,5,16]],[[[112,1,[{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}},{"blendState":{"targets":[{}]},"depthStencilState":{},"rasterizerState":{}}],[{},{},{}],[[[{},"mainColor",8,[4,1677721599]],{},{}],11,0,0]]],0,0,[0],[12],[58]],[[{"name":"Icon_Menu","rect":{"x":0,"y":0,"width":40,"height":40},"offset":{"x":0,"y":0},"originalSize":{"width":40,"height":40},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[21],[482]],[[{"name":"Icon_SpeedUp","rect":{"x":5,"y":9,"width":41,"height":30},"offset":{"x":1.5,"y":0},"originalSize":{"width":48,"height":48},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[21],[483]],[[[62],[47,"SM_EnemySyndicate_01",[-2],[2,"2axzyI7CVcfZRup1kGtapw",-1,0]],[53,"SM_EnemySyndicate_01",1,[[52,-3,[1,"b6fnLcG+tQcbB2kGlXABH/"],[0],[34],1]],[2,"6fTB9CmINSd6bm5DKa9NOW",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[484,485]],[[[57,".bin",2646089242,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":23136,"length":3000,"count":750,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":23136,"count":482,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.39107099175453186,-0.4409671723842621,-0.01536291278898716],"maxPosition",8,[1,0.3910704255104065,0.5285049676895142,0.5613952875137329]]],-1],0,0,[],[],[]],[[[63,"SM_EnemySyndicate_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",2684536131,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4896,"length":1920,"count":480,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4896,"count":102,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.009999999776482582,-0.010000001639127731,-4.3711387287537207e-10],"maxPosition",8,[1,0.009999999776482582,0.009999999776482582,0.00911111943423748]]],-1],0,0,[],[],[]],[[[112,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{},{},{}],[[[{},"mainColor",8,[4,1342234879]],{},{}],11,0,0]]],0,0,[0],[12],[58]],[[[62],[47,"SM_TowerSmash3RBody_01",[-2],[2,"424JMWZcNT+7LUIxhmggm+",-1,0]],[53,"SM_TowerSmash3RBody_01",1,[[52,-3,[1,"6dld1XsrhbprQRWAgl+86p"],[0],[34],1]],[2,"01bmdrW4JXtZt850BsSA/w",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[486,192]],[[[63,"SM_TowerSmash3RBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",1577380827,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":29664,"length":8448,"count":2112,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":29664,"count":618,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.23616410791873932,-0.30108144879341125,-3.000557580179475e-10],"maxPosition",8,[1,0.23616410791873932,0.2366417944431305,0.3322126269340515]]],-1],0,0,[],[],[]],[[[63,"SM_TowerPlasmaQBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",1875717138,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":68736,"length":19248,"count":4812,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":68736,"count":1432,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2567823529243469,-0.6116607189178467,-0.11887958645820618],"maxPosition",8,[1,0.25330302119255066,0.1778063327074051,0.39120617508888245]]],-1],0,0,[],[],[]],[[[62],[47,"SM_TowerPlasmaQBody_01",[-2],[2,"19dqAvhYZW66LFXyVsSUYV",-1,0]],[53,"SM_TowerPlasmaQBody_01",1,[[52,-3,[1,"d1WspVTtle/Jp16o0xqn79"],[0],[34],1]],[2,"fbzvYb5AVdtq1H47hzSAAe",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[487,194]],[[[50,"P-Syndicate4"],[125,"P-Syndicate4",[[-16,-17,[80,"Events",-19,[2,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[179,"Syndicate4",2,-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[55,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[47,"VFX",[-21,-22,-23,-24,-25,-26,-27,-28,-29,-30,-31,-32,-33,-34,-35],[2,"90jBanitFHibPF3jtQV8ng",1,0]],[151,"Art",1,[-37,-38,-39,2],[[88,true,-36,[1,"16mUt5j0BPfLyhp6c95pwE"],[36,37],38]],[2,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[305,"Scripts",1,[[-40,-41,-42,-43,[80,"Specials",-44,[2,"62R6RgLjhMRberQEA4kCzJ",1,0]]],1,1,1,1,4],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[46,"Movement",4,[-45],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,3,[29,"2axzyI7CVcfZRup1kGtapw",-52,[69,"04f7DNNP5MRY95F4/mujU5",1,[[67,[4,["2axzyI7CVcfZRup1kGtapw"]],[[55,-51,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[14,"SM_Model",["_name"],-46],[10,["_lpos"],-47,[1,0,0,0]],[10,["_lrot"],-48,[3,0,0,0,1]],[10,["_euler"],-49,[1,0,0,0]],[40,["_materials","0"],[4,["b6fnLcG+tQcbB2kGlXABH/"]],3],[28,"SM_Model",["_name"],[4,["6fTB9CmINSd6bm5DKa9NOW"]]],[10,["_lscale"],-50,[1,0.5,0.5,0.5]]]],2]],[4,["2axzyI7CVcfZRup1kGtapw"]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-60,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-59]]]],[[14,"P-HP-Bar",["_name"],-53],[10,["_lpos"],-54,[1,207,448.00000000000006,0]],[10,["_lrot"],-55,[3,0,0,0,1]],[10,["_euler"],-56,[1,0,0,0]],[14,"Art",["_name"],-57],[10,["_lpos"],-58,[1,0,0,0]]]],39]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Death_Erupt",2,[-61],[2,"e4fVLBSLVNSp7p/dfOjBoR",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,10,[1,"badnIvfeBBZJiVfl9k3hRp"],[4],[5],[3,0.4],[0],[0],[0],[0],[0],[0],[0],[3,0.16],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.3169642857142857],[13,0.4575892857142857,[4,4294938922]],[13,1,[4,4289817645]]],[[9,255,0.5736607142857143],[9,0,1]]]]],[31,[0]],[78,true,true,[111,2,2,[8,[0,1],[[6,2,0.02962962962962963,1.913888888888889,1.913888888888889],[11,2,1]]],[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-62],[26,5]],[59,"VFX_Death_Shards",2,[-63],[2,"76L9PqnRlGorfSHRkkuKUW",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,12,[1,"62IbtjxB9FnI1G4XSy0m16"],[6],[5],[23,3,0.05,0.1],[0],[0],[23,3,3,5],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.3,0.8],[3,1],[0],[0],[[25,[23,3,5,7]]],[20,true,[16,1,[33,[[43,0.16964285714285715],[13,0.33035714285714285,[4,4294938368]],[13,0.7991071428571429,[4,4284748062]]],[[9,255,0.23883928571428573],[9,0,1]]]]],[109,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-8.726646259971647,8.726646259971647]],[24,[0],[0]],[19,[0],[0],[5],[5],-64],[26,7]],[59,"VFX_Spawn",2,[-65,-66],[2,"b4fgk3rG5Ly7ABVv4cYTe2",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[46,"HP Controller",4,[-67],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[166,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-68],[7,"cc.ParticleSystem","play",10],[7,"cc.ParticleSystem","play",12],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",5],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",6]],1],[54,"On Death VFX Finished",4,[[96,-69,[1,"fe+CZItjxMyb9f2BHbTpon"],[11,13],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"b67GIBJUdN6qixP7x+E94e",1,0]],[105,"Temp-Model",false,3,[[79,"Sphere<ModelComponent>",-70,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",3,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,14,[1,"84KU+um7hPNYOClMRjIMmi"],[8],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-71],[26,9]],[97,0.3,false,14,[1,"d2FQc7I0tJ6JPMaHytev0l"],[[10,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-72],[26,11]],[46,"VFX-BossExplosion",2,[-73],[2,"78/A1oAVZGt5Nx0Jv2cSnQ",1,0]],[73,0.2,false,false,22,[1,"61of+qwh1OXJbSEpm88EdG"],[[12,null],6,0],[5],[3,3],[0],[0],[0],[0],[0],[135,3],[3,1.8],[3,0.2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.08258928571428571],[13,0.9241071428571428,[4,4289835441]],[13,0.9620535714285714,[4,4281084972]]],[[9,255,0.6004464285714286],[9,0,1]]]]],[31,[0]],[78,true,true,[12,1,20,[8,[0,0.6948717948717948,1],[[45,2,2.839080459770115,1,2.839080459770115,1],[6,2,0.9333333333333333,0.4622222222222221,0.4622222222222221],[72,2,1,1,1]]]],[12,1,6,[8,[0,0.7974358974358975],[[136,2,2,0.05925925925925926,-0.015204678362573122,0.09771705989047173,-0.015204678362573122],[137,2,1,0.9962962962962963,0.0288636426001776,0.0288636426001776,0.09792722000142738]]]],[12,1,5,[8,[0,0.8051282051282052],[[136,2,2,1,-0.015285126396237575,0.09720572269540514,-0.015285126396237575],[137,2,1,0.03333333333333333,-0.007150715071507141,-0.007150715071507141,0.10365593276852825]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-74],[26,13]],[92,"VFX-Flash",2,[-75],[2,"9b/tc8yRJJgb9Y4fyZvTlb",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[73,0.2,false,false,24,[1,"33z1qKzHBKBouNrUQQe7ah"],[[14,null],6,0],[5],[3,1.5],[0],[0],[0],[0],[0],[0],[3,1.7],[3,0.2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.44642857142857145],[9,0,1]]]]],[77,0,[3,1]],[32,true,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-76],[26,15]],[92,"VFX_SprayOut",2,[-77],[2,"91OIpAWd1Mwa2TFyHR15k4",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,1,false,false,26,[1,"ceWvnQP3VA0JnBBBeDeTgi"],[16],[5],[23,3,0.1,0.4],[0],[0],[23,3,2,10],[0],[0],[0],[3,1.7],[3,1],[0],[83,80],[0],[[25,[3,50]]],[20,true,[16,1,[37,[[38,255],[9,255,0.22767857142857142],[9,0,1]]]]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[110,true,[0],[0],[0],[30,1,[8,[0,1],[[11,2,1],[6,2,0.037037037037037035,-1.54074074074074,-1.54074074074074]]]]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-78],[99,1,0.1,17]],[46,"VFX_Explosion2",2,[-79],[2,"a2Ey/ucylK7JmQjIIWoL4L",1,0]],[73,1.5,false,false,28,[1,"e9g9r/Z2lLgKKyo71j1k/N"],[[18,null],6,0],[56,[4,4294506744]],[3,1],[0],[0],[0],[0],[0],[135,3],[3,2],[3,1.5],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.033482142857142856],[43,0.078125],[13,0.18973214285714285,[4,4288716960]],[13,0.8459821428571428,[4,4280624421]]],[[9,255,0.1049107142857143],[9,255,0.21651785714285715],[9,0,1]]]]],[31,[0]],[32,true,[12,1,20,[8,[0,0.38461538461538464,1],[[45,2,6.259259259259259,1,6.259259259259259,1],[6,2,0.9148148148148149,0.4622222222222221,0.4622222222222221],[72,2,1,1,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-80],[26,19]],[92,"VFX_SprayOut2",2,[-81],[2,"d4EcppghdAWLmCYsxQbPIE",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,6,false,false,30,[1,"6fjx+pjjxEjKwTyqpRPsZv"],[20],[5],[23,3,0.1,0.4],[0],[0],[23,3,10,50],[0],[0],[0],[3,2],[3,1],[0],[83,80],[0],[[25,[3,50]]],[20,true,[16,1,[37,[[38,255],[9,255,0.22767857142857142],[9,0,1]]]]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[110,true,[0],[0],[0],[30,1,[8,[0,0.27708427247702977,0.5230769230769231,1],[[11,2,1],[6,2,0.30922275440798175,-2.3928348401596575,-2.3928348401596575],[6,2,0.05925925925925926,-0.21802935010482188,-0.21802935010482188],[11,2,0.020792806452028488]]]]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-82],[99,1,0.1,21]],[92,"VFX-ScreenTone",2,[-83],[2,"646nhm3pdBt62J+94ablAg",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[160,false,false,32,[1,"39c77q0AVJtr2o6676Y9Wt"],[[22,null],6,0],[56,[4,1811939327]],[3,100],[0],[0],[0],[0],[0],[0],[3,2],[3,1],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.44642857142857145],[9,0,1]]]]],[77,0,[3,1]],[49,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-84],[26,23]],[46,"VFX-CircleIn",2,[-85],[2,"20ULk8nAdCAJ6aVJNsVBKH",1,0]],[73,0.4,false,false,34,[1,"98gfqAkvJDvpn0m+tucUBw"],[[24,null],6,0],[5],[3,0.5],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[3,0.1],[3,0.4],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[13,0.12946428571428564,[4,4280229663]],[13,0.7745535714285714,[4,4289703855]],[43,0.9464285714285714]],[[38,0],[9,255,0.5357142857142858],[9,255,1]]]]],[31,[0]],[32,true,[12,1,20,[8,[0,1],[[41,2,0.9703703703703702,0.050682261208577085,1,0.050682261208577085,1],[45,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-86],[26,25]],[46,"VFX-RingIn",2,[-87],[2,"1ank61p3BBIIY3JWRsC9Jq",1,0]],[73,0.4,false,false,36,[1,"7cO5d4Lg1HSp2EVCQ/wYHC"],[[26,null],6,0],[5],[3,1.5],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[3,0.35],[3,0.4],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[13,0.12276785714285714,[4,4280887593]],[13,0.7745535714285714,[4,4290032820]],[43,0.9464285714285714]],[[38,0],[9,34,0.34151785714285715],[9,255,0.6941964285714286],[9,255,1]]]]],[31,[0]],[32,true,[12,1,8,[8,[0,1],[[41,2,0.9703703703703703,0.05068226120857707,1,0.05068226120857707,1],[45,2,-2.4511784511784502,1,-2.4511784511784502,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,5,[8,[0,1],[[11,2,0.29629629629629634],[11,2,-0.00018428406391548277]]]]],[24,[0],[0]],[19,[0],[0],[5],[5],-88],[26,27]],[92,"VFX_SprayIn",2,[-89],[2,"6br31GirVI0bJ6qY9Bou/t",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[134,1.2,false,false,38,[1,"ffJFB/JRZJLIW4y1gH7ESD"],[28],[5],[3,0.2],[0],[0],[3,5],[0],[0],[0],[0],[3,0.1],[0],[12,1,80,[8,[0,0.7333333333333333],[[6,2,0.05555555555555556,2.781893004115226,2.781893004115226],[11,2,0.9925925925925926]]]],[0],[122,[5]],[107,true,3,[3,1]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-90],[99,1,0.5,29]],[92,"VFX-ChargeFlash",2,[-91],[2,"c4NkGnEzZPCZS6CsUnUwlv",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[60,2,false,false,40,[1,"a4GzlWIj9MU6eISh5S64S6"],[30],[5],[3,0.6],[0],[0],[0],[0],[0],[0],[3,0.3],[3,2],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[38,255],[9,255,0.8191964285714286],[9,0,1]]]]],[77,0,[3,1]],[32,true,[12,1,5,[8,[0,1],[[6,2,0.1962962962962963,2.572916666666667,2.572916666666667],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-92],[26,31]],[92,"VFX-Sparkle",2,[-93],[2,"37PcFhJvRJ/bdjhLzNX+7P",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[178,0.7,false,false,42,[1,"7aJAngdqZKVYRaXvMGOGUS"],[[32,null],6,0],[16,4,[33,[[87,[4,4294926764]],[13,0.3169642857142857,[4,4294943343]],[13,0.6517857142857143,[4,4292278146]],[13,1,[4,4284279807]]],[[38,255]]]],[23,3,0.1,1.2],[0],[0],[3,0.1],[0],[0],[0],[3,1],[3,0.15],[0],[161,30,30],[0],[20,true,[16,1,[37,[[38,0],[9,255,0.12723214285714285],[9,255,0.2879464285714286],[9,0,1]]]]],[188,true,3,2,1.2,[3,1]],[32,true,[12,1,2,[8,[0,0.12307692307692308,0.3128205128205128,0.9974358974358974],[[11,2,0.48518518518518516],[6,2,1,0.18055555555555491,0.18055555555555491],[11,2,0.5074074074074074],[11,2,0.4962962962962963]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-94],[26,33]],[92,"VFX_LightRay",2,[-95],[2,"96NtzFmo9FS6Osuf9Ca+DQ",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,89.99999999999999,0,0]],[134,1,false,false,44,[1,"2cnv2B6z1MXJFIZX0sneur"],[34],[5],[12,1,4,[8,[0,1],[[6,2,0.48148148148148145,1.0000000000000002,1.0000000000000002],[11,2,1]]]],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[0],[3,1],[0],[12,1,10,[8,[0,1],[[6,2,0.3555555555555555,1.9740740740740748,1.9740740740740748],[11,2,1]]]],[0],[20,true,[16,1,[37,[[38,0],[9,133,0.09375],[9,255,0.15401785714285715],[9,153,0.24330357142857142],[9,0,1]]]]],[77,0,[3,1]],[78,true,true,[0],[30,1,[8,[0,0.2717948717948718,1],[[6,2,1,-3.2828282828282838,-3.2828282828282838],[6,2,0.45925925925925926,-1.155555555555555,-1.155555555555555],[6,2,0.16666666666666666,0.03073286052009456,0.03073286052009456]]]],[12,1,2,[8,[0,0.2717948717948718,0.9923076923076923],[[6,2,0.5,2.4246031746031744,2.4246031746031744],[6,2,0.8814814814814815,0.36111111111111127,0.36111111111111127],[11,2,1]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-0.17453292519943295,0.17453292519943295]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-96],[26,35]],[104,5,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[46,"Stun",4,[-97],[2,"28wv4th1pNs6qDNkpOR9dx",1,0]],[117,47,[1,"92X5rq9oNDNouphSNFIziH"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",5]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",5]]],[35,"UI",1,[8],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,6,0,-2,8,0,3,8,0,13,16,0,2,1,0,20,48,0,27,46,0,28,16,0,3,5,0,3,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,3,0,-2,4,0,2,1,0,7,1,0,-4,49,0,-1,10,0,-2,12,0,-3,14,0,-4,22,0,-5,24,0,-6,26,0,-7,28,0,-8,30,0,-9,32,0,-10,34,0,-11,36,0,-12,38,0,-13,40,0,-14,42,0,-15,44,0,0,3,0,-1,18,0,-2,19,0,-3,6,0,-1,5,0,-2,15,0,-3,47,0,-4,17,0,7,4,0,-1,46,0,1,7,0,1,7,0,1,7,0,1,7,0,1,7,0,0,6,0,2,6,0,1,9,0,1,9,0,1,9,0,1,9,0,1,50,0,1,50,0,17,19,0,2,8,0,-1,11,0,4,11,0,-1,13,0,4,13,0,-1,20,0,-2,21,0,-1,16,0,3,17,0,0,17,0,0,18,0,4,20,0,4,21,0,-1,23,0,4,23,0,-1,25,0,4,25,0,-1,27,0,4,27,0,-1,29,0,4,29,0,-1,31,0,4,31,0,-1,33,0,4,33,0,-1,35,0,4,35,0,-1,37,0,4,37,0,-1,39,0,4,39,0,-1,41,0,4,41,0,-1,43,0,4,43,0,-1,45,0,4,45,0,-1,48,0,9,1,2,7,3,8,7,49,97],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,5,-1,-2,18,8],[14,13,93,1,20,19,10,18,4,3,11,9,4,3,7,6,7,6,4,3,7,6,7,6,4,3,11,9,7,6,7,6,33,29,43,41,5,15,5,16]],[[{"name":"UI_LifeCube Outline","rect":{"x":0,"y":0,"width":34,"height":34},"offset":{"x":0,"y":0},"originalSize":{"width":34,"height":34},"rotated":false,"capInsets":[6,6,6,6],"packable":true}],[2],0,[0],[21],[488]],[[[57,".bin",787161715,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":528,"count":132,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.24936872720718384,-0.24936871230602264,0],"maxPosition",8,[1,0.24936872720718384,0.24936871230602264,0.35908234119415283]]],-1],0,0,[],[],[]],[[[62],[47,"SM_TowerCubeSlime_01",[-2],[2,"bf/rqmxy1RI6d5s9dt63bw",-1,0]],[53,"SM_TowerCubeSlime_01",1,[[52,-3,[1,"c1FqYGy+FXzrIyDY9Dcjtd"],[0],[34],1]],[2,"edQcfb6yFWK5nAfohWkqQ0",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[489,490]],[[[63,"SM_TowerCubeSlime_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[112,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}},{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true},{},{}],[[[{"shininessExponent":35.99999928474426},"emissive",8,[4,4294967295]],{},{}],11,0,0]]],0,0,[0],[12],[2]],[[[62],[47,"SM_PortalVFX",[-2],[2,"60ciIzpkBUBJz6DMJ4URqe",-1,0]],[53,"SM_PortalVFX",1,[[52,-3,[1,"62L0kXUTlVnL/DCq3Kmz1z"],[0],[34],1]],[2,"6ftKokXEVS274EdU6PgUr7",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[491,83]],[[[57,".bin",623489286,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":3392,"length":792,"count":198,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":3392,"count":53,"stride":64},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false},{"name":"a_color","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4215879440307617,-0.06565006077289581,-0.4989520013332367],"maxPosition",8,[1,0.42241746187210083,0.13540655374526978,0.7823701500892639]]],-1],0,0,[],[],[]],[[[50,"SM_Tower3MGvBody_01"],[195,"SM_Tower3MGvBody_01",[-2],[2,"efp8IlO8deIZfWSlH1z7o0",-1,0],[1,2000,0,0]],[53,"SM_Tower3MGvBody_01",1,[[52,-3,[1,"49Ry8eFLhb25C1Q8wGk6C1"],[0],[34],1]],[2,"3aIYRFdwZW1ITWY1VGXMEK",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[1,167]],[[[50,"P-ClosestToGoal-TowerTarget"],[115,"P-ClosestToGoal-TowerTarget",[[633,-2,[1,"49a8sf5uNI6KBGiXZHdXrk"]]],[2,"c46/YsCPVOJYA4mWEpNYRx",-1,0]]],0,[0,2,1,0,0,1,0,9,1,2],[],[],[]],[[[62],[47,"SM_TowerGunBody_01",[-2],[2,"1bEwzooBRYiLITAV26DhPq",-1,0]],[53,"SM_TowerGunBody_01",1,[[52,-3,[1,"eee7bsTeFUS4J0Fkyz/23b"],[0],[34],1]],[2,"40sd+ebzdfxaPzPgpSi8i0",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[492,199]],[[[57,".bin",2475420575,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":24336,"length":5340,"count":1335,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":24336,"count":507,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.2029980719089508,-0.36052513122558594,-0.0021895617246627808],"maxPosition",8,[1,0.20299796760082245,0.2185363620519638,0.2959030568599701]]],-1],0,0,[],[],[]],[[[63,"SM_TowerGunBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[267,"builtin-particle",[{"hash":585841727,"name":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture(mainTexture, uv);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = add(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\n  uniform vec4 tintColor;\nvec4 add () {\n  vec4 col = 2.0 * color * tintColor * texture2D(mainTexture, uv);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = add(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":53,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]},{"hash":1223598056,"name":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:multiply","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]},{"name":"FragConstants","stageFlags":16,"binding":1,"members":[{"name":"tintColor","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":2,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 2) uniform sampler2D mainTexture;\nlayout(set = 1, binding = 1) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nlayout(std140) uniform FragConstants {\n  vec4 tintColor;\n};\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = multiply(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\n  uniform vec4 tintColor;\nvec4 multiply () {\n  vec4 col;\n  vec4 texColor = texture2D(mainTexture, uv);\n  col.rgb = tintColor.rgb * texColor.rgb * color.rgb * vec3(2.0);\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = multiply(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":53,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":40}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]},{"hash":3735404623,"name":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = addSmooth(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 addSmooth () {\n  vec4 col = color * texture2D(mainTexture, uv);\n  col.rgb *= col.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = addSmooth(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":53,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":39}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]},{"hash":2524517876,"name":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied","blocks":[{"name":"Constants","stageFlags":1,"binding":0,"members":[{"name":"mainTiling_Offset","type":16,"count":1},{"name":"frameTile_velLenScale","type":16,"count":1},{"name":"scale","type":16,"count":1},{"name":"nodeRotation","type":16,"count":1}],"defines":[]}],"samplerTextures":[{"name":"mainTexture","type":28,"count":1,"stageFlags":16,"binding":1,"defines":[]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_texCoord","format":32,"location":1,"defines":[]},{"name":"a_texCoord1","format":32,"location":2,"defines":[]},{"name":"a_texCoord2","format":32,"location":3,"defines":[]},{"name":"a_color","format":44,"location":4,"defines":[]},{"name":"a_color1","format":32,"location":8,"defines":["CC_RENDER_MODE"]},{"name":"a_texCoord3","format":32,"location":6,"defines":["CC_RENDER_MODE"]},{"name":"a_normal","format":32,"location":7,"defines":["CC_RENDER_MODE"]}],"varyings":[{"name":"uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"color","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nlayout(location = 0) out mediump vec2 uv;\nlayout(location = 1) out mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_texCoord;\nlayout(location = 2) in vec3 a_texCoord1;\nlayout(location = 3) in vec3 a_texCoord2;\nlayout(location = 4) in vec4 a_color;\n#if CC_RENDER_MODE == 1\n  layout(location = 8) in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  layout(location = 6) in vec3 a_texCoord3;\n  layout(location = 7) in vec3 a_normal;\n  layout(location = 8) in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nlayout(location = 0) in vec2 uv;\nlayout(location = 1) in vec4 color;\nlayout(set = 1, binding = 1) uniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl3":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\nlayout(std140) uniform Constants {\n  vec4 mainTiling_Offset;\n  vec4 frameTile_velLenScale;\n  vec4 scale;\n  vec4 nodeRotation;\n};\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nout mediump vec2 uv;\nout mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nin vec3 a_position;\nin vec3 a_texCoord;\nin vec3 a_texCoord1;\nin vec3 a_texCoord2;\nin vec4 a_color;\n#if CC_RENDER_MODE == 1\n  in vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  in vec3 a_texCoord3;\n  in vec3 a_normal;\n  in vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nin vec2 uv;\nin vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = premultiplied(); }"},"glsl1":{"vert":"\nprecision highp float;\nvec4 quaternionFromAxis (vec3 xAxis,vec3 yAxis,vec3 zAxis){\n  mat3 m = mat3(xAxis,yAxis,zAxis);\n  float trace = m[0][0] + m[1][1] + m[2][2];\n  vec4 quat;\n  if (trace > 0.) {\n    float s = 0.5 / sqrt(trace + 1.0);\n    quat.w = 0.25 / s;\n    quat.x = (m[2][1] - m[1][2]) * s;\n    quat.y = (m[0][2] - m[2][0]) * s;\n    quat.z = (m[1][0] - m[0][1]) * s;\n  } else if ((m[0][0] > m[1][1]) && (m[0][0] > m[2][2])) {\n    float s = 2.0 * sqrt(1.0 + m[0][0] - m[1][1] - m[2][2]);\n    quat.w = (m[2][1] - m[1][2]) / s;\n    quat.x = 0.25 * s;\n    quat.y = (m[0][1] + m[1][0]) / s;\n    quat.z = (m[0][2] + m[2][0]) / s;\n  } else if (m[1][1] > m[2][2]) {\n    float s = 2.0 * sqrt(1.0 + m[1][1] - m[0][0] - m[2][2]);\n    quat.w = (m[0][2] - m[2][0]) / s;\n    quat.x = (m[0][1] + m[1][0]) / s;\n    quat.y = 0.25 * s;\n    quat.z = (m[1][2] + m[2][1]) / s;\n  } else {\n    float s = 2.0 * sqrt(1.0 + m[2][2] - m[0][0] - m[1][1]);\n    quat.w = (m[1][0] - m[0][1]) / s;\n    quat.x = (m[0][2] + m[2][0]) / s;\n    quat.y = (m[1][2] + m[2][1]) / s;\n    quat.z = 0.25 * s;\n  }\n  float len = quat.x * quat.x + quat.y * quat.y + quat.z * quat.z + quat.w * quat.w;\n  if (len > 0.) {\n    len = 1. / sqrt(len);\n    quat.x = quat.x * len;\n    quat.y = quat.y * len;\n    quat.z = quat.z * len;\n    quat.w = quat.w * len;\n  }\n  return quat;\n}\nvec4 quaternionFromEuler (vec3 angle){\n  float x = angle.x / 2.;\n  float y = angle.y / 2.;\n  float z = angle.z / 2.;\n  float sx = sin(x);\n  float cx = cos(x);\n  float sy = sin(y);\n  float cy = cos(y);\n  float sz = sin(z);\n  float cz = cos(z);\n  vec4 quat = vec4(0);\n  quat.x = sx * cy * cz + cx * sy * sz;\n  quat.y = cx * sy * cz + sx * cy * sz;\n  quat.z = cx * cy * sz - sx * sy * cz;\n  quat.w = cx * cy * cz - sx * sy * sz;\n  return quat;\n}\nmat4 matrixFromRT (vec4 q, vec3 p){\n  float x2 = q.x + q.x;\n  float y2 = q.y + q.y;\n  float z2 = q.z + q.z;\n  float xx = q.x * x2;\n  float xy = q.x * y2;\n  float xz = q.x * z2;\n  float yy = q.y * y2;\n  float yz = q.y * z2;\n  float zz = q.z * z2;\n  float wx = q.w * x2;\n  float wy = q.w * y2;\n  float wz = q.w * z2;\n  return mat4(\n    1. - (yy + zz), xy + wz, xz - wy, 0,\n    xy - wz, 1. - (xx + zz), yz + wx, 0,\n    xz + wy, yz - wx, 1. - (xx + yy), 0,\n    p.x, p.y, p.z, 1\n  );\n}\nmat4 matFromRTS (vec4 q, vec3 t, vec3 s){\n  float x = q.x, y = q.y, z = q.z, w = q.w;\n  float x2 = x + x;\n  float y2 = y + y;\n  float z2 = z + z;\n  float xx = x * x2;\n  float xy = x * y2;\n  float xz = x * z2;\n  float yy = y * y2;\n  float yz = y * z2;\n  float zz = z * z2;\n  float wx = w * x2;\n  float wy = w * y2;\n  float wz = w * z2;\n  float sx = s.x;\n  float sy = s.y;\n  float sz = s.z;\n  return mat4((1. - (yy + zz)) * sx, (xy + wz) * sx, (xz - wy) * sx, 0,\n    (xy - wz) * sy, (1. - (xx + zz)) * sy, (yz + wx) * sy, 0,\n    (xz + wy) * sz, (yz - wx) * sz, (1. - (xx + yy)) * sz, 0,\n    t.x, t.y, t.z, 1);\n}\nvec4 quatMultiply (vec4 a, vec4 b){\n  vec4 quat;\n  quat.x = a.x * b.w + a.w * b.x + a.y * b.z - a.z * b.y;\n  quat.y = a.y * b.w + a.w * b.y + a.z * b.x - a.x * b.z;\n  quat.z = a.z * b.w + a.w * b.z + a.x * b.y - a.y * b.x;\n  quat.w = a.w * b.w - a.x * b.x - a.y * b.y - a.z * b.z;\n  return quat;\n}\nvoid rotateVecFromQuat (inout vec3 v, vec4 q){\n  float ix = q.w * v.x + q.y * v.z - q.z * v.y;\n  float iy = q.w * v.y + q.z * v.x - q.x * v.z;\n  float iz = q.w * v.z + q.x * v.y - q.y * v.x;\n  float iw = -q.x * v.x - q.y * v.y - q.z * v.z;\n  v.x = ix * q.w + iw * -q.x + iy * -q.z - iz * -q.y;\n  v.y = iy * q.w + iw * -q.y + iz * -q.x - ix * -q.z;\n  v.z = iz * q.w + iw * -q.z + ix * -q.y - iy * -q.x;\n}\nvec3 rotateInLocalSpace (vec3 pos, vec3 xAxis, vec3 yAxis, vec3 zAxis, vec4 q){\n  vec4 viewQuat = quaternionFromAxis(xAxis, yAxis, zAxis);\n  vec4 rotQuat = quatMultiply(viewQuat, q);\n  rotateVecFromQuat(pos, rotQuat);\n  return pos;\n}\nmat3 quatToMat3(vec4 q) {\n  vec3 m0 = vec3(\n    1.0 - 2.0 * q.y * q.y - 2.0 * q.z * q.z,\n    2.0 * q.x * q.y + 2.0 * q.w * q.z,\n    2.0 * q.x * q.z - 2.0 * q.w * q.y);\n\tvec3 m1 = vec3(\n    2.0 * q.x * q.y - 2.0 * q.w * q.z,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.z * q.z,\n    2.0 * q.y * q.z + 2.0 * q.w * q.x);\n\tvec3 m2 = vec3(\n    2.0 * q.x * q.z + 2.0 * q.w * q.y,\n    2.0 * q.y * q.z - 2.0 * q.w * q.x,\n    1.0 - 2.0 * q.x * q.x - 2.0 * q.y * q.y);\n  return mat3(m0, m1, m2);\n}\nvec4 mat3ToQuat(mat3 mat) {\n  float tr = mat[0][0] + mat[1][1] + mat[2][2];\n\tfloat qw, qx, qy, qz;\n  if (tr > 0.0) {\n    float S = sqrt(tr + 1.0) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = 0.25 * S;\n\t  qx = (mat[1][2] - mat[2][1]) * invS;\n\t  qy = (mat[2][0] - mat[0][2]) * invS;\n\t  qz = (mat[0][1] - mat[1][0]) * invS;\n  } else if ((mat[0][0] > mat[1][1])&&(mat[0][0] > mat[2][2])) {\n    float S = sqrt(1.0 + mat[0][0] - mat[1][1] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[1][2] - mat[2][1]) * invS;\n\t  qx = 0.25 * S;\n\t  qy = (mat[1][0] + mat[0][1]) * invS;\n\t  qz = (mat[2][0] + mat[0][2]) * invS;\n  } else if (mat[1][1] > mat[2][2]) {\n\t  float S = sqrt(1.0 + mat[1][1] - mat[0][0] - mat[2][2]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[2][0] - mat[0][2]) * invS;\n\t  qx = (mat[1][0] + mat[0][1]) * invS;\n\t  qy = 0.25 * S;\n\t  qz = (mat[2][1] + mat[1][2]) * invS;\n  } else {\n\t  float S = sqrt(1.0 + mat[2][2] - mat[0][0] - mat[1][1]) * 2.0;\n\t  float invS = 1.0 / S;\n\t  qw = (mat[0][1] - mat[1][0]) * invS;\n\t  qx = (mat[2][0] + mat[0][2]) * invS;\n\t  qy = (mat[2][1] + mat[1][2]) * invS;\n\t  qz = 0.25 * S;\n  }\n  return vec4(qx, qy, qz, qw);\n}\n   uniform vec4 mainTiling_Offset;\n   uniform vec4 frameTile_velLenScale;\n   uniform vec4 scale;\n   uniform vec4 nodeRotation;\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matViewInv;\n  uniform highp mat4 cc_matViewProj;\n  uniform highp vec4 cc_cameraPos;\nuniform highp mat4 cc_matWorld;\nvarying mediump vec2 uv;\nvarying mediump vec4 color;\nvoid computeVertPos (inout vec4 pos, vec2 vertOffset, vec4 q, vec3 s\n#if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n  , mat4 viewInv\n#endif\n#if CC_RENDER_MODE == 1\n  , vec3 eye\n  , vec4 velocity\n  , float velocityScale\n  , float lengthScale\n  , float xIndex\n#endif\n) {\n#if CC_RENDER_MODE == 0\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = normalize(vec3(viewInv[0][0], viewInv[1][0], viewInv[2][0]));\n  vec3 camY = normalize(vec3(viewInv[0][1], viewInv[1][1], viewInv[2][1]));\n  vec3 camZ = normalize(vec3(viewInv[0][2], viewInv[1][2], viewInv[2][2]));\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, camZ, q);\n#elif CC_RENDER_MODE == 1\n  vec3 camRight = normalize(cross(pos.xyz - eye, velocity.xyz)) * s.x;\n  vec3 camUp = velocity.xyz * velocityScale + normalize(velocity.xyz) * lengthScale * s.y;\n  pos.xyz += (camRight * abs(vertOffset.x) * sign(vertOffset.y)) - camUp * xIndex;\n#elif CC_RENDER_MODE == 2\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  vec3 camX = vec3(1, 0, 0);\n  vec3 camY = vec3(0, 0, -1);\n  pos.xyz += rotateInLocalSpace(viewSpaceVert, camX, camY, cross(camX, camY), q);\n#elif CC_RENDER_MODE == 3\n  vec3 viewSpaceVert = vec3(vertOffset.x * s.x, vertOffset.y * s.y, 0.);\n  rotateVecFromQuat(viewSpaceVert, q);\n  vec3 camX = normalize(vec3(cc_matView[0][0], cc_matView[1][0], cc_matView[2][0]));\n  vec3 camY = vec3(0, 1, 0);\n  vec3 offset = camX * viewSpaceVert.x + camY * viewSpaceVert.y;\n  pos.xyz += offset;\n#else\n  pos.x += vertOffset.x;\n  pos.y += vertOffset.y;\n#endif\n}\nvec2 computeUV (float frameIndex, vec2 vertIndex, vec2 frameTile){\n  vec2 aniUV = vec2(0, floor(frameIndex * frameTile.y));\n  aniUV.x = floor(frameIndex * frameTile.x * frameTile.y - aniUV.y * frameTile.x);\n#if CC_RENDER_MODE != 4\n  vertIndex.y = 1. - vertIndex.y;\n#endif\n  return (aniUV.xy + vertIndex) / vec2(frameTile.x, frameTile.y);\n}\nattribute vec3 a_position;\nattribute vec3 a_texCoord;\nattribute vec3 a_texCoord1;\nattribute vec3 a_texCoord2;\nattribute vec4 a_color;\n#if CC_RENDER_MODE == 1\n  attribute vec3 a_color1;\n#endif\n#if CC_RENDER_MODE == 4\n  attribute vec3 a_texCoord3;\n  attribute vec3 a_normal;\n  attribute vec4 a_color1;\n#endif\nvec4 lpvs_main () {\n  vec3 compScale = scale.xyz * a_texCoord1;\n  vec4 pos = vec4(a_position, 1);\n  #if CC_RENDER_MODE == 1\n    vec4 velocity = vec4(a_color1.xyz, 0);\n  #endif\n  #if !CC_USE_WORLD_SPACE\n    pos = cc_matWorld * pos;\n    #if CC_RENDER_MODE == 1\n      velocity = cc_matWorld * velocity;\n    #endif\n  #endif\n  #if ROTATION_OVER_TIME_MODULE_ENABLE\n    vec3 rotTmp = a_texCoord2;\n    float mulFactor = 1.0;\n    if (rotTmp.x > 10.0 * 0.5) {\n        rotTmp.x -= 10.0;\n        mulFactor = -1.0;\n    }\n    vec4 rot = vec4(rotTmp, 0.0);\n    rot.w = mulFactor * sqrt(abs(1.0 - rot.x * rot.x - rot.y * rot.y - rot.z * rot.z));\n  #else\n    #if CC_RENDER_MODE != 4\n      #if CC_RENDER_MODE == 0\n        vec3 rotEuler = a_texCoord2;\n      #elif CC_RENDER_MODE == 1\n        vec3 rotEuler = vec3(0.);\n      #else\n        vec3 rotEuler = vec3(0., 0., a_texCoord2.z);\n      #endif\n      vec4 rot = quaternionFromEuler(rotEuler);\n    #else\n      vec4 rot = quaternionFromEuler(a_texCoord2);\n    #endif\n  #endif\n  #if CC_RENDER_MODE != 4\n    vec2 cornerOffset = vec2((a_texCoord.xy - 0.5));\n    #if CC_RENDER_MODE == 0 || CC_RENDER_MODE == 3\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_matViewInv);\n    #elif CC_RENDER_MODE == 1\n      computeVertPos(pos, cornerOffset, rot, compScale, cc_cameraPos.xyz, velocity, frameTile_velLenScale.z, frameTile_velLenScale.w, a_texCoord.x);\n    #elif 2\n      computeVertPos(pos, cornerOffset, rot, compScale);\n    #endif\n    color = a_color;\n  #else\n    mat3 rotMat = quatToMat3(rot);\n    mat3 nodeMat = quatToMat3(nodeRotation);\n    rotMat = nodeMat * rotMat;\n    rot = mat3ToQuat(rotMat);\n    mat4 xformNoScale = matrixFromRT(rot, pos.xyz);\n    mat4 xform = matFromRTS(rot, pos.xyz, compScale);\n    pos = xform * vec4(a_texCoord3, 1);\n    vec4 normal = xformNoScale * vec4(a_normal, 0);\n    color = a_color * a_color1;\n  #endif\n  uv = computeUV(a_texCoord.z, a_texCoord.xy, frameTile_velLenScale.xy) * mainTiling_Offset.xy + mainTiling_Offset.zw;\n  pos = cc_matViewProj * pos;\n  return pos;\n}\nvoid main() { gl_Position = lpvs_main(); }","frag":"\nprecision mediump float;\nvec4 CCFragOutput (vec4 color) {\n  return color;\n}\nvarying vec2 uv;\nvarying vec4 color;\nuniform sampler2D mainTexture;\nvec4 premultiplied () {\n  vec4 col = color * texture2D(mainTexture, uv) * color.a;\n  return CCFragOutput(col);\n}\nvoid main() { gl_FragColor = premultiplied(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplerTextures":[],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":53,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":39}},"defines":[{"name":"CC_RENDER_MODE","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_WORLD_SPACE","type":"boolean","defines":[]},{"name":"ROTATION_OVER_TIME_MODULE_ENABLE","type":"boolean","defines":[]}]}],[{"name":"add","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"alpha-blend","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:add","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-multiply","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|tinted-fs:multiply","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":7,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":3}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]},"tintColor":{"type":16,"value":[0.5,0.5,0.5,0.5],"editor":{"type":"color"}}}}]},{"name":"add-smooth","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:addSmooth","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":1,"blendSrcAlpha":2,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]}}}]},{"name":"premultiply-blend","passes":[{"program":"builtin-particle|particle-vs-legacy:lpvs_main|no-tint-fs:premultiplied","rasterizerState":{"cullMode":0},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28},"mainTiling_Offset":{"type":16,"value":[1,1,0,0]}}}]}]]],0,0,[],[],[]],[[[50,"SM_TowerTunnelerBody_01"],[195,"SM_TowerTunnelerBody_01",[-2],[2,"d2WuMenSdQdr89Jfpld4zw",-1,0],[1,2000,0,0]],[53,"SM_TowerTunnelerBody_01",1,[[52,-3,[1,"9dDxbuCdVYVYsfEinJuqgr"],[0],[34],1]],[2,"bac3BKSlVQpqE9QB4VllW4",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[1,191]],[[[475,[{}],[{}]]],0,0,[0],[12],[58]],[[[112,"3",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[30,12],[3,25]],[[[62],[47,"SM_BlockPath_01",[-2],[2,"38TprYPCRWppYLEJoooZq3",-1,0]],[53,"SM_BlockPath_01",1,[[52,-3,[1,"c6ETENbq5XL5UBZI2bIgRH"],[0],[34],1]],[2,"8cBWn12o1aHr/dSCvdO6Ui",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[493,494]],[[[57,".bin",1607146932,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4032,"length":1128,"count":282,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4032,"count":84,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.48000001907348633,-0.47999992966651917,0],"maxPosition",8,[1,0.47999992966651917,0.48000001907348633,0.20543640851974487]]],-1],0,0,[],[],[]],[[[63,"SM_BlockPath_01__0.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[112,"3",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true,"USE_NOISE_1":true,"USE_NOISE_2":true,"ALPHA_TEST_CHANNEL":"r","NOISE_1_BLEND_MIX":true,"NOISE_2_BLEND_MIX":true}],[[[{"alphaThreshold":0.1},"tilingOffset",8,[2,1,1,0.1,0.3],"mainColor",8,[4,4279447896],"noise1TilingOffset",8,[2,0.5,1,0.1,0.2],"noise2TilingOffset",8,[2,0.65,0.5,0.15,0.15],"noise1Texture",6,0,"noise2Texture",6,1]],11]]],0,0,[0,0,0],[50,51,12],[206,207,208]],[[[112,"2",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"USE_TEXTURE":true,"USE_NOISE_1":true,"ALPHA_TEST_CHANNEL":"r","NOISE_1_BLEND_MULTIPLY":true,"NOISE_2_BLEND_MULTIPLY":true}],[[[{"alphaThreshold":0.012},"mainColor",8,[4,4280887788],"colorScale",8,[1,10,10,10],"noise1TilingOffset",8,[2,1,0.5,0.05,0.03],"noise2TilingOffset",8,[2,-1,0.5,0.15,0.15],"mainTexture",6,0,"noise1Texture",6,1,"noise2Texture",6,2]],11]]],0,0,[0,0,0,0],[30,50,51,12],[495,207,206,208]],[[{"name":"UI_Degrade_Light Top Panel","rect":{"x":0,"y":0,"width":32,"height":32},"offset":{"x":0,"y":0},"originalSize":{"width":32,"height":32},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[21],[496]],[[[62],[47,"SM_Cracks_01",[-2],[2,"4bKhv/jV5Y7ZI2kqZex6z2",-1,0]],[53,"SM_Cracks_01",1,[[52,-3,[1,"fdBUKNZOdcRpJjryQ5pdeh"],[0],[34],1]],[2,"3elJq4TRhXhJIUEinPKVAi",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[497,498]],[[[57,".bin",4208186262,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":7296,"length":1704,"count":426,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":7296,"count":152,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4868195950984955,-0.4885806143283844,-0.5260231494903564],"maxPosition",8,[1,0.48866888880729675,0.4876311719417572,0.7066559791564941]]],-1],0,0,[],[],[]],[[[63,"SM_Cracks_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[112,"3",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[30,12],[181,25]],[[[63,"SM_EnemyCargo_02__0.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",473574830,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27072,"length":3528,"count":882,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27072,"count":564,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3002181947231293,-0.3246779441833496,-0.031475454568862915],"maxPosition",8,[1,0.3003091514110565,0.42986026406288147,0.21766367554664612]]],-1],0,0,[],[],[]],[[[62],[47,"SM_EnemyCargo_02",[-2],[2,"30XKbfMTNf97kxPRwjyic5",-1,0]],[53,"SM_EnemyCargo_02",1,[[52,-3,[1,"03kt8efSpXE6Pxg+UKrU++"],[0],[34],1]],[2,"62Thw20TRVIrkE0s7tlGnj",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[499,500]],[[[63,"SM_EnemyCrowder_03__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",2994938267,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":6624,"length":792,"count":198,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":6624,"count":138,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.25525224208831787,-0.058665115386247635,-0.1477106660604477],"maxPosition",8,[1,0.25525224208831787,0.37976759672164917,0.48866382241249084]]],-1],0,0,[],[],[]],[[[62],[47,"SM_EnemyCrowder_03",[-2],[2,"f1XKrwhjBUbpq3ZOc66Wy1",-1,0]],[53,"SM_EnemyCrowder_03",1,[[52,-3,[1,"ddPCXGq0tRx48X2hJdJETp"],[0],[34],1]],[2,"b1PSBQTipWm50yzvj/8b+f",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[501,502]],[[[63,"SM_TowerS4RBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[62],[47,"SM_TowerS4RBody_01",[-2],[2,"b8JcZpYRhbA7dBnVFp97b+",-1,0]],[53,"SM_TowerS4RBody_01",1,[[52,-3,[1,"aa2p+GekNcwr3d84smoPpV"],[0],[34],1]],[2,"42d3cbnwxfy6Z3GE8KKuaQ",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[503,190]],[[[57,".bin",427611967,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":27840,"length":8340,"count":2085,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":27840,"count":580,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.25920164585113525,-0.36292514204978943,-0.008752617053687572],"maxPosition",8,[1,0.25920164585113525,0.2576525807380676,0.39157843589782715]]],-1],0,0,[],[],[]],[[[149,[[150,[120,[-12,-13,-14,-15,-16,-17,-18],[[84,0,false,-5,-4,[[91,"damaged"]]],[84,0,false,-7,-6,[[91,"exit"]]],[121,-9,-8],[193,0,-11,-10,[[91,"show"]]]],-3,-2,-1]]],[{},"damaged",4,[113,2],"exit",4,[113,2],"show",4,[113,2]]],[71,"LifeCube_Intro",[75,0]],[65,"Entry"],[216,"Empty"],[65,"Exit"],[65,"Any"],[71,"LifeCube_Exit",[75,1]],[71,"LifeCube_DmgTaken",[75,2]]],0,[0,22,5,0,23,4,0,24,2,0,14,7,0,15,1,0,14,6,0,15,1,0,14,3,0,15,2,0,14,1,0,15,3,0,-1,2,0,-2,4,0,-3,5,0,-4,1,0,-5,6,0,-6,7,0,-7,3,18],[0,0,0],[16,16,16],[176,178,177]],[[[50,"P-GunTower-Bullet-0MG2"],[132,"P-GunTower-Bullet-0MG2",32,[-9,-10,-11,-12,-13,-14],[[197,-8,[1,"beD6AbwclCQbdYQiBsHcVK"],[[7,"12ea43w32ZDAL2+IVCNZlsZ","play",-7]],[[7,"cc.ParticleSystem","play",-3],[7,"12ea43w32ZDAL2+IVCNZlsZ","play",-4],[7,"cc.ParticleSystem","play",-5],[7,"cc.ParticleSystem","play",-6]],[-2]]],[2,"e8sP6FFh9D17STW5Nbkx1m",-1,0]],[220,"Projectile",32,1,[[[222,"Quad<ModelComponent>",false,-15,[1,"0bELSWeDdO65djlx1RiPJl"],[34],7],-16,-17],4,1,1],[2,"caJ4o2c5FOda7/HE7o5QFR",1,0],[1,0.15,0.15,1]],[64,"Bullet_Burst_Flash",512,1,[-18],[2,"8awZgQiLFMo788WeoWcrPq",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[130,0.5,false,false,1,3,[1,"807LSdEE5OBp7IMkuUEYXk"],[[0,null],6,0],[5],[3,1],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[0],[3,0.15],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[119],[13,0.05357142857142855,[4,4292723871]],[13,1,[4,4284358679]]],[[38,255],[9,255,0.6026785714285714],[9,0,1]]]]],[77,0,[3,1]],[32,true,[30,1,[8,[0,0.1794871794871795,0.7538461538461538,0.9794871794871794],[[6,2,0.6148148148148148,1.8227513227513228,1.8227513227513228],[6,2,0.8814814814814815,0.9950617283950617,0.9950617283950617],[6,2,0.6962962962962963,-1.4444444444444435,-1.4444444444444435],[189,2,-4.6222222222222245,-4.6222222222222245]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-19],[26,1]],[64,"Bullet_Burst_Square",32,1,[-20],[2,"29U8hsJUlB8JTNpooxjqiO",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[64,"Bullet_Burst_Fragments",32,1,[-21],[2,"5f4rBTIrlFLIY0/YUL0d89",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[221,"Bullet_Trail",false,512,1,[-22,-23],[2,"4b8ydGY/tOzKGDYewdhT94",1,0]],[146,"Temporary",32,1,[-24,-25],[2,"c5GgaVw6FFeY9mnByY+aKX",1,0]],[39,"Projectile Collision Fade Out",32,8,[[200,0.2,-26,[1,"19qrhSA9JAiY0e2WHN8oh5"],2,[1,1,1,1],[1,0,0,0]]],[2,"f0ugCEKBdHQ6kkJpq8eD1a",1,0]],[39,"Projectile Fade In",32,8,[[201,0,-27,[1,"efl6QMDlhPKIhp/XlQhmzg"],2,[1,0.15,0.15,1]]],[2,"7eZgQmg7BJiKSV6+V3wpmf",1,0]],[130,0.25,false,false,1,5,[1,"2b2XIBV3ZD/r5Jd0n4bDrC"],[[2,null],6,0],[5],[3,0.8],[0],[0],[0],[0],[0],[23,3,0.7853981633974483,0.7853981633974483],[0],[3,0.24],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[87,[4,33554431]],[13,0.044642857142857144,[4,32281173]],[13,0.8191964285714286,[4,22023713]]],[[38,255],[9,255,0.18749999999999997],[9,0,1]]]]],[31,[0]],[32,true,[12,1,1.5,[8,[0,0.30256410256410254,1],[[6,2,0.09629629629629628,2.7575757575757573,2.7575757575757573],[6,2,0.7777777777777778,0.9883040935672519,0.9883040935672519],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-28],[26,3]],[73,0.5,false,false,6,[1,"bem915BoBG47GEjN4PVAEW"],[[4,null],6,0],[5],[23,3,0.05,0.15],[0],[0],[23,3,0.2,0.8],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.2,0.4],[0],[0],[0],[[25,[23,3,4,8]]],[20,true,[16,1,[33,[[13,0.026785714285714315,[4,4293187241]],[13,0.14732142857142858,[4,4291465556]],[13,0.7142857142857143,[4,4282851095]]],[[9,255,0.12946428571428573],[9,0,1]]]]],[208,true,3,2,true,0.25,[0]],[32,true,[30,1,[8,[0,1],[[41,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[41,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[21,[3,6],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,40,[8,[0,1],[[126,1,1,1,1],[106,1,1,1,1,1]]]]],[138,true,2,2,1,[83,4],[44,3,2]],[19,[0],[0],[5],[5],-29],[108]],[198,false,0,7,[1,"6dAiuo47BO6rg9Yf8NI3vX"],[[5,null],6,0],[56,[4,2412752452]],[23,3,0.05,0.1],[0],[0],[3,1],[0],[0],[44,3,6.283185307179586],[0],[23,3,1,1],[0],[0],[3,2],[20,true,[16,1,[33,[[13,0.026785714285714315,[4,4293187241]],[13,0.2767857142857143,[4,4291465556]],[13,1,[4,4282851095]]],[[9,255,0.12946428571428573],[9,0,1]]]]],[187,true,2,true,0.1,1,0.17453292519943295,[0],[1,0,180,0]],[49,[30,1,[8,[0,1],[[41,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[41,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[21,[3,6],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[12,1,40,[8,[0,1],[[126,1,1,1,1],[106,1,1,1,1,1]]]]],[138,true,2,2,1,[83,4],[44,3,2]],[19,[0],[0],[5],[5],-30],[108]],[224,7,[1,"02KzFZOkpHzqdL7Lhw+09B"],[[null,6],0,6],[5],[3,1],[0],[0],[3,5],[0],[0],[0],[0],[3,5],[0],[0],[0],[[25,[3,1]]],[122,[5]],[31,[0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[147,true,false,[3,1],[3,3],[16,1,[127,[[87,[4,4294287463]],[13,1,[4,4283307025]]]]],[5],-31],[108]],[225,0,0.5,false,2,[1,"02KzFZOkpHzqdL7Lhw+09B"],[[null,8],0,6],[56,[4,16777215]],[0],[0],[0],[0],[0],[0],[0],[0],[3,5],[0],[0],[0],[[25,[3,1]]],[122,[5]],[31,[0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[147,true,false,[3,0.2],[3,0.5],[16,1,[127,[[87,[4,4294287463]],[13,1,[4,4283307025]]]]],[5],-32],[108]],[226,1,[null,null],2,[1,"e6875CztlE0JXWurEQgEej"],[5],[3,1],[0],[0],[0],[0],[0],[0],[0],[3,1],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[127,[[119],[13,0.49999999999999994,[4,4293381654]],[43,1]]]]],[31,[0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[227,false,[0],[0],[5],[5],-33],[228,2]]],0,[0,2,1,0,-1,4,0,3,3,0,3,9,0,3,5,0,3,6,0,3,10,0,0,1,0,-1,3,0,-2,5,0,-3,6,0,-4,7,0,-5,2,0,-6,8,0,0,2,0,-2,15,0,-3,16,0,-1,4,0,4,4,0,-1,11,0,-1,12,0,-1,13,0,-2,14,0,-1,9,0,-2,10,0,0,9,0,0,10,0,4,11,0,4,12,0,4,13,0,4,14,0,4,15,0,4,16,0,9,1,33],[0,0,0,0,0,0,0,0,0],[-1,5,-1,5,-1,-1,-2,10,-2],[48,44,42,39,10,10,31,49,31]],[[[50,"P-GunTower-Bullet-3MGV"],[132,"P-GunTower-Bullet-3MGV",32,[-9,-10,-11,-12,-13,-14],[[197,-8,[1,"beD6AbwclCQbdYQiBsHcVK"],[[7,"12ea43w32ZDAL2+IVCNZlsZ","play",-7]],[[7,"cc.ParticleSystem","play",-3],[7,"12ea43w32ZDAL2+IVCNZlsZ","play",-4],[7,"cc.ParticleSystem","play",-5],[7,"cc.ParticleSystem","play",-6]],[-2]]],[2,"e8sP6FFh9D17STW5Nbkx1m",-1,0]],[220,"Projectile",32,1,[[[222,"Quad<ModelComponent>",false,-15,[1,"0bELSWeDdO65djlx1RiPJl"],[34],7],-16,-17],4,1,1],[2,"caJ4o2c5FOda7/HE7o5QFR",1,0],[1,0.15,0.15,1]],[64,"Bullet_Burst_Flash",512,1,[-18],[2,"8awZgQiLFMo788WeoWcrPq",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[130,0.5,false,false,1,3,[1,"807LSdEE5OBp7IMkuUEYXk"],[[0,null],6,0],[5],[3,1],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[0],[3,0.15],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[119],[13,0.05357142857142855,[4,4292723871]],[13,1,[4,4284358679]]],[[38,255],[9,255,0.6026785714285714],[9,0,1]]]]],[77,0,[3,1]],[32,true,[30,1,[8,[0,0.1794871794871795,0.7538461538461538,0.9794871794871794],[[6,2,0.6148148148148148,1.8227513227513228,1.8227513227513228],[6,2,0.8814814814814815,0.9950617283950617,0.9950617283950617],[6,2,0.6962962962962963,-1.4444444444444435,-1.4444444444444435],[189,2,-4.6222222222222245,-4.6222222222222245]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-19],[26,1]],[64,"Bullet_Burst_Square",32,1,[-20],[2,"29U8hsJUlB8JTNpooxjqiO",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[64,"Bullet_Burst_Fragments",32,1,[-21],[2,"5f4rBTIrlFLIY0/YUL0d89",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[221,"Bullet_Trail",false,512,1,[-22,-23],[2,"4b8ydGY/tOzKGDYewdhT94",1,0]],[146,"Temporary",32,1,[-24,-25],[2,"c5GgaVw6FFeY9mnByY+aKX",1,0]],[39,"Projectile Collision Fade Out",32,8,[[200,0.2,-26,[1,"19qrhSA9JAiY0e2WHN8oh5"],2,[1,1,1,1],[1,0,0,0]]],[2,"f0ugCEKBdHQ6kkJpq8eD1a",1,0]],[39,"Projectile Fade In",32,8,[[201,0,-27,[1,"efl6QMDlhPKIhp/XlQhmzg"],2,[1,0.15,0.15,1]]],[2,"7eZgQmg7BJiKSV6+V3wpmf",1,0]],[130,0.25,false,false,1,5,[1,"2b2XIBV3ZD/r5Jd0n4bDrC"],[[2,null],6,0],[5],[3,0.8],[0],[0],[0],[0],[0],[23,3,0.7853981633974483,0.7853981633974483],[0],[3,0.24],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[87,[4,33554431]],[13,0.044642857142857144,[4,32281173]],[13,0.8191964285714286,[4,22023713]]],[[38,255],[9,255,0.18749999999999997],[9,0,1]]]]],[31,[0]],[32,true,[12,1,1.5,[8,[0,0.30256410256410254,1],[[6,2,0.09629629629629628,2.7575757575757573,2.7575757575757573],[6,2,0.7777777777777778,0.9883040935672519,0.9883040935672519],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-28],[26,3]],[73,0.5,false,false,6,[1,"bem915BoBG47GEjN4PVAEW"],[[4,null],6,0],[5],[23,3,0.05,0.15],[0],[0],[23,3,0.2,0.8],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.2,0.4],[0],[0],[0],[[25,[23,3,4,8]]],[20,true,[16,1,[33,[[13,0.026785714285714315,[4,4293187241]],[13,0.14732142857142858,[4,4291465556]],[13,0.7142857142857143,[4,4282851095]]],[[9,255,0.12946428571428573],[9,0,1]]]]],[208,true,3,2,true,0.25,[0]],[32,true,[30,1,[8,[0,1],[[41,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[41,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[21,[3,6],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,40,[8,[0,1],[[126,1,1,1,1],[106,1,1,1,1,1]]]]],[138,true,2,2,1,[83,4],[44,3,2]],[19,[0],[0],[5],[5],-29],[108]],[198,false,0,7,[1,"6dAiuo47BO6rg9Yf8NI3vX"],[[5,null],6,0],[56,[4,2412752452]],[23,3,0.05,0.1],[0],[0],[3,1],[0],[0],[44,3,6.283185307179586],[0],[23,3,1,1],[0],[0],[3,2],[20,true,[16,1,[33,[[13,0.026785714285714315,[4,4293187241]],[13,0.2767857142857143,[4,4291465556]],[13,1,[4,4282851095]]],[[9,255,0.12946428571428573],[9,0,1]]]]],[187,true,2,true,0.1,1,0.17453292519943295,[0],[1,0,180,0]],[49,[30,1,[8,[0,1],[[41,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[41,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[21,[3,6],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[12,1,40,[8,[0,1],[[126,1,1,1,1],[106,1,1,1,1,1]]]]],[138,true,2,2,1,[83,4],[44,3,2]],[19,[0],[0],[5],[5],-30],[108]],[224,7,[1,"02KzFZOkpHzqdL7Lhw+09B"],[[null,6],0,6],[5],[3,1],[0],[0],[3,5],[0],[0],[0],[0],[3,5],[0],[0],[0],[[25,[3,1]]],[122,[5]],[31,[0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[147,true,false,[3,1],[3,3],[16,1,[127,[[87,[4,4294287463]],[13,1,[4,4283307025]]]]],[5],-31],[108]],[225,0,0.5,false,2,[1,"02KzFZOkpHzqdL7Lhw+09B"],[[null,8],0,6],[56,[4,16777215]],[0],[0],[0],[0],[0],[0],[0],[0],[3,5],[0],[0],[0],[[25,[3,1]]],[122,[5]],[31,[0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[147,true,false,[3,0.2],[3,0.5],[16,1,[127,[[87,[4,4294287463]],[13,1,[4,4283307025]]]]],[5],-32],[108]],[226,1,[null,null],2,[1,"e6875CztlE0JXWurEQgEej"],[5],[3,1],[0],[0],[0],[0],[0],[0],[0],[3,1],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[127,[[119],[13,0.49999999999999994,[4,4293381654]],[43,1]]]]],[31,[0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[227,false,[0],[0],[5],[5],-33],[228,2]]],0,[0,2,1,0,-1,4,0,3,3,0,3,9,0,3,5,0,3,6,0,3,10,0,0,1,0,-1,3,0,-2,5,0,-3,6,0,-4,7,0,-5,2,0,-6,8,0,0,2,0,-2,15,0,-3,16,0,-1,4,0,4,4,0,-1,11,0,-1,12,0,-1,13,0,-2,14,0,-1,9,0,-2,10,0,0,9,0,0,10,0,4,11,0,4,12,0,4,13,0,4,14,0,4,15,0,4,16,0,9,1,33],[0,0,0,0,0,0,0,0,0],[-1,5,-1,5,-1,-1,-2,10,-2],[48,44,42,39,10,10,31,49,31]],[[[149,[[150,[120,[-8,-9,-10,-11,-12],[[121,-5,-4],[331,false,-7,-6,[[157,[118,"isDead"]]]]],-3,-2,-1]]],[{},"isDead",4,[174,1,false]]],[65,"Entry"],[71,"EnemySpawn",[75,0]],[65,"Exit"],[65,"Any"],[71,"BossDeath",[75,1]]],0,[0,22,4,0,23,3,0,24,1,0,14,2,0,15,1,0,14,5,0,15,2,0,-1,1,0,-2,3,0,-3,4,0,-4,2,0,-5,5,12],[0,0],[16,16],[5,51]],[[[62],[47,"SM_TowerOmegaBeamBody_01",[-2],[2,"a8rRRSGbdZ75rtdYdCxXvt",-1,0]],[53,"SM_TowerOmegaBeamBody_01",1,[[52,-3,[1,"ebLTCL4wZWyoex5cTjGOhH"],[0],[34],1]],[2,"39Vq44EYlYEbQuQOG7elsR",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[504,96]],[[[63,"SM_TowerOmegaBeamBody_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",2031234339,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":65904,"length":19332,"count":4833,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":65904,"count":1373,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.26430246233940125,-0.6576791405677795,-0.12537960708141327],"maxPosition",8,[1,0.2587829530239105,0.19153396785259247,0.39770618081092834]]],-1],0,0,[],[],[]],[[[50,"P-LevelHints"],[115,"P-LevelHints",[[634,-2,[1,"96AnJeKGBLNp5FsOaJ3eUR"],[[253,1,"You must defend the CubeTower! Try these Gun Towers! They are cheap and effective against most enemies!","guntower",1],[175,2,"Chargers are the most common enemies you'll find. The Gun tower should be enought to deal with them","Charger-0",2],[253,3,"The Cannon Tower can deal splash damage. Good for dealing with multiple enemies together","cannontower",1],[253,4,"Did you know that you can unlock upgrades in the menu? Power up yourself and your towers right away!","0.mg-2",1],[253,5,"The Laser Tower is a persistent structure that does more damage the longer it attacks the same enemy. Good against big threats","lasertower",1],[175,6,"A great disturbance is announced! A new strong enemy is coming, be careful and use everything you've learned!","BossTank",2],[175,7,"Crowders are small and weak enemies but they tend to come in packs! Use AoE tower to finish them off! ","Crowder-0",2],[175,8,"Runners are powerful and extremely fast enemies. Sneak among other enemies for a quick pass. Pay attention and be very careful. Fast weapons may help.","Runner-0",2],[175,9,"Tanks are tough but slow. Laser Towers are the best bet against these Juggernauts. But remember that there are other enemies too!","Tank-0",2],[253,10,"You can receive up to 3 coins per level to spend in the shop and purchase essential upgrades for better performance against enemies in the upgrades menu.","s.4r",1],[175,11,"Overchargers are small, fast enemies. They do no damage to the CubeTower but will cause a power overload which stops power production for a few seconds.","OverCharger-0",2],[175,12,"The Divider is an incredibly powerful enemy that splits to avoid destruction. Finish them all","TheGang",2],[175,13,"Attention, a more powerful version of the Chargers has been detected! They are stronger and faster, so be prepared.","Charger-1",2],[175,14,"It looks like our enemy has fortified himself. This version of the crowders can give us even more work, evolve your Cannon Towers.","Crowder-1",2],[175,15,"Enemy reinforcements spotted! Cargo units drop more enemies upon defeat, be careful.","Cargo-0",2],[253,16,"Don't forget to stop by the shop to buy upgrades for your towers. The Sonar tower cause slow effect on enemies.","pulsar",1],[175,17,"Tier 2 Tanks are coming! These extremely robust units can take a lot of damage. We recommend leveling up your Laser Towers well.","Tank-1",2],[175,18,"Heads up! A powerful enemy approaches. The Breeder is a Boss Enemy that spawns more enemies all the time!","Breeder",2]]]],[2,"c46/YsCPVOJYA4mWEpNYRx",-1,0]]],0,[0,2,1,0,0,1,0,9,1,2],[],[],[]],[[[50,"P-GunTower-Bullet-0MG4"],[132,"P-GunTower-Bullet-0MG4",32,[-9,-10,-11,-12,-13,-14],[[197,-8,[1,"beD6AbwclCQbdYQiBsHcVK"],[[7,"12ea43w32ZDAL2+IVCNZlsZ","play",-7]],[[7,"cc.ParticleSystem","play",-3],[7,"12ea43w32ZDAL2+IVCNZlsZ","play",-4],[7,"cc.ParticleSystem","play",-5],[7,"cc.ParticleSystem","play",-6]],[-2]]],[2,"e8sP6FFh9D17STW5Nbkx1m",-1,0]],[220,"Projectile",32,1,[[[222,"Quad<ModelComponent>",false,-15,[1,"0bELSWeDdO65djlx1RiPJl"],[34],7],-16,-17],4,1,1],[2,"caJ4o2c5FOda7/HE7o5QFR",1,0],[1,0.15,0.15,1]],[64,"Bullet_Burst_Flash",512,1,[-18],[2,"8awZgQiLFMo788WeoWcrPq",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[130,0.5,false,false,1,3,[1,"807LSdEE5OBp7IMkuUEYXk"],[[0,null],6,0],[5],[3,1],[0],[0],[0],[0],[0],[44,3,6.283185307179586],[0],[3,0.15],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[119],[13,0.05357142857142855,[4,4292723871]],[13,1,[4,4284358679]]],[[38,255],[9,255,0.6026785714285714],[9,0,1]]]]],[77,0,[3,1]],[32,true,[30,1,[8,[0,0.1794871794871795,0.7538461538461538,0.9794871794871794],[[6,2,0.6148148148148148,1.8227513227513228,1.8227513227513228],[6,2,0.8814814814814815,0.9950617283950617,0.9950617283950617],[6,2,0.6962962962962963,-1.4444444444444435,-1.4444444444444435],[189,2,-4.6222222222222245,-4.6222222222222245]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[30,1,[8,[0,1],[[11,2,1],[11,2,1]]]],[0]],[19,[3,1],[0],[5],[5],-19],[26,1]],[64,"Bullet_Burst_Square",32,1,[-20],[2,"29U8hsJUlB8JTNpooxjqiO",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[64,"Bullet_Burst_Fragments",32,1,[-21],[2,"5f4rBTIrlFLIY0/YUL0d89",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[221,"Bullet_Trail",false,512,1,[-22,-23],[2,"4b8ydGY/tOzKGDYewdhT94",1,0]],[146,"Temporary",32,1,[-24,-25],[2,"c5GgaVw6FFeY9mnByY+aKX",1,0]],[39,"Projectile Collision Fade Out",32,8,[[200,0.2,-26,[1,"19qrhSA9JAiY0e2WHN8oh5"],2,[1,1,1,1],[1,0,0,0]]],[2,"f0ugCEKBdHQ6kkJpq8eD1a",1,0]],[39,"Projectile Fade In",32,8,[[201,0,-27,[1,"efl6QMDlhPKIhp/XlQhmzg"],2,[1,0.15,0.15,1]]],[2,"7eZgQmg7BJiKSV6+V3wpmf",1,0]],[130,0.25,false,false,1,5,[1,"2b2XIBV3ZD/r5Jd0n4bDrC"],[[2,null],6,0],[5],[3,0.8],[0],[0],[0],[0],[0],[23,3,0.7853981633974483,0.7853981633974483],[0],[3,0.24],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[87,[4,33554431]],[13,0.044642857142857144,[4,32281173]],[13,0.8191964285714286,[4,22023713]]],[[38,255],[9,255,0.18749999999999997],[9,0,1]]]]],[31,[0]],[32,true,[12,1,1.5,[8,[0,0.30256410256410254,1],[[6,2,0.09629629629629628,2.7575757575757573,2.7575757575757573],[6,2,0.7777777777777778,0.9883040935672519,0.9883040935672519],[11,2,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-28],[26,3]],[73,0.5,false,false,6,[1,"bem915BoBG47GEjN4PVAEW"],[[4,null],6,0],[5],[23,3,0.05,0.15],[0],[0],[23,3,0.2,0.8],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.2,0.4],[0],[0],[0],[[25,[23,3,4,8]]],[20,true,[16,1,[33,[[13,0.026785714285714315,[4,4293187241]],[13,0.14732142857142858,[4,4291465556]],[13,0.7142857142857143,[4,4282851095]]],[[9,255,0.12946428571428573],[9,0,1]]]]],[208,true,3,2,true,0.25,[0]],[32,true,[30,1,[8,[0,1],[[41,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[41,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[21,[3,6],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[12,1,40,[8,[0,1],[[126,1,1,1,1],[106,1,1,1,1,1]]]]],[138,true,2,2,1,[83,4],[44,3,2]],[19,[0],[0],[5],[5],-29],[108]],[198,false,0,7,[1,"6dAiuo47BO6rg9Yf8NI3vX"],[[5,null],6,0],[56,[4,2412752452]],[23,3,0.05,0.1],[0],[0],[3,1],[0],[0],[44,3,6.283185307179586],[0],[23,3,1,1],[0],[0],[3,2],[20,true,[16,1,[33,[[13,0.026785714285714315,[4,4293187241]],[13,0.2767857142857143,[4,4291465556]],[13,1,[4,4282851095]]],[[9,255,0.12946428571428573],[9,0,1]]]]],[187,true,2,true,0.1,1,0.17453292519943295,[0],[1,0,180,0]],[49,[30,1,[8,[0,1],[[41,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[41,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[21,[3,6],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[12,1,40,[8,[0,1],[[126,1,1,1,1],[106,1,1,1,1,1]]]]],[138,true,2,2,1,[83,4],[44,3,2]],[19,[0],[0],[5],[5],-30],[108]],[224,7,[1,"02KzFZOkpHzqdL7Lhw+09B"],[[null,6],0,6],[5],[3,1],[0],[0],[3,5],[0],[0],[0],[0],[3,5],[0],[0],[0],[[25,[3,1]]],[122,[5]],[31,[0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[147,true,false,[3,1],[3,3],[16,1,[127,[[87,[4,4294287463]],[13,1,[4,4283307025]]]]],[5],-31],[108]],[225,0,0.5,false,2,[1,"02KzFZOkpHzqdL7Lhw+09B"],[[null,8],0,6],[56,[4,16777215]],[0],[0],[0],[0],[0],[0],[0],[0],[3,5],[0],[0],[0],[[25,[3,1]]],[122,[5]],[31,[0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[147,true,false,[3,0.2],[3,0.5],[16,1,[127,[[87,[4,4294287463]],[13,1,[4,4283307025]]]]],[5],-32],[108]],[226,1,[null,null],2,[1,"e6875CztlE0JXWurEQgEej"],[5],[3,1],[0],[0],[0],[0],[0],[0],[0],[3,1],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[127,[[119],[13,0.49999999999999994,[4,4293381654]],[43,1]]]]],[31,[0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[227,false,[0],[0],[5],[5],-33],[228,2]]],0,[0,2,1,0,-1,4,0,3,3,0,3,9,0,3,5,0,3,6,0,3,10,0,0,1,0,-1,3,0,-2,5,0,-3,6,0,-4,7,0,-5,2,0,-6,8,0,0,2,0,-2,15,0,-3,16,0,-1,4,0,4,4,0,-1,11,0,-1,12,0,-1,13,0,-2,14,0,-1,9,0,-2,10,0,0,9,0,0,10,0,4,11,0,4,12,0,4,13,0,4,14,0,4,15,0,4,16,0,9,1,33],[0,0,0,0,0,0,0,0,0],[-1,5,-1,5,-1,-1,-2,10,-2],[48,44,42,39,10,10,31,49,31]],[[[63,"SM_EnemyRunner_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",793930568,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9696,"length":1224,"count":306,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9696,"count":202,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.24423977732658386,-0.15887238085269928,-0.24002273380756378],"maxPosition",8,[1,0.24423974752426147,0.3754769563674927,0.4861389696598053]]],-1],0,0,[],[],[]],[[[62],[47,"SM_EnemyRunner_01",[-2],[2,"d0adRU765c27WX41620vEc",-1,0]],[53,"SM_EnemyRunner_01",1,[[52,-3,[1,"7dZSupN3RW26NRzewpcbRt"],[0],[34],1]],[2,"98EZ57Gb1dMaZCZDdMJXKN",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[505,506]],[[[149,[[150,[120,[-18,-19,-20,-21,-22,-23,-24,-25,-26],[[266,0,-5,-4],[84,0,false,-7,-6,[[91,"exit"]]],[84,0,false,-9,-8,[[91,"exit"]]],[84,0,false,-11,-10,[[181,1,[118,"select"]]]],[573,0,false,0,-13,-12,[[157,[118,"select"]]]],[121,-15,-14],[329,0,true,false,-17,-16,[[91,"intro"]]]],-3,-2,-1]],[203,"Energy Layer",[120,[-36,-37,-38,-39,-40],[[121,-31,-30],[84,0,false,-33,-32,[[181,1,[118,"hasEnergy"]]]],[84,0,false,-35,-34,[[157,[118,"hasEnergy"]]]]],-29,-28,-27]],[203,"Locked Layer",[120,[-50,-51,-52,-53,-54],[[121,-45,-44],[84,0,false,-47,-46,[[157,[118,"locked"]]]],[84,0,false,-49,-48,[[181,1,[118,"locked"]]]]],-43,-42,-41]]],[{},"select",4,[174,1,false],"exit",4,[113,2],"intro",4,[113,2],"hasEnergy",4,[174,1,true],"locked",4,[174,1,false]]],[71,"TowerButton_UnSelected",[75,4]],[71,"TowerButton_Selected",[75,3]],[71,"Has Energy",[75,6]],[71,"Empty",[180]],[65,"Entry"],[65,"Any"],[71,"TowerButton_Intro",[75,0]],[65,"Entry"],[71,"Not Enough Energy",[75,5]],[65,"Entry"],[71,"TowerButton_Locked",[75,7]],[65,"Exit"],[71,"TowerButton_Exit",[75,1]],[71,"TowerButton_Exit Upgrade",[75,2]],[71,"Empty",[180]],[65,"Exit"],[65,"Any"],[65,"Exit"],[65,"Any"]],0,[0,22,6,0,23,12,0,24,5,0,14,1,0,15,7,0,14,14,0,15,2,0,14,13,0,15,1,0,14,1,0,15,2,0,14,2,0,15,1,0,14,15,0,15,5,0,14,7,0,15,6,0,-1,5,0,-2,12,0,-3,6,0,-4,7,0,-5,13,0,-6,14,0,-7,2,0,-8,1,0,-9,15,0,22,17,0,23,16,0,24,8,0,14,3,0,15,8,0,14,9,0,15,3,0,14,3,0,15,9,0,-1,8,0,-2,16,0,-3,17,0,-4,9,0,-5,3,0,22,19,0,23,18,0,24,10,0,14,4,0,15,10,0,14,11,0,15,4,0,14,4,0,15,11,0,-1,10,0,-2,18,0,-3,19,0,-4,11,0,-5,4,54],[0,0,0,0,0,0,0,0],[16,16,16,16,16,16,16,16],[202,35,203,201,200,204,205,52]],[[{"name":"Reference_Stage Pause","rect":{"x":0,"y":0,"width":840,"height":960},"offset":{"x":0,"y":0},"originalSize":{"width":840,"height":960},"rotated":false,"capInsets":[0,0,0,0],"packable":true}],[2],0,[0],[21],[507]],[[[149,[[150,[120,[-14,-15,-16,-17,-18,-19,-20,-21],[[84,0,false,-5,-4,[[91,"exitClicked"]]],[84,0,false,-7,-6,[[91,"exit"]]],[266,0,-9,-8],[121,-11,-10],[84,0,false,-13,-12,[[91,"intro"]]]],-3,-2,-1]]],[{},"exit",4,[113,2],"exitClicked",4,[113,2],"intro",4,[113,2]]],[71,"DestroyButton_Idle",[75,0]],[65,"Entry"],[65,"Any"],[71,"DestroyButton_Intro",[75,3]],[65,"Exit"],[71,"DestroyButton_Exit",[75,1]],[71,"DestroyButton_Exit Upgrade",[75,2]],[71,"Empty",[180]]],0,[0,22,3,0,23,5,0,24,2,0,14,7,0,15,1,0,14,6,0,15,1,0,14,1,0,15,4,0,14,8,0,15,2,0,14,4,0,15,3,0,-1,2,0,-2,5,0,-3,3,0,-4,1,0,-5,6,0,-6,7,0,-7,4,0,-8,8,21],[0,0,0,0],[16,16,16,16],[508,87,155,156]],[[[62],[47,"SM_EnemyBiker_02",[-2],[2,"b7Sl95+MZf9bANHYjJnknT",-1,0]],[53,"SM_EnemyBiker_02",1,[[52,-3,[1,"2dUztD+cNX8aVf/J8P3X7o"],[0],[34],1]],[2,"a0vkGbwHRdCYZf+gRDRxfR",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[509,510]],[[[57,".bin",1857184372,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":14688,"length":2160,"count":540,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":14688,"count":306,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.27878057956695557,-0.2357187718153,1.5832483768463135e-8],"maxPosition",8,[1,0.2783522307872772,0.6113541722297668,0.8522592782974243]]],-1],0,0,[],[],[]],[[[63,"SM_EnemyBiker_02__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[635,"GameScene"],[165,0,{},[152,"New Node"],[29,"feXYlDJrhOiIHGtymY3yxW",-7,[42,"4bbjznBsZOa5a9i8ALge3c",-6,[[14,"Enemies Holder",["_name"],-1],[10,["_lpos"],-2,[1,0,0,227.162]],[10,["_lrot"],-3,[3,0.0805214068653804,0.3812272063696535,-0.03335305878500261,0.9203638919632243]],[10,["_euler"],-4,[1,10,45,0]],[10,["_lscale"],-5,[1,130,130,130]],[28,false,["_active"],[4,["7e5RAOazJDUoqdJyOb9q5f"]]],[28,false,["_active"],[4,["02tfv4BbdAxpSCsGntWHOx"]]]]],68]],[82,0,{},[364,"46k0m6lkdE7LjR/vInpkl2",-58,[386,"84oPhfCVNNepRzTDrc/qVl",-57,[[215,[4,["0aSc2CSmNOv7gy3zhm972w","b88SOLEf1G8Llh8jZIyZGc"]],[-54]],[215,[4,["175KhMRQRDzrwjR+Y/XD8F"]],[-55]],[215,[4,["basO3xNKRMubx47MkKLOyR"]],[-56]]],[[249,[4,["c4JryQ715OxZEXyEuY811m"]],[-52]],[249,[4,["559OljkmVJbb40T1JglvS/"]],[-53]]],[[14,"Holder_TowerUpgradeMenu",["_name"],-11],[10,["_lpos"],-12,[1,0,0,0]],[10,["_lrot"],-13,[3,0,0,0,1]],[10,["_euler"],-14,[1,0,0,0]],[14,1,["_animationEvents","0","_actions","length"],-15],[172,["_animationEvents","0","_actions","0"],-17,[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",-16]],[28,false,["_debug"],[4,["ffZ2Ct4zBH+Zt94rHKmSpg"]]],[14,"Button_Color",["_name"],-18],[10,["_lpos"],-19,[1,0,0,0]],[14,"Button_Color",["_name"],-20],[10,["_lpos"],-21,[1,0,0,0]],[14,"Button_Color",["_name"],-22],[10,["_lpos"],-23,[1,0,0,0]],[28,"Dot_Outline",["_name"],[4,["fad6l15HhESar9QeacgpaJ"]]],[14,"Panel_Outline",["_name"],-24],[10,["_lpos"],-25,[1,0,0,0]],[14,"Panel_Energy Color",["_name"],-26],[10,["_lpos"],-27,[1,0,0,0]],[14,"Panel_Outline",["_name"],-28],[10,["_lpos"],-29,[1,0,0,0]],[14,"Panel_Energy Color",["_name"],-30],[10,["_lpos"],-31,[1,0,0,0]],[14,"Panel_Outline",["_name"],-32],[10,["_lpos"],-33,[1,0,0,0]],[14,"Panel_Energy Color",["_name"],-34],[10,["_lpos"],-35,[1,0,0,0]],[28,0,["_opacity"],[4,["18PnzBvKpPm5jHmDihqUZ9"]]],[28,false,["_active"],[4,["37Eb9ZL+JM5azHm5AEqitc"]]],[14,"Stats 01",["_name"],-36],[10,["_lpos"],-37,[1,-62,-5.182,0]],[14,"Stats 02",["_name"],-38],[10,["_lpos"],-39,[1,0,-5.182,0]],[14,"Stats 03",["_name"],-40],[10,["_lpos"],-41,[1,62,-5.182,0]],[14,true,["_active"],-42],[14,"Holder_Tower Button 03",["_name"],-43],[10,["_color"],-44,[4,4281401599]],[14,"Destroy",["_string"],-45],[14,1,["clickEvents","length"],-46],[172,["clickEvents","1"],-47,[153,"ac879rTendCEbpZWFz/jexs","playSFX"]],[14,1,["clickEvents","length"],-48],[172,["clickEvents","1"],-49,[153,"ac879rTendCEbpZWFz/jexs","playSFX"]],[14,1,["clickEvents","length"],-50],[172,["clickEvents","1"],-51,[153,"ac879rTendCEbpZWFz/jexs","playSFX"]],[28,false,["_debug"],[4,["82+Qldi0dJcJTsSoTpzmOs"]]],[28,true,["_debug"],[4,["99AQyBFexBdqAz+WiT48yy"]]],[28,8,["_eventID"],[4,["2dmSthkmBFhqDzGkvuZcgk"]]]]],[-8,-9,-10],55]],[82,0,{},[364,"46k0m6lkdE7LjR/vInpkl2",-95,[69,"615Zd7XYRLqKkUnNrgpIIW",-94,[[249,[4,["559OljkmVJbb40T1JglvS/"]],[-93]]],[[28,"Holder_TowerUpgradeMenu",["_name"],[4,["46k0m6lkdE7LjR/vInpkl2"]]],[22,["_lpos"],[4,["46k0m6lkdE7LjR/vInpkl2"]],[1,0,0,0]],[22,["_lrot"],[4,["46k0m6lkdE7LjR/vInpkl2"]],[3,0,0,0,1]],[22,["_euler"],[4,["46k0m6lkdE7LjR/vInpkl2"]],[1,0,0,0]],[14,"Button_Color",["_name"],-62],[10,["_lpos"],-63,[1,0,0,0]],[14,"Button_Color",["_name"],-64],[10,["_lpos"],-65,[1,0,0,0]],[14,"Button_Color",["_name"],-66],[10,["_lpos"],-67,[1,0,0,0]],[14,"Stats 01",["_name"],-68],[10,["_lpos"],-69,[1,-62,-5.182,0]],[14,"Stats 02",["_name"],-70],[10,["_lpos"],-71,[1,0,-5.182,0]],[14,"Stats 03",["_name"],-72],[10,["_lpos"],-73,[1,62,-5.182,0]],[28,"Dot_Outline",["_name"],[4,["fad6l15HhESar9QeacgpaJ"]]],[14,"Panel_Outline",["_name"],-74],[10,["_lpos"],-75,[1,0,0,0]],[14,"Panel_Energy Color",["_name"],-76],[10,["_lpos"],-77,[1,0,0,0]],[14,"Panel_Outline",["_name"],-78],[10,["_lpos"],-79,[1,0,0,0]],[14,"Panel_Energy Color",["_name"],-80],[10,["_lpos"],-81,[1,0,0,0]],[14,"Panel_Outline",["_name"],-82],[10,["_lpos"],-83,[1,0,0,0]],[14,"Panel_Energy Color",["_name"],-84],[10,["_lpos"],-85,[1,0,0,0]],[28,0,["_opacity"],[4,["18PnzBvKpPm5jHmDihqUZ9"]]],[28,false,["_active"],[4,["37Eb9ZL+JM5azHm5AEqitc"]]],[28,false,["_debug"],[4,["ffZ2Ct4zBH+Zt94rHKmSpg"]]],[14,3,["clickEvents","length"],-86],[387,["clickEvents","1","target"],-88,-87],[172,["clickEvents","2"],-89,[153,"1bb54x5k2ZLwpsDBRHVFrFw","hideButtons"]],[14,1,["_animationEvents","0","_actions","length"],-90],[172,["_animationEvents","0","_actions","0"],-92,[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",-91]]]],[-59,-60,-61],47]],[457,"Main Camera","053H6cfuFHVIse29fy0nSI",[-103,-104,-105,-106],[[-96,[616,0.5,-98,-97,[1,0.1,0,0]],[519,false,-99,[1,2,3]],-100,[521,true,-102,-101]],1,4,4,1,4],[1,2,19.545,13.135],[3,-0.49999999999999994,0,0,0.8660254037844387],[1,-60,0,0]],[436,"Controllers","315/LHwoJB6YIB5wxj4rHw",[-107,-108,-109,-110,-111,-112,-113,-114,-115,-116]],[437,"Content Holder",false,33554432,[-122,-123,-124],[[100,-117,[5,414,896]],[509,45,100,100,1,-118],[285,false,-119],[265,-120],[223,-121]]],[303,"Button_Play",33554432,[-131,-132],[[100,-125,[5,110,110]],[318,2,-128,[[7,"a2b25EHeuNHtrhlTfnn9xoq","raise",-127]],[4,4292269782],-126,28,29,30,31],[223,-129],[290,"GameScene_PlayNextLevel",-130]],[1,-1.3959999999999866,180.344,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[636,"GameScene",[4,-146,-147,5,-148,-149,-150],[469,"ea591b11-25ba-4f13-b076-6bf7b8146203",[],[-133,-134,-135,-136,-137,-138,-139,-140,-141,-142,-143,-144,-145]],[637,[638,0.5208,[2,0.242613,0.362617,0.798746,0.520833125],[2,1,1,1,1],[2,1,1,1,0.5208],[2,1,1,1,1]],[639,[4,4283190348],[0,1024,1024]],[640,false,69,70],[641],[642]]],[304,"Events","d9JFFoe6tMvKzxMlX0jW6S",8,[-151,-152,-153,-154,-155,-156,-157]],[438,"Rewards_Canvas",false,33554432,[6,-162,-163],[[100,-158,[5,414,896]],[502,-159],[510,45,1,-160],[512,-161]],[1,207,448,0]],[439,"Stars_Holder",33554432,[-167,-168,-169],[[100,-164,[5,312,100]],[383,1,128,1,-165],[518,1,1,12,-166]],[1,0,-128,0]],[356,"Star_Outline 01",33554432,11,[-174,-175],[[100,-170,[5,96,96]],[322,0,-171,[4,4281532425],17],[285,false,-172],[265,-173]],[1,-108,-15.533,0],[3,0,0,0.5591929034707469,0.8290375725550416],[1,0,0,68]],[356,"Star_Outline 02",33554432,11,[-180,-181],[[100,-176,[5,96,96]],[322,0,-177,[4,4281532425],20],[285,false,-178],[265,-179]],[1,0,1.392,0],[3,0,0,0.3090169943749474,0.9510565162951535],[1,0,0,36]],[273,"Star_Outline 03",33554432,11,[-186,-187],[[100,-182,[5,96,96]],[322,0,-183,[4,4281532425],23],[285,false,-184],[265,-185]],[1,108,-14.376,0]],[303,"Button_Menu",33554432,[-193,-194],[[100,-188,[5,68,68]],[318,2,-191,[[7,"a2b25EHeuNHtrhlTfnn9xoq","raise",-190]],[4,4292269782],-189,35,36,37,38],[290,"GameScene_GoToMenu",-192]],[1,-65,90.995,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[303,"Button_PlayAgain",33554432,[-200,-201],[[100,-195,[5,68,68]],[318,2,-198,[[7,"a2b25EHeuNHtrhlTfnn9xoq","raise",-197]],[4,4292269782],-196,42,43,44,45],[290,"GameScene_ReplayLevel",-199]],[1,65,90.995,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[82,0,{},[308,"d2vYEIV9FA2ZrKggRnx1pJ",-212,[171,"cbcWiA6+5NgZ9s5ugv8Kr9",[[14,"P-TowerUpgrades-UI",["_name"],-204],[10,["_lpos"],-205,[1,207,448.00000000000006,0]],[10,["_lrot"],-206,[3,0,0,0,1]],[10,["_euler"],-207,[1,0,0,0]],[14,"Content Holder_TowerUpgrade",["_name"],-208],[10,["_lpos"],-209,[1,0,-110,0]],[14,"Pivot",["_name"],-210],[10,["_lpos"],-211,[1,76,71,0]]]],[[61,["_animator"],2,[4,["ffZ2Ct4zBH+Zt94rHKmSpg"]],2,[4,["f13UGmbg5KLrhluQFmxr/w"]]],[116,["_tierUpUpgrades","0","entryNode"],2,[4,["74XRvRkuBPX6zuG43ddIDV","0fJEdVoOpA/qcZPGFboeiN"]]],[116,["_tierUpUpgrades","1","entryNode"],2,[4,["c1RSk6NUhFVYmVRsNR9Aqa","0fJEdVoOpA/qcZPGFboeiN"]]],[116,["_tierUpUpgrades","2","entryNode"],2,[4,["0aSc2CSmNOv7gy3zhm972w","0fJEdVoOpA/qcZPGFboeiN"]]],[116,["_commonUpgrades","0","entryNode"],2,[4,["175KhMRQRDzrwjR+Y/XD8F"]]],[116,["_commonUpgrades","1","entryNode"],2,[4,["basO3xNKRMubx47MkKLOyR"]]],[116,["_showUpgradeInfo","0","target"],2,[4,["bb7Kak23hMTYfuoFKHjabu"]]],[116,["_setTierUpUI","0","target"],2,[4,["165POIGiVCTbJeF4ypPaek"]]],[116,["_setTierUpUI","1","target"],2,[4,["34GO02mHFBr7SAk+hQxhbP"]]],[116,["_setLevelUpUI","0","target"],2,[4,["165POIGiVCTbJeF4ypPaek"]]],[116,["_setLevelUpUI","1","target"],2,[4,["34GO02mHFBr7SAk+hQxhbP"]]],[61,["clickEvents","0","target"],2,[4,["0aSc2CSmNOv7gy3zhm972w","bfWHMMhHhHZppymV9Y7kAU"]],2,[4,["0aSc2CSmNOv7gy3zhm972w","0fJEdVoOpA/qcZPGFboeiN"]]],[61,["_target"],2,[4,["0aSc2CSmNOv7gy3zhm972w","bfWHMMhHhHZppymV9Y7kAU"]],2,[4,["0aSc2CSmNOv7gy3zhm972w","a6az63RfpIg6Gg/gQf45Dh"]]],[61,["clickEvents","0","target"],2,[4,["50hrJYbf9IHLRR1ePLEmnJ"]],2,[4,["basO3xNKRMubx47MkKLOyR"]]],[61,["clickEvents","0","target"],2,[4,["e0iQibPDNGYIKJsHwZFwIm"]],2,[4,["175KhMRQRDzrwjR+Y/XD8F"]]],[61,["_animator"],2,[4,["82+Qldi0dJcJTsSoTpzmOs"]],2,[4,["47yBIwvkZE2aGBAdlhkSNv"]]],[61,["_onEnable","0","target"],2,[4,["44hjLkOIxHkqZ37y3El6fN"]],2,[4,["175KhMRQRDzrwjR+Y/XD8F"]]],[61,["_onEnable","0","target"],2,[4,["5aPj7mhcBJsoJqrNFRjFCq"]],2,[4,["basO3xNKRMubx47MkKLOyR"]]],[61,["_animator"],2,[4,["99AQyBFexBdqAz+WiT48yy"]],2,[4,["56JKwaJhFDV5L2wgkKwUbU"]]],[116,["_onEventRaised","0","target"],2,[4,["c4JryQ715OxZEXyEuY811m"]]],[116,["_onEventRaised","0","target"],2,[4,["c4JryQ715OxZEXyEuY811m"]]],[74,["_button"],-202,2,[4,["50hrJYbf9IHLRR1ePLEmnJ"]]],[74,["_button"],-203,2,[4,["1ayGJX7NFLw4ZV5ksbBfGW"]]],[116,["_onEventRaised","1","target"],2,[4,["559OljkmVJbb40T1JglvS/"]]],[116,["_onEventRaised","1","target"],2,[4,["559OljkmVJbb40T1JglvS/"]]]],54]],[440,"Cheats",false,"caCbRdmw9IMI+2UoiX6yZl",8,[-214,-215,-216,-217,-218],[[643,-213]]],[36,0,{},5,[29,"d9LIHxHFhFXIOgqeR/0ow3",-223,[171,"5cLd8y4jxCerl1gQdm1CD2",[[14,"Waves",["_name"],-219],[10,["_lpos"],-220,[1,0,0,0]],[10,["_lrot"],-221,[3,0,0,0,1]],[10,["_euler"],-222,[1,0,0,0]]]],6]],[218,"On Play Next Level Listener",9,[-229,-230,-231,-232],[[293,"GameScene_PlayNextLevel",-228,[[7,"a2b25EHeuNHtrhlTfnn9xoq","raise",-224],[7,"ebaab2OBJ5OarmKfYyuWVeW","raise",-225],[7,"99672sUg5NFw4x7bEPAiyHE","activate",-226],[7,"326a1KkFqpHRqr1jwdngHKG","setNextLevel",-227]]]]],[441,"On Scene Finish Preloading",false,20,[[341,3,-234,[[7,"ebaab2OBJ5OarmKfYyuWVeW","raise",-233]]],[342,1,"GameScene",-235],[223,-236]]],[357,"On Scene Finish Preloading",false,[[341,3,-238,[[7,"ebaab2OBJ5OarmKfYyuWVeW","raise",-237]]],[342,1,"GameScene",-239],[223,-240]]],[357,"On Scene Finish Preloading",false,[[341,3,-242,[[7,"ebaab2OBJ5OarmKfYyuWVeW","raise",-241]]],[342,1,"MenuScene",-243],[223,-244]]],[129,"On Game Start with delay",9,[[281,1,5,-247,[[7,"51cbayfFYRI0b4PXBU6JCiq","raise",-245],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",-246]]],[400,1,-248],[223,-249]]],[273,"TopPanel",33554432,6,[-252,11,-253],[[100,-250,[5,414,100]],[384,41,100,-251]],[1,0,398,0]],[273,"BotPanel",33554432,6,[7,15,16],[[100,-254,[5,414,100]],[384,44,100,-255]],[1,0,-398,0]],[237,"Button_Color",33554432,15,[-259],[[100,-256,[5,66,66]],[231,1,0,-257,[4,4294174947],33],[230,45,1,1,1,1,108,108,-258]]],[237,"Button_Color",33554432,16,[-263],[[100,-260,[5,66,66]],[231,1,0,-261,[4,4281556991],40],[230,45,1,1,1,1,108,108,-262]]],[304,"UI","37TVMmiIZG+YU5/xGRwq9X",8,[-264,-265,17,-266,-267]],[218,"On Replay Level Listener",9,[-271,-272,22],[[293,"GameScene_ReplayLevel",-270,[[7,"a2b25EHeuNHtrhlTfnn9xoq","raise",-268],[7,"ebaab2OBJ5OarmKfYyuWVeW","raise",-269],[7,"99672sUg5NFw4x7bEPAiyHE","activate",22]]]]],[218,"On Go To Menu Listener",9,[-276,-277,23],[[293,"GameScene_GoToMenu",-275,[[7,"a2b25EHeuNHtrhlTfnn9xoq","raise",-273],[7,"ebaab2OBJ5OarmKfYyuWVeW","raise",-274],[7,"99672sUg5NFw4x7bEPAiyHE","activate",23]]]]],[218,"On Game Start",9,[-282],[[377,5,-280,[[7,"85ba8zO9clG9KMZhnWVluYT","startWave",19],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",-278],[7,"93f08a/C8BE67WCaBfvDFAN","log",-279]]],[223,-281]]],[304,"Temp","317YDVkRxEeIEUImgJQGj/",8,[10,-283,-284,-285]],[273,"Square_Holder",33554432,25,[-288,-289],[[209,-286],[383,1,-29.999999999999996,1,-287]],[1,0,30,0]],[458,"Text_VictoryDefeat",33554432,[[[100,-290,[5,184.26,113.4]],-291,[533,-293,-292]],4,1,4],[1,0,102.635,0]],[237,"Button_Color",33554432,7,[-296],[[100,-294,[5,108,108]],[231,1,0,-295,[4,4292928274],26]]],[4,["0fJEdVoOpA/qcZPGFboeiN"]],[4,["0fJEdVoOpA/qcZPGFboeiN"]],[4,["0fJEdVoOpA/qcZPGFboeiN"]],[4,["0fJEdVoOpA/qcZPGFboeiN"]],[4,["0fJEdVoOpA/qcZPGFboeiN"]],[4,["0fJEdVoOpA/qcZPGFboeiN"]],[4,["feXYlDJrhOiIHGtymY3yxW"]],[129,"Defeat",18,[[242,68,-298,[[7,"51cbayfFYRI0b4PXBU6JCiq","raise",-297]]],[400,4,-299],[254,"Defeat - Press D",-300]]],[358,"Increase",[[396,1,"1",-301],[242,49,-303,[[7,"eb61d1BRKpDnpWImZxs1KwG","raise",-302]]],[254,"Increase Time Scale - Press 1",-304]]],[358,"Decrease",[[396,2,"1",-305],[242,50,-307,[[7,"eb61d1BRKpDnpWImZxs1KwG","raise",-306]]],[254,"Decrease Time Scale - Press 2",-308]]],[129,"Freeze",18,[[242,70,-310,[[7,"a2b25EHeuNHtrhlTfnn9xoq","raise",-309]]],[290,"RequestBonus",-311],[254,"Use Freeze - Press f",-312]]],[442,"On Start","66ETBFXUFPEL/k7STqv5fs",8,[-316,-317],[[549,-315,[[7,"0ca47t6TKlPq7GfoQTtu5fu","getCurrentLevelData",-313],[7,"ac879rTendCEbpZWFz/jexs","playSFX",-314]]]]],[36,0,{},5,[29,"e8925zNxNCiI5CO2GAh1dK",-322,[171,"a993SC1X1KBKGmijL7hxg3",[[14,"Pathfinder",["_name"],-318],[10,["_lpos"],-319,[1,0,0,0]],[10,["_lrot"],-320,[3,0,0,0,1]],[10,["_euler"],-321,[1,0,0,0]]]],12]],[4,["640VKea5NIK4USuLAyLBs1"]],[36,0,null,5,[29,"485iyaahFDNIyx781avzqz",-327,[171,"b7OzExvKNPt4g7TSG2GVr+",[[14,"Game Victory Controller",["_name"],-323],[10,["_lpos"],-324,[1,0,0,0]],[10,["_lrot"],-325,[3,0,0,0,1]],[10,["_euler"],-326,[1,0,0,0]]]],5]],[4,["485iyaahFDNIyx781avzqz"]],[4,["d9LIHxHFhFXIOgqeR/0ow3"]],[4,["e7x73SDh9MfZgQfJSXZT9u"]],[36,0,null,5,[29,"6e1KAM02FA0aLvlHvC21gw",-332,[171,"14iq2DlihOoogQDCiSTdOk",[[14,"LevelConstructor",["_name"],-328],[10,["_lpos"],-329,[1,0,0,0]],[10,["_lrot"],-330,[3,0,0,0,1]],[10,["_euler"],-331,[1,0,0,0]]]],8]],[4,["6e1KAM02FA0aLvlHvC21gw"]],[36,0,null,5,[29,"984XA+aJRLtqRQQNLDETJ9",-337,[171,"8dgOQaXQ1IrLz9AInRcKfK",[[14,"P-EnergySystem",["_name"],-333],[10,["_lpos"],-334,[1,0,0,0]],[10,["_lrot"],-335,[3,0,0,0,1]],[10,["_euler"],-336,[1,0,0,0]]]],9]],[4,["984XA+aJRLtqRQQNLDETJ9"]],[36,0,null,5,[29,"99QFVlgAJEv6eNRQXbLkNr",-342,[171,"a06664lKZEHbLA3sK9fGRG",[[14,"P-TutorialController",["_name"],-338],[10,["_lpos"],-339,[1,0,0,0]],[10,["_lrot"],-340,[3,0,0,0,1]],[10,["_euler"],-341,[1,0,0,0]]]],10]],[4,["99QFVlgAJEv6eNRQXbLkNr"]],[4,["80fcPs02lOuKj5k9FDAJ+8"]],[4,["e8925zNxNCiI5CO2GAh1dK"]],[219,"Load Game Scene",33554432,20,[[209,-343],[343,1.5,2,"GameScene",-344]],[1,207,448,0]],[219,"Load Game Scene",33554432,30,[[209,-345],[343,1.5,2,"GameScene",-346]],[1,207,448,0]],[219,"Load Game Scene",33554432,31,[[209,-347],[343,1.5,2,"MenuScene",-348]],[1,207,448,0]],[238,"Star_Icon",33554432,12,[[100,-349,[5,84,84]],[289,0,-350,15],[230,45,6,6,6,6,92,92,-351]]],[238,"Star_Icon",33554432,13,[[100,-352,[5,84,84]],[289,0,-353,18],[230,45,6,6,6,6,92,92,-354]]],[238,"Star_Icon",33554432,14,[[100,-355,[5,84,84]],[289,0,-356,21],[230,45,6,6,6,6,92,92,-357]]],[237,"MidPanel",33554432,6,[35],[[100,-358,[5,414,896]],[511,45,100,100,-359]]],[219,"Outline",33554432,27,[[100,-360,[5,66,66]],[231,1,0,-361,[4,4294174947],32],[230,45,-6,6,6,-6,108,108,-362]],[1,-6,-6,0]],[219,"Outline",33554432,28,[[100,-363,[5,66,66]],[231,1,0,-364,[4,4281556991],39],[230,45,-6,6,6,-6,108,108,-365]],[1,-6,-6,0]],[443,"Game Flow",33554432,[-367,-368],[[209,-366]]],[36,0,{},29,[308,"c46/YsCPVOJYA4mWEpNYRx",-376,[171,"5bVhYb4RRKk5rGHE0TyHUL",[[14,"P-TowerConstruction-UI",["_name"],-370],[10,["_lpos"],-371,[1,207,447.99999999999994,0]],[10,["_lrot"],-372,[3,0,0,0,1]],[10,["_euler"],-373,[1,0,0,0]],[14,"Art",["_name"],-374],[10,["_lpos"],-375,[1,0,0,0]]]],[[116,["_animator"],3,[4,["f13UGmbg5KLrhluQFmxr/w"]]],[116,["_entries","0","entryNode"],3,[4,["74XRvRkuBPX6zuG43ddIDV","0fJEdVoOpA/qcZPGFboeiN"]]],[116,["_entries","1","entryNode"],3,[4,["c1RSk6NUhFVYmVRsNR9Aqa","0fJEdVoOpA/qcZPGFboeiN"]]],[116,["_entries","2","entryNode"],3,[4,["0aSc2CSmNOv7gy3zhm972w","0fJEdVoOpA/qcZPGFboeiN"]]],[116,["_showTowerInfo","1","target"],3,[4,["bb7Kak23hMTYfuoFKHjabu"]]],[61,["_animator"],3,[4,["ffZ2Ct4zBH+Zt94rHKmSpg"]],3,[4,["f13UGmbg5KLrhluQFmxr/w"]]],[61,["clickEvents","0","target"],3,[4,["1ayGJX7NFLw4ZV5ksbBfGW"]],3,[4,["559OljkmVJbb40T1JglvS/"]]],[74,["_button"],-369,3,[4,["1ayGJX7NFLw4ZV5ksbBfGW"]]],[116,["_onEventRaised","0","target"],3,[4,["559OljkmVJbb40T1JglvS/"]]],[116,["_onEventRaised","0","target"],3,[4,["559OljkmVJbb40T1JglvS/"]]]],46]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[4,["78bCuqtM5FvINnH01nOP6N"]],[4,["8bBj36fMNOUZFpmts6EkfF"]],[4,["78bCuqtM5FvINnH01nOP6N"]],[4,["78bCuqtM5FvINnH01nOP6N"]],[4,["d2vYEIV9FA2ZrKggRnx1pJ"]],[300,"Text_+",33554432,[[18,-377,[1,"d60lqCvyBOV51j5Yq5uq1K"],[5,15.38,34.239999999999995]],[155,"+",24,24,24,false,-378,[1,"4bqh9sDHhGzopYpFv+F8KY"],[4,4287102766],56],[334,-379,[1,"26pVjKDeBKJquFLBwrT5zf"],[4,4282974275]]],[307,"9eOM8cT8tD/KTEb2GtywTH",17,57],[1,-18.862,-0.695,0]],[4,["46k0m6lkdE7LjR/vInpkl2"]],[4,["78bCuqtM5FvINnH01nOP6N"]],[4,["8bBj36fMNOUZFpmts6EkfF"]],[4,["78bCuqtM5FvINnH01nOP6N"]],[4,["78bCuqtM5FvINnH01nOP6N"]],[4,["c6vKOiB3JG7pMlMy/WnSzq"]],[36,0,{},29,[308,"c46/YsCPVOJYA4mWEpNYRx",-386,[514,"e8c2NCecRDkorEgxnFR5XZ",null,[[22,["_contentSize"],[4,["39YbcMoONPnqpEYIvfvLdK"]],[5,414,896]],[28,"Button_Color",["_name"],[4,["8eLggjorhEIr3xF4IjNE8D"]]],[22,["_lpos"],[4,["8eLggjorhEIr3xF4IjNE8D"]],[1,0,0,0]],[28,"Game_Canvas",["_name"],[4,["c46/YsCPVOJYA4mWEpNYRx"]]],[22,["_lpos"],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[1,207,447.99999999999994,0]],[22,["_lrot"],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[3,0,0,0,1]],[22,["_euler"],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[1,0,0,0]],[28,"Energy Cube 01",["_name"],[4,["8eVMMyTAhHTrxdUCI00RNH"]]],[22,["_lpos"],[4,["8eVMMyTAhHTrxdUCI00RNH"]],[1,4.5,0,0]],[28,"Energy Cube 02",["_name"],[4,["d7ZEjS/RNNcpxy6bensm5T"]]],[22,["_lpos"],[4,["d7ZEjS/RNNcpxy6bensm5T"]],[1,30.6,0,0]],[22,["_lscale"],[4,["d7ZEjS/RNNcpxy6bensm5T"]],[1,0,1,1]],[28,"Energy Cube 03",["_name"],[4,["7fzNbEGA5C7LBeU+6/kk0+"]]],[22,["_lpos"],[4,["7fzNbEGA5C7LBeU+6/kk0+"]],[1,56.7,0,0]],[22,["_lscale"],[4,["7fzNbEGA5C7LBeU+6/kk0+"]],[1,0,1,1]],[28,"Energy Cube 04",["_name"],[4,["a4dr5gBqVD8KmMo9U690pe"]]],[22,["_lpos"],[4,["a4dr5gBqVD8KmMo9U690pe"]],[1,82.8,0,0]],[22,["_lscale"],[4,["a4dr5gBqVD8KmMo9U690pe"]],[1,0,1,1]],[28,"Energy Cube 05",["_name"],[4,["2cz2kVPWpBaYfDUmpze4C2"]]],[22,["_lpos"],[4,["2cz2kVPWpBaYfDUmpze4C2"]],[1,108.89999999999999,0,0]],[22,["_lscale"],[4,["2cz2kVPWpBaYfDUmpze4C2"]],[1,0,1,1]],[28,"Energy Cube 06",["_name"],[4,["32GQvJZZ1CfL8jE0XAQI7p"]]],[22,["_lpos"],[4,["32GQvJZZ1CfL8jE0XAQI7p"]],[1,134.99999999999997,0,0]],[22,["_lscale"],[4,["32GQvJZZ1CfL8jE0XAQI7p"]],[1,0,1,1]],[28,"Energy Cube 07",["_name"],[4,["8bn6okF5BG6Jaim8hBAiyD"]]],[22,["_lpos"],[4,["8bn6okF5BG6Jaim8hBAiyD"]],[1,161.09999999999997,0,0]],[22,["_lscale"],[4,["8bn6okF5BG6Jaim8hBAiyD"]],[1,0,1,1]],[28,"Energy Cube 08",["_name"],[4,["cf12Kt7l1LELKFSPjDHbWy"]]],[22,["_lpos"],[4,["cf12Kt7l1LELKFSPjDHbWy"]],[1,187.19999999999996,0,0]],[22,["_lscale"],[4,["cf12Kt7l1LELKFSPjDHbWy"]],[1,0,1,1]],[28,"Energy Cube 09",["_name"],[4,["f1J1aAxmpPvoc5FGVdqMEx"]]],[22,["_lpos"],[4,["f1J1aAxmpPvoc5FGVdqMEx"]],[1,213.29999999999995,0,0]],[22,["_lscale"],[4,["f1J1aAxmpPvoc5FGVdqMEx"]],[1,0,1,1]],[28,"Energy Cube 10",["_name"],[4,["d1aI9zoc9M0ZqlDjUrVkW1"]]],[22,["_lpos"],[4,["d1aI9zoc9M0ZqlDjUrVkW1"]],[1,239.39999999999995,0,0]],[22,["_lscale"],[4,["d1aI9zoc9M0ZqlDjUrVkW1"]],[1,0,1,1]],[28,"Energy Cube 01",["_name"],[4,["0axfYOGJ9KIpwnZnDqgaBm"]]],[22,["_lpos"],[4,["0axfYOGJ9KIpwnZnDqgaBm"]],[1,4.5,0,0]],[28,"Energy Cube 02",["_name"],[4,["53HN9ngBFPwIoXt0tubF9k"]]],[22,["_lpos"],[4,["53HN9ngBFPwIoXt0tubF9k"]],[1,41.6,0,0]],[28,"Energy Cube 03",["_name"],[4,["c2M0agW91M9LnjfWAKWt7r"]]],[22,["_lpos"],[4,["c2M0agW91M9LnjfWAKWt7r"]],[1,67.7,0,0]],[28,"Energy Cube 04",["_name"],[4,["01ffODeyhP/4KgJPoDRwfM"]]],[22,["_lpos"],[4,["01ffODeyhP/4KgJPoDRwfM"]],[1,93.8,0,0]],[28,"Energy Cube 05",["_name"],[4,["b7Jgl14dxLzKKEB3XSS3ej"]]],[22,["_lpos"],[4,["b7Jgl14dxLzKKEB3XSS3ej"]],[1,119.89999999999999,0,0]],[28,"Energy Cube 06",["_name"],[4,["51U0ikYrVBMpFfaWahlqGV"]]],[22,["_lpos"],[4,["51U0ikYrVBMpFfaWahlqGV"]],[1,145.99999999999997,0,0]],[28,"Energy Cube 07",["_name"],[4,["c3mnqxREVDdqeDtBJOq0J+"]]],[22,["_lpos"],[4,["c3mnqxREVDdqeDtBJOq0J+"]],[1,172.09999999999997,0,0]],[28,"Energy Cube 08",["_name"],[4,["9a+qH8Q7ZAoowWqHZ6iGr6"]]],[22,["_lpos"],[4,["9a+qH8Q7ZAoowWqHZ6iGr6"]],[1,198.19999999999996,0,0]],[28,"Energy Cube 09",["_name"],[4,["5fdgPWM4RJ5oImY3BOlnT2"]]],[22,["_lpos"],[4,["5fdgPWM4RJ5oImY3BOlnT2"]],[1,224.29999999999995,0,0]],[28,"Energy Cube 10",["_name"],[4,["1d7JAlIBpFbYQ00E+ylGdn"]]],[22,["_lpos"],[4,["1d7JAlIBpFbYQ00E+ylGdn"]],[1,250.39999999999995,0,0]],[28,"Holder_Lock 01",["_name"],[4,["bb80MsTbNMEqr55ap8h3Hm"]]],[22,["_lpos"],[4,["bb80MsTbNMEqr55ap8h3Hm"]],[1,15.5,0,0]],[28,"Holder_Lock 02",["_name"],[4,["ec9n9ITfNK2JYJNhbKYEy9"]]],[22,["_lpos"],[4,["ec9n9ITfNK2JYJNhbKYEy9"]],[1,41.6,0,0]],[28,"Holder_Lock 03",["_name"],[4,["c23wtes3RFUowrK/zzWVwH"]]],[22,["_lpos"],[4,["c23wtes3RFUowrK/zzWVwH"]],[1,67.7,0,0]],[28,"Holder_Lock 04",["_name"],[4,["1e7YKWXolPDqsDfaxtB2zx"]]],[22,["_lpos"],[4,["1e7YKWXolPDqsDfaxtB2zx"]],[1,93.8,0,0]],[28,"Holder_Lock 05",["_name"],[4,["d5L3xcBFlC06ObWGEhfzu6"]]],[22,["_lpos"],[4,["d5L3xcBFlC06ObWGEhfzu6"]],[1,119.89999999999999,0,0]],[28,"Holder_Lock 06",["_name"],[4,["ddfacMMP1CYLMMZxNr+o53"]]],[22,["_lpos"],[4,["ddfacMMP1CYLMMZxNr+o53"]],[1,145.99999999999997,0,0]],[28,"Holder_Lock 07",["_name"],[4,["47qh4mv7hG3aFQmnyvU6M8"]]],[22,["_lpos"],[4,["47qh4mv7hG3aFQmnyvU6M8"]],[1,172.09999999999997,0,0]],[28,"Holder_Lock 08",["_name"],[4,["10qNw07JtDn4N11pOKvx6+"]]],[22,["_lpos"],[4,["10qNw07JtDn4N11pOKvx6+"]],[1,198.19999999999996,0,0]],[28,"Holder_Lock 09",["_name"],[4,["d5iuWH8ulEx7/fFhQ6usn9"]]],[22,["_lpos"],[4,["d5iuWH8ulEx7/fFhQ6usn9"]],[1,224.29999999999995,0,0]],[28,"Holder_Lock 10",["_name"],[4,["cfLsKUx3tCopm/TJHV/rZk"]]],[22,["_lpos"],[4,["cfLsKUx3tCopm/TJHV/rZk"]],[1,250.39999999999995,0,0]],[28,"Text_Wave",["_name"],[4,["22AI187bdJUJ6J+Dfz8YEB"]]],[22,["_lpos"],[4,["22AI187bdJUJ6J+Dfz8YEB"]],[1,-29.35,0,0]],[28,"Text_Current Wave",["_name"],[4,["85/2sIiHdI+5CeJ7Gddt1C"]]],[22,["_lpos"],[4,["85/2sIiHdI+5CeJ7Gddt1C"]],[1,26.79,0,0]],[28,"Text_Total Waves",["_name"],[4,["7952zDG4tIi62NWqHN2ywz"]]],[22,["_lpos"],[4,["7952zDG4tIi62NWqHN2ywz"]],[1,56.14,0,0]],[22,["_lpos"],[4,["095/3h0rhKTrx79A3GWOco","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-165,21,0]],[28,"LifeCube_Holder-001",["_name"],[4,["7cNem45h9DQZzm6etDeVan","2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["7cNem45h9DQZzm6etDeVan","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-128.4,21,0]],[28,"LifeCube_Holder-002",["_name"],[4,["02WKp1aaZM5JahQG4GQFOT","2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["02WKp1aaZM5JahQG4GQFOT","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-91.80000000000001,21,0]],[28,"LifeCube_Holder-003",["_name"],[4,["66QmLgfF9LxJdx0wLt8UTM","2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["66QmLgfF9LxJdx0wLt8UTM","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-55.20000000000001,21,0]],[28,"LifeCube_Holder-004",["_name"],[4,["b4G0BDxa1KEYbReDXot7x5","2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["b4G0BDxa1KEYbReDXot7x5","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-18.60000000000001,21,0]],[28,"LifeCube_Holder-005",["_name"],[4,["06B8cO2XxB9p2K43Z/q+wo","2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["06B8cO2XxB9p2K43Z/q+wo","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,17.999999999999993,21,0]],[28,"LifeCube_Holder-006",["_name"],[4,["13eIwjQGNOtI2Ma49UBtLG","2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["13eIwjQGNOtI2Ma49UBtLG","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,54.599999999999994,21,0]],[28,"LifeCube_Holder-007",["_name"],[4,["cf05UvdYhAJZYNkQcMyV5L","2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["cf05UvdYhAJZYNkQcMyV5L","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,91.19999999999999,21,0]],[28,"LifeCube_Holder-008",["_name"],[4,["a2CnGIgYNF1549oF7vSBXk","2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["a2CnGIgYNF1549oF7vSBXk","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,127.79999999999998,21,0]],[28,"LifeCube_Holder-009",["_name"],[4,["bbmhP8kNNFHYhDHE6osOGC","2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["bbmhP8kNNFHYhDHE6osOGC","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,164.39999999999998,21,0]],[28,"LifeCube_Holder-010",["_name"],[4,["5blYx2mgNGB4CSEcuOc88D","2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["5blYx2mgNGB4CSEcuOc88D","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-165,-15,0]],[28,"LifeCube_Holder-011",["_name"],[4,["4fQFdgr01LDbnqUBek4oiG","2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["4fQFdgr01LDbnqUBek4oiG","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-128.4,-15,0]],[28,"LifeCube_Holder-012",["_name"],[4,["adaCthYBFOLYNMtCicsIHG","2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["adaCthYBFOLYNMtCicsIHG","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-91.80000000000001,-15,0]],[28,"LifeCube_Holder-013",["_name"],[4,["e0fyMWYtJBbZHqGdMEB7n6","2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["e0fyMWYtJBbZHqGdMEB7n6","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-55.20000000000001,-15,0]],[28,"LifeCube_Holder-014",["_name"],[4,["f8T8TRrL5IL6mxmSyfR6X3","2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["f8T8TRrL5IL6mxmSyfR6X3","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,-18.60000000000001,-15,0]],[28,"LifeCube_Holder-015",["_name"],[4,["0aHbmObZBPJbGalTEfX6Dg","2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["0aHbmObZBPJbGalTEfX6Dg","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,17.999999999999993,-15,0]],[28,"LifeCube_Holder-016",["_name"],[4,["39ydII2U1C04Ew6G7nhJ7h","2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["39ydII2U1C04Ew6G7nhJ7h","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,54.599999999999994,-15,0]],[28,"LifeCube_Holder-017",["_name"],[4,["fcTfiIOR9Pf4i37khI4GUN","2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["fcTfiIOR9Pf4i37khI4GUN","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,91.19999999999999,-15,0]],[28,"LifeCube_Holder-018",["_name"],[4,["6a9la9eQ1M44Civqhp+e5M","2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["6a9la9eQ1M44Civqhp+e5M","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,127.79999999999998,-15,0]],[28,"LifeCube_Holder-019",["_name"],[4,["a1My+52mNMd6m/8VuXt47Y","2fFGF3dqxMNKSC0hr3+Zvd"]]],[22,["_lpos"],[4,["a1My+52mNMd6m/8VuXt47Y","2fFGF3dqxMNKSC0hr3+Zvd"]],[1,164.39999999999998,-15,0]],[22,["_contentSize"],[4,["04UahlQ19MrrcYxMIvXv1N"]],[5,414,896]],[28,"Content Holder_Game",["_name"],[4,["ddKGi6x+1G/b3lO10Aw/fr"]]],[22,["_lpos"],[4,["ddKGi6x+1G/b3lO10Aw/fr"]],[1,0,0,0]],[28,"TopPanel",["_name"],[4,["939ao4QRtJRaDKWBd5sT4d"]]],[22,["_lpos"],[4,["939ao4QRtJRaDKWBd5sT4d"]],[1,0,398,0]],[28,"Square_Holder",["_name"],[4,["42mHyfmpNPqaKQn+Fp0oII"]]],[22,["_lpos"],[4,["42mHyfmpNPqaKQn+Fp0oII"]],[1,0,30,0]],[28,"Energy_Holder",["_name"],[4,["d7iVc1atpLIadbU2ouzi81"]]],[22,["_lpos"],[4,["d7iVc1atpLIadbU2ouzi81"]],[1,0,-1,0]],[28,"Panel_BG",["_name"],[4,["c2hyooaShJ2Y/WAKYp9+Lc"]]],[22,["_lpos"],[4,["c2hyooaShJ2Y/WAKYp9+Lc"]],[1,-133,0,0]],[28,"Panel_Shadow",["_name"],[4,["96F77oR3ZIQLz48o2C2S5t"]]],[22,["_lpos"],[4,["96F77oR3ZIQLz48o2C2S5t"]],[1,-133,0,0]],[28,"Panel_Locked",["_name"],[4,["01sa8N1EdNNrGcO4CVQWaV"]]],[22,["_lpos"],[4,["01sa8N1EdNNrGcO4CVQWaV"]],[1,-133,0,0]],[28,"Button_Pause",["_name"],[4,["b5wW2uS75Gcrcv1B4GlOOZ"]]],[22,["_lpos"],[4,["b5wW2uS75Gcrcv1B4GlOOZ"]],[1,178.47,-1.5,0]],[22,["_contentSize"],[4,["06zRYavfhAkbZlZ3RJfaEP"]],[5,414,896]],[28,"MidPanel",["_name"],[4,["0dajiuehJKAY6NGi/qi06k"]]],[22,["_lpos"],[4,["0dajiuehJKAY6NGi/qi06k"]],[1,0,0,0]],[28,"Square_Detail 01",["_name"],[4,["ecQBpVZJNJ4bDMzJNvIaZC"]]],[22,["_lpos"],[4,["ecQBpVZJNJ4bDMzJNvIaZC"]],[1,-247.175,75.47200000000001,0]],[28,"Square_Detail 02",["_name"],[4,["d9g06R0y1KgJlD9A7Ely+0"]]],[22,["_lpos"],[4,["d9g06R0y1KgJlD9A7Ely+0"]],[1,-236.412,90.325,0]],[28,"Square_Detail 03",["_name"],[4,["86kMi+WgtEb4R+S+lkcfC6"]]],[22,["_lpos"],[4,["86kMi+WgtEb4R+S+lkcfC6"]],[1,-245.238,83.221,0]],[28,"BotPanel",["_name"],[4,["f7zvnB7f5I1J6JDxy+modA"]]],[22,["_lpos"],[4,["f7zvnB7f5I1J6JDxy+modA"]],[1,0,-398,0]],[28,"Text_Life",["_name"],[4,["c44S47FFxO/qd9YQoHqN2n"]]],[22,["_lpos"],[4,["c44S47FFxO/qd9YQoHqN2n"]],[1,0,47.5,0]],[28,"Life_Holder",["_name"],[4,["077TOWP9ZBcKlau9bmd+dc"]]],[22,["_lpos"],[4,["077TOWP9ZBcKlau9bmd+dc"]],[1,0,12,0]],[22,["_contentSize"],[4,["6cj4+UyDZAm5y/Y4ZTISSK"]],[5,414,896]],[28,"Content Holder_IntroPause",["_name"],[4,["fcJel8rm9PjpE6wSmC6xSq"]]],[22,["_lpos"],[4,["fcJel8rm9PjpE6wSmC6xSq"]],[1,0,0,0]],[22,["_contentSize"],[4,["b2cTEyFexNZ5fssjNc6ysC"]],[5,414,896]],[28,"Overlay",["_name"],[4,["81ElX3LmlEG60SbfRx51Hh"]]],[22,["_lpos"],[4,["81ElX3LmlEG60SbfRx51Hh"]],[1,0,0,0]],[28,"TopPanel",["_name"],[4,["2bHbcyDxJHJpF4cz0aKl5i"]]],[22,["_lpos"],[4,["2bHbcyDxJHJpF4cz0aKl5i"]],[1,0,398,0]],[28,"Square_Holder",["_name"],[4,["fcqc8za/FPXKblpXqBUdSU"]]],[22,["_lpos"],[4,["fcqc8za/FPXKblpXqBUdSU"]],[1,0,30,0]],[22,["_contentSize"],[4,["fb1v5cKHlK1ouNRSKjY4T5"]],[5,414,896]],[28,"MidPanel",["_name"],[4,["be/BJ2jGtBoYjUGoMnFRCo"]]],[22,["_lpos"],[4,["be/BJ2jGtBoYjUGoMnFRCo"]],[1,0,0,0]],[28,"Button_Play",["_name"],[4,["1dypAxc/5AFYHm8WxESVDL"]]],[22,["_lpos"],[4,["1dypAxc/5AFYHm8WxESVDL"]],[1,0,-243,0]],[22,["_lrot"],[4,["1dypAxc/5AFYHm8WxESVDL"]],[3,0,0,0.3826834323650899,0.9238795325112867]],[22,["_euler"],[4,["1dypAxc/5AFYHm8WxESVDL"]],[1,0,0,45.000000000000014]],[28,"BotPanel",["_name"],[4,["738isYwCdIQIlnsZPLtJRG"]]],[22,["_lpos"],[4,["738isYwCdIQIlnsZPLtJRG"]],[1,0,-398,0]],[22,["_contentSize"],[4,["40/IHCEfFBA5Hf2iMv1fSS"]],[5,414,896]],[28,"Content Holder_Rewards",["_name"],[4,["4cl5imHU5LX7DmMQPwqat4"]]],[22,["_lpos"],[4,["4cl5imHU5LX7DmMQPwqat4"]],[1,0,0,0]],[22,["_contentSize"],[4,["9fO72Wl9dP7p770oBmdz2K"]],[5,12.29,22.68]],[14,"Button_Ad",["_name"],-380],[10,["_lpos"],-381,[1,0,0,0]],[14,"Content Holder_Freeze",["_name"],-382],[10,["_lpos"],-383,[1,0,0,0]],[14,"BG Image",["_name"],-384],[10,["_lpos"],-385,[1,0,0,0]]]],[[61,["_enemyModels","0","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["7e5RAOazJDUoqdJyOb9q5f"]]],[61,["_enemyModels","1","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["02tfv4BbdAxpSCsGntWHOx"]]],[61,["_enemyModels","2","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["a86TWrORNDdonkl8tekAPI"]]],[61,["_enemyModels","3","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["ab+gkUD2pBFJNP5SgZltSD"]]],[61,["_enemyModels","4","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["29iYbQ/FJGBb/hqN0z9DZm"]]],[61,["_enemyModels","5","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["ebk8B9FqtJ56e1xPxl/Tpg"]]],[61,["_enemyModels","6","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["310L5OB6VHzbFd+EzwX1YG"]]],[61,["_enemyModels","7","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["5cKF4dTqVIJ5L7VSbllisq"]]],[61,["_enemyModels","8","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["1cE/3a3NhIspuSjA4NYPQj"]]],[61,["_enemyModels","9","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["ecTABl1IJJ1KhKpjMdPvkX"]]],[61,["_enemyModels","10","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["4aGaO5twNItJ9FFcSTgTAh"]]],[61,["_enemyModels","11","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["c0iyYl2rBHx5TfkU/oItpZ"]]],[61,["_enemyModels","12","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["5bIlpMottGHbAEAGkT0PlM"]]],[61,["_enemyModels","13","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["ccjJGYo+JJ3Zdhg0WkW3HB"]]],[61,["_enemyModels","14","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["f9xH5AXxtFdLZihQRnUi9e"]]],[61,["_enemyModels","15","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["c8sIcAK59EqJbrDB5pLFfn"]]],[61,["_enemyModels","16","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["f0XmGFRx9F74rNFCRis9jR"]]],[61,["_enemyModels","17","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["52LbepvlBDTZU7uCBwPrnh"]]],[61,["_enemyModels","18","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["39fj1OoStFnJ+G91QAvHk2"]]],[61,["_enemyModels","19","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["fdmaT7GbJBHqo2JsEOdVP5"]]],[61,["_enemyModels","20","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["8a8fEgx9FOVaZbVsegsAbV"]]],[61,["_enemyModels","21","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["54TnVpzZ1JxKQgwWdIkLZ+"]]],[61,["_enemyModels","22","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["3aSaHn47VG4LAW7+nTRFc6"]]],[61,["_enemyModels","23","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["1d8gqqvh9HnrYEbHds5dbn"]]],[61,["_enemyModels","24","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["26gvRVhA1NMojbSmcu0Ni3"]]],[61,["_enemyModels","25","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["f4bjzu+j1Lf5KG0Gxo3jIR"]]],[61,["_enemyModels","26","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["d6YcNMfGdIl7HbFCcdLOY0"]]],[61,["_enemyModels","27","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["8eaPRwQy9MWKNAx+nIaefe"]]],[61,["_enemyModels","28","enemyNode"],1,[4,["fcglxwqyJPLImoJ297eYFo"]],1,[4,["c7tyKdOsROLIgx/j5t56bv"]]]],67]],[218,"On Game Start",4,[-389],[[281,0.5,5,-388,[[7,"d7a81e91EBDlImajYv5iUSd","setCameraZoomIntensity",-387],[68,"2022ebMdchE2pNL1SpqTm8g","setTrigger","zoomIn",4]]]]],[129,"Get Current Level Size",88,[[644,1,-390,[[7,"2022ebMdchE2pNL1SpqTm8g","setInt",4]]]]],[645,1083179519,4,[4,4281335808]],[129,"Get Current Level Data",48,[[551,1,-391,[[7,"ca967I1gMNLm6CKVgweRwFH","loadLevel",49],[7,"e93b2BayABBuKYLltRfqtdm","createLevel",55],[7,"85ba8zO9clG9KMZhnWVluYT","setLevel",19],[7,"c75d1lxJgZOt6RDeS6sCJMj","setCurrentLevel",59]]]]],[36,0,null,5,[29,"640VKea5NIK4USuLAyLBs1",-392,[171,"90JDUIIG1Kt4hd0tMrkCi3",[[14,"Game Over Controller",["_name"],50],[10,["_lpos"],50,[1,0,0,0]],[10,["_lrot"],50,[3,0,0,0,1]],[10,["_euler"],50,[1,0,0,0]]]],4]],[36,0,{},5,[29,"e7x73SDh9MfZgQfJSXZT9u",-393,[171,"eeRVaC0cVIipVgQo67b2Mx",[[14,"Spawner",["_name"],54],[10,["_lpos"],54,[1,0,0,0]],[10,["_lrot"],54,[3,0,0,0,1]],[10,["_euler"],54,[1,0,0,0]]]],7]],[36,0,{},5,[29,"80fcPs02lOuKj5k9FDAJ+8",-394,[171,"0dKO4gSQNEmYLEioXS3WAQ",[[14,"P-Freeze-RewardedAdsBonus",["_name"],61],[10,["_lpos"],61,[1,0,0,0]],[10,["_lrot"],61,[3,0,0,0,1]],[10,["_euler"],61,[1,0,0,0]]]],11]],[129,"Play Music",48,[[532,"ost-gameplay-0",-395]]],[129,"Show Loading",20,[[323,0.5,"Loading_Show",-396]]],[129,"Set Next Level",20,[[649,-397]]],[129,"Show Loading",30,[[323,0.5,"Loading_Show",-398]]],[129,"Show Loading",31,[[323,0.5,"Loading_Show",-399]]],[129,"Log String",32,[[344,"Game Start Event!",-400]]],[218,"On Game Started",9,[-403],[[377,1,-402,[[7,"93f08a/C8BE67WCaBfvDFAN","log",-401]]]]],[129,"Log",101,[[344,"Game Started Event!",-404]]],[218,"Wave Animation Finished",9,[-407],[[564,5,-406,[[7,"93f08a/C8BE67WCaBfvDFAN","log",-405]]]]],[129,"Log",103,[[344,"Wave Activate Spawn Event!",-408]]],[239,"Square_Outline",33554432,34,[[100,-409,[5,720,720]],[231,1,0,-410,[4,4294174947],13]],[1,0,230,0],[3,0,0,0.3826834323650899,0.9238795325112867],[1,0,0,45.000000000000014]],[239,"Square_Color",33554432,34,[[100,-411,[5,720,720]],[289,0,-412,14]],[1,0,244,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[239,"Text_%",33554432,12,[[100,-413,[5,11.97,25.2]],[291,">1",20,20,20,false,-414,[4,4286215282],16]],[1,-54.298,-15.379,0],[3,0,0,-0.6115270401858311,0.79122353296749],[1,0,0,-75.4]],[239,"Text_%",33554432,13,[[100,-415,[5,16.36,25.2]],[291,">5",20,20,20,false,-416,[4,4286215282],19]],[1,-43.845,-56.026,0],[3,0,0,-0.3090169943749474,0.9510565162951535],[1,0,0,-36]],[239,"Text_%",33554432,14,[[100,-417,[5,21.31,25.2]],[291,">10",20,20,20,false,-418,[4,4286215282],22]],[1,-1.229,-57.292,0],[3,0,0,0.0558215049931638,0.998440764181981],[1,0,0,6.4]],[219,"Text_Stage Level",33554432,25,[[100,-419,[5,90.4,47.88]],[291,"Stage 1",38,38,38,false,-420,[4,4281532425],24]],[1,0,-15.888,0]],[219,"Outline",33554432,36,[[100,-421,[5,108,108]],[231,1,0,-422,[4,4292928274],25]],[1,-6,-6,0]],[239,"Icon_Play",33554432,7,[[100,-423,[5,48,64]],[531,-424,[4,4281532425],27]],[1,9.047,-5.829,0],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[359,"Icon_Menu",33554432,15,[[100,-425,[5,40,40]],[398,false,-426,[4,4281532425],34]],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[359,"Icon_PlayAgain",33554432,16,[[100,-427,[5,46,48]],[398,false,-428,[4,4281532425],41]],[3,0,0,-0.3826834323650898,0.9238795325112867],[1,0,0,-45]],[237,"Scripts",33554432,10,[-430],[[100,-429,[5,0,0]]]],[238,"End Game UI",33554432,115,[[209,-431],[650,-432]]],[237,"Events",33554432,10,[72],[[100,-433,[5,0,0]]]],[238,"On Victory Listener",33554432,72,[[209,-434],[281,0.5,3,-435,[[7,"99672sUg5NFw4x7bEPAiyHE","activate",6]]]]],[238,"On Defeat Listener",33554432,72,[[209,-436],[281,0.5,4,-437,[[7,"99672sUg5NFw4x7bEPAiyHE","activate",6],[68,"c4d68jIEQZKZ5AKzGQQzzsP","setText","Defeat...",35],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",7]]]]],[444,"UI Camera",29,[[646,"Camera<CameraComponent>",0,0,41943040,-438,[4,4286073907]],[651,-439]],[1,8000,0,0]],[4,["1ayGJX7NFLw4ZV5ksbBfGW"]],[177,"On Enable",33554432,[[48,-440,[1,"230Nm3xu9HS5fTq148/bUF"]],[252,-441,[1,"44hjLkOIxHkqZ37y3El6fN"],[[186,"2022ebMdchE2pNL1SpqTm8g","setTrigger","intro"]]]],[307,"640RFaY5hOWogyWMP69QTl",17,58]],[177,"On Enable",33554432,[[48,-442,[1,"d3IhF/959G6pZY5aWTWu3x"]],[252,-443,[1,"5aPj7mhcBJsoJqrNFRjFCq"],[[186,"2022ebMdchE2pNL1SpqTm8g","setTrigger","intro"]]]],[307,"74yGjUCfZLOZH/wxmjTQgg",17,59]],[36,0,null,29,[29,"c6vKOiB3JG7pMlMy/WnSzq",-444,[171,"a9wE3l5VlBsYA7gDxipjdG",[[14,"P-Tutorial-UI",["_name"],86],[10,["_lpos"],86,[1,207,447.99999999999994,0]],[10,["_lrot"],86,[3,0,0,0,1]],[10,["_euler"],86,[1,0,0,0]]]],66]],[129,"Victory",18,[[242,86,-445,[[7,"4b49aIoOPNJGbyOKIzv2YTd","victory",51]]],[254,"Victory - Press V",-446]]],[129,"Toggle Infinity Energy",18,[[242,69,-447,[[7,"ca75cIVvLBMl7Ykys8006FJ","toggleInfinityEnergy",57]]],[254,"Toggle Infinity Energy - Press E",-448]]],[445,"Time Scale",18,[45,46]],[129,"VFX Camera",4,[[647,1,6,512,-449,[4,4281335808]]]],[129,"Camera Shake Event Listener",4,[[293,"CameraShake_ShakeCamera",-450,[[7,"c3d3d1BwjRM46w7Jwj5DBqA","play",4]]]]],[129,"Theme Camera Color",4,[[652,-451,[[[4,4281335808],[4,4280697788],[4,4282260786]],8,8,8],90,0]]],[265,4],[129,"Touch Controller",5,[[653,2,-452,90]]],[543,"Clear!",90,90,90,false,35,[4,4294174947]],[129,"Camera Switch",33,[[654,[null,null],-453]]],[446,"Debug Camera",33,[[648,-1,14,1822425087,-454]],[1,20.028,5.522,4.35],[3,-0.0922959556412573,0.7010573846499778,0.09229595564125723,0.7010573846499779],[1,-14.999999999999998,89.99999999999999,-3.1805546814635168e-15]],[129,"On Wave Completed",33,[[565,2,2,-455,[[7,"85ba8zO9clG9KMZhnWVluYT","startWave",19]]]]],[4,["08Ww6G8aRNBJeV17NK55//"]],[152,"New Node"],[251,[1,"f73Gqm8NxNwIPuL/MNLazi"]],[4,["74XRvRkuBPX6zuG43ddIDV","a6az63RfpIg6Gg/gQf45Dh"]],[4,["c1RSk6NUhFVYmVRsNR9Aqa","a6az63RfpIg6Gg/gQf45Dh"]],[4,["0aSc2CSmNOv7gy3zhm972w","a6az63RfpIg6Gg/gQf45Dh"]],[4,["cdN/iXwS9EWaea7ROuvyKb"]],[4,["0325m7PSVKEJgP6FqjArxY"]],[4,["35oTOUcq5LW6sLAKY0sSNr"]],[4,["74XRvRkuBPX6zuG43ddIDV","b4p3nx06pA3q2OOmIuPIqT"]],[4,["74XRvRkuBPX6zuG43ddIDV","a4xPBm209GU5Mh8eoXMqG3"]],[4,["c1RSk6NUhFVYmVRsNR9Aqa","b4p3nx06pA3q2OOmIuPIqT"]],[4,["c1RSk6NUhFVYmVRsNR9Aqa","a4xPBm209GU5Mh8eoXMqG3"]],[4,["0aSc2CSmNOv7gy3zhm972w","b4p3nx06pA3q2OOmIuPIqT"]],[4,["0aSc2CSmNOv7gy3zhm972w","a4xPBm209GU5Mh8eoXMqG3"]],[4,["99UzDZa6pHQ4VtG5vEXqut"]],[165,0,null,[152,"New Node"],[29,"0fJEdVoOpA/qcZPGFboeiN",-466,[42,"74XRvRkuBPX6zuG43ddIDV",3,[[14,"Holder_Tower Button 01",["_name"],37],[10,["_lpos"],37,[1,0,0,0]],[10,["_lrot"],37,[3,0,0,0,1]],[10,["_euler"],37,[1,0,0,0]],[14,"Button_Color",["_name"],-456],[10,["_lpos"],-457,[1,0,0,0]],[14,"Button_Outline",["_name"],75],[10,["_lpos"],75,[1,0,0,0]],[10,["_lrot"],75,[3,0,0,0.3826834323650898,0.9238795325112867]],[10,["_euler"],75,[1,0,0,45]],[14,true,["_active"],37],[14,"Button_Outline 2",["_name"],-458],[10,["_lpos"],-459,[1,0,0,0]],[14,"Button_Outline 1",["_name"],-460],[10,["_lpos"],-461,[1,0,0,0]],[28,false,["_active"],[4,["e9EkiL/+1I4KWEMpMRNY1g"]]],[14,2,["_clips","length"],76],[143,["_clips","0"],76,49],[143,["_defaultClip"],76,50],[14,"Panel_Outline",["_name"],-462],[10,["_lpos"],-463,[1,0,0,0]],[14,"Panel_Energy Color",["_name"],-464],[10,["_lpos"],-465,[1,0,0,0]],[28,false,["_active"],[4,["07J8NL3JNE+J1JbZaH9Gkn"]]],[143,["_clips","1"],76,51]]],48]],[4,["a6az63RfpIg6Gg/gQf45Dh"]],[4,["42ZSZDURBPuYxZbUVkytNk"]],[4,["64o7LRB4FEdaQLAV4SPsYe"]],[4,["b4p3nx06pA3q2OOmIuPIqT"]],[4,["a4xPBm209GU5Mh8eoXMqG3"]],[165,0,null,[152,"New Node"],[29,"0fJEdVoOpA/qcZPGFboeiN",-473,[42,"c1RSk6NUhFVYmVRsNR9Aqa",3,[[14,"Holder_Tower Button 02",["_name"],38],[10,["_lpos"],38,[1,0,0,0]],[10,["_lrot"],38,[3,0,0,0,1]],[10,["_euler"],38,[1,0,0,0]],[14,"Button_Color",["_name"],-467],[10,["_lpos"],-468,[1,0,0,0]],[14,"Button_Outline",["_name"],77],[10,["_lpos"],77,[1,0,0,0]],[10,["_lrot"],77,[3,0,0,0.3826834323650898,0.9238795325112867]],[10,["_euler"],77,[1,0,0,45]],[14,"Panel_Outline",["_name"],-469],[10,["_lpos"],-470,[1,0,0,0]],[14,"Panel_Energy Color",["_name"],-471],[10,["_lpos"],-472,[1,0,0,0]],[14,true,["_active"],38]]],52]],[4,["a6az63RfpIg6Gg/gQf45Dh"]],[4,["b4p3nx06pA3q2OOmIuPIqT"]],[4,["a4xPBm209GU5Mh8eoXMqG3"]],[165,0,null,[152,"New Node"],[29,"0fJEdVoOpA/qcZPGFboeiN",-480,[42,"0aSc2CSmNOv7gy3zhm972w",3,[[14,"Holder_Tower Button 03",["_name"],39],[10,["_lpos"],39,[1,0,0,0]],[10,["_lrot"],39,[3,0,0,0,1]],[10,["_euler"],39,[1,0,0,0]],[14,"Button_Color",["_name"],-474],[10,["_lpos"],-475,[1,0,0,0]],[14,"Button_Outline",["_name"],78],[10,["_lpos"],78,[1,0,0,0]],[10,["_lrot"],78,[3,0,0,0.3826834323650898,0.9238795325112867]],[10,["_euler"],78,[1,0,0,45]],[14,"Panel_Outline",["_name"],-476],[10,["_lpos"],-477,[1,0,0,0]],[14,"Panel_Energy Color",["_name"],-478],[10,["_lpos"],-479,[1,0,0,0]],[14,true,["_active"],39]]],53]],[4,["a6az63RfpIg6Gg/gQf45Dh"]],[4,["b4p3nx06pA3q2OOmIuPIqT"]],[4,["a4xPBm209GU5Mh8eoXMqG3"]],[4,["92c+4KiBlHB7JmE4DwBM6Z"]],[4,["bcFr/o7h5GhJL+FrxYvuDn"]],[152,"New Node"],[251,[1,"53ipIgQFdFtrBLm6Y7q+Qj"]],[251,[1,"f2jk0YGmtIIrlBFk1nTV3M"]],[4,["99UzDZa6pHQ4VtG5vEXqut"]],[4,["74XRvRkuBPX6zuG43ddIDV","a6az63RfpIg6Gg/gQf45Dh"]],[4,["c1RSk6NUhFVYmVRsNR9Aqa","a6az63RfpIg6Gg/gQf45Dh"]],[4,["0aSc2CSmNOv7gy3zhm972w","a6az63RfpIg6Gg/gQf45Dh"]],[4,["74XRvRkuBPX6zuG43ddIDV","b4p3nx06pA3q2OOmIuPIqT"]],[4,["74XRvRkuBPX6zuG43ddIDV","a4xPBm209GU5Mh8eoXMqG3"]],[4,["c1RSk6NUhFVYmVRsNR9Aqa","b4p3nx06pA3q2OOmIuPIqT"]],[4,["c1RSk6NUhFVYmVRsNR9Aqa","a4xPBm209GU5Mh8eoXMqG3"]],[4,["0aSc2CSmNOv7gy3zhm972w","b4p3nx06pA3q2OOmIuPIqT"]],[4,["0aSc2CSmNOv7gy3zhm972w","a4xPBm209GU5Mh8eoXMqG3"]],[4,["cdN/iXwS9EWaea7ROuvyKb"]],[4,["0325m7PSVKEJgP6FqjArxY"]],[4,["35oTOUcq5LW6sLAKY0sSNr"]],[4,["0aSc2CSmNOv7gy3zhm972w","0fJEdVoOpA/qcZPGFboeiN"]],[4,["0aSc2CSmNOv7gy3zhm972w","69yyRlXrpMd62pIm5Z3QYa"]],[4,["0aSc2CSmNOv7gy3zhm972w","bfWHMMhHhHZppymV9Y7kAU"]],[4,["50hrJYbf9IHLRR1ePLEmnJ"]],[4,["e0iQibPDNGYIKJsHwZFwIm"]],[165,0,null,[152,"New Node"],[29,"0fJEdVoOpA/qcZPGFboeiN",-491,[42,"74XRvRkuBPX6zuG43ddIDV",2,[[14,"Holder_Tower Button 01",["_name"],40],[10,["_lpos"],40,[1,0,0,0]],[10,["_lrot"],40,[3,0,0,0,1]],[10,["_euler"],40,[1,0,0,0]],[14,"Button_Color",["_name"],-481],[10,["_lpos"],-482,[1,0,0,0]],[14,"Button_Outline",["_name"],82],[10,["_lpos"],82,[1,0,0,0]],[10,["_lrot"],82,[3,0,0,0.3826834323650898,0.9238795325112867]],[10,["_euler"],82,[1,0,0,45]],[14,true,["_active"],40],[14,"Button_Outline 2",["_name"],-483],[10,["_lpos"],-484,[1,0,0,0]],[14,"Button_Outline 1",["_name"],-485],[10,["_lpos"],-486,[1,0,0,0]],[28,false,["_active"],[4,["e9EkiL/+1I4KWEMpMRNY1g"]]],[14,2,["_clips","length"],83],[143,["_clips","0"],83,61],[143,["_defaultClip"],83,62],[14,"Panel_Outline",["_name"],-487],[10,["_lpos"],-488,[1,0,0,0]],[14,"Panel_Energy Color",["_name"],-489],[10,["_lpos"],-490,[1,0,0,0]],[28,false,["_active"],[4,["07J8NL3JNE+J1JbZaH9Gkn"]]],[143,["_clips","1"],83,63]]],60]],[4,["a6az63RfpIg6Gg/gQf45Dh"]],[4,["42ZSZDURBPuYxZbUVkytNk"]],[4,["64o7LRB4FEdaQLAV4SPsYe"]],[4,["b4p3nx06pA3q2OOmIuPIqT"]],[4,["a4xPBm209GU5Mh8eoXMqG3"]],[165,0,null,[152,"New Node"],[29,"0fJEdVoOpA/qcZPGFboeiN",-498,[42,"c1RSk6NUhFVYmVRsNR9Aqa",2,[[14,"Holder_Tower Button 02",["_name"],41],[10,["_lpos"],41,[1,0,0,0]],[10,["_lrot"],41,[3,0,0,0,1]],[10,["_euler"],41,[1,0,0,0]],[14,"Button_Color",["_name"],-492],[10,["_lpos"],-493,[1,0,0,0]],[14,"Button_Outline",["_name"],84],[10,["_lpos"],84,[1,0,0,0]],[10,["_lrot"],84,[3,0,0,0.3826834323650898,0.9238795325112867]],[10,["_euler"],84,[1,0,0,45]],[14,"Panel_Outline",["_name"],-494],[10,["_lpos"],-495,[1,0,0,0]],[14,"Panel_Energy Color",["_name"],-496],[10,["_lpos"],-497,[1,0,0,0]],[14,true,["_active"],41]]],64]],[4,["a6az63RfpIg6Gg/gQf45Dh"]],[4,["b4p3nx06pA3q2OOmIuPIqT"]],[4,["a4xPBm209GU5Mh8eoXMqG3"]],[165,0,null,[152,"New Node"],[29,"0fJEdVoOpA/qcZPGFboeiN",-505,[42,"0aSc2CSmNOv7gy3zhm972w",2,[[14,"Holder_Tower Button 03",["_name"],42],[10,["_lpos"],42,[1,0,0,0]],[10,["_lrot"],42,[3,0,0,0,1]],[10,["_euler"],42,[1,0,0,0]],[14,"Button_Color",["_name"],-499],[10,["_lpos"],-500,[1,0,0,0]],[14,"Button_Outline",["_name"],85],[10,["_lpos"],85,[1,0,0,0]],[10,["_lrot"],85,[3,0,0,0.3826834323650898,0.9238795325112867]],[10,["_euler"],85,[1,0,0,45]],[14,"Panel_Outline",["_name"],-501],[10,["_lpos"],-502,[1,0,0,0]],[14,"Panel_Energy Color",["_name"],-503],[10,["_lpos"],-504,[1,0,0,0]],[14,true,["_active"],42]]],65]],[4,["a6az63RfpIg6Gg/gQf45Dh"]],[4,["b4p3nx06pA3q2OOmIuPIqT"]],[4,["a4xPBm209GU5Mh8eoXMqG3"]],[4,["04WDb5mtRGGpfMyqoB0Xxf"]],[4,["d2z2sk+ilKSZaI9H0szJaw"]],[4,["98bH1qNPBKRJHtgTkStvtX"]]],0,[0,1,43,0,1,43,0,1,43,0,1,43,0,1,43,0,43,87,0,2,1,0,-1,190,0,-2,196,0,-3,200,0,1,81,0,1,81,0,1,81,0,1,81,0,1,172,0,3,169,0,1,172,0,1,173,0,1,173,0,1,174,0,1,174,0,1,175,0,1,175,0,1,176,0,1,176,0,1,177,0,1,177,0,1,178,0,1,178,0,1,179,0,1,179,0,1,180,0,1,180,0,1,181,0,1,181,0,1,182,0,1,182,0,1,183,0,1,183,0,1,184,0,1,184,0,1,185,0,1,185,0,1,186,0,1,186,0,1,187,0,1,187,0,1,188,0,1,188,0,1,189,0,1,189,0,-1,170,0,-1,171,0,-1,80,0,-1,122,0,-1,123,0,43,17,0,2,2,0,-1,153,0,-2,159,0,-3,163,0,1,140,0,1,140,0,1,141,0,1,141,0,1,142,0,1,142,0,1,143,0,1,143,0,1,144,0,1,144,0,1,145,0,1,145,0,1,146,0,1,146,0,1,147,0,1,147,0,1,148,0,1,148,0,1,149,0,1,149,0,1,150,0,1,150,0,1,151,0,1,151,0,1,121,0,11,3,0,1,121,0,1,121,0,1,152,0,3,138,0,1,152,0,-1,139,0,43,73,0,2,3,0,-1,90,0,3,4,0,0,4,0,0,4,0,-4,131,0,33,131,0,0,4,0,-1,128,0,-2,129,0,-3,88,0,-4,130,0,-1,92,0,-2,51,0,-3,132,0,-4,19,0,-5,93,0,-6,55,0,-7,49,0,-8,57,0,-9,59,0,-10,94,0,0,6,0,0,6,0,0,6,0,0,6,0,0,6,0,-1,25,0,-2,69,0,-3,26,0,0,7,0,17,36,0,3,7,0,0,7,0,0,7,0,0,7,0,-1,36,0,-2,112,0,-1,92,0,-2,51,0,-3,19,0,-4,93,0,-5,55,0,-6,49,0,-7,57,0,-8,59,0,-9,94,0,-10,73,0,-11,17,0,-12,124,0,-13,87,0,-2,48,0,-3,9,0,-5,33,0,-6,29,0,-7,18,0,-1,20,0,-2,30,0,-3,31,0,-4,32,0,-5,24,0,-6,101,0,-7,103,0,0,10,0,0,10,0,0,10,0,0,10,0,-2,115,0,-3,117,0,0,11,0,0,11,0,0,11,0,-1,12,0,-2,13,0,-3,14,0,0,12,0,0,12,0,0,12,0,0,12,0,-1,66,0,-2,107,0,0,13,0,0,13,0,0,13,0,0,13,0,-1,67,0,-2,108,0,0,14,0,0,14,0,0,14,0,0,14,0,-1,68,0,-2,109,0,0,15,0,17,27,0,3,15,0,0,15,0,0,15,0,-1,27,0,-2,113,0,0,16,0,17,28,0,3,16,0,0,16,0,0,16,0,-1,28,0,-2,114,0,13,170,0,13,171,0,1,79,0,1,79,0,1,79,0,1,79,0,1,167,0,1,167,0,1,168,0,1,168,0,2,17,0,0,18,0,-1,125,0,-2,44,0,-3,126,0,-4,127,0,-5,47,0,1,53,0,1,53,0,1,53,0,1,53,0,2,19,0,3,96,0,3,63,0,3,21,0,3,97,0,0,20,0,-1,96,0,-2,63,0,-3,21,0,-4,97,0,3,21,0,0,21,0,0,21,0,0,21,0,3,22,0,0,22,0,0,22,0,0,22,0,3,23,0,0,23,0,0,23,0,0,23,0,3,24,0,3,24,0,0,24,0,0,24,0,0,24,0,0,25,0,0,25,0,-1,34,0,-3,110,0,0,26,0,0,26,0,0,27,0,0,27,0,0,27,0,-1,70,0,0,28,0,0,28,0,0,28,0,-1,71,0,-1,120,0,-2,73,0,-4,124,0,-5,87,0,3,98,0,3,64,0,0,30,0,-1,98,0,-2,64,0,3,99,0,3,65,0,0,31,0,-1,99,0,-2,65,0,3,32,0,3,100,0,0,32,0,0,32,0,-1,100,0,-2,134,0,-3,135,0,-4,136,0,0,34,0,0,34,0,-1,105,0,-2,106,0,0,35,0,-2,133,0,29,133,0,0,35,0,0,36,0,0,36,0,-1,111,0,3,44,0,0,44,0,0,44,0,0,44,0,0,45,0,3,45,0,0,45,0,0,45,0,0,46,0,3,46,0,0,46,0,0,46,0,3,47,0,0,47,0,0,47,0,0,47,0,3,91,0,3,95,0,0,48,0,-1,91,0,-2,95,0,1,62,0,1,62,0,1,62,0,1,62,0,2,49,0,1,52,0,1,52,0,1,52,0,1,52,0,2,51,0,1,56,0,1,56,0,1,56,0,1,56,0,2,55,0,1,58,0,1,58,0,1,58,0,1,58,0,2,57,0,1,60,0,1,60,0,1,60,0,1,60,0,2,59,0,0,63,0,0,63,0,0,64,0,0,64,0,0,65,0,0,65,0,0,66,0,0,66,0,0,66,0,0,67,0,0,67,0,0,67,0,0,68,0,0,68,0,0,68,0,0,69,0,0,69,0,0,70,0,0,70,0,0,70,0,0,71,0,0,71,0,0,71,0,0,72,0,-1,118,0,-2,119,0,13,139,0,1,74,0,1,74,0,1,74,0,1,74,0,1,137,0,1,137,0,2,73,0,0,80,0,0,80,0,0,80,0,1,204,0,1,204,0,1,205,0,1,205,0,1,206,0,1,206,0,2,87,0,3,89,0,0,88,0,-1,89,0,0,89,0,0,91,0,2,92,0,2,93,0,2,94,0,0,95,0,0,96,0,0,97,0,0,98,0,0,99,0,0,100,0,3,102,0,0,101,0,-1,102,0,0,102,0,3,104,0,0,103,0,-1,104,0,0,104,0,0,105,0,0,105,0,0,106,0,0,106,0,0,107,0,0,107,0,0,108,0,0,108,0,0,109,0,0,109,0,0,110,0,0,110,0,0,111,0,0,111,0,0,112,0,0,112,0,0,113,0,0,113,0,0,114,0,0,114,0,0,115,0,-1,116,0,0,116,0,0,116,0,0,117,0,0,118,0,0,118,0,0,119,0,0,119,0,0,120,0,0,120,0,0,122,0,0,122,0,0,123,0,0,123,0,2,124,0,0,125,0,0,125,0,0,126,0,0,126,0,0,128,0,0,129,0,0,130,0,0,132,0,0,134,0,0,135,0,0,136,0,1,154,0,1,154,0,1,155,0,1,155,0,1,156,0,1,156,0,1,157,0,1,157,0,1,158,0,1,158,0,2,153,0,1,160,0,1,160,0,1,161,0,1,161,0,1,162,0,1,162,0,2,159,0,1,164,0,1,164,0,1,165,0,1,165,0,1,166,0,1,166,0,2,163,0,1,191,0,1,191,0,1,192,0,1,192,0,1,193,0,1,193,0,1,194,0,1,194,0,1,195,0,1,195,0,2,190,0,1,197,0,1,197,0,1,198,0,1,198,0,1,199,0,1,199,0,2,196,0,1,201,0,1,201,0,1,202,0,1,202,0,1,203,0,1,203,0,2,200,0,72,8,2,7,169,3,7,138,4,7,8,5,7,8,6,7,10,7,7,26,10,7,33,11,7,25,15,7,26,16,7,26,17,7,29,22,7,30,23,7,31,35,7,69,45,7,127,46,7,127,72,7,117,505],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,131,133],[34,-1,-2,-3,8,8,8,8,8,8,8,8,8,6,6,6,19,6,6,19,6,6,19,6,19,6,6,6,25,35,36,37,6,6,6,25,35,36,37,6,6,6,25,35,36,37,8,8,8,11,11,11,8,8,8,8,19,8,8,8,8,11,11,11,8,8,8,8,8,73,74,26,19],[24,160,161,162,511,512,513,514,515,516,517,518,519,21,59,46,8,56,46,8,56,46,8,56,8,21,0,55,0,17,27,28,21,0,75,0,17,27,28,21,0,76,0,17,27,28,520,71,30,35,35,52,30,30,74,71,8,74,74,74,30,35,35,52,30,30,521,522,128,523,524,525,8]],[[[473,[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[30,12],[6,25]],[[[57,".bin",3684176765,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":45120,"length":14136,"count":3534,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":45120,"count":940,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.22441986203193665,-0.37148118019104004,1.065432986280257e-8],"maxPosition",8,[1,0.22441986203193665,0.25310033559799194,0.41917550563812256]]],-1],0,0,[],[],[]],[[[62],[47,"SM_Tower0MG4Body_01",[-2],[2,"06VFwTsJJRM4OSJg2XW4Q9",-1,0]],[53,"SM_Tower0MG4Body_01",1,[[52,-3,[1,"9bOQ2QYGtZs4WzqtGYB9n9"],[0],[34],1]],[2,"26PODSVIdRU55mar2WcIzo",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[526,185]],[[[63,"SM_Tower0MG4Body_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[62],[47,"SM_BlockPath_02",[-2],[2,"fefPIkSBJemp8PPyjHLGkW",-1,0]],[53,"SM_BlockPath_02",1,[[52,-3,[1,"c2E9Ka2cRe7YGAxkqvC+yR"],[0],[34],1]],[2,"52gJWCdoBSSbT31FTbAOUJ",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[527,528]],[[[63,"SM_BlockPath_02__0.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",4013001885,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":4032,"length":1128,"count":282,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":4032,"count":84,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.48000001907348633,-0.47999992966651917,0],"maxPosition",8,[1,0.47999992966651917,0.48000001907348633,0.20543640851974487]]],-1],0,0,[],[],[]],[[[149,[[150,[120,[-10,-11,-12,-13,-14],[[121,-5,-4],[331,false,-7,-6,[[157,[118,"isPlaying"]]]],[331,false,-9,-8,[[181,1,[118,"isPlaying"]]]]],-3,-2,-1]]],[{},"isPlaying",4,[174,1,false]]],[71,"Empty",[180]],[65,"Entry"],[71,"AC_Freeze_Idle",[75,0]],[65,"Exit"],[65,"Any"]],0,[0,22,5,0,23,4,0,24,2,0,14,1,0,15,2,0,14,3,0,15,1,0,14,1,0,15,3,0,-1,2,0,-2,4,0,-3,5,0,-4,3,0,-5,1,14],[0],[16],[142]],[[[112,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainColor",8,[4,2600515022]]],11]]],0,0,[0],[12],[34]],[[[50,"P-Towers-Data"],[115,"P-Towers-Data",[[655,-2,[1,"8ezo2lmotJmJjfEzb43bkR"],[[204,"guntower","towers-gun-base","Cheap and fast-paced weapons to deal with almost any type of enemy.","Gun Tower",["0.mg-2","bullz-i"],0],[204,"0.mg-2","towers-gun-0","Faster version of the GunTower. Deal 3x the damage with these beauties.","0.MG-2",["0.mg-4","3.mg-v"],1],[204,"bullz-i","towers-gun-1","A slow but incredibly powerful weapon with an enviable range.","Bullz-i",["01.hko","tunneller"],2],[176,"0.mg-4","towers-gun-2","The speed of this turret is unparalleled. A true Jack of All trades.","0.MG-4",3],[176,"3.mg-v","towers-gun-3","An interesting mechanism allows this turret to aim and hit up to 3 different enemies simultaneously.","3.MG-V",4],[176,"01.hko","towers-gun-4","The tower with the greatest reach and power of all.","01.HKO",5],[176,"tunneller","towers-gun-5","This turret's piercing projectile can go through enemies and hit several in a row.","Tunneller",6]],[[204,"cannontower","towers-cannon-base","The explosive projectiles from this turret deal AoE damage hitting multiple enemies at once.","Cannon Tower",["smash.3r","comet-t"],7],[204,"smash.3r","towers-cannon-0","The explosive projectiles from this turret deal AoE damage hitting multiple enemies at once.","Smash.3R",["s.4r","h3ll"],8],[204,"comet-t","towers-cannon-1","This turret can't attack enemies that are very close but has a much higher range than its predecessor. ","Comet-T",["meteor-u","starfall"],9],[176,"s.4r","towers-cannon-2","A large blast of quantum energy deals massive area damage.","S.4R",10],[176,"h3ll","towers-cannon-3","This turret sets the ground on fire that damages passing enemies.","F14m",11],[176,"meteor-u","towers-cannon-4","This turret can launch energy missiles that deal splash damage to the other side of the map.","Meteor-U",12],[176,"starfall","towers-cannon-5","This ranged weapon also has the largest area of ​​damage of all.","Starfall",13]],[[204,"lasertower","towers-laser-base","This turret fires a laser that does more damage the more it hits the same enemy.","Laser Tower",["pulsar","plasma-q"],14],[204,"pulsar","towers-laser-0","Instead of a laser, this turret pulses electrostatic waves that damage and slow enemies in an area.","Pulsar",["puls.3r","thunder-b"],15],[204,"plasma-q","towers-laser-1","This turret fires a laser that does more damage the more it hits the same enemy.","Plasma-Q",["omega bean","electron discharger"],16],[176,"puls.3r","towers-laser-2","The pulse of this tower is bigger, stronger and more efficient.","Puls.3R",17],[176,"thunder-b","towers-laser-3","In addition to the standard pulse, a secondary attack can paralyzes enemies within the area.","Thunder-B",18],[176,"omega bean","towers-laser-4","An even more powerful laser to finish off steel giants.","Omega Beam",19],[176,"electron discharger","towers-laser-5","This turret's laser can ricochet and hit more than one enemy at a time.","Electroneer",20]]]],[2,"c46/YsCPVOJYA4mWEpNYRx",-1,0]]],0,[0,2,1,0,0,1,0,9,1,2],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32],[529,530,531,532,533,534,535,536,537,538,539,540,541,542,543,544,545,546,547,548,549]],[[[62],[47,"SM_BlockDetail_05",[-2],[2,"6bMnZwcz1cbYMdXClIbfGW",-1,0]],[53,"SM_BlockDetail_05",1,[[52,-3,[1,"11J0+1wghVOZLzTMW9skJd"],[0],[34],1]],[2,"28JrtDh2NUaoj1O2DQn7No",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[550,551]],[[[63,"SM_BlockDetail_05__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",3354956192,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":25536,"length":6948,"count":1737,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":25536,"count":532,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.4329226613044739,-0.4157247543334961,-0.014000981114804745],"maxPosition",8,[1,0.41070592403411865,0.3868376910686493,0.34005191922187805]]],-1],0,0,[],[],[]],[[[50,"P-Crowder-2"],[125,"P-Crowder-2",[[-16,-17,[80,"Events",-19,[2,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[156,"Crowder-2",-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[55,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[151,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[2,"4505kBZFlJebjm5k8fm2Li",1,0],[1,0.8,0.8,1]],[124,"Movement",[-26],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,2,[29,"f1XKrwhjBUbpq3ZOc66Wy1",-32,[69,"fe7l2Yz4JBlLpQvX8iAtyo",1,[[67,[4,["f1XKrwhjBUbpq3ZOc66Wy1"]],[[55,-31,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[14,"SM_Model",["_name"],-27],[10,["_lpos"],-28,[1,0,-0.035,0.105]],[10,["_lrot"],-29,[3,0,0,0,1]],[10,["_euler"],-30,[1,0,0,0]],[40,["_materials","0"],[4,["ddPCXGq0tRx48X2hJdJETp"]],3],[28,"SM_Model",["_name"],[4,["b1PSBQTipWm50yzvj/8b+f"]]]]],2]],[35,"Scripts",1,[3,-33,-34,-35],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[4,["f1XKrwhjBUbpq3ZOc66Wy1"]],[301,"VFX",2,[-36,-37,-38],[2,"b4byJFzzBHFZKTzhUZXyh4",1,0],[1,1.25,1.25,1]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-46,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[14,"P-HP-Bar",["_name"],-39],[10,["_lpos"],-40,[1,207,448.00000000000006,0]],[10,["_lrot"],-41,[3,0,0,0,1]],[10,["_euler"],-42,[1,0,0,0]],[14,"Art",["_name"],-43],[10,["_lpos"],-44,[1,0,0,0]]]],15]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Death_Erupt",7,[-47],[2,"d4eHbiXzJDgrE7nxP0pyNa",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,10,[1,"57EK2RnfxHpJ2YGXB7OPss"],[4],[5],[3,0.4],[0],[0],[0],[0],[0],[0],[0],[3,0.16],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.3169642857142857],[13,0.4575892857142857,[4,4294938922]],[13,1,[4,4289817645]]],[[9,255,0.5736607142857143],[9,0,1]]]]],[31,[0]],[78,true,true,[111,2,2,[8,[0,1],[[6,2,0.02962962962962963,1.913888888888889,1.913888888888889],[11,2,1]]],[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-48],[26,5]],[59,"VFX_Death_Shards",7,[-49],[2,"345uEpnupH+bDQOFJre6Gy",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,12,[1,"f7tqoVL9hDAZ5a6ms+IJKu"],[6],[5],[23,3,0.05,0.1],[0],[0],[23,3,3,5],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.3,0.8],[3,1],[0],[0],[[25,[23,3,5,7]]],[20,true,[16,1,[33,[[43,0.16964285714285715],[13,0.33035714285714285,[4,4294938368]],[13,0.7991071428571429,[4,4284748062]]],[[9,255,0.23883928571428573],[9,0,1]]]]],[109,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-8.726646259971647,8.726646259971647]],[123,true,2,2,[0],[0]],[19,[0],[0],[5],[5],-50],[26,7]],[59,"VFX_Spawn",7,[-51,-52],[2,"c6okZev39Pq4/glqMJ8I4R",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[46,"HP Controller",5,[-53],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[139,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[7,"cc.ParticleSystem","play",10],[7,"cc.ParticleSystem","pause",12],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[54,"On Death VFX Finished",5,[[96,-55,[1,"b79/XIgi9OG5Dfokng7GFi"],[11,13],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"28Dx7CMtpKlqq3QFMl8HwA",1,0]],[105,"Temp-Model",false,2,[[79,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",2,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,14,[1,"32bDQLZ4FIhJz4GIjBWbHs"],[8],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-57],[26,9]],[97,0.3,false,14,[1,"4eRTX1pxJDJ6KqrEMaPKEe"],[[10,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-58],[26,11]],[104,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[46,"Stun",5,[-59],[2,"b8R63nS9ZBy74/8jxJBxPR",1,0]],[117,23,[1,"04EfnxZuJNAo6cxRm6XkKn"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]]],[35,"UI",1,[8],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,3,8,0,13,16,0,2,1,0,20,24,0,27,22,0,28,16,0,3,3,0,3,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,2,1,0,7,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,6,0,1,6,0,1,6,0,1,6,0,0,4,0,2,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,17,19,0,2,8,0,-1,11,0,4,11,0,-1,13,0,4,13,0,-1,20,0,-2,21,0,-1,16,0,3,17,0,0,17,0,0,18,0,4,20,0,4,21,0,-1,24,0,9,1,3,7,5,8,7,25,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,-2,18,8],[14,13,552,1,20,19,10,18,4,3,11,9,5,15,5,16]],[[[267,"dcc/imported-specular-glossiness",[{"hash":221290481,"name":"dcc/imported-specular-glossiness|standard-vs|standard-fs","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"alphaThreshold","type":13,"count":1},{"name":"shininessExponent","type":13,"count":1},{"name":"glossiness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalScale","type":13,"count":1},{"name":"transparencyFactor","type":13,"count":1},{"name":"diffuseFactor","type":13,"count":1},{"name":"specularFactor","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"shininessExponentMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_SHININESS_MAP"]},{"name":"specularMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_SPECULAR_MAP"]},{"name":"metallicMap","type":28,"count":1,"stageFlags":16,"binding":3,"defines":["USE_METALLIC_MAP"]},{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":4,"defines":["USE_ALBEDO_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":5,"defines":["USE_TRANSPARENCY_MAP"]},{"name":"normalMap","type":28,"count":1,"stageFlags":16,"binding":6,"defines":["USE_NORMAL_MAP"]},{"name":"emissiveMap","type":28,"count":1,"stageFlags":16,"binding":7,"defines":["USE_EMISSIVE_MAP"]}],"samplers":[],"textures":[],"buffers":[{"name":"b_ccLightsBuffer","memoryAccess":1,"stageFlags":16,"binding":8,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightIndicesBuffer","memoryAccess":1,"stageFlags":16,"binding":9,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]},{"name":"b_clusterLightGridBuffer","memoryAccess":1,"stageFlags":16,"binding":10,"defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_color","format":44,"location":14,"defines":["USE_VERTEX_COLOR"]},{"name":"a_texCoord1","format":21,"location":15,"defines":[]}],"varyings":[{"name":"v_fog_factor","type":13,"count":1,"stageFlags":17,"location":0,"defines":["!CC_USE_ACCURATE_FOG"]},{"name":"v_shadowPos","type":16,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_color","type":16,"count":1,"stageFlags":17,"location":2,"defines":["USE_VERTEX_COLOR"]},{"name":"v_position","type":15,"count":1,"stageFlags":17,"location":3,"defines":[]},{"name":"v_normal","type":15,"count":1,"stageFlags":17,"location":4,"defines":[]},{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":5,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":6,"defines":[]},{"name":"v_tangent","type":15,"count":1,"stageFlags":17,"location":7,"defines":["USE_NORMAL_MAP"]},{"name":"v_bitangent","type":15,"count":1,"stageFlags":17,"location":8,"defines":["USE_NORMAL_MAP"]},{"name":"v_luv","type":15,"count":1,"stageFlags":17,"location":9,"defines":["CC_USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"fragColors":[{"name":"fragColorX","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":["CC_FORWARD_ADD"]},{"name":"fragColor0","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":1,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor1","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":2,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]},{"name":"fragColor2","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":3,"defines":["!CC_FORWARD_ADD","CC_PIPELINE_TYPE"]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nlayout(location = 0) out float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nlayout(location = 1) out highp vec4 v_shadowPos;\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\n#endif\n#if USE_VERTEX_COLOR\n  layout(location = 14) in vec4 a_color;\n  layout(location = 2) out vec4 v_color;\n#endif\nlayout(location = 3) out vec3 v_position;\nlayout(location = 4) out vec3 v_normal;\nlayout(location = 5) out vec2 v_uv;\nlayout(location = 6) out vec2 v_uv1;\n#if USE_NORMAL_MAP\n  layout(location = 7) out vec3 v_tangent;\n  layout(location = 8) out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  layout(location = 15) in vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  layout(location = 9) out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n  precision highp float;\n  layout(set = 0, binding = 0) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n  };\n  layout(set = 0, binding = 1) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  layout(set = 1, binding = 0) uniform Constants {\n    vec4 tilingOffset;\n    vec4 albedo;\n    vec4 albedoScaleAndCutoff;\n    vec4  diffuseColor;\n    vec4  specularColor;\n    vec4  emissive;\n    float alphaThreshold;\n    float shininessExponent;\n    float glossiness;\n    float metallic;\n    float normalScale;\n    float transparencyFactor;\n    float diffuseFactor;\n    float specularFactor;\n  };\n  float LinearFog(vec4 pos) {\n    vec4 wPos = pos;\n    float cam_dis = distance(cc_cameraPos, wPos);\n    float fogStart = cc_fogBase.x;\n    float fogEnd = cc_fogBase.y;\n    return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogStart = cc_fogBase.x;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n    float f = exp(-cam_dis * fogDensity);\n    return f;\n  }\n  float ExpSquaredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogStart = cc_fogBase.x;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n    float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n    return f;\n  }\n  float LayeredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float _FogTop = cc_fogAdd.x;\n    float _FogRange = cc_fogAdd.y;\n    vec3 camWorldProj = cc_cameraPos.xyz;\n    camWorldProj.y = 0.;\n    vec3 worldPosProj = wPos.xyz;\n    worldPosProj.y = 0.;\n    float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n    float fDeltaY, fDensityIntegral;\n    if (cc_cameraPos.y > _FogTop) {\n      if (wPos.y < _FogTop) {\n        fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n        fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n      } else {\n        fDeltaY = 0.;\n        fDensityIntegral = 0.;\n      }\n    } else {\n      if (wPos.y < _FogTop) {\n        float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n        float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n        fDeltaY = abs(fDeltaA - fDeltaB);\n        fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n      } else {\n        fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n        fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n      }\n    }\n    float fDensity;\n    if (fDeltaY != 0.) {\n      fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n    } else {\n      fDensity = 0.;\n    }\n    float f = exp(-fDensity);\n    return f;\n  }\n  void CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n  {\n    #if CC_USE_FOG == 0\n  \tfactor = LinearFog(pos);\n    #elif CC_USE_FOG == 1\n      factor = ExpFog(pos);\n    #elif CC_USE_FOG == 2\n      factor = ExpSquaredFog(pos);\n    #elif CC_USE_FOG == 3\n      factor = LayeredFog(pos);\n    #else\n      factor = 1.0;\n    #endif\n  }\n  void CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n    color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n  }\n  #if !CC_USE_ACCURATE_FOG\n  layout(location = 0) in float v_fog_factor;\n  #endif\n    void CC_APPLY_FOG(inout vec4 color) {\n  #if !CC_USE_ACCURATE_FOG\n      CC_APPLY_FOG_BASE(color, v_fog_factor);\n  #endif\n  }\n  void CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n  #if CC_USE_ACCURATE_FOG\n      float factor;\n      CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n  #else\n      float factor = v_fog_factor;\n  #endif\n      CC_APPLY_FOG_BASE(color, factor);\n  }\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n  vec3 SRGBToLinear (vec3 gamma) {\n    return gamma * gamma;\n  }\n  layout(set = 0, binding = 2) uniform CCShadow {\n    highp mat4 cc_matLightPlaneProj;\n    highp mat4 cc_matLightView;\n    highp mat4 cc_matLightViewProj;\n    highp vec4 cc_shadowInvProjDepthInfo;\n    highp vec4 cc_shadowProjDepthInfo;\n    highp vec4 cc_shadowProjInfo;\n    mediump vec4 cc_shadowNFLSInfo;\n    mediump vec4 cc_shadowWHPBInfo;\n    mediump vec4 cc_shadowLPNNInfo;\n    lowp vec4 cc_shadowColor;\n    mediump vec4 cc_planarNDInfo;\n  };\n    highp float unpackHighpData (float mainPart, float modPart) {\n      highp float data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n      highp float data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n      highp float divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n      highp vec2 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n      highp vec2 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n      highp vec2 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n      highp vec3 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n      highp vec3 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n      highp vec3 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n      highp vec4 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n      highp vec4 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n      highp vec4 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n  layout(set = 2, binding = 0) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n  float CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n    float dist = length(viewPos);\n    return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n  }\n  float CCGetLinearDepth(vec3 worldPos) {\n    vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n    return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n  }\n  #if CC_RECEIVE_SHADOW\n    layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n    layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n    vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n    {\n      vec4 newShadowPos = shadowPos;\n      if(normalBias > EPSILON_LOWP)\n      {\n        vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n        if(viewNormal.z < 0.1)\n          newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n      }\n      return newShadowPos;\n    }\n    vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n    {\n      vec3 viewSpacePos;\n      viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n      viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n      viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n      vec4 clipSpacePos;\n      clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n      clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n      if (cc_shadowNFLSInfo.z > EPSILON) {\n        clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n        clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n      }\n      return clipSpacePos;\n    }\n    vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n    {\n      float coeffA = cc_shadowProjDepthInfo.x;\n      float coeffB = cc_shadowProjDepthInfo.y;\n      float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n      viewSpacePos_z += viewspaceDepthBias;\n      vec4 result = shadowPos;\n      result.z = viewSpacePos_z * coeffA + coeffB;\n      return result;\n    }\n    float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float shadow = 0.0;\n      float closestDepth = 0.0;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n      } else {\n        closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n      }\n      shadow = step(clipPos.z, closestDepth);\n      return shadow;\n    }\n    float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float offsetDepth = clipPos.z;\n      vec2 mapSize = cc_shadowWHPBInfo.xy;\n      vec2 oneTap = 1.0 / mapSize;\n      vec2 clipPos_offset = clipPos.xy + oneTap;\n      float block0, block1, block2, block3;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      } else {\n        block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n        block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n        block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n        block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n      }\n      float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block2, block3, coefX);\n      float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n      return mix(resultX, resultY, coefY);\n    }\n    float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float offsetDepth = clipPos.z;\n      vec2 mapSize = cc_shadowWHPBInfo.xy;\n      vec2 oneTap = 1.0 / mapSize;\n      float clipPos_offset_L = clipPos.x - oneTap.x;\n      float clipPos_offset_R = clipPos.x + oneTap.x;\n      float clipPos_offset_U = clipPos.y - oneTap.y;\n      float clipPos_offset_D = clipPos.y + oneTap.y;\n      float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      } else {\n        block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n        block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n        block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n        block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n        block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n        block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n        block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n        block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n        block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n      }\n      float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n      float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n      float shadow = 0.0;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block3, block4, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block1, block2, coefX);\n      resultY = mix(block4, block5, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block3, block4, coefX);\n      resultY = mix(block6, block7, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      resultX = mix(block4, block5, coefX);\n      resultY = mix(block7, block8, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      return shadow * 0.25;\n    }\n    float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float shadow = 0.0;\n      float closestDepth = 0.0;\n      float depth = clipPos.z;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n      } else {\n        closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n      }\n      shadow = step(depth, closestDepth);\n      return shadow;\n    }\n    float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float depth = 0.0;\n      if (cc_shadowNFLSInfo.z > EPSILON) {\n        depth = CCGetLinearDepth(worldPos);\n      } else {\n        depth = clipPos.z;\n      }\n      vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n      vec2 clipPos_offset = clipPos.xy + oneTap;\n      float block0, block1, block2, block3;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      } else {\n        block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n        block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n        block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n        block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n      }\n      float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block2, block3, coefX);\n      float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n      return mix(resultX, resultY, coefY);\n    }\n    float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float depth = 0.0;\n      if (cc_shadowNFLSInfo.z > EPSILON) {\n        depth = CCGetLinearDepth(worldPos);\n      } else {\n        depth = clipPos.z;\n      }\n      vec2 mapSize = cc_shadowWHPBInfo.xy;\n      vec2 oneTap = 1.0 / mapSize;\n      float clipPos_offset_L = clipPos.x - oneTap.x;\n      float clipPos_offset_R = clipPos.x + oneTap.x;\n      float clipPos_offset_U = clipPos.y - oneTap.y;\n      float clipPos_offset_D = clipPos.y + oneTap.y;\n      float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      } else {\n        block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n        block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n        block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n        block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n        block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n        block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n        block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n        block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n        block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n      }\n      float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n      float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n      float shadow = 0.0;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block3, block4, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block1, block2, coefX);\n      resultY = mix(block4, block5, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block3, block4, coefX);\n      resultY = mix(block6, block7, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      resultX = mix(block4, block5, coefX);\n      resultY = mix(block7, block8, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      return shadow * 0.25;\n    }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    if (pcf > 1.9) {\n      return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n    }else if (pcf > 0.9) {\n      return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n    }else {\n      return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n    }\n  }\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    float realtimeShadow = 1.0;\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n    float pcf = cc_shadowWHPBInfo.z;\n    if (pcf > 1.9) {\n      realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n    }else if (pcf > 0.9) {\n      realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n    }else {\n      realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n    }\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #endif\n  #if CC_USE_IBL\n    layout(set = 0, binding = 4) uniform samplerCube cc_environment;\n    vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n        return textureLod(tex, coord, lod);\n    }\n    vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n        return textureLod(tex, coord, lod);\n    }\n    vec3 unpackRGBE (vec4 rgbe) {\n      return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n    }\n    #if CC_USE_DIFFUSEMAP\n      layout(set = 0, binding = 6) uniform samplerCube cc_diffuseMap;\n    #endif\n  #endif\n  float GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n    vec3 NxH = cross(N, H);\n    float OneMinusNoHSqr = dot(NxH, NxH);\n    float a = roughness * roughness;\n    float n = NoH * a;\n    float p = a / (OneMinusNoHSqr + n * n);\n    return p * p;\n  }\n  float CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n    return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n  }\n  vec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n    const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n    const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n    vec4 r = roughness * c0 + c1;\n    float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n    vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n    AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n    return specular * AB.x + AB.y;\n  }\n  #if USE_REFLECTION_DENOISE\n    vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n      #if CC_USE_IBL\n      \tfloat mip = roughness * mipCount;\n      \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n      \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n      \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n       \tvec4 filtered = texture(cc_environment, R);\n        #if CC_USE_IBL == 2\n        \tbiased.rgb = unpackRGBE(biased);\n        \tfiltered.rgb = unpackRGBE(filtered);\n        #else\n        \tbiased.rgb = SRGBToLinear(biased.rgb);\n        \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n        #endif\n        return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n      #else\n        return vec3(0.0, 0.0, 0.0);\n      #endif\n    }\n  #endif\n  struct StandardSurface {\n    vec4 albedo;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      vec3 position, position_fract_part;\n      #else\n      vec3 position;\n      #endif\n    vec3 normal;\n    vec3 emissive;\n    vec3 lightmap;\n    float lightmap_test;\n    float roughness;\n    float metallic;\n    float occlusion;\n    float specularIntensity;\n    #if CC_RECEIVE_SHADOW\n      vec2 shadowBias;\n    #endif\n  };\n  vec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    vec3 H = normalize(L + V);\n    float NH = max(dot(N, H), 0.0);\n    float NL = max(dot(N, L), 0.0);\n    vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n    vec3 dirlightContrib = (diffuseContrib + specularContrib);\n    float shadow = 1.0;\n    #if CC_RECEIVE_SHADOW\n      if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n        shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n      }\n    #endif\n    dirlightContrib *= shadow;\n    finalColor *= dirlightContrib;\n    #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n      if (s.lightmap_test > EPSILON_LOWP) {\n        finalColor = diffuse * s.lightmap.rgb * shadow;\n      }\n    #endif\n    float fAmb = 0.5 - N.y * 0.5;\n    vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n    #if CC_USE_IBL\n      #if CC_USE_DIFFUSEMAP\n        vec4 diffuseMap = texture(cc_diffuseMap, N);\n        #if CC_USE_DIFFUSEMAP == 2\n          ambDiff = unpackRGBE(diffuseMap);\n        #else\n          ambDiff = SRGBToLinear(diffuseMap.rgb);\n        #endif\n      #endif\n      vec3 R = normalize(reflect(-V, N));\n      #if USE_REFLECTION_DENOISE\n        vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n      #else\n        vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n        #if CC_USE_IBL == 2\n          vec3 env = unpackRGBE(envmap);\n        #else\n          vec3 env = SRGBToLinear(envmap.rgb);\n        #endif\n      #endif\n      finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n    #endif\n    finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n    finalColor += s.emissive;\n    return vec4(finalColor, s.albedo.a);\n  }\n  vec3 ACESToneMap (vec3 color) {\n    color = min(color, vec3(8.0));\n    const float A = 2.51;\n    const float B = 0.03;\n    const float C = 2.43;\n    const float D = 0.59;\n    const float E = 0.14;\n    return (color * (A * color + B)) / (color * (C * color + D) + E);\n  }\n  vec4 CCFragOutput (vec4 color) {\n    #if CC_USE_HDR\n      color.rgb = ACESToneMap(color.rgb);\n    #endif\n    color.rgb = sqrt(color.rgb);\n    return color;\n  }\n  layout(location = 1) in highp vec4 v_shadowPos;\n    #if CC_RECEIVE_SHADOW\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    layout(location = 9) in vec3 v_luv;\n    layout(set = 2, binding = 10) uniform sampler2D cc_lightingMap;\n  #endif\n  layout(location = 3) in vec3 v_position;\n  layout(location = 5) in vec2 v_uv;\n  layout(location = 6) in vec2 v_uv1;\n  layout(location = 4) in vec3 v_normal;\n  #define DCC_APP_AUTODESK 0\n  #define DCC_APP_BLENDER 1\n  #define DCC_APP_CINEMA4D 2\n  #if USE_SHININESS_MAP\n    layout(set = 1, binding = 1) uniform sampler2D shininessExponentMap;\n  #endif\n  #if USE_SPECULAR_MAP\n    layout(set = 1, binding = 2) uniform sampler2D specularMap;\n  #endif\n   #if USE_METALLIC_MAP\n    layout(set = 1, binding = 3) uniform sampler2D metallicMap;\n  #endif\n  #if USE_VERTEX_COLOR\n    layout(location = 2) in vec4 v_color;\n  #endif\n  #if USE_ALBEDO_MAP\n    layout(set = 1, binding = 4) uniform sampler2D albedoMap;\n  #endif\n  #if USE_TRANSPARENCY_MAP\n    layout(set = 1, binding = 5) uniform sampler2D transparencyMap;\n  #endif\n  #if USE_NORMAL_MAP\n    layout(location = 7) in vec3 v_tangent;\n    layout(location = 8) in vec3 v_bitangent;\n    layout(set = 1, binding = 6) uniform sampler2D normalMap;\n  #endif\n  #if USE_EMISSIVE_MAP\n    layout(set = 1, binding = 7) uniform sampler2D emissiveMap;\n  #endif\nbool GetMetallicAlbedoFromDiffuseSpecularWithoutColor(out float metallic, out vec3 albedo, vec3 diffuse, vec3 specular, float f0 )\n{\n  float d = max(max(diffuse.x, diffuse.y), diffuse.z);\n  vec3 normalizedColor = diffuse / (d + (d < EPSILON_LOWP ? EPSILON_LOWP : 0.0));\n  normalizedColor = d < EPSILON_LOWP ? specular : normalizedColor;\n  float s = max(max(specular.x, specular.y), specular.z);\n  float delta = (d + s) * (d + s)  - 4.0 * f0 * d;\n  float deltaSqrt = sqrt(max(0.0, delta));\n  float solverMetallic = (-d - s + 2.0 * f0 + deltaSqrt) / (2.0 * f0);\n  vec3 solverAlbedo = (d + s) * normalizedColor - vec3(f0 * (1.0 - solverMetallic));\n  bool isValidSolver = delta >= 0.0;\n  metallic = isValidSolver ? clamp(solverMetallic, 0.0, 1.0) : 0.0;\n  albedo = isValidSolver ? vec3(max(0.0, solverAlbedo.x), max(0.0, solverAlbedo.y), max(0.0, solverAlbedo.z)) : diffuse;\n  return isValidSolver;\n}\n  float discolor(vec3 srcColor) {\n    return dot(GRAY_VECTOR, srcColor);\n  }\n  float convertShininessExponent(float shininessExp)\n  {\n    #if DCC_APP_NAME == DCC_APP_BLENDER\n      float glossiness = clamp(sqrt(shininessExp) * 0.1, 0.0, 0.95);\n    #elif DCC_APP_NAME == DCC_APP_CINEMA4D\n      float glossiness = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n    #else\n      float l2 = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n      float glossiness = pow(l2, 0.5);\n    #endif\n      return glossiness;\n  }\n  float getSpecularIntensityFromRoughness(float roughness)\n  {\n    #if DCC_APP_NAME == DCC_APP_BLENDER\n      float specularIntensityMultiplier = mix(1.0, 5.0, roughness);\n    #elif DCC_APP_NAME == DCC_APP_CINEMA4D\n      float specularIntensityMultiplier = mix(1.0, 50.0, roughness);\n    #else\n      float specularIntensityMultiplier = mix(1.0, 20.0, roughness);\n    #endif\n      return specularIntensityMultiplier;\n  }\n  vec4 getSpecularColorAndFactor()\n  {\n    vec3 inSpecular = specularColor.rgb;\n    #if USE_SPECULAR_MAP\n        vec4 specularTex = texture(specularMap, TEXTURE_UV);\n        specularTex.rgb = SRGBToLinear(specularTex.rgb);\n        inSpecular = specularTex.rgb;\n    #endif\n    return vec4(inSpecular, specularFactor);\n  }\n  void surf (out StandardSurface s) {\n    vec4 baseColor = diffuseColor;\n    #if USE_VERTEX_COLOR\n      baseColor.rgb *= SRGBToLinear(v_color.rgb);\n      baseColor.a *= v_color.a;\n    #endif\n    float diffuseScale = diffuseFactor;\n    #if USE_ALBEDO_MAP\n      vec4 texColor = texture(albedoMap, TEXTURE_UV);\n      texColor.rgb = SRGBToLinear(texColor.rgb);\n      baseColor = texColor;\n      diffuseScale = 1.0;\n    #endif\n    baseColor.rgb *= diffuseScale;\n    #if USE_TRANSPARENCY_MAP\n      baseColor.a = texture(transparencyMap, TEXTURE_UV).a * transparencyFactor;\n    #endif\n    #if USE_ALPHA_TEST\n      if (baseColor.a < albedoScaleAndCutoff.w) discard;\n    #endif\n    vec4 specularColorAndFactor = getSpecularColorAndFactor();\n    float inGlossiness = 0.0, inSpecularIntensity = specularColorAndFactor.w;\n    #if HAS_EXPORTED_GLOSSINESS\n      inGlossiness = glossiness;\n    #else\n      #if USE_SHININESS_MAP\n        #if GLOSSINESS_MAP_USE_SINGLE_CHANNEL\n          inGlossiness = 1.0 - texture(shininessExponentMap, TEXTURE_UV).GLOSSINESS_MAP_CHANNEL;\n        #else\n          inGlossiness = 1.0 - discolor(texture(shininessExponentMap, TEXTURE_UV).rgb);\n        #endif\n      #else\n        inGlossiness = convertShininessExponent(shininessExponent);\n      #endif\n      inSpecularIntensity *= getSpecularIntensityFromRoughness(1.0 - inGlossiness);\n    #endif\n    float inMetallic = 0.0;\n    vec4 albedo = baseColor;\n    #if HAS_EXPORTED_METALLIC\n      inMetallic = metallic;\n    #else\n      GetMetallicAlbedoFromDiffuseSpecularWithoutColor(inMetallic, albedo.rgb, baseColor.rgb, specularColorAndFactor.rgb, 0.04);\n      inSpecularIntensity *= inMetallic;\n    #endif\n    s.normal = v_normal;\n    #if USE_NORMAL_MAP\n      vec3 nmmp = texture(normalMap, TEXTURE_UV).xyz - vec3(0.5);\n      s.normal =\n        (nmmp.x * normalScale) * normalize(v_tangent) +\n        (nmmp.y * normalScale) * normalize(v_bitangent) +\n        nmmp.z * normalize(s.normal);\n    #endif\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      packHighpData(s.position, s.position_fract_part, v_position);\n      #else\n      s.position = v_position;\n      #endif\n    s.albedo = albedo;\n    s.occlusion = 1.0;\n    s.roughness = 1.0 - inGlossiness;\n    s.metallic = inMetallic;\n    s.specularIntensity = inSpecularIntensity * 0.5;\n    s.emissive = vec3(0.0);\n  #if USE_EMISSIVE_MAP\n    s.emissive = texture(emissiveMap, TEXTURE_UV).xyz;\n  #endif\n    #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n      vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n      s.lightmap = lightColor.xyz * v_luv.z;\n      s.lightmap_test = v_luv.z;\n    #endif\n  }\n    #if CC_FORWARD_ADD\n      #if CC_PIPELINE_TYPE == 0\n        #define LIGHTS_PER_PASS 1\n      #else\n        #define LIGHTS_PER_PASS 10\n      #endif\n      #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n      layout(set = 2, binding = 1) uniform CCForwardLight {\n        highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n        vec4 cc_lightColor[LIGHTS_PER_PASS];\n        vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n        vec4 cc_lightDir[LIGHTS_PER_PASS];\n      };\n      #endif\n      float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n        float factor = distSqr * invSqrAttRadius;\n        float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n        return smoothFactor * smoothFactor;\n      }\n      float GetDistAtt (float distSqr, float invSqrAttRadius) {\n        float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n        attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n        return attenuation;\n      }\n      float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n        float cd = dot(litDir, L);\n        float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n        return (attenuation * attenuation);\n      }\n      #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n      vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n        vec3 position;\n          #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n          position = unpackHighpData(s.position, s.position_fract_part);\n          #else\n          position = s.position;\n          #endif\n        vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n        vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n        vec3 diffuseContrib = diffuse / PI;\n        vec3 N = normalize(s.normal);\n        vec3 V = normalize(cc_cameraPos.xyz - position);\n        float NV = max(abs(dot(N, V)), 0.0);\n        specular = BRDFApprox(specular, s.roughness, NV);\n        vec3 finalColor = vec3(0.0);\n        int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n        for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n          if (i >= numLights) break;\n          vec3 SLU = cc_lightPos[i].xyz - position;\n          vec3 SL = normalize(SLU);\n          vec3 SH = normalize(SL + V);\n          float SNL = max(dot(N, SL), 0.0);\n          float SNH = max(dot(N, SH), 0.0);\n          float distSqr = dot(SLU, SLU);\n          float litRadius = cc_lightSizeRangeAngle[i].x;\n          float litRadiusSqr = litRadius * litRadius;\n          float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n          float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n          attRadiusSqrInv *= attRadiusSqrInv;\n          float att = GetDistAtt(distSqr, attRadiusSqrInv);\n          vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n          if (cc_lightPos[i].w > 0.0) {\n            float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n            float cosOuter = cc_lightSizeRangeAngle[i].z;\n            float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n            float litAngleOffset = -cosOuter * litAngleScale;\n            att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n          }\n          vec3 lightColor = cc_lightColor[i].rgb;\n          float shadow = 1.0;\n          #if CC_RECEIVE_SHADOW\n            if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n              shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n            }\n          #endif\n          lightColor *= shadow;\n          finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n        }\n        return vec4(finalColor, 0.0);\n      }\n      #endif\n      #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n      layout(set = 1, binding = 8) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n      layout(set = 1, binding = 9) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n      layout(set = 1, binding = 10) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n      struct CCLight\n      {\n        vec4 cc_lightPos;\n        vec4 cc_lightColor;\n        vec4 cc_lightSizeRangeAngle;\n        vec4 cc_lightDir;\n      };\n      struct Cluster\n      {\n        vec3 minBounds;\n        vec3 maxBounds;\n      };\n      struct LightGrid\n      {\n        uint offset;\n        uint ccLights;\n      };\n      CCLight getCCLight(uint i)\n      {\n        CCLight light;\n        light.cc_lightPos = b_ccLights[4u * i + 0u];\n        light.cc_lightColor = b_ccLights[4u * i + 1u];\n        light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n        light.cc_lightDir = b_ccLights[4u * i + 3u];\n        return light;\n      }\n      LightGrid getLightGrid(uint cluster)\n      {\n        uvec4 gridvec = b_clusterLightGrid[cluster];\n        LightGrid grid;\n        grid.offset = gridvec.x;\n        grid.ccLights = gridvec.y;\n        return grid;\n      }\n      uint getGridLightIndex(uint start, uint offset)\n      {\n        return b_clusterLightIndices[start + offset];\n      }\n      uint getClusterZIndex(vec4 worldPos)\n      {\n        float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n        float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n        float eyeDepth = -(cc_matView * worldPos).z;\n        uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n        return zIndex;\n      }\n      uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n      {\n        uint zIndex = getClusterZIndex(worldPos);\n        float clusterSizeX = ceil(cc_viewPort.z / float(16));\n        float clusterSizeY = ceil(cc_viewPort.w / float(8));\n        uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n        uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n        return cluster;\n      }\n      vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n        vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n        vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n        vec3 diffuseContrib = diffuse / PI;\n        vec3 position;\n          #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n          position = unpackHighpData(s.position, s.position_fract_part);\n          #else\n          position = s.position;\n          #endif\n        vec3 N = normalize(s.normal);\n        vec3 V = normalize(cc_cameraPos.xyz - position);\n        float NV = max(abs(dot(N, V)), 0.001);\n        specular = BRDFApprox(specular, s.roughness, NV);\n        vec3 finalColor = vec3(0.0);\n        uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n        LightGrid grid = getLightGrid(cluster);\n        uint numLights = grid.ccLights;\n        for (uint i = 0u; i < 100u; i++) {\n          if (i >= numLights) break;\n          uint lightIndex = getGridLightIndex(grid.offset, i);\n          CCLight light = getCCLight(lightIndex);\n          vec3 SLU = light.cc_lightPos.xyz - position;\n          vec3 SL = normalize(SLU);\n          vec3 SH = normalize(SL + V);\n          float SNL = max(dot(N, SL), 0.001);\n          float SNH = max(dot(N, SH), 0.0);\n          float distSqr = dot(SLU, SLU);\n          float litRadius = light.cc_lightSizeRangeAngle.x;\n          float litRadiusSqr = litRadius * litRadius;\n          float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n          float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n          attRadiusSqrInv *= attRadiusSqrInv;\n          float att = GetDistAtt(distSqr, attRadiusSqrInv);\n          vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n          if (light.cc_lightPos.w > 0.0) {\n            float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n            float cosOuter = light.cc_lightSizeRangeAngle.z;\n            float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n            float litAngleOffset = -cosOuter * litAngleScale;\n            att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n          }\n          vec3 lightColor = light.cc_lightColor.rgb;\n          float shadow = 1.0;\n          #if CC_RECEIVE_SHADOW\n            if (light.cc_lightPos.w > 0.0) {\n              shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n            }\n          #endif\n          lightColor *= shadow;\n          finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n        }\n        return vec4(finalColor, 0.0);\n      }\n      #endif\n      layout(location = 0) out vec4 fragColorX;\n      void main () {\n        StandardSurface s; surf(s);\n        #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n        vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n        #else\n        vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n        #endif\n        fragColorX = CCFragOutput(color);\n      }\n    #elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n      layout(location = 0) out vec4 fragColorX;\n      void main () {\n        StandardSurface s; surf(s);\n        vec4 color = CCStandardShadingBase(s, v_shadowPos);\n        CC_APPLY_FOG(color, s.position.xyz);\n        fragColorX = CCFragOutput(color);\n      }\n    #elif CC_PIPELINE_TYPE == 1\n      vec2 signNotZero(vec2 v) {\n        return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n      }\n      vec2 float32x3_to_oct(in vec3 v) {\n        vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n        return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n      }\n      layout(location = 0) out vec4 fragColor0;\n      layout(location = 1) out vec4 fragColor1;\n      layout(location = 2) out vec4 fragColor2;\n      void main () {\n        StandardSurface s; surf(s);\n        fragColor0 = s.albedo;\n        fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n        fragColor2 = vec4(s.emissive, s.occlusion);\n      }\n    #endif"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nout float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nout highp vec4 v_shadowPos;\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\n#endif\n#if USE_VERTEX_COLOR\n  in vec4 a_color;\n  out vec4 v_color;\n#endif\nout vec3 v_position;\nout vec3 v_normal;\nout vec2 v_uv;\nout vec2 v_uv1;\n#if USE_NORMAL_MAP\n  out vec3 v_tangent;\n  out vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  out vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n  precision highp float;\n  layout(std140) uniform CCGlobal {\n    highp   vec4 cc_time;\n    mediump vec4 cc_screenSize;\n    mediump vec4 cc_nativeSize;\n  };\n  layout(std140) uniform CCCamera {\n    highp   mat4 cc_matView;\n    highp   mat4 cc_matViewInv;\n    highp   mat4 cc_matProj;\n    highp   mat4 cc_matProjInv;\n    highp   mat4 cc_matViewProj;\n    highp   mat4 cc_matViewProjInv;\n    highp   vec4 cc_cameraPos;\n    mediump vec4 cc_screenScale;\n    mediump vec4 cc_exposure;\n    mediump vec4 cc_mainLitDir;\n    mediump vec4 cc_mainLitColor;\n    mediump vec4 cc_ambientSky;\n    mediump vec4 cc_ambientGround;\n    mediump vec4 cc_fogColor;\n    mediump vec4 cc_fogBase;\n    mediump vec4 cc_fogAdd;\n    mediump vec4 cc_nearFar;\n    mediump vec4 cc_viewPort;\n  };\n  layout(std140) uniform Constants {\n    vec4 tilingOffset;\n    vec4 albedo;\n    vec4 albedoScaleAndCutoff;\n    vec4  diffuseColor;\n    vec4  specularColor;\n    vec4  emissive;\n    float alphaThreshold;\n    float shininessExponent;\n    float glossiness;\n    float metallic;\n    float normalScale;\n    float transparencyFactor;\n    float diffuseFactor;\n    float specularFactor;\n  };\n  float LinearFog(vec4 pos) {\n    vec4 wPos = pos;\n    float cam_dis = distance(cc_cameraPos, wPos);\n    float fogStart = cc_fogBase.x;\n    float fogEnd = cc_fogBase.y;\n    return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogStart = cc_fogBase.x;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n    float f = exp(-cam_dis * fogDensity);\n    return f;\n  }\n  float ExpSquaredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogStart = cc_fogBase.x;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n    float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n    return f;\n  }\n  float LayeredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float _FogTop = cc_fogAdd.x;\n    float _FogRange = cc_fogAdd.y;\n    vec3 camWorldProj = cc_cameraPos.xyz;\n    camWorldProj.y = 0.;\n    vec3 worldPosProj = wPos.xyz;\n    worldPosProj.y = 0.;\n    float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n    float fDeltaY, fDensityIntegral;\n    if (cc_cameraPos.y > _FogTop) {\n      if (wPos.y < _FogTop) {\n        fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n        fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n      } else {\n        fDeltaY = 0.;\n        fDensityIntegral = 0.;\n      }\n    } else {\n      if (wPos.y < _FogTop) {\n        float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n        float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n        fDeltaY = abs(fDeltaA - fDeltaB);\n        fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n      } else {\n        fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n        fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n      }\n    }\n    float fDensity;\n    if (fDeltaY != 0.) {\n      fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n    } else {\n      fDensity = 0.;\n    }\n    float f = exp(-fDensity);\n    return f;\n  }\n  void CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n  {\n    #if CC_USE_FOG == 0\n  \tfactor = LinearFog(pos);\n    #elif CC_USE_FOG == 1\n      factor = ExpFog(pos);\n    #elif CC_USE_FOG == 2\n      factor = ExpSquaredFog(pos);\n    #elif CC_USE_FOG == 3\n      factor = LayeredFog(pos);\n    #else\n      factor = 1.0;\n    #endif\n  }\n  void CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n    color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n  }\n  #if !CC_USE_ACCURATE_FOG\n  in float v_fog_factor;\n  #endif\n    void CC_APPLY_FOG(inout vec4 color) {\n  #if !CC_USE_ACCURATE_FOG\n      CC_APPLY_FOG_BASE(color, v_fog_factor);\n  #endif\n  }\n  void CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n  #if CC_USE_ACCURATE_FOG\n      float factor;\n      CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n  #else\n      float factor = v_fog_factor;\n  #endif\n      CC_APPLY_FOG_BASE(color, factor);\n  }\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n  vec3 SRGBToLinear (vec3 gamma) {\n    return gamma * gamma;\n  }\n  layout(std140) uniform CCShadow {\n    highp mat4 cc_matLightPlaneProj;\n    highp mat4 cc_matLightView;\n    highp mat4 cc_matLightViewProj;\n    highp vec4 cc_shadowInvProjDepthInfo;\n    highp vec4 cc_shadowProjDepthInfo;\n    highp vec4 cc_shadowProjInfo;\n    mediump vec4 cc_shadowNFLSInfo;\n    mediump vec4 cc_shadowWHPBInfo;\n    mediump vec4 cc_shadowLPNNInfo;\n    lowp vec4 cc_shadowColor;\n    mediump vec4 cc_planarNDInfo;\n  };\n    highp float unpackHighpData (float mainPart, float modPart) {\n      highp float data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n      highp float data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n      highp float divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n      highp vec2 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n      highp vec2 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n      highp vec2 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n      highp vec3 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n      highp vec3 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n      highp vec3 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n      highp vec4 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n      highp vec4 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n      highp vec4 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n  layout(std140) uniform CCLocal {\n    highp mat4 cc_matWorld;\n    highp mat4 cc_matWorldIT;\n    highp vec4 cc_lightingMapUVParam;\n    highp vec4 cc_localShadowBias;\n  };\n  float CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n    float dist = length(viewPos);\n    return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n  }\n  float CCGetLinearDepth(vec3 worldPos) {\n    vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n    return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n  }\n  #if CC_RECEIVE_SHADOW\n    uniform highp sampler2D cc_shadowMap;\n    uniform highp sampler2D cc_spotLightingMap;\n    vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n    {\n      vec4 newShadowPos = shadowPos;\n      if(normalBias > EPSILON_LOWP)\n      {\n        vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n        if(viewNormal.z < 0.1)\n          newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n      }\n      return newShadowPos;\n    }\n    vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n    {\n      vec3 viewSpacePos;\n      viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n      viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n      viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n      vec4 clipSpacePos;\n      clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n      clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n      if (cc_shadowNFLSInfo.z > EPSILON) {\n        clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n        clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n      }\n      return clipSpacePos;\n    }\n    vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n    {\n      float coeffA = cc_shadowProjDepthInfo.x;\n      float coeffB = cc_shadowProjDepthInfo.y;\n      float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n      viewSpacePos_z += viewspaceDepthBias;\n      vec4 result = shadowPos;\n      result.z = viewSpacePos_z * coeffA + coeffB;\n      return result;\n    }\n    float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float shadow = 0.0;\n      float closestDepth = 0.0;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        closestDepth = dot(texture(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n      } else {\n        closestDepth = texture(cc_shadowMap, clipPos.xy).x;\n      }\n      shadow = step(clipPos.z, closestDepth);\n      return shadow;\n    }\n    float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float offsetDepth = clipPos.z;\n      vec2 mapSize = cc_shadowWHPBInfo.xy;\n      vec2 oneTap = 1.0 / mapSize;\n      vec2 clipPos_offset = clipPos.xy + oneTap;\n      float block0, block1, block2, block3;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      } else {\n        block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n        block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n        block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n        block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n      }\n      float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block2, block3, coefX);\n      float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n      return mix(resultX, resultY, coefY);\n    }\n    float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float offsetDepth = clipPos.z;\n      vec2 mapSize = cc_shadowWHPBInfo.xy;\n      vec2 oneTap = 1.0 / mapSize;\n      float clipPos_offset_L = clipPos.x - oneTap.x;\n      float clipPos_offset_R = clipPos.x + oneTap.x;\n      float clipPos_offset_U = clipPos.y - oneTap.y;\n      float clipPos_offset_D = clipPos.y + oneTap.y;\n      float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        block0 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block1 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block2 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block3 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block4 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block5 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block6 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block7 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block8 = step(offsetDepth, dot(texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      } else {\n        block0 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n        block1 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n        block2 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n        block3 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n        block4 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n        block5 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n        block6 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n        block7 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n        block8 = step(offsetDepth, texture(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n      }\n      float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n      float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n      float shadow = 0.0;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block3, block4, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block1, block2, coefX);\n      resultY = mix(block4, block5, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block3, block4, coefX);\n      resultY = mix(block6, block7, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      resultX = mix(block4, block5, coefX);\n      resultY = mix(block7, block8, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      return shadow * 0.25;\n    }\n    float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float shadow = 0.0;\n      float closestDepth = 0.0;\n      float depth = clipPos.z;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        closestDepth = dot(texture(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n      } else {\n        closestDepth = texture(cc_spotLightingMap, clipPos.xy).x;\n      }\n      shadow = step(depth, closestDepth);\n      return shadow;\n    }\n    float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float depth = 0.0;\n      if (cc_shadowNFLSInfo.z > EPSILON) {\n        depth = CCGetLinearDepth(worldPos);\n      } else {\n        depth = clipPos.z;\n      }\n      vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n      vec2 clipPos_offset = clipPos.xy + oneTap;\n      float block0, block1, block2, block3;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      } else {\n        block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n        block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n        block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n        block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n      }\n      float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block2, block3, coefX);\n      float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n      return mix(resultX, resultY, coefY);\n    }\n    float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float depth = 0.0;\n      if (cc_shadowNFLSInfo.z > EPSILON) {\n        depth = CCGetLinearDepth(worldPos);\n      } else {\n        depth = clipPos.z;\n      }\n      vec2 mapSize = cc_shadowWHPBInfo.xy;\n      vec2 oneTap = 1.0 / mapSize;\n      float clipPos_offset_L = clipPos.x - oneTap.x;\n      float clipPos_offset_R = clipPos.x + oneTap.x;\n      float clipPos_offset_U = clipPos.y - oneTap.y;\n      float clipPos_offset_D = clipPos.y + oneTap.y;\n      float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        block0 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block1 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block2 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block3 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block4 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block5 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block6 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block7 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block8 = step(depth, dot(texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      } else {\n        block0 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n        block1 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n        block2 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n        block3 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n        block4 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n        block5 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n        block6 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n        block7 = step(depth, texture(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n        block8 = step(depth, texture(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n      }\n      float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n      float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n      float shadow = 0.0;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block3, block4, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block1, block2, coefX);\n      resultY = mix(block4, block5, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block3, block4, coefX);\n      resultY = mix(block6, block7, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      resultX = mix(block4, block5, coefX);\n      resultY = mix(block7, block8, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      return shadow * 0.25;\n    }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    if (pcf > 1.9) {\n      return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n    }else if (pcf > 0.9) {\n      return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n    }else {\n      return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n    }\n  }\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    float realtimeShadow = 1.0;\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n    float pcf = cc_shadowWHPBInfo.z;\n    if (pcf > 1.9) {\n      realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n    }else if (pcf > 0.9) {\n      realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n    }else {\n      realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n    }\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #endif\n  #if CC_USE_IBL\n    uniform samplerCube cc_environment;\n    vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n        return textureLod(tex, coord, lod);\n    }\n    vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n        return textureLod(tex, coord, lod);\n    }\n    vec3 unpackRGBE (vec4 rgbe) {\n      return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n    }\n    #if CC_USE_DIFFUSEMAP\n      uniform samplerCube cc_diffuseMap;\n    #endif\n  #endif\n  float GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n    vec3 NxH = cross(N, H);\n    float OneMinusNoHSqr = dot(NxH, NxH);\n    float a = roughness * roughness;\n    float n = NoH * a;\n    float p = a / (OneMinusNoHSqr + n * n);\n    return p * p;\n  }\n  float CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n    return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n  }\n  vec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n    const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n    const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n    vec4 r = roughness * c0 + c1;\n    float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n    vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n    AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n    return specular * AB.x + AB.y;\n  }\n  #if USE_REFLECTION_DENOISE\n    vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n      #if CC_USE_IBL\n      \tfloat mip = roughness * mipCount;\n      \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n      \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n      \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n       \tvec4 filtered = texture(cc_environment, R);\n        #if CC_USE_IBL == 2\n        \tbiased.rgb = unpackRGBE(biased);\n        \tfiltered.rgb = unpackRGBE(filtered);\n        #else\n        \tbiased.rgb = SRGBToLinear(biased.rgb);\n        \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n        #endif\n        return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n      #else\n        return vec3(0.0, 0.0, 0.0);\n      #endif\n    }\n  #endif\n  struct StandardSurface {\n    vec4 albedo;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      vec3 position, position_fract_part;\n      #else\n      vec3 position;\n      #endif\n    vec3 normal;\n    vec3 emissive;\n    vec3 lightmap;\n    float lightmap_test;\n    float roughness;\n    float metallic;\n    float occlusion;\n    float specularIntensity;\n    #if CC_RECEIVE_SHADOW\n      vec2 shadowBias;\n    #endif\n  };\n  vec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    vec3 H = normalize(L + V);\n    float NH = max(dot(N, H), 0.0);\n    float NL = max(dot(N, L), 0.0);\n    vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n    vec3 dirlightContrib = (diffuseContrib + specularContrib);\n    float shadow = 1.0;\n    #if CC_RECEIVE_SHADOW\n      if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n        shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n      }\n    #endif\n    dirlightContrib *= shadow;\n    finalColor *= dirlightContrib;\n    #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n      if (s.lightmap_test > EPSILON_LOWP) {\n        finalColor = diffuse * s.lightmap.rgb * shadow;\n      }\n    #endif\n    float fAmb = 0.5 - N.y * 0.5;\n    vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n    #if CC_USE_IBL\n      #if CC_USE_DIFFUSEMAP\n        vec4 diffuseMap = texture(cc_diffuseMap, N);\n        #if CC_USE_DIFFUSEMAP == 2\n          ambDiff = unpackRGBE(diffuseMap);\n        #else\n          ambDiff = SRGBToLinear(diffuseMap.rgb);\n        #endif\n      #endif\n      vec3 R = normalize(reflect(-V, N));\n      #if USE_REFLECTION_DENOISE\n        vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n      #else\n        vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n        #if CC_USE_IBL == 2\n          vec3 env = unpackRGBE(envmap);\n        #else\n          vec3 env = SRGBToLinear(envmap.rgb);\n        #endif\n      #endif\n      finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n    #endif\n    finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n    finalColor += s.emissive;\n    return vec4(finalColor, s.albedo.a);\n  }\n  vec3 ACESToneMap (vec3 color) {\n    color = min(color, vec3(8.0));\n    const float A = 2.51;\n    const float B = 0.03;\n    const float C = 2.43;\n    const float D = 0.59;\n    const float E = 0.14;\n    return (color * (A * color + B)) / (color * (C * color + D) + E);\n  }\n  vec4 CCFragOutput (vec4 color) {\n    #if CC_USE_HDR\n      color.rgb = ACESToneMap(color.rgb);\n    #endif\n    color.rgb = sqrt(color.rgb);\n    return color;\n  }\n  in highp vec4 v_shadowPos;\n    #if CC_RECEIVE_SHADOW\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    in vec3 v_luv;\n    uniform sampler2D cc_lightingMap;\n  #endif\n  in vec3 v_position;\n  in vec2 v_uv;\n  in vec2 v_uv1;\n  in vec3 v_normal;\n  #define DCC_APP_AUTODESK 0\n  #define DCC_APP_BLENDER 1\n  #define DCC_APP_CINEMA4D 2\n  #if USE_SHININESS_MAP\n    uniform sampler2D shininessExponentMap;\n  #endif\n  #if USE_SPECULAR_MAP\n    uniform sampler2D specularMap;\n  #endif\n   #if USE_METALLIC_MAP\n    uniform sampler2D metallicMap;\n  #endif\n  #if USE_VERTEX_COLOR\n    in vec4 v_color;\n  #endif\n  #if USE_ALBEDO_MAP\n    uniform sampler2D albedoMap;\n  #endif\n  #if USE_TRANSPARENCY_MAP\n    uniform sampler2D transparencyMap;\n  #endif\n  #if USE_NORMAL_MAP\n    in vec3 v_tangent;\n    in vec3 v_bitangent;\n    uniform sampler2D normalMap;\n  #endif\n  #if USE_EMISSIVE_MAP\n    uniform sampler2D emissiveMap;\n  #endif\nbool GetMetallicAlbedoFromDiffuseSpecularWithoutColor(out float metallic, out vec3 albedo, vec3 diffuse, vec3 specular, float f0 )\n{\n  float d = max(max(diffuse.x, diffuse.y), diffuse.z);\n  vec3 normalizedColor = diffuse / (d + (d < EPSILON_LOWP ? EPSILON_LOWP : 0.0));\n  normalizedColor = d < EPSILON_LOWP ? specular : normalizedColor;\n  float s = max(max(specular.x, specular.y), specular.z);\n  float delta = (d + s) * (d + s)  - 4.0 * f0 * d;\n  float deltaSqrt = sqrt(max(0.0, delta));\n  float solverMetallic = (-d - s + 2.0 * f0 + deltaSqrt) / (2.0 * f0);\n  vec3 solverAlbedo = (d + s) * normalizedColor - vec3(f0 * (1.0 - solverMetallic));\n  bool isValidSolver = delta >= 0.0;\n  metallic = isValidSolver ? clamp(solverMetallic, 0.0, 1.0) : 0.0;\n  albedo = isValidSolver ? vec3(max(0.0, solverAlbedo.x), max(0.0, solverAlbedo.y), max(0.0, solverAlbedo.z)) : diffuse;\n  return isValidSolver;\n}\n  float discolor(vec3 srcColor) {\n    return dot(GRAY_VECTOR, srcColor);\n  }\n  float convertShininessExponent(float shininessExp)\n  {\n    #if DCC_APP_NAME == DCC_APP_BLENDER\n      float glossiness = clamp(sqrt(shininessExp) * 0.1, 0.0, 0.95);\n    #elif DCC_APP_NAME == DCC_APP_CINEMA4D\n      float glossiness = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n    #else\n      float l2 = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n      float glossiness = pow(l2, 0.5);\n    #endif\n      return glossiness;\n  }\n  float getSpecularIntensityFromRoughness(float roughness)\n  {\n    #if DCC_APP_NAME == DCC_APP_BLENDER\n      float specularIntensityMultiplier = mix(1.0, 5.0, roughness);\n    #elif DCC_APP_NAME == DCC_APP_CINEMA4D\n      float specularIntensityMultiplier = mix(1.0, 50.0, roughness);\n    #else\n      float specularIntensityMultiplier = mix(1.0, 20.0, roughness);\n    #endif\n      return specularIntensityMultiplier;\n  }\n  vec4 getSpecularColorAndFactor()\n  {\n    vec3 inSpecular = specularColor.rgb;\n    #if USE_SPECULAR_MAP\n        vec4 specularTex = texture(specularMap, TEXTURE_UV);\n        specularTex.rgb = SRGBToLinear(specularTex.rgb);\n        inSpecular = specularTex.rgb;\n    #endif\n    return vec4(inSpecular, specularFactor);\n  }\n  void surf (out StandardSurface s) {\n    vec4 baseColor = diffuseColor;\n    #if USE_VERTEX_COLOR\n      baseColor.rgb *= SRGBToLinear(v_color.rgb);\n      baseColor.a *= v_color.a;\n    #endif\n    float diffuseScale = diffuseFactor;\n    #if USE_ALBEDO_MAP\n      vec4 texColor = texture(albedoMap, TEXTURE_UV);\n      texColor.rgb = SRGBToLinear(texColor.rgb);\n      baseColor = texColor;\n      diffuseScale = 1.0;\n    #endif\n    baseColor.rgb *= diffuseScale;\n    #if USE_TRANSPARENCY_MAP\n      baseColor.a = texture(transparencyMap, TEXTURE_UV).a * transparencyFactor;\n    #endif\n    #if USE_ALPHA_TEST\n      if (baseColor.a < albedoScaleAndCutoff.w) discard;\n    #endif\n    vec4 specularColorAndFactor = getSpecularColorAndFactor();\n    float inGlossiness = 0.0, inSpecularIntensity = specularColorAndFactor.w;\n    #if HAS_EXPORTED_GLOSSINESS\n      inGlossiness = glossiness;\n    #else\n      #if USE_SHININESS_MAP\n        #if GLOSSINESS_MAP_USE_SINGLE_CHANNEL\n          inGlossiness = 1.0 - texture(shininessExponentMap, TEXTURE_UV).GLOSSINESS_MAP_CHANNEL;\n        #else\n          inGlossiness = 1.0 - discolor(texture(shininessExponentMap, TEXTURE_UV).rgb);\n        #endif\n      #else\n        inGlossiness = convertShininessExponent(shininessExponent);\n      #endif\n      inSpecularIntensity *= getSpecularIntensityFromRoughness(1.0 - inGlossiness);\n    #endif\n    float inMetallic = 0.0;\n    vec4 albedo = baseColor;\n    #if HAS_EXPORTED_METALLIC\n      inMetallic = metallic;\n    #else\n      GetMetallicAlbedoFromDiffuseSpecularWithoutColor(inMetallic, albedo.rgb, baseColor.rgb, specularColorAndFactor.rgb, 0.04);\n      inSpecularIntensity *= inMetallic;\n    #endif\n    s.normal = v_normal;\n    #if USE_NORMAL_MAP\n      vec3 nmmp = texture(normalMap, TEXTURE_UV).xyz - vec3(0.5);\n      s.normal =\n        (nmmp.x * normalScale) * normalize(v_tangent) +\n        (nmmp.y * normalScale) * normalize(v_bitangent) +\n        nmmp.z * normalize(s.normal);\n    #endif\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      packHighpData(s.position, s.position_fract_part, v_position);\n      #else\n      s.position = v_position;\n      #endif\n    s.albedo = albedo;\n    s.occlusion = 1.0;\n    s.roughness = 1.0 - inGlossiness;\n    s.metallic = inMetallic;\n    s.specularIntensity = inSpecularIntensity * 0.5;\n    s.emissive = vec3(0.0);\n  #if USE_EMISSIVE_MAP\n    s.emissive = texture(emissiveMap, TEXTURE_UV).xyz;\n  #endif\n    #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n      vec4 lightColor = texture(cc_lightingMap, v_luv.xy);\n      s.lightmap = lightColor.xyz * v_luv.z;\n      s.lightmap_test = v_luv.z;\n    #endif\n  }\n    #if CC_FORWARD_ADD\n      #if CC_PIPELINE_TYPE == 0\n        #define LIGHTS_PER_PASS 1\n      #else\n        #define LIGHTS_PER_PASS 10\n      #endif\n      #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n      layout(std140) uniform CCForwardLight {\n        highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n        vec4 cc_lightColor[LIGHTS_PER_PASS];\n        vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n        vec4 cc_lightDir[LIGHTS_PER_PASS];\n      };\n      #endif\n      float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n        float factor = distSqr * invSqrAttRadius;\n        float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n        return smoothFactor * smoothFactor;\n      }\n      float GetDistAtt (float distSqr, float invSqrAttRadius) {\n        float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n        attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n        return attenuation;\n      }\n      float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n        float cd = dot(litDir, L);\n        float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n        return (attenuation * attenuation);\n      }\n      #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n      vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n        vec3 position;\n          #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n          position = unpackHighpData(s.position, s.position_fract_part);\n          #else\n          position = s.position;\n          #endif\n        vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n        vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n        vec3 diffuseContrib = diffuse / PI;\n        vec3 N = normalize(s.normal);\n        vec3 V = normalize(cc_cameraPos.xyz - position);\n        float NV = max(abs(dot(N, V)), 0.0);\n        specular = BRDFApprox(specular, s.roughness, NV);\n        vec3 finalColor = vec3(0.0);\n        int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n        for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n          if (i >= numLights) break;\n          vec3 SLU = cc_lightPos[i].xyz - position;\n          vec3 SL = normalize(SLU);\n          vec3 SH = normalize(SL + V);\n          float SNL = max(dot(N, SL), 0.0);\n          float SNH = max(dot(N, SH), 0.0);\n          float distSqr = dot(SLU, SLU);\n          float litRadius = cc_lightSizeRangeAngle[i].x;\n          float litRadiusSqr = litRadius * litRadius;\n          float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n          float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n          attRadiusSqrInv *= attRadiusSqrInv;\n          float att = GetDistAtt(distSqr, attRadiusSqrInv);\n          vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n          if (cc_lightPos[i].w > 0.0) {\n            float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n            float cosOuter = cc_lightSizeRangeAngle[i].z;\n            float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n            float litAngleOffset = -cosOuter * litAngleScale;\n            att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n          }\n          vec3 lightColor = cc_lightColor[i].rgb;\n          float shadow = 1.0;\n          #if CC_RECEIVE_SHADOW\n            if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n              shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n            }\n          #endif\n          lightColor *= shadow;\n          finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n        }\n        return vec4(finalColor, 0.0);\n      }\n      #endif\n      #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n      layout(std430, binding = 4) readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n      layout(std430, binding = 5) readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n      layout(std430, binding = 6) readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n      struct CCLight\n      {\n        vec4 cc_lightPos;\n        vec4 cc_lightColor;\n        vec4 cc_lightSizeRangeAngle;\n        vec4 cc_lightDir;\n      };\n      struct Cluster\n      {\n        vec3 minBounds;\n        vec3 maxBounds;\n      };\n      struct LightGrid\n      {\n        uint offset;\n        uint ccLights;\n      };\n      CCLight getCCLight(uint i)\n      {\n        CCLight light;\n        light.cc_lightPos = b_ccLights[4u * i + 0u];\n        light.cc_lightColor = b_ccLights[4u * i + 1u];\n        light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n        light.cc_lightDir = b_ccLights[4u * i + 3u];\n        return light;\n      }\n      LightGrid getLightGrid(uint cluster)\n      {\n        uvec4 gridvec = b_clusterLightGrid[cluster];\n        LightGrid grid;\n        grid.offset = gridvec.x;\n        grid.ccLights = gridvec.y;\n        return grid;\n      }\n      uint getGridLightIndex(uint start, uint offset)\n      {\n        return b_clusterLightIndices[start + offset];\n      }\n      uint getClusterZIndex(vec4 worldPos)\n      {\n        float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n        float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n        float eyeDepth = -(cc_matView * worldPos).z;\n        uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n        return zIndex;\n      }\n      uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n      {\n        uint zIndex = getClusterZIndex(worldPos);\n        float clusterSizeX = ceil(cc_viewPort.z / float(16));\n        float clusterSizeY = ceil(cc_viewPort.w / float(8));\n        uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n        uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n        return cluster;\n      }\n      vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n        vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n        vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n        vec3 diffuseContrib = diffuse / PI;\n        vec3 position;\n          #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n          position = unpackHighpData(s.position, s.position_fract_part);\n          #else\n          position = s.position;\n          #endif\n        vec3 N = normalize(s.normal);\n        vec3 V = normalize(cc_cameraPos.xyz - position);\n        float NV = max(abs(dot(N, V)), 0.001);\n        specular = BRDFApprox(specular, s.roughness, NV);\n        vec3 finalColor = vec3(0.0);\n        uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n        LightGrid grid = getLightGrid(cluster);\n        uint numLights = grid.ccLights;\n        for (uint i = 0u; i < 100u; i++) {\n          if (i >= numLights) break;\n          uint lightIndex = getGridLightIndex(grid.offset, i);\n          CCLight light = getCCLight(lightIndex);\n          vec3 SLU = light.cc_lightPos.xyz - position;\n          vec3 SL = normalize(SLU);\n          vec3 SH = normalize(SL + V);\n          float SNL = max(dot(N, SL), 0.001);\n          float SNH = max(dot(N, SH), 0.0);\n          float distSqr = dot(SLU, SLU);\n          float litRadius = light.cc_lightSizeRangeAngle.x;\n          float litRadiusSqr = litRadius * litRadius;\n          float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n          float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n          attRadiusSqrInv *= attRadiusSqrInv;\n          float att = GetDistAtt(distSqr, attRadiusSqrInv);\n          vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n          if (light.cc_lightPos.w > 0.0) {\n            float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n            float cosOuter = light.cc_lightSizeRangeAngle.z;\n            float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n            float litAngleOffset = -cosOuter * litAngleScale;\n            att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n          }\n          vec3 lightColor = light.cc_lightColor.rgb;\n          float shadow = 1.0;\n          #if CC_RECEIVE_SHADOW\n            if (light.cc_lightPos.w > 0.0) {\n              shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n            }\n          #endif\n          lightColor *= shadow;\n          finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n        }\n        return vec4(finalColor, 0.0);\n      }\n      #endif\n      layout(location = 0) out vec4 fragColorX;\n      void main () {\n        StandardSurface s; surf(s);\n        #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n        vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n        #else\n        vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n        #endif\n        fragColorX = CCFragOutput(color);\n      }\n    #elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n      layout(location = 0) out vec4 fragColorX;\n      void main () {\n        StandardSurface s; surf(s);\n        vec4 color = CCStandardShadingBase(s, v_shadowPos);\n        CC_APPLY_FOG(color, s.position.xyz);\n        fragColorX = CCFragOutput(color);\n      }\n    #elif CC_PIPELINE_TYPE == 1\n      vec2 signNotZero(vec2 v) {\n        return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n      }\n      vec2 float32x3_to_oct(in vec3 v) {\n        vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n        return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n      }\n      layout(location = 0) out vec4 fragColor0;\n      layout(location = 1) out vec4 fragColor1;\n      layout(location = 2) out vec4 fragColor2;\n      void main () {\n        StandardSurface s; surf(s);\n        fragColor0 = s.albedo;\n        fragColor1 = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n        fragColor2 = vec4(s.emissive, s.occlusion);\n      }\n    #endif"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\nuniform highp mat4 cc_matView;\n  uniform highp mat4 cc_matProj;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  uniform highp vec4 cc_lightingMapUVParam;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nfloat LinearFog(vec4 pos) {\n  vec4 wPos = pos;\n  float cam_dis = distance(cc_cameraPos, wPos);\n  float fogStart = cc_fogBase.x;\n  float fogEnd = cc_fogBase.y;\n  return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n}\nfloat ExpFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * fogDensity);\n  return f;\n}\nfloat ExpSquaredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float fogStart = cc_fogBase.x;\n  float fogDensity = cc_fogBase.z;\n  float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n  float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n  return f;\n}\nfloat LayeredFog(vec4 pos) {\n  vec4 wPos = pos;\n  float fogAtten = cc_fogAdd.z;\n  float _FogTop = cc_fogAdd.x;\n  float _FogRange = cc_fogAdd.y;\n  vec3 camWorldProj = cc_cameraPos.xyz;\n  camWorldProj.y = 0.;\n  vec3 worldPosProj = wPos.xyz;\n  worldPosProj.y = 0.;\n  float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n  float fDeltaY, fDensityIntegral;\n  if (cc_cameraPos.y > _FogTop) {\n    if (wPos.y < _FogTop) {\n      fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n      fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n    } else {\n      fDeltaY = 0.;\n      fDensityIntegral = 0.;\n    }\n  } else {\n    if (wPos.y < _FogTop) {\n      float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n      fDeltaY = abs(fDeltaA - fDeltaB);\n      fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n    } else {\n      fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n      fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n    }\n  }\n  float fDensity;\n  if (fDeltaY != 0.) {\n    fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n  } else {\n    fDensity = 0.;\n  }\n  float f = exp(-fDensity);\n  return f;\n}\nvoid CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n{\n  #if CC_USE_FOG == 0\n\tfactor = LinearFog(pos);\n  #elif CC_USE_FOG == 1\n    factor = ExpFog(pos);\n  #elif CC_USE_FOG == 2\n    factor = ExpSquaredFog(pos);\n  #elif CC_USE_FOG == 3\n    factor = LayeredFog(pos);\n  #else\n    factor = 1.0;\n  #endif\n}\n#if !CC_USE_ACCURATE_FOG\nvarying float v_fog_factor;\n#endif\nvoid CC_TRANSFER_FOG(vec4 pos) {\n#if !CC_USE_ACCURATE_FOG\n    CC_TRANSFER_FOG_BASE(pos, v_fog_factor);\n#endif\n}\nvarying highp vec4 v_shadowPos;\nuniform highp mat4 cc_matLightViewProj;\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\n#if CC_RECEIVE_SHADOW\n#endif\n#if USE_VERTEX_COLOR\n  attribute vec4 a_color;\n  varying vec4 v_color;\n#endif\nvarying vec3 v_position;\nvarying vec3 v_normal;\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\n#if USE_NORMAL_MAP\n  varying vec3 v_tangent;\n  varying vec3 v_bitangent;\n#endif\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\n#if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n  varying vec3 v_luv;\n  void CCLightingMapCaclUV()\n  {\n  #if !USE_INSTANCING\n    v_luv.xy = cc_lightingMapUVParam.xy + a_texCoord1 * cc_lightingMapUVParam.z;\n    v_luv.z = cc_lightingMapUVParam.w;\n  #else\n    v_luv.xy = a_lightingMapUVParam.xy + a_texCoord1 * a_lightingMapUVParam.z;\n    v_luv.z = a_lightingMapUVParam.w;\n  #endif\n  }\n#endif\nvoid main () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  vec4 pos = matWorld * In.position;\n  v_position = pos.xyz;\n  v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);\n  #if USE_TWOSIDE\n    vec3 viewDirect = normalize(cc_cameraPos.xyz - v_position);\n    v_normal *= dot(v_normal, viewDirect) < 0.0 ? -1.0 : 1.0;\n  #endif\n  #if USE_NORMAL_MAP\n    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);\n    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w;\n  #endif\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  #if USE_VERTEX_COLOR\n    v_color = a_color;\n  #endif\n  CC_TRANSFER_FOG(pos);\n  v_shadowPos = cc_matLightViewProj * pos;\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    CCLightingMapCaclUV();\n  #endif\n  gl_Position = cc_matProj * (cc_matView * matWorld) * In.position;\n}","frag":"\n#ifdef GL_EXT_draw_buffers\n#extension GL_EXT_draw_buffers: enable\n#endif\n#ifdef GL_OES_standard_derivatives\n#extension GL_OES_standard_derivatives: enable\n#endif\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod: enable\n#endif\n  precision highp float;\n  uniform highp mat4 cc_matView;\n  uniform highp vec4 cc_cameraPos;\n  uniform mediump vec4 cc_mainLitDir;\n  uniform mediump vec4 cc_mainLitColor;\n  uniform mediump vec4 cc_ambientSky;\n  uniform mediump vec4 cc_ambientGround;\n  uniform mediump vec4 cc_fogColor;\n  uniform mediump vec4 cc_fogBase;\n  uniform mediump vec4 cc_fogAdd;\n  uniform mediump vec4 cc_nearFar;\n  uniform mediump vec4 cc_viewPort;\n             uniform vec4 albedo;\n           uniform vec4 albedoScaleAndCutoff;\n           uniform vec4 diffuseColor;\n           uniform vec4 specularColor;\n           uniform vec4 emissive;\n           uniform float shininessExponent;\n           uniform float glossiness;\n           uniform float metallic;\n           uniform float normalScale;\n           uniform float transparencyFactor;\n           uniform float diffuseFactor;\n           uniform float specularFactor;\n  float LinearFog(vec4 pos) {\n    vec4 wPos = pos;\n    float cam_dis = distance(cc_cameraPos, wPos);\n    float fogStart = cc_fogBase.x;\n    float fogEnd = cc_fogBase.y;\n    return clamp((fogEnd - cam_dis) / (fogEnd - fogStart), 0., 1.);\n  }\n  float ExpFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogStart = cc_fogBase.x;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n    float f = exp(-cam_dis * fogDensity);\n    return f;\n  }\n  float ExpSquaredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float fogStart = cc_fogBase.x;\n    float fogDensity = cc_fogBase.z;\n    float cam_dis = max(distance(cc_cameraPos, wPos) - fogStart, 0.0) / fogAtten * 4.;\n    float f = exp(-cam_dis * cam_dis * fogDensity * fogDensity);\n    return f;\n  }\n  float LayeredFog(vec4 pos) {\n    vec4 wPos = pos;\n    float fogAtten = cc_fogAdd.z;\n    float _FogTop = cc_fogAdd.x;\n    float _FogRange = cc_fogAdd.y;\n    vec3 camWorldProj = cc_cameraPos.xyz;\n    camWorldProj.y = 0.;\n    vec3 worldPosProj = wPos.xyz;\n    worldPosProj.y = 0.;\n    float fDeltaD = distance(worldPosProj, camWorldProj) / fogAtten * 2.0;\n    float fDeltaY, fDensityIntegral;\n    if (cc_cameraPos.y > _FogTop) {\n      if (wPos.y < _FogTop) {\n        fDeltaY = (_FogTop - wPos.y) / _FogRange * 2.0;\n        fDensityIntegral = fDeltaY * fDeltaY * 0.5;\n      } else {\n        fDeltaY = 0.;\n        fDensityIntegral = 0.;\n      }\n    } else {\n      if (wPos.y < _FogTop) {\n        float fDeltaA = (_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n        float fDeltaB = (_FogTop - wPos.y) / _FogRange * 2.;\n        fDeltaY = abs(fDeltaA - fDeltaB);\n        fDensityIntegral = abs((fDeltaA * fDeltaA * 0.5) - (fDeltaB * fDeltaB * 0.5));\n      } else {\n        fDeltaY = abs(_FogTop - cc_cameraPos.y) / _FogRange * 2.;\n        fDensityIntegral = abs(fDeltaY * fDeltaY * 0.5);\n      }\n    }\n    float fDensity;\n    if (fDeltaY != 0.) {\n      fDensity = (sqrt(1.0 + ((fDeltaD / fDeltaY) * (fDeltaD / fDeltaY)))) * fDensityIntegral;\n    } else {\n      fDensity = 0.;\n    }\n    float f = exp(-fDensity);\n    return f;\n  }\n  void CC_TRANSFER_FOG_BASE(vec4 pos, out float factor)\n  {\n    #if CC_USE_FOG == 0\n  \tfactor = LinearFog(pos);\n    #elif CC_USE_FOG == 1\n      factor = ExpFog(pos);\n    #elif CC_USE_FOG == 2\n      factor = ExpSquaredFog(pos);\n    #elif CC_USE_FOG == 3\n      factor = LayeredFog(pos);\n    #else\n      factor = 1.0;\n    #endif\n  }\n  void CC_APPLY_FOG_BASE(inout vec4 color, float factor) {\n    color = vec4(mix(cc_fogColor.rgb, color.rgb, factor), color.a);\n  }\n  #if !CC_USE_ACCURATE_FOG\n  varying float v_fog_factor;\n  #endif\n    void CC_APPLY_FOG(inout vec4 color) {\n  #if !CC_USE_ACCURATE_FOG\n      CC_APPLY_FOG_BASE(color, v_fog_factor);\n  #endif\n  }\n  void CC_APPLY_FOG(inout vec4 color, vec3 worldPos) {\n  #if CC_USE_ACCURATE_FOG\n      float factor;\n      CC_TRANSFER_FOG_BASE(vec4(worldPos, 1.0), factor);\n  #else\n      float factor = v_fog_factor;\n  #endif\n      CC_APPLY_FOG_BASE(color, factor);\n  }\n  #define QUATER_PI         0.78539816340\n  #define HALF_PI           1.57079632679\n  #define PI                3.14159265359\n  #define PI2               6.28318530718\n  #define PI4               12.5663706144\n  #define INV_QUATER_PI     1.27323954474\n  #define INV_HALF_PI       0.63661977237\n  #define INV_PI            0.31830988618\n  #define INV_PI2           0.15915494309\n  #define INV_PI4           0.07957747155\n  #define EPSILON           1e-6\n  #define EPSILON_LOWP      1e-4\n  #define LOG2              1.442695\n  #define EXP_VALUE         2.71828183f\n  #define FP_MAX            65504.0\n  #define FP_SCALE          0.0009765625\n  #define FP_SCALE_INV      1024.0\n  #define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\n  vec3 SRGBToLinear (vec3 gamma) {\n    return gamma * gamma;\n  }\n  uniform highp mat4 cc_matLightView;\n  uniform highp vec4 cc_shadowInvProjDepthInfo;\n  uniform highp vec4 cc_shadowProjDepthInfo;\n  uniform highp vec4 cc_shadowProjInfo;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowWHPBInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\n    highp float unpackHighpData (float mainPart, float modPart) {\n      highp float data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp float unpackHighpData (float mainPart, float modPart, const float modValue) {\n      highp float data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out float mainPart, out float modPart, highp float data, const float modValue) {\n      highp float divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart) {\n      highp vec2 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec2 unpackHighpData (vec2 mainPart, vec2 modPart, const float modValue) {\n      highp vec2 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec2 mainPart, out vec2 modPart, highp vec2 data, const float modValue) {\n      highp vec2 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart) {\n      highp vec3 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec3 unpackHighpData (vec3 mainPart, vec3 modPart, const float modValue) {\n      highp vec3 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec3 mainPart, out vec3 modPart, highp vec3 data, const float modValue) {\n      highp vec3 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart) {\n      highp vec4 data = mainPart;\n      return data + modPart;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data) {\n      mainPart = fract(data);\n      modPart = data - mainPart;\n    }\n    highp vec4 unpackHighpData (vec4 mainPart, vec4 modPart, const float modValue) {\n      highp vec4 data = mainPart * modValue;\n      return data + modPart * modValue;\n    }\n    void packHighpData (out vec4 mainPart, out vec4 modPart, highp vec4 data, const float modValue) {\n      highp vec4 divide = data / modValue;\n      mainPart = floor(divide);\n      modPart = (data - mainPart * modValue) / modValue;\n    }\n  float CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n    float dist = length(viewPos);\n    return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n  }\n  float CCGetLinearDepth(vec3 worldPos) {\n    vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n    return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n  }\n  #if CC_RECEIVE_SHADOW\n    uniform highp sampler2D cc_shadowMap;\n    uniform highp sampler2D cc_spotLightingMap;\n    vec4 ApplyShadowDepthBias_FaceNormal(vec4 shadowPos, vec3 worldNormal, float normalBias)\n    {\n      vec4 newShadowPos = shadowPos;\n      if(normalBias > EPSILON_LOWP)\n      {\n        vec4 viewNormal = cc_matLightView * vec4(worldNormal, 0.0);\n        if(viewNormal.z < 0.1)\n          newShadowPos.xy += viewNormal.xy * cc_shadowProjInfo.xy * normalBias * clamp(viewNormal.z, 0.001, 0.1);\n      }\n      return newShadowPos;\n    }\n    vec4 ApplyShadowDepthBias_Perspective(vec4 shadowPos, float viewspaceDepthBias)\n    {\n      vec3 viewSpacePos;\n      viewSpacePos.xy = shadowPos.xy * cc_shadowProjInfo.zw;\n      viewSpacePos.z = shadowPos.z * cc_shadowInvProjDepthInfo.x + shadowPos.w * cc_shadowInvProjDepthInfo.y;\n      viewSpacePos.xyz += cc_shadowProjDepthInfo.z * normalize(viewSpacePos.xyz) * viewspaceDepthBias;\n      vec4 clipSpacePos;\n      clipSpacePos.xy = viewSpacePos.xy * cc_shadowProjInfo.xy;\n      clipSpacePos.zw = viewSpacePos.z * cc_shadowProjDepthInfo.xz + vec2(cc_shadowProjDepthInfo.y, 0.0);\n      if (cc_shadowNFLSInfo.z > EPSILON) {\n        clipSpacePos.z = CCGetLinearDepthFromViewSpace(viewSpacePos.xyz);\n        clipSpacePos.z = (clipSpacePos.z * 2.0 - 1.0) * clipSpacePos.w;\n      }\n      return clipSpacePos;\n    }\n    vec4 ApplyShadowDepthBias_Orthographic(vec4 shadowPos, float viewspaceDepthBias)\n    {\n      float coeffA = cc_shadowProjDepthInfo.x;\n      float coeffB = cc_shadowProjDepthInfo.y;\n      float viewSpacePos_z = (shadowPos.z - coeffB) / coeffA;\n      viewSpacePos_z += viewspaceDepthBias;\n      vec4 result = shadowPos;\n      result.z = viewSpacePos_z * coeffA + coeffB;\n      return result;\n    }\n    float CCGetShadowFactorHard (vec4 shadowPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float shadow = 0.0;\n      float closestDepth = 0.0;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        closestDepth = dot(texture2D(cc_shadowMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n      } else {\n        closestDepth = texture2D(cc_shadowMap, clipPos.xy).x;\n      }\n      shadow = step(clipPos.z, closestDepth);\n      return shadow;\n    }\n    float CCGetShadowFactorSoft (vec4 shadowPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float offsetDepth = clipPos.z;\n      vec2 mapSize = cc_shadowWHPBInfo.xy;\n      vec2 oneTap = 1.0 / mapSize;\n      vec2 clipPos_offset = clipPos.xy + oneTap;\n      float block0, block1, block2, block3;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      } else {\n        block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n        block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos.y)).x);\n        block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset.y)).x);\n        block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n      }\n      float coefX   = mod(clipPos.x, oneTap.x) * mapSize.x;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block2, block3, coefX);\n      float coefY   = mod(clipPos.y, oneTap.y) * mapSize.y;\n      return mix(resultX, resultY, coefY);\n    }\n    float CCGetShadowFactorSoft2X (vec4 shadowPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Orthographic(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float offsetDepth = clipPos.z;\n      vec2 mapSize = cc_shadowWHPBInfo.xy;\n      vec2 oneTap = 1.0 / mapSize;\n      float clipPos_offset_L = clipPos.x - oneTap.x;\n      float clipPos_offset_R = clipPos.x + oneTap.x;\n      float clipPos_offset_U = clipPos.y - oneTap.y;\n      float clipPos_offset_D = clipPos.y + oneTap.y;\n      float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        block0 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block1 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block2 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block3 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block4 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block5 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block6 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block7 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block8 = step(offsetDepth, dot(texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      } else {\n        block0 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n        block1 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_U)).x);\n        block2 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n        block3 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos.y)).x);\n        block4 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos.y)).x);\n        block5 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos.y)).x);\n        block6 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n        block7 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos.x, clipPos_offset_D)).x);\n        block8 = step(offsetDepth, texture2D(cc_shadowMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n      }\n      float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n      float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n      float shadow = 0.0;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block3, block4, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block1, block2, coefX);\n      resultY = mix(block4, block5, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block3, block4, coefX);\n      resultY = mix(block6, block7, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      resultX = mix(block4, block5, coefX);\n      resultY = mix(block7, block8, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      return shadow * 0.25;\n    }\n    float CCGetSpotLightShadowFactorHard (vec4 shadowPos, vec3 worldPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float shadow = 0.0;\n      float closestDepth = 0.0;\n      float depth = clipPos.z;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        closestDepth = dot(texture2D(cc_spotLightingMap, clipPos.xy), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0));\n      } else {\n        closestDepth = texture2D(cc_spotLightingMap, clipPos.xy).x;\n      }\n      shadow = step(depth, closestDepth);\n      return shadow;\n    }\n    float CCGetSpotLightShadowFactorSoft (vec4 shadowPos, vec3 worldPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float depth = 0.0;\n      if (cc_shadowNFLSInfo.z > EPSILON) {\n        depth = CCGetLinearDepth(worldPos);\n      } else {\n        depth = clipPos.z;\n      }\n      vec2 oneTap = 1.0 / cc_shadowWHPBInfo.xy;\n      vec2 clipPos_offset = clipPos.xy + oneTap;\n      float block0, block1, block2, block3;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      } else {\n        block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n        block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos.y)).x);\n        block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset.y)).x);\n        block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset.x, clipPos_offset.y)).x);\n      }\n      float coefX   = mod(clipPos.x, oneTap.x) * cc_shadowWHPBInfo.x;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block2, block3, coefX);\n      float coefY   = mod(clipPos.y, oneTap.y) * cc_shadowWHPBInfo.y;\n      return mix(resultX, resultY, coefY);\n    }\n    float CCGetSpotLightShadowFactorSoft2X (vec4 shadowPos, vec3 worldPos, float bias) {\n      vec4 clipPosNew = ApplyShadowDepthBias_Perspective(shadowPos, bias);\n      vec3 clipPos = clipPosNew.xyz / clipPosNew.w * 0.5 + 0.5;\n      if (clipPos.x < 0.0 || clipPos.x > 1.0 ||\n          clipPos.y < 0.0 || clipPos.y > 1.0 ||\n          clipPos.z < 0.0 || clipPos.z > 1.0) { return 1.0; }\n      clipPos.xy = cc_cameraPos.w == 1.0 ? vec2(clipPos.xy.x, 1.0 - clipPos.xy.y) : clipPos.xy;\n      float depth = 0.0;\n      if (cc_shadowNFLSInfo.z > EPSILON) {\n        depth = CCGetLinearDepth(worldPos);\n      } else {\n        depth = clipPos.z;\n      }\n      vec2 mapSize = cc_shadowWHPBInfo.xy;\n      vec2 oneTap = 1.0 / mapSize;\n      float clipPos_offset_L = clipPos.x - oneTap.x;\n      float clipPos_offset_R = clipPos.x + oneTap.x;\n      float clipPos_offset_U = clipPos.y - oneTap.y;\n      float clipPos_offset_D = clipPos.y + oneTap.y;\n      float block0, block1, block2, block3, block4, block5, block6, block7, block8;\n      if (cc_shadowLPNNInfo.y > EPSILON) {\n        block0 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block1 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block2 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block3 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block4 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block5 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block6 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block7 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n        block8 = step(depth, dot(texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)), vec4(1.0, 1.0 / 255.0, 1.0 / 65025.0, 1.0 / 16581375.0)));\n      } else {\n        block0 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_U)).x);\n        block1 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_U)).x);\n        block2 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_U)).x);\n        block3 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos.y)).x);\n        block4 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos.y)).x);\n        block5 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos.y)).x);\n        block6 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_L, clipPos_offset_D)).x);\n        block7 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos.x, clipPos_offset_D)).x);\n        block8 = step(depth, texture2D(cc_spotLightingMap, vec2(clipPos_offset_R, clipPos_offset_D)).x);\n      }\n      float coefX = mod(clipPos.x, oneTap.x) * mapSize.x;\n      float coefY = mod(clipPos.y, oneTap.y) * mapSize.y;\n      float shadow = 0.0;\n      float resultX = mix(block0, block1, coefX);\n      float resultY = mix(block3, block4, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block1, block2, coefX);\n      resultY = mix(block4, block5, coefX);\n      shadow += mix(resultX , resultY, coefY);\n      resultX = mix(block3, block4, coefX);\n      resultY = mix(block6, block7, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      resultX = mix(block4, block5, coefX);\n      resultY = mix(block7, block8, coefX);\n      shadow += mix(resultX, resultY, coefY);\n      return shadow * 0.25;\n    }\n  float CCSpotShadowFactorBase(vec4 shadowPos, vec3 worldPos, vec2 shadowBias)\n  {\n    float pcf = cc_shadowWHPBInfo.z;\n    if (pcf > 1.9) {\n      return CCGetSpotLightShadowFactorSoft2X(shadowPos, worldPos, shadowBias.x);\n    }else if (pcf > 0.9) {\n      return CCGetSpotLightShadowFactorSoft(shadowPos, worldPos, shadowBias.x);\n    }else {\n      return CCGetSpotLightShadowFactorHard(shadowPos, worldPos, shadowBias.x);\n    }\n  }\n  float CCShadowFactorBase(vec4 shadowPos, vec3 N, vec2 shadowBias)\n  {\n    float realtimeShadow = 1.0;\n    vec4 pos = ApplyShadowDepthBias_FaceNormal(shadowPos, N, shadowBias.y);\n    float pcf = cc_shadowWHPBInfo.z;\n    if (pcf > 1.9) {\n      realtimeShadow =  CCGetShadowFactorSoft2X(pos, shadowBias.x);\n    }else if (pcf > 0.9) {\n      realtimeShadow = CCGetShadowFactorSoft(pos, shadowBias.x);\n    }else {\n      realtimeShadow = CCGetShadowFactorHard(pos, shadowBias.x);\n    }\n    return mix(realtimeShadow, 1.0, cc_shadowNFLSInfo.w);\n  }\n  #endif\n  #if CC_USE_IBL\n    uniform samplerCube cc_environment;\n    vec4 fragTextureLod (sampler2D tex, vec2 coord, float lod) {\n        #ifdef GL_EXT_shader_texture_lod\n          return texture2DLodEXT(tex, coord, lod);\n        #else\n          return texture2D(tex, coord, lod);\n        #endif\n    }\n    vec4 fragTextureLod (samplerCube tex, vec3 coord, float lod) {\n        #ifdef GL_EXT_shader_texture_lod\n          return textureCubeLodEXT(tex, coord, lod);\n        #else\n          return textureCube(tex, coord, lod);\n        #endif\n    }\n    vec3 unpackRGBE (vec4 rgbe) {\n      return rgbe.rgb * pow(1.1, rgbe.a * 255.0 - 128.0);\n    }\n    #if CC_USE_DIFFUSEMAP\n      uniform samplerCube cc_diffuseMap;\n    #endif\n  #endif\n  float GGXMobile (float roughness, float NoH, vec3 H, vec3 N) {\n    vec3 NxH = cross(N, H);\n    float OneMinusNoHSqr = dot(NxH, NxH);\n    float a = roughness * roughness;\n    float n = NoH * a;\n    float p = a / (OneMinusNoHSqr + n * n);\n    return p * p;\n  }\n  float CalcSpecular (float roughness, float NoH, vec3 H, vec3 N) {\n    return (roughness * 0.25 + 0.25) * GGXMobile(roughness, NoH, H, N);\n  }\n  vec3 BRDFApprox (vec3 specular, float roughness, float NoV) {\n    const vec4 c0 = vec4(-1.0, -0.0275, -0.572, 0.022);\n    const vec4 c1 = vec4(1.0, 0.0425, 1.04, -0.04);\n    vec4 r = roughness * c0 + c1;\n    float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n    vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n    AB.y *= clamp(50.0 * specular.g, 0.0, 1.0);\n    return specular * AB.x + AB.y;\n  }\n  #if USE_REFLECTION_DENOISE\n    vec3 GetEnvReflectionWithMipFiltering(vec3 R, float roughness, float mipCount, float denoiseIntensity) {\n      #if CC_USE_IBL\n      \tfloat mip = roughness * mipCount;\n      \tfloat delta = (dot(dFdx(R), dFdy(R))) * 1000.0;\n      \tfloat mipBias = mix(0.0, 5.0, clamp(delta, 0.0, 1.0));\n      \tvec4 biased = fragTextureLod(cc_environment, R, mip + mipBias);\n       \tvec4 filtered = textureCube(cc_environment, R);\n        #if CC_USE_IBL == 2\n        \tbiased.rgb = unpackRGBE(biased);\n        \tfiltered.rgb = unpackRGBE(filtered);\n        #else\n        \tbiased.rgb = SRGBToLinear(biased.rgb);\n        \tfiltered.rgb = SRGBToLinear(filtered.rgb);\n        #endif\n        return mix(biased.rgb, filtered.rgb, denoiseIntensity);\n      #else\n        return vec3(0.0, 0.0, 0.0);\n      #endif\n    }\n  #endif\n  struct StandardSurface {\n    vec4 albedo;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      vec3 position, position_fract_part;\n      #else\n      vec3 position;\n      #endif\n    vec3 normal;\n    vec3 emissive;\n    vec3 lightmap;\n    float lightmap_test;\n    float roughness;\n    float metallic;\n    float occlusion;\n    float specularIntensity;\n    #if CC_RECEIVE_SHADOW\n      vec2 shadowBias;\n    #endif\n  };\n  vec4 CCStandardShadingBase (StandardSurface s, vec4 shadowPos) {\n    vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n    vec3 specular = mix(vec3(0.08 * s.specularIntensity), s.albedo.rgb, s.metallic);\n    vec3 position;\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      position = unpackHighpData(s.position, s.position_fract_part);\n      #else\n      position = s.position;\n      #endif\n    vec3 N = normalize(s.normal);\n    vec3 V = normalize(cc_cameraPos.xyz - position);\n    float NV = max(abs(dot(N, V)), 0.0);\n    specular = BRDFApprox(specular, s.roughness, NV);\n    vec3 L = normalize(-cc_mainLitDir.xyz);\n    vec3 H = normalize(L + V);\n    float NH = max(dot(N, H), 0.0);\n    float NL = max(dot(N, L), 0.0);\n    vec3 finalColor = NL * cc_mainLitColor.rgb * cc_mainLitColor.w;\n    vec3 diffuseContrib = diffuse / PI;\n    vec3 specularContrib = specular * CalcSpecular(s.roughness, NH, H, N);\n    vec3 dirlightContrib = (diffuseContrib + specularContrib);\n    float shadow = 1.0;\n    #if CC_RECEIVE_SHADOW\n      if (NL > 0.0 && cc_mainLitDir.w > 0.0) {\n        shadow = CCShadowFactorBase(shadowPos, N, s.shadowBias);\n      }\n    #endif\n    dirlightContrib *= shadow;\n    finalColor *= dirlightContrib;\n    #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n      if (s.lightmap_test > EPSILON_LOWP) {\n        finalColor = diffuse * s.lightmap.rgb * shadow;\n      }\n    #endif\n    float fAmb = 0.5 - N.y * 0.5;\n    vec3 ambDiff = mix(cc_ambientSky.rgb, cc_ambientGround.rgb, fAmb);\n    #if CC_USE_IBL\n      #if CC_USE_DIFFUSEMAP\n        vec4 diffuseMap = textureCube(cc_diffuseMap, N);\n        #if CC_USE_DIFFUSEMAP == 2\n          ambDiff = unpackRGBE(diffuseMap);\n        #else\n          ambDiff = SRGBToLinear(diffuseMap.rgb);\n        #endif\n      #endif\n      vec3 R = normalize(reflect(-V, N));\n      #if USE_REFLECTION_DENOISE\n        vec3 env = GetEnvReflectionWithMipFiltering(R, s.roughness, cc_ambientGround.w, 0.6);\n      #else\n        vec4 envmap = fragTextureLod(cc_environment, R, s.roughness * cc_ambientGround.w);\n        #if CC_USE_IBL == 2\n          vec3 env = unpackRGBE(envmap);\n        #else\n          vec3 env = SRGBToLinear(envmap.rgb);\n        #endif\n      #endif\n      finalColor += env * cc_ambientSky.w * specular * s.occlusion;\n    #endif\n    finalColor += ambDiff.rgb * cc_ambientSky.w * diffuse * s.occlusion;\n    finalColor += s.emissive;\n    return vec4(finalColor, s.albedo.a);\n  }\n  vec3 ACESToneMap (vec3 color) {\n    color = min(color, vec3(8.0));\n    const float A = 2.51;\n    const float B = 0.03;\n    const float C = 2.43;\n    const float D = 0.59;\n    const float E = 0.14;\n    return (color * (A * color + B)) / (color * (C * color + D) + E);\n  }\n  vec4 CCFragOutput (vec4 color) {\n    #if CC_USE_HDR\n      color.rgb = ACESToneMap(color.rgb);\n    #endif\n    color.rgb = sqrt(color.rgb);\n    return color;\n  }\n  varying highp vec4 v_shadowPos;\n    #if CC_RECEIVE_SHADOW\n  #endif\n  #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n    varying vec3 v_luv;\n    uniform sampler2D cc_lightingMap;\n  #endif\n  varying vec3 v_position;\n  varying vec2 v_uv;\n  varying vec2 v_uv1;\n  varying vec3 v_normal;\n  #define DCC_APP_AUTODESK 0\n  #define DCC_APP_BLENDER 1\n  #define DCC_APP_CINEMA4D 2\n  #if USE_SHININESS_MAP\n    uniform sampler2D shininessExponentMap;\n  #endif\n  #if USE_SPECULAR_MAP\n    uniform sampler2D specularMap;\n  #endif\n   #if USE_METALLIC_MAP\n    uniform sampler2D metallicMap;\n  #endif\n  #if USE_VERTEX_COLOR\n    varying vec4 v_color;\n  #endif\n  #if USE_ALBEDO_MAP\n    uniform sampler2D albedoMap;\n  #endif\n  #if USE_TRANSPARENCY_MAP\n    uniform sampler2D transparencyMap;\n  #endif\n  #if USE_NORMAL_MAP\n    varying vec3 v_tangent;\n    varying vec3 v_bitangent;\n    uniform sampler2D normalMap;\n  #endif\n  #if USE_EMISSIVE_MAP\n    uniform sampler2D emissiveMap;\n  #endif\nbool GetMetallicAlbedoFromDiffuseSpecularWithoutColor(out float metallic, out vec3 albedo, vec3 diffuse, vec3 specular, float f0 )\n{\n  float d = max(max(diffuse.x, diffuse.y), diffuse.z);\n  vec3 normalizedColor = diffuse / (d + (d < EPSILON_LOWP ? EPSILON_LOWP : 0.0));\n  normalizedColor = d < EPSILON_LOWP ? specular : normalizedColor;\n  float s = max(max(specular.x, specular.y), specular.z);\n  float delta = (d + s) * (d + s)  - 4.0 * f0 * d;\n  float deltaSqrt = sqrt(max(0.0, delta));\n  float solverMetallic = (-d - s + 2.0 * f0 + deltaSqrt) / (2.0 * f0);\n  vec3 solverAlbedo = (d + s) * normalizedColor - vec3(f0 * (1.0 - solverMetallic));\n  bool isValidSolver = delta >= 0.0;\n  metallic = isValidSolver ? clamp(solverMetallic, 0.0, 1.0) : 0.0;\n  albedo = isValidSolver ? vec3(max(0.0, solverAlbedo.x), max(0.0, solverAlbedo.y), max(0.0, solverAlbedo.z)) : diffuse;\n  return isValidSolver;\n}\n  float discolor(vec3 srcColor) {\n    return dot(GRAY_VECTOR, srcColor);\n  }\n  float convertShininessExponent(float shininessExp)\n  {\n    #if DCC_APP_NAME == DCC_APP_BLENDER\n      float glossiness = clamp(sqrt(shininessExp) * 0.1, 0.0, 0.95);\n    #elif DCC_APP_NAME == DCC_APP_CINEMA4D\n      float glossiness = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n    #else\n      float l2 = clamp(log(shininessExp + EPSILON) * 0.1442695 , 0.0, 1.0);\n      float glossiness = pow(l2, 0.5);\n    #endif\n      return glossiness;\n  }\n  float getSpecularIntensityFromRoughness(float roughness)\n  {\n    #if DCC_APP_NAME == DCC_APP_BLENDER\n      float specularIntensityMultiplier = mix(1.0, 5.0, roughness);\n    #elif DCC_APP_NAME == DCC_APP_CINEMA4D\n      float specularIntensityMultiplier = mix(1.0, 50.0, roughness);\n    #else\n      float specularIntensityMultiplier = mix(1.0, 20.0, roughness);\n    #endif\n      return specularIntensityMultiplier;\n  }\n  vec4 getSpecularColorAndFactor()\n  {\n    vec3 inSpecular = specularColor.rgb;\n    #if USE_SPECULAR_MAP\n        vec4 specularTex = texture2D(specularMap, TEXTURE_UV);\n        specularTex.rgb = SRGBToLinear(specularTex.rgb);\n        inSpecular = specularTex.rgb;\n    #endif\n    return vec4(inSpecular, specularFactor);\n  }\n  void surf (out StandardSurface s) {\n    vec4 baseColor = diffuseColor;\n    #if USE_VERTEX_COLOR\n      baseColor.rgb *= SRGBToLinear(v_color.rgb);\n      baseColor.a *= v_color.a;\n    #endif\n    float diffuseScale = diffuseFactor;\n    #if USE_ALBEDO_MAP\n      vec4 texColor = texture2D(albedoMap, TEXTURE_UV);\n      texColor.rgb = SRGBToLinear(texColor.rgb);\n      baseColor = texColor;\n      diffuseScale = 1.0;\n    #endif\n    baseColor.rgb *= diffuseScale;\n    #if USE_TRANSPARENCY_MAP\n      baseColor.a = texture2D(transparencyMap, TEXTURE_UV).a * transparencyFactor;\n    #endif\n    #if USE_ALPHA_TEST\n      if (baseColor.a < albedoScaleAndCutoff.w) discard;\n    #endif\n    vec4 specularColorAndFactor = getSpecularColorAndFactor();\n    float inGlossiness = 0.0, inSpecularIntensity = specularColorAndFactor.w;\n    #if HAS_EXPORTED_GLOSSINESS\n      inGlossiness = glossiness;\n    #else\n      #if USE_SHININESS_MAP\n        #if GLOSSINESS_MAP_USE_SINGLE_CHANNEL\n          inGlossiness = 1.0 - texture2D(shininessExponentMap, TEXTURE_UV).GLOSSINESS_MAP_CHANNEL;\n        #else\n          inGlossiness = 1.0 - discolor(texture2D(shininessExponentMap, TEXTURE_UV).rgb);\n        #endif\n      #else\n        inGlossiness = convertShininessExponent(shininessExponent);\n      #endif\n      inSpecularIntensity *= getSpecularIntensityFromRoughness(1.0 - inGlossiness);\n    #endif\n    float inMetallic = 0.0;\n    vec4 albedo = baseColor;\n    #if HAS_EXPORTED_METALLIC\n      inMetallic = metallic;\n    #else\n      GetMetallicAlbedoFromDiffuseSpecularWithoutColor(inMetallic, albedo.rgb, baseColor.rgb, specularColorAndFactor.rgb, 0.04);\n      inSpecularIntensity *= inMetallic;\n    #endif\n    s.normal = v_normal;\n    #if USE_NORMAL_MAP\n      vec3 nmmp = texture2D(normalMap, TEXTURE_UV).xyz - vec3(0.5);\n      s.normal =\n        (nmmp.x * normalScale) * normalize(v_tangent) +\n        (nmmp.y * normalScale) * normalize(v_bitangent) +\n        nmmp.z * normalize(s.normal);\n    #endif\n      #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n      packHighpData(s.position, s.position_fract_part, v_position);\n      #else\n      s.position = v_position;\n      #endif\n    s.albedo = albedo;\n    s.occlusion = 1.0;\n    s.roughness = 1.0 - inGlossiness;\n    s.metallic = inMetallic;\n    s.specularIntensity = inSpecularIntensity * 0.5;\n    s.emissive = vec3(0.0);\n  #if USE_EMISSIVE_MAP\n    s.emissive = texture2D(emissiveMap, TEXTURE_UV).xyz;\n  #endif\n    #if CC_USE_LIGHTMAP && !USE_BATCHING && !CC_FORWARD_ADD\n      vec4 lightColor = texture2D(cc_lightingMap, v_luv.xy);\n      s.lightmap = lightColor.xyz * v_luv.z;\n      s.lightmap_test = v_luv.z;\n    #endif\n  }\n    #if CC_FORWARD_ADD\n      #if CC_PIPELINE_TYPE == 0\n        #define LIGHTS_PER_PASS 1\n      #else\n        #define LIGHTS_PER_PASS 10\n      #endif\n      #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n      uniform highp vec4 cc_lightPos[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightColor[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightSizeRangeAngle[LIGHTS_PER_PASS];\n  uniform vec4 cc_lightDir[LIGHTS_PER_PASS];\n      #endif\n      float SmoothDistAtt (float distSqr, float invSqrAttRadius) {\n        float factor = distSqr * invSqrAttRadius;\n        float smoothFactor = clamp(1.0 - factor * factor, 0.0, 1.0);\n        return smoothFactor * smoothFactor;\n      }\n      float GetDistAtt (float distSqr, float invSqrAttRadius) {\n        float attenuation = 1.0 / max(distSqr, 0.01*0.01);\n        attenuation *= SmoothDistAtt(distSqr , invSqrAttRadius);\n        return attenuation;\n      }\n      float GetAngleAtt (vec3 L, vec3 litDir, float litAngleScale, float litAngleOffset) {\n        float cd = dot(litDir, L);\n        float attenuation = clamp(cd * litAngleScale + litAngleOffset, 0.0, 1.0);\n        return (attenuation * attenuation);\n      }\n      #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 0\n      vec4 CCStandardShadingAdditive (StandardSurface s, vec4 shadowPos) {\n        vec3 position;\n          #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n          position = unpackHighpData(s.position, s.position_fract_part);\n          #else\n          position = s.position;\n          #endif\n        vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n        vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n        vec3 diffuseContrib = diffuse / PI;\n        vec3 N = normalize(s.normal);\n        vec3 V = normalize(cc_cameraPos.xyz - position);\n        float NV = max(abs(dot(N, V)), 0.0);\n        specular = BRDFApprox(specular, s.roughness, NV);\n        vec3 finalColor = vec3(0.0);\n        int numLights = CC_PIPELINE_TYPE == 0 ? LIGHTS_PER_PASS : int(cc_lightDir[0].w);\n        for (int i = 0; i < LIGHTS_PER_PASS; i++) {\n          if (i >= numLights) break;\n          vec3 SLU = cc_lightPos[i].xyz - position;\n          vec3 SL = normalize(SLU);\n          vec3 SH = normalize(SL + V);\n          float SNL = max(dot(N, SL), 0.0);\n          float SNH = max(dot(N, SH), 0.0);\n          float distSqr = dot(SLU, SLU);\n          float litRadius = cc_lightSizeRangeAngle[i].x;\n          float litRadiusSqr = litRadius * litRadius;\n          float illum = litRadiusSqr / max(litRadiusSqr, distSqr);\n          float attRadiusSqrInv = 1.0 / max(cc_lightSizeRangeAngle[i].y, 0.01);\n          attRadiusSqrInv *= attRadiusSqrInv;\n          float att = GetDistAtt(distSqr, attRadiusSqrInv);\n          vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n          if (cc_lightPos[i].w > 0.0) {\n            float cosInner = max(dot(-cc_lightDir[i].xyz, SL), 0.01);\n            float cosOuter = cc_lightSizeRangeAngle[i].z;\n            float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n            float litAngleOffset = -cosOuter * litAngleScale;\n            att *= GetAngleAtt(SL, -cc_lightDir[i].xyz, litAngleScale, litAngleOffset);\n          }\n          vec3 lightColor = cc_lightColor[i].rgb;\n          float shadow = 1.0;\n          #if CC_RECEIVE_SHADOW\n            if (cc_lightPos[i].w > 0.0 && cc_lightSizeRangeAngle[i].w > 0.0) {\n              shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n            }\n          #endif\n          lightColor *= shadow;\n          finalColor += SNL * lightColor * cc_lightColor[i].w * illum * att * (diffuseContrib + lspec);\n        }\n        return vec4(finalColor, 0.0);\n      }\n      #endif\n      #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n      readonly buffer b_ccLightsBuffer { vec4 b_ccLights[]; };\n      readonly buffer b_clusterLightIndicesBuffer { uint b_clusterLightIndices[]; };\n      readonly buffer b_clusterLightGridBuffer { uvec4 b_clusterLightGrid[]; };\n      struct CCLight\n      {\n        vec4 cc_lightPos;\n        vec4 cc_lightColor;\n        vec4 cc_lightSizeRangeAngle;\n        vec4 cc_lightDir;\n      };\n      struct Cluster\n      {\n        vec3 minBounds;\n        vec3 maxBounds;\n      };\n      struct LightGrid\n      {\n        uint offset;\n        uint ccLights;\n      };\n      CCLight getCCLight(uint i)\n      {\n        CCLight light;\n        light.cc_lightPos = b_ccLights[4u * i + 0u];\n        light.cc_lightColor = b_ccLights[4u * i + 1u];\n        light.cc_lightSizeRangeAngle = b_ccLights[4u * i + 2u];\n        light.cc_lightDir = b_ccLights[4u * i + 3u];\n        return light;\n      }\n      LightGrid getLightGrid(uint cluster)\n      {\n        uvec4 gridvec = b_clusterLightGrid[cluster];\n        LightGrid grid;\n        grid.offset = gridvec.x;\n        grid.ccLights = gridvec.y;\n        return grid;\n      }\n      uint getGridLightIndex(uint start, uint offset)\n      {\n        return b_clusterLightIndices[start + offset];\n      }\n      uint getClusterZIndex(vec4 worldPos)\n      {\n        float scale = float(24) / log(cc_nearFar.y / cc_nearFar.x);\n        float bias = -(float(24) * log(cc_nearFar.x) / log(cc_nearFar.y / cc_nearFar.x));\n        float eyeDepth = -(cc_matView * worldPos).z;\n        uint zIndex = uint(max(log(eyeDepth) * scale + bias, 0.0));\n        return zIndex;\n      }\n      uint getClusterIndex(vec4 fragCoord, vec4 worldPos)\n      {\n        uint zIndex = getClusterZIndex(worldPos);\n        float clusterSizeX = ceil(cc_viewPort.z / float(16));\n        float clusterSizeY = ceil(cc_viewPort.w / float(8));\n        uvec3 indices = uvec3(uvec2(fragCoord.xy / vec2(clusterSizeX, clusterSizeY)), zIndex);\n        uint cluster = (16u * 8u) * indices.z + 16u * indices.y + indices.x;\n        return cluster;\n      }\n      vec4 CCClusterShadingAdditive (StandardSurface s, vec4 shadowPos) {\n        vec3 diffuse = s.albedo.rgb * (1.0 - s.metallic);\n        vec3 specular = mix(vec3(0.04), s.albedo.rgb, s.metallic);\n        vec3 diffuseContrib = diffuse / PI;\n        vec3 position;\n          #if CC_PLATFORM_ANDROID_AND_WEBGL && CC_ENABLE_WEBGL_HIGHP_STRUCT_VALUES\n          position = unpackHighpData(s.position, s.position_fract_part);\n          #else\n          position = s.position;\n          #endif\n        vec3 N = normalize(s.normal);\n        vec3 V = normalize(cc_cameraPos.xyz - position);\n        float NV = max(abs(dot(N, V)), 0.001);\n        specular = BRDFApprox(specular, s.roughness, NV);\n        vec3 finalColor = vec3(0.0);\n        uint cluster = getClusterIndex(gl_FragCoord, vec4(position, 1.0));\n        LightGrid grid = getLightGrid(cluster);\n        uint numLights = grid.ccLights;\n        for (uint i = 0u; i < 100u; i++) {\n          if (i >= numLights) break;\n          uint lightIndex = getGridLightIndex(grid.offset, i);\n          CCLight light = getCCLight(lightIndex);\n          vec3 SLU = light.cc_lightPos.xyz - position;\n          vec3 SL = normalize(SLU);\n          vec3 SH = normalize(SL + V);\n          float SNL = max(dot(N, SL), 0.001);\n          float SNH = max(dot(N, SH), 0.0);\n          float distSqr = dot(SLU, SLU);\n          float litRadius = light.cc_lightSizeRangeAngle.x;\n          float litRadiusSqr = litRadius * litRadius;\n          float illum = PI * (litRadiusSqr / max(litRadiusSqr , distSqr));\n          float attRadiusSqrInv = 1.0 / max(light.cc_lightSizeRangeAngle.y, 0.01);\n          attRadiusSqrInv *= attRadiusSqrInv;\n          float att = GetDistAtt(distSqr, attRadiusSqrInv);\n          vec3 lspec = specular * CalcSpecular(s.roughness, SNH, SH, N);\n          if (light.cc_lightPos.w > 0.0) {\n            float cosInner = max(dot(-light.cc_lightDir.xyz, SL), 0.01);\n            float cosOuter = light.cc_lightSizeRangeAngle.z;\n            float litAngleScale = 1.0 / max(0.001, cosInner - cosOuter);\n            float litAngleOffset = -cosOuter * litAngleScale;\n            att *= GetAngleAtt(SL, -light.cc_lightDir.xyz, litAngleScale, litAngleOffset);\n          }\n          vec3 lightColor = light.cc_lightColor.rgb;\n          float shadow = 1.0;\n          #if CC_RECEIVE_SHADOW\n            if (light.cc_lightPos.w > 0.0) {\n              shadow = CCSpotShadowFactorBase(shadowPos, position, s.shadowBias);\n            }\n          #endif\n          lightColor *= shadow;\n          finalColor += SNL * lightColor * light.cc_lightColor.w * illum * att * (diffuseContrib + lspec);\n        }\n        return vec4(finalColor, 0.0);\n      }\n      #endif\n      void main () {\n        StandardSurface s; surf(s);\n        #if CC_ENABLE_CLUSTERED_LIGHT_CULLING == 1\n        vec4 color = CCClusterShadingAdditive(s, v_shadowPos);\n        #else\n        vec4 color = CCStandardShadingAdditive(s, v_shadowPos);\n        #endif\n        gl_FragData[0] = CCFragOutput(color);\n      }\n    #elif (CC_PIPELINE_TYPE == 0 || CC_FORCE_FORWARD_SHADING)\n      void main () {\n        StandardSurface s; surf(s);\n        vec4 color = CCStandardShadingBase(s, v_shadowPos);\n        CC_APPLY_FOG(color, s.position.xyz);\n        gl_FragData[0] = CCFragOutput(color);\n      }\n    #elif CC_PIPELINE_TYPE == 1\n      vec2 signNotZero(vec2 v) {\n        return vec2((v.x >= 0.0) ? +1.0 : -1.0, (v.y >= 0.0) ? +1.0 : -1.0);\n      }\n      vec2 float32x3_to_oct(in vec3 v) {\n        vec2 p = v.xy * (1.0 / (abs(v.x) + abs(v.y) + abs(v.z)));\n        return (v.z <= 0.0) ? ((1.0 - abs(p.yx)) * signNotZero(p)) : p;\n      }\n      void main () {\n        StandardSurface s; surf(s);\n        gl_FragData[0] = s.albedo;\n        gl_FragData[1] = vec4(float32x3_to_oct(s.normal), s.roughness, s.metallic);\n        gl_FragData[2] = vec4(s.emissive, s.occlusion);\n      }\n    #endif"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]},{"name":"CCShadow","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_environment","defines":["CC_USE_IBL"]},{"name":"cc_diffuseMap","defines":["CC_USE_DIFFUSEMAP"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]},{"name":"CCForwardLight","defines":["CC_FORWARD_ADD","CC_ENABLE_CLUSTERED_LIGHT_CULLING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"cc_lightingMap","defines":["CC_USE_LIGHTMAP","!USE_BATCHING","!CC_FORWARD_ADD"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":231,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":83}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_LIGHTMAP","type":"boolean","defines":[]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_USE_FOG","type":"number","defines":[],"range":[0,4]},{"name":"CC_USE_ACCURATE_FOG","type":"boolean","defines":[]},{"name":"USE_VERTEX_COLOR","type":"boolean","defines":[]},{"name":"USE_NORMAL_MAP","type":"boolean","defines":[]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"CC_FORWARD_ADD","type":"boolean","defines":[]},{"name":"USE_TWOSIDE","type":"boolean","defines":[]},{"name":"CC_USE_IBL","type":"number","defines":[],"range":[0,2]},{"name":"CC_USE_DIFFUSEMAP","type":"number","defines":[],"range":[0,2]},{"name":"USE_REFLECTION_DENOISE","type":"boolean","defines":[]},{"name":"CC_USE_HDR","type":"boolean","defines":[]},{"name":"TEXTURE_UV","type":"string","defines":[],"options":["v_uv","v_uv1"]},{"name":"DCC_APP_NAME","type":"number","defines":[],"range":[0,2]},{"name":"USE_SHININESS_MAP","type":"boolean","defines":[]},{"name":"GLOSSINESS_MAP_CHANNEL","type":"string","defines":["USE_SHININESS_MAP"],"options":["r","g","b","a"]},{"name":"USE_SPECULAR_MAP","type":"boolean","defines":[]},{"name":"USE_METALLIC_MAP","type":"boolean","defines":[]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"USE_TRANSPARENCY_MAP","type":"boolean","defines":[]},{"name":"USE_EMISSIVE_MAP","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"HAS_EXPORTED_GLOSSINESS","type":"boolean","defines":[]},{"name":"GLOSSINESS_MAP_USE_SINGLE_CHANNEL","type":"boolean","defines":["!HAS_EXPORTED_GLOSSINESS","USE_SHININESS_MAP"]},{"name":"HAS_EXPORTED_METALLIC","type":"boolean","defines":[]},{"name":"CC_PIPELINE_TYPE","type":"number","defines":["CC_FORWARD_ADD"],"range":[0,1]},{"name":"CC_FORCE_FORWARD_SHADING","type":"boolean","defines":["CC_FORWARD_ADD"]}]},{"hash":1243567465,"name":"dcc/imported-specular-glossiness|shadow-caster-vs:vert|shadow-caster-fs:frag","blocks":[{"name":"Constants","stageFlags":17,"binding":0,"members":[{"name":"tilingOffset","type":16,"count":1},{"name":"albedo","type":16,"count":1},{"name":"albedoScaleAndCutoff","type":16,"count":1},{"name":"diffuseColor","type":16,"count":1},{"name":"specularColor","type":16,"count":1},{"name":"emissive","type":16,"count":1},{"name":"alphaThreshold","type":13,"count":1},{"name":"shininessExponent","type":13,"count":1},{"name":"glossiness","type":13,"count":1},{"name":"metallic","type":13,"count":1},{"name":"normalScale","type":13,"count":1},{"name":"transparencyFactor","type":13,"count":1},{"name":"diffuseFactor","type":13,"count":1},{"name":"specularFactor","type":13,"count":1}],"defines":[]}],"samplerTextures":[{"name":"albedoMap","type":28,"count":1,"stageFlags":16,"binding":1,"defines":["USE_ALBEDO_MAP"]},{"name":"transparencyMap","type":28,"count":1,"stageFlags":16,"binding":2,"defines":["USE_TRANSPARENCY_MAP"]}],"samplers":[],"textures":[],"buffers":[],"images":[],"subpassInputs":[],"attributes":[{"name":"a_position","format":32,"location":0,"defines":[]},{"name":"a_normal","format":32,"location":1,"defines":[]},{"name":"a_texCoord","format":21,"location":2,"defines":[]},{"name":"a_tangent","format":44,"location":3,"defines":[]},{"name":"a_joints","location":4,"defines":["CC_USE_SKINNING"]},{"name":"a_weights","format":44,"location":5,"defines":["CC_USE_SKINNING"]},{"name":"a_jointAnimInfo","format":44,"isInstanced":true,"location":6,"defines":["USE_INSTANCING","CC_USE_BAKED_ANIMATION"]},{"name":"a_matWorld0","format":44,"isInstanced":true,"location":7,"defines":["USE_INSTANCING"]},{"name":"a_matWorld1","format":44,"isInstanced":true,"location":8,"defines":["USE_INSTANCING"]},{"name":"a_matWorld2","format":44,"isInstanced":true,"location":9,"defines":["USE_INSTANCING"]},{"name":"a_lightingMapUVParam","format":44,"isInstanced":true,"location":10,"defines":["USE_INSTANCING","CC_USE_LIGHTMAP"]},{"name":"a_localShadowBias","format":21,"isInstanced":true,"location":11,"defines":["USE_INSTANCING","CC_RECEIVE_SHADOW"]},{"name":"a_dyn_batch_id","format":11,"location":12,"defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"a_vertexId","format":11,"location":13,"defines":["CC_USE_MORPH"]},{"name":"a_texCoord1","format":21,"location":14,"defines":[]}],"varyings":[{"name":"v_uv","type":14,"count":1,"stageFlags":17,"location":0,"defines":[]},{"name":"v_uv1","type":14,"count":1,"stageFlags":17,"location":1,"defines":[]},{"name":"v_worldPos","type":16,"count":1,"stageFlags":17,"location":2,"defines":[]},{"name":"v_clip_depth","type":13,"count":1,"stageFlags":17,"location":3,"defines":[]}],"fragColors":[{"name":"cc_FragColor","typename":"vec4","type":16,"count":1,"stageFlags":16,"location":0,"defines":[]}],"glsl4":{"vert":"#extension GL_EXT_shader_explicit_arithmetic_types_int32: require\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nlayout(location = 0) in vec3 a_position;\nlayout(location = 1) in vec3 a_normal;\nlayout(location = 2) in vec2 a_texCoord;\nlayout(location = 3) in vec4 a_tangent;\n#if CC_USE_SKINNING\n    layout(location = 4) in u32vec4 a_joints;\n  layout(location = 5) in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    layout(location = 6) in highp vec4 a_jointAnimInfo;\n  #endif\n  layout(location = 7) in vec4 a_matWorld0;\n  layout(location = 8) in vec4 a_matWorld1;\n  layout(location = 9) in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    layout(location = 10) in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    layout(location = 11) in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  layout(location = 12) in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    int getVertexId() {\n      return gl_VertexIndex;\n    }\n#endif\n#if CC_USE_MORPH\n  layout(set = 2, binding = 4) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    layout(set = 2, binding = 7) uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    layout(set = 2, binding = 8) uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    layout(set = 2, binding = 9) uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(set = 2, binding = 3) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(set = 2, binding = 2) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    layout(set = 2, binding = 6) uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(set = 2, binding = 3) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(set = 2, binding = 0) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(set = 2, binding = 0) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  layout(location = 14) in vec2 a_texCoord1;\n#endif\nlayout(location = 0) out vec2 v_uv;\nlayout(location = 1) out vec2 v_uv1;\nlayout(location = 2) out vec4 v_worldPos;\nlayout(location = 3) out float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(set = 1, binding = 0) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nlayout(set = 0, binding = 0) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(set = 0, binding = 1) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(set = 0, binding = 2) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(set = 2, binding = 0) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  layout(set = 0, binding = 3) uniform highp sampler2D cc_shadowMap;\n  layout(set = 0, binding = 5) uniform highp sampler2D cc_spotLightingMap;\n#endif\nlayout(location = 0) in vec2 v_uv;\nlayout(location = 1) in vec2 v_uv1;\nlayout(location = 2) in vec4 v_worldPos;\nlayout(location = 3) in float v_clip_depth;\n#if USE_ALBEDO_MAP\n  layout(set = 1, binding = 1) uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  layout(set = 1, binding = 2) uniform sampler2D transparencyMap;\n#endif\nvec4 frag () {\n  vec4 baseColor = diffuseColor;\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, TEXTURE_UV);\n    baseColor *= texColor;\n  #endif\n  #if USE_TRANSPARENCY_MAP\n    baseColor.a = texture(transparencyMap, TEXTURE_UV).a * transparencyFactor;\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.a < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl3":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nin vec3 a_position;\nin vec3 a_normal;\nin vec2 a_texCoord;\nin vec4 a_tangent;\n#if CC_USE_SKINNING\n    in vec4 a_joints;\n  in vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    in highp vec4 a_jointAnimInfo;\n  #endif\n  in vec4 a_matWorld0;\n  in vec4 a_matWorld1;\n  in vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    in vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    in vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  in float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    in float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  layout(std140) uniform CCMorph {\n    vec4 cc_displacementWeights[15];\n    vec4 cc_displacementTextureInfo;\n  };\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int pixelIndex) {\n        ivec2 texSize = textureSize(tex, 0);\n        return texelFetch(tex, ivec2(pixelIndex % texSize.x, pixelIndex / texSize.x), 0);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture(tex, x)),\n        decode32(texture(tex, y)),\n        decode32(texture(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    layout(std140) uniform CCSkinningTexture {\n      highp vec4 cc_jointTextureInfo;\n    };\n    layout(std140) uniform CCSkinningAnimation {\n      highp vec4 cc_jointAnimInfo;\n    };\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    layout(std140) uniform CCSkinning {\n      highp vec4 cc_joints[30 * 3];\n    };\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    layout(std140) uniform CCLocalBatched {\n      highp mat4 cc_matWorlds[10];\n    };\n  #else\n    layout(std140) uniform CCLocal {\n      highp mat4 cc_matWorld;\n      highp mat4 cc_matWorldIT;\n      highp vec4 cc_lightingMapUVParam;\n      highp vec4 cc_localShadowBias;\n    };\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  in vec2 a_texCoord1;\n#endif\nout vec2 v_uv;\nout vec2 v_uv1;\nout vec4 v_worldPos;\nout float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\nlayout(std140) uniform Constants {\n  vec4 tilingOffset;\n  vec4 albedo;\n  vec4 albedoScaleAndCutoff;\n  vec4  diffuseColor;\n  vec4  specularColor;\n  vec4  emissive;\n  float alphaThreshold;\n  float shininessExponent;\n  float glossiness;\n  float metallic;\n  float normalScale;\n  float transparencyFactor;\n  float diffuseFactor;\n  float specularFactor;\n};\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nlayout(std140) uniform CCGlobal {\n  highp   vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_nativeSize;\n};\nlayout(std140) uniform CCCamera {\n  highp   mat4 cc_matView;\n  highp   mat4 cc_matViewInv;\n  highp   mat4 cc_matProj;\n  highp   mat4 cc_matProjInv;\n  highp   mat4 cc_matViewProj;\n  highp   mat4 cc_matViewProjInv;\n  highp   vec4 cc_cameraPos;\n  mediump vec4 cc_screenScale;\n  mediump vec4 cc_exposure;\n  mediump vec4 cc_mainLitDir;\n  mediump vec4 cc_mainLitColor;\n  mediump vec4 cc_ambientSky;\n  mediump vec4 cc_ambientGround;\n  mediump vec4 cc_fogColor;\n  mediump vec4 cc_fogBase;\n  mediump vec4 cc_fogAdd;\n  mediump vec4 cc_nearFar;\n  mediump vec4 cc_viewPort;\n};\nlayout(std140) uniform CCShadow {\n  highp mat4 cc_matLightPlaneProj;\n  highp mat4 cc_matLightView;\n  highp mat4 cc_matLightViewProj;\n  highp vec4 cc_shadowInvProjDepthInfo;\n  highp vec4 cc_shadowProjDepthInfo;\n  highp vec4 cc_shadowProjInfo;\n  mediump vec4 cc_shadowNFLSInfo;\n  mediump vec4 cc_shadowWHPBInfo;\n  mediump vec4 cc_shadowLPNNInfo;\n  lowp vec4 cc_shadowColor;\n  mediump vec4 cc_planarNDInfo;\n};\nlayout(std140) uniform CCLocal {\n  highp mat4 cc_matWorld;\n  highp mat4 cc_matWorldIT;\n  highp vec4 cc_lightingMapUVParam;\n  highp vec4 cc_localShadowBias;\n};\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nin vec2 v_uv;\nin vec2 v_uv1;\nin vec4 v_worldPos;\nin float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\nvec4 frag () {\n  vec4 baseColor = diffuseColor;\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture(albedoMap, TEXTURE_UV);\n    baseColor *= texColor;\n  #endif\n  #if USE_TRANSPARENCY_MAP\n    baseColor.a = texture(transparencyMap, TEXTURE_UV).a * transparencyFactor;\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.a < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nlayout(location = 0) out vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nhighp float decode32 (highp vec4 rgba) {\n  rgba = rgba * 255.0;\n  highp float Sign = 1.0 - (step(128.0, (rgba[3]) + 0.5)) * 2.0;\n  highp float Exponent = 2.0 * (mod(float(int((rgba[3]) + 0.5)), 128.0)) + (step(128.0, (rgba[2]) + 0.5)) - 127.0;\n  highp float Mantissa = (mod(float(int((rgba[2]) + 0.5)), 128.0)) * 65536.0 + rgba[1] * 256.0 + rgba[0] + 8388608.0;\n  return Sign * exp2(Exponent - 23.0) * Mantissa;\n}\nstruct StandardVertInput {\n  highp vec4 position;\n  vec3 normal;\n  vec4 tangent;\n};\nattribute vec3 a_position;\nattribute vec3 a_normal;\nattribute vec2 a_texCoord;\nattribute vec4 a_tangent;\n#if CC_USE_SKINNING\n    attribute vec4 a_joints;\n  attribute vec4 a_weights;\n#endif\n#if USE_INSTANCING\n  #if CC_USE_BAKED_ANIMATION\n    attribute highp vec4 a_jointAnimInfo;\n  #endif\n  attribute vec4 a_matWorld0;\n  attribute vec4 a_matWorld1;\n  attribute vec4 a_matWorld2;\n  #if CC_USE_LIGHTMAP\n    attribute vec4 a_lightingMapUVParam;\n  #endif\n  #if CC_RECEIVE_SHADOW\n    attribute vec2 a_localShadowBias;\n  #endif\n#elif USE_BATCHING\n  attribute float a_dyn_batch_id;\n#endif\n#if CC_USE_MORPH\n    attribute float a_vertexId;\n    int getVertexId() {\n      return int(a_vertexId);\n    }\n#endif\n#if CC_USE_MORPH\n  uniform vec4 cc_displacementWeights[15];\n  uniform vec4 cc_displacementTextureInfo;\n  vec2 getPixelLocation(vec2 textureResolution, int pixelIndex) {\n    float pixelIndexF = float(pixelIndex);\n    float x = mod(pixelIndexF, textureResolution.x);\n    float y = floor(pixelIndexF / textureResolution.x);\n    return vec2(x, y);\n  }\n  vec2 getPixelCoordFromLocation(vec2 location, vec2 textureResolution) {\n    return (vec2(location.x, location.y) + .5) / textureResolution;\n  }\n  #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n        int pixelIndex = elementIndex;\n        vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n        vec2 uv = getPixelCoordFromLocation(location, cc_displacementTextureInfo.xy);\n        return texture2D(tex, uv);\n      }\n  #else\n    vec4 fetchVec3ArrayFromTexture(sampler2D tex, int elementIndex) {\n      int pixelIndex = elementIndex * 4;\n      vec2 location = getPixelLocation(cc_displacementTextureInfo.xy, pixelIndex);\n      vec2 x = getPixelCoordFromLocation(location + vec2(0.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 y = getPixelCoordFromLocation(location + vec2(1.0, 0.0), cc_displacementTextureInfo.xy);\n      vec2 z = getPixelCoordFromLocation(location + vec2(2.0, 0.0), cc_displacementTextureInfo.xy);\n      return vec4(\n        decode32(texture2D(tex, x)),\n        decode32(texture2D(tex, y)),\n        decode32(texture2D(tex, z)),\n        1.0\n      );\n    }\n  #endif\n  float getDisplacementWeight(int index) {\n    int quot = index / 4;\n    int remainder = index - quot * 4;\n    if (remainder == 0) {\n      return cc_displacementWeights[quot].x;\n    } else if (remainder == 1) {\n      return cc_displacementWeights[quot].y;\n    } else if (remainder == 2) {\n      return cc_displacementWeights[quot].z;\n    } else {\n      return cc_displacementWeights[quot].w;\n    }\n  }\n  vec3 getVec3DisplacementFromTexture(sampler2D tex, int vertexIndex) {\n  #if CC_MORPH_PRECOMPUTED\n    return fetchVec3ArrayFromTexture(tex, vertexIndex).rgb;\n  #else\n    vec3 result = vec3(0, 0, 0);\n    int nVertices = int(cc_displacementTextureInfo.z);\n    for (int iTarget = 0; iTarget < CC_MORPH_TARGET_COUNT; ++iTarget) {\n      result += (fetchVec3ArrayFromTexture(tex, nVertices * iTarget + vertexIndex).rgb * getDisplacementWeight(iTarget));\n    }\n    return result;\n  #endif\n  }\n  #if CC_MORPH_TARGET_HAS_POSITION\n    uniform sampler2D cc_PositionDisplacements;\n    vec3 getPositionDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_PositionDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    uniform sampler2D cc_NormalDisplacements;\n    vec3 getNormalDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_NormalDisplacements, vertexId);\n    }\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    uniform sampler2D cc_TangentDisplacements;\n    vec3 getTangentDisplacement(int vertexId) {\n      return getVec3DisplacementFromTexture(cc_TangentDisplacements, vertexId);\n    }\n  #endif\n  void applyMorph (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    int vertexId = getVertexId();\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_NORMAL\n    normal.xyz = normal.xyz + getNormalDisplacement(vertexId);\n  #endif\n  #if CC_MORPH_TARGET_HAS_TANGENT\n    tangent.xyz = tangent.xyz + getTangentDisplacement(vertexId);\n  #endif\n  }\n  void applyMorph (inout vec4 position) {\n  #if CC_MORPH_TARGET_HAS_POSITION\n    position.xyz = position.xyz + getPositionDisplacement(getVertexId());\n  #endif\n  }\n#endif\n#if CC_USE_SKINNING\n  #if CC_USE_BAKED_ANIMATION\n    uniform highp vec4 cc_jointTextureInfo;\n    uniform highp vec4 cc_jointAnimInfo;\n    uniform highp sampler2D cc_jointTexture;\n    void CCGetJointTextureCoords(float pixelsPerJoint, float jointIdx, out highp float x, out highp float y, out highp float invSize)\n    {\n      #if USE_INSTANCING\n        highp float temp = pixelsPerJoint * (a_jointAnimInfo.x * a_jointAnimInfo.y + jointIdx) + a_jointAnimInfo.z;\n      #else\n        highp float temp = pixelsPerJoint * (cc_jointAnimInfo.x * cc_jointTextureInfo.y + jointIdx) + cc_jointTextureInfo.z;\n      #endif\n      invSize = cc_jointTextureInfo.w;\n      highp float tempY = floor(temp * invSize);\n      x = floor(temp - tempY * cc_jointTextureInfo.x);\n      y = (tempY + 0.5) * invSize;\n    }\n  #else\n    uniform highp vec4 cc_joints[90];\n  #endif\n  #if CC_USE_BAKED_ANIMATION\n    #if CC_DEVICE_SUPPORT_FLOAT_TEXTURE\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(3.0, i, x, y, invSize);\n        vec4 v1 = texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y));\n        vec4 v2 = texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y));\n        vec4 v3 = texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y));\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #else\n      mat4 getJointMatrix (float i) {\n        highp float x, y, invSize;\n        CCGetJointTextureCoords(12.0, i, x, y, invSize);\n        vec4 v1 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 0.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 1.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 2.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 3.5) * invSize, y)))\n        );\n        vec4 v2 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 4.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 5.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 6.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 7.5) * invSize, y)))\n        );\n        vec4 v3 = vec4(\n          decode32(texture2D(cc_jointTexture, vec2((x + 8.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 9.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 10.5) * invSize, y))),\n          decode32(texture2D(cc_jointTexture, vec2((x + 11.5) * invSize, y)))\n        );\n        return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n      }\n    #endif\n  #else\n    mat4 getJointMatrix (float i) {\n      int idx = int(i);\n      vec4 v1 = cc_joints[idx * 3];\n      vec4 v2 = cc_joints[idx * 3 + 1];\n      vec4 v3 = cc_joints[idx * 3 + 2];\n      return mat4(vec4(v1.xyz, 0.0), vec4(v2.xyz, 0.0), vec4(v3.xyz, 0.0), vec4(v1.w, v2.w, v3.w, 1.0));\n    }\n  #endif\n  mat4 skinMatrix () {\n    vec4 joints = vec4(a_joints);\n    return getJointMatrix(joints.x) * a_weights.x\n         + getJointMatrix(joints.y) * a_weights.y\n         + getJointMatrix(joints.z) * a_weights.z\n         + getJointMatrix(joints.w) * a_weights.w;\n  }\n  void CCSkin (inout vec4 position) {\n    mat4 m = skinMatrix();\n    position = m * position;\n  }\n  void CCSkin (inout vec4 position, inout vec3 normal, inout vec4 tangent) {\n    mat4 m = skinMatrix();\n    position = m * position;\n    normal = (m * vec4(normal, 0.0)).xyz;\n    tangent.xyz = (m * vec4(tangent.xyz, 0.0)).xyz;\n  }\n#endif\nvoid CCVertInput(inout StandardVertInput In)\n{\n    In.position = vec4(a_position, 1.0);\n    In.normal = a_normal;\n    In.tangent = a_tangent;\n  #if CC_USE_MORPH\n    applyMorph(In.position, In.normal, In.tangent);\n  #endif\n  #if CC_USE_SKINNING\n    CCSkin(In.position, In.normal, In.tangent);\n  #endif\n}\n#if !USE_INSTANCING\n  #if USE_BATCHING\n    uniform highp mat4 cc_matWorlds[10];\n  #else\n    uniform highp mat4 cc_matWorld;\n  uniform highp mat4 cc_matWorldIT;\n  #endif\n#endif\nvoid CCGetWorldMatrixFull(out mat4 matWorld, out mat4 matWorldIT)\n{\n  #if USE_INSTANCING\n    matWorld = mat4(\n      vec4(a_matWorld0.xyz, 0.0),\n      vec4(a_matWorld1.xyz, 0.0),\n      vec4(a_matWorld2.xyz, 0.0),\n      vec4(a_matWorld0.w, a_matWorld1.w, a_matWorld2.w, 1.0)\n    );\n    matWorldIT = matWorld;\n  #elif USE_BATCHING\n    matWorld = cc_matWorlds[int(a_dyn_batch_id)];\n    matWorldIT = matWorld;\n  #else\n    matWorld = cc_matWorld;\n    matWorldIT = cc_matWorldIT;\n  #endif\n}\n    uniform vec4 tilingOffset;\nuniform highp mat4 cc_matLightViewProj;\n#if HAS_SECOND_UV || CC_USE_LIGHTMAP\n  attribute vec2 a_texCoord1;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\nvec4 vert () {\n  StandardVertInput In;\n  CCVertInput(In);\n  mat4 matWorld, matWorldIT;\n  CCGetWorldMatrixFull(matWorld, matWorldIT);\n  v_worldPos = matWorld * In.position;\n  vec4 clipPos = cc_matLightViewProj * v_worldPos;\n  v_uv = a_texCoord * tilingOffset.xy + tilingOffset.zw;\n  #if HAS_SECOND_UV\n    v_uv1 = a_texCoord1 * tilingOffset.xy + tilingOffset.zw;\n  #endif\n  v_clip_depth = clipPos.z / clipPos.w * 0.5 + 0.5;\n  return clipPos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n   uniform vec4 albedoScaleAndCutoff;\n   uniform vec4 diffuseColor;\n   uniform float transparencyFactor;\nvec4 packDepthToRGBA (float depth) {\n  vec4 ret = vec4(1.0, 255.0, 65025.0, 16581375.0) * depth;\n  ret = fract(ret);\n  ret -= vec4(ret.yzw, 0.0) / 255.0;\n  return ret;\n}\n#define QUATER_PI         0.78539816340\n#define HALF_PI           1.57079632679\n#define PI                3.14159265359\n#define PI2               6.28318530718\n#define PI4               12.5663706144\n#define INV_QUATER_PI     1.27323954474\n#define INV_HALF_PI       0.63661977237\n#define INV_PI            0.31830988618\n#define INV_PI2           0.15915494309\n#define INV_PI4           0.07957747155\n#define EPSILON           1e-6\n#define EPSILON_LOWP      1e-4\n#define LOG2              1.442695\n#define EXP_VALUE         2.71828183f\n#define FP_MAX            65504.0\n#define FP_SCALE          0.0009765625\n#define FP_SCALE_INV      1024.0\n#define GRAY_VECTOR       vec3(0.299, 0.587, 0.114)\nuniform highp mat4 cc_matLightView;\n  uniform mediump vec4 cc_shadowNFLSInfo;\n  uniform mediump vec4 cc_shadowLPNNInfo;\nfloat CCGetLinearDepthFromViewSpace(vec3 viewPos) {\n  float dist = length(viewPos);\n  return (dist - cc_shadowNFLSInfo.x) / (cc_shadowNFLSInfo.y - cc_shadowNFLSInfo.x);\n}\nfloat CCGetLinearDepth(vec3 worldPos) {\n  vec4 viewStartPos = cc_matLightView * vec4(worldPos.xyz, 1.0);\n  return CCGetLinearDepthFromViewSpace(viewStartPos.xyz);\n}\n#if CC_RECEIVE_SHADOW\n  uniform highp sampler2D cc_shadowMap;\n  uniform highp sampler2D cc_spotLightingMap;\n#endif\nvarying vec2 v_uv;\nvarying vec2 v_uv1;\nvarying vec4 v_worldPos;\nvarying float v_clip_depth;\n#if USE_ALBEDO_MAP\n  uniform sampler2D albedoMap;\n#endif\n#if USE_TRANSPARENCY_MAP\n  uniform sampler2D transparencyMap;\n#endif\nvec4 frag () {\n  vec4 baseColor = diffuseColor;\n  #if USE_ALBEDO_MAP\n    vec4 texColor = texture2D(albedoMap, TEXTURE_UV);\n    baseColor *= texColor;\n  #endif\n  #if USE_TRANSPARENCY_MAP\n    baseColor.a = texture2D(transparencyMap, TEXTURE_UV).a * transparencyFactor;\n  #endif\n  #if USE_ALPHA_TEST\n    if (baseColor.a < albedoScaleAndCutoff.w) discard;\n  #endif\n  if(cc_shadowLPNNInfo.x > 0.000001 && cc_shadowLPNNInfo.x < 1.999999) {\n    if (cc_shadowNFLSInfo.z > 0.000001) {\n      return vec4(CCGetLinearDepth(v_worldPos.xyz), 1.0, 1.0, 1.0);\n    }\n  }\n  if (cc_shadowLPNNInfo.y > 0.000001) {\n    return packDepthToRGBA(v_clip_depth);\n  }\n  return vec4(v_clip_depth, 1.0, 1.0, 1.0);\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCShadow","defines":[]},{"name":"CCGlobal","defines":[]},{"name":"CCCamera","defines":[]}],"samplerTextures":[{"name":"cc_shadowMap","defines":["CC_RECEIVE_SHADOW"]},{"name":"cc_spotLightingMap","defines":["CC_RECEIVE_SHADOW"]}],"buffers":[],"images":[]},"locals":{"blocks":[{"name":"CCMorph","defines":["CC_USE_MORPH"]},{"name":"CCSkinningTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinningAnimation","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]},{"name":"CCSkinning","defines":["CC_USE_SKINNING","!CC_USE_BAKED_ANIMATION"]},{"name":"CCLocalBatched","defines":["!USE_INSTANCING","USE_BATCHING"]},{"name":"CCLocal","defines":["!USE_INSTANCING","!USE_BATCHING"]}],"samplerTextures":[{"name":"cc_PositionDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_POSITION"]},{"name":"cc_NormalDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_NORMAL"]},{"name":"cc_TangentDisplacements","defines":["CC_USE_MORPH","CC_MORPH_TARGET_HAS_TANGENT"]},{"name":"cc_jointTexture","defines":["CC_USE_SKINNING","CC_USE_BAKED_ANIMATION"]}],"buffers":[],"images":[]},"statistics":{"CC_EFFECT_USED_VERTEX_UNIFORM_VECTORS":192,"CC_EFFECT_USED_FRAGMENT_UNIFORM_VECTORS":83}},"defines":[{"name":"USE_INSTANCING","type":"boolean","defines":[],"editor":{"elevated":true}},{"name":"USE_BATCHING","type":"boolean","defines":["!USE_INSTANCING"],"editor":{"elevated":true}},{"name":"CC_USE_SKINNING","type":"boolean","defines":[]},{"name":"CC_USE_BAKED_ANIMATION","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_USE_LIGHTMAP","type":"boolean","defines":["USE_INSTANCING"]},{"name":"CC_RECEIVE_SHADOW","type":"boolean","defines":[]},{"name":"CC_USE_MORPH","type":"boolean","defines":[]},{"name":"CC_MORPH_TARGET_COUNT","type":"number","defines":["CC_USE_MORPH"],"range":[2,8]},{"name":"CC_MORPH_PRECOMPUTED","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_POSITION","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_NORMAL","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"CC_MORPH_TARGET_HAS_TANGENT","type":"boolean","defines":["CC_USE_MORPH"]},{"name":"HAS_SECOND_UV","type":"boolean","defines":[]},{"name":"TEXTURE_UV","type":"string","defines":[],"options":["v_uv","v_uv1"]},{"name":"USE_ALBEDO_MAP","type":"boolean","defines":[]},{"name":"USE_TRANSPARENCY_MAP","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]}]}],[{"name":"opaque","passes":[{"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","properties":{"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"DiffuseMap"},"handleInfo":["albedoMap",0,28]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"DiffuseColor","type":"color"},"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"editor":{"displayName":"diffuseFactor"},"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveMap":{"value":"grey","type":28},"shininessExponentMap":{"value":"grey","type":28,"editor":{"parent":"!HAS_EXPORTED_GLOSSINESS"}},"shininessExponent":{"type":13,"value":[100],"editor":{"parent":"!HAS_EXPORTED_GLOSSINESS"}},"specularColor":{"linear":true,"type":16,"value":[0,0,0,0],"editor":{"displayName":"SpecularColor","type":"color"}},"specularMap":{"value":"grey","type":28,"editor":{"parent":"!HAS_EXPORTED_METALLIC"}},"specularFactor":{"type":13,"value":[1],"editor":{"parent":"!HAS_EXPORTED_METALLIC"}},"transparencyMap":{"value":"grey","type":28,"editor":{"displayName":"TransparencyMap"}},"transparencyFactor":{"type":13,"value":[0]},"tilingOffset":{"type":16,"value":[1,1,0,0]},"normalStrength":{"type":13,"value":[1],"editor":{"displayName":"bumpFactor","parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,5]},"handleInfo":["normalScale",0,13]},"normalMap":{"value":"normal","type":28},"glossiness":{"type":13,"value":[0],"editor":{"parent":"HAS_EXPORTED_GLOSSINESS","slide":true,"step":0.001,"range":[0,1]}},"metallic":{"type":13,"value":[0],"editor":{"parent":"HAS_EXPORTED_METALLIC","slide":true,"step":0.001,"range":[0,1]}},"metallicMap":{"value":"grey","type":28,"editor":{"parent":"HAS_EXPORTED_METALLIC"}},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}},"diffuseColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"diffuseFactor":{"type":13,"editor":{"visible":false,"deprecated":true},"value":[1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0,0,0,0.5]},"normalScale":{"type":13,"editor":{"visible":false,"deprecated":true},"value":[1]}}},{"phase":"forward-add","propertyIndex":0,"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"dcc/imported-specular-glossiness|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]},{"name":"transparent","passes":[{"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORCE_FORWARD_SHADING":true},"blendState":{"targets":[{"blend":true,"blendSrc":2,"blendDst":4,"blendDstAlpha":4}]},"depthStencilState":{"depthTest":true,"depthWrite":false},"properties":{"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"DiffuseMap"},"handleInfo":["albedoMap",0,28]},"mainColor":{"linear":true,"type":16,"value":[1,1,1,1],"editor":{"displayName":"DiffuseColor","type":"color"},"handleInfo":["diffuseColor",0,16]},"albedoScale":{"type":13,"value":[1],"editor":{"displayName":"diffuseFactor"},"handleInfo":["diffuseFactor",0,13]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"emissive":{"linear":true,"type":16,"value":[0,0,0,1],"editor":{"type":"color"}},"emissiveMap":{"value":"grey","type":28},"shininessExponentMap":{"value":"grey","type":28,"editor":{"parent":"!HAS_EXPORTED_GLOSSINESS"}},"shininessExponent":{"type":13,"value":[100],"editor":{"parent":"!HAS_EXPORTED_GLOSSINESS"}},"specularColor":{"linear":true,"type":16,"value":[0,0,0,0],"editor":{"displayName":"SpecularColor","type":"color"}},"specularMap":{"value":"grey","type":28,"editor":{"parent":"!HAS_EXPORTED_METALLIC"}},"specularFactor":{"type":13,"value":[1],"editor":{"parent":"!HAS_EXPORTED_METALLIC"}},"transparencyMap":{"value":"grey","type":28,"editor":{"displayName":"TransparencyMap"}},"transparencyFactor":{"type":13,"value":[0]},"tilingOffset":{"type":16,"value":[1,1,0,0]},"normalStrength":{"type":13,"value":[1],"editor":{"displayName":"bumpFactor","parent":"USE_NORMAL_MAP","slide":true,"step":0.001,"range":[0,5]},"handleInfo":["normalScale",0,13]},"normalMap":{"value":"normal","type":28},"glossiness":{"type":13,"value":[0],"editor":{"parent":"HAS_EXPORTED_GLOSSINESS","slide":true,"step":0.001,"range":[0,1]}},"metallic":{"type":13,"value":[0],"editor":{"parent":"HAS_EXPORTED_METALLIC","slide":true,"step":0.001,"range":[0,1]}},"metallicMap":{"value":"grey","type":28,"editor":{"parent":"HAS_EXPORTED_METALLIC"}},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}},"diffuseColor":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"diffuseFactor":{"type":13,"editor":{"visible":false,"deprecated":true},"value":[1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[0,0,0,0.5]},"normalScale":{"type":13,"editor":{"visible":false,"deprecated":true},"value":[1]}}},{"phase":"forward-add","propertyIndex":0,"program":"dcc/imported-specular-glossiness|standard-vs|standard-fs","embeddedMacros":{"CC_FORWARD_ADD":true},"blendState":{"targets":[{"blend":true,"blendSrc":1,"blendDst":1,"blendSrcAlpha":0,"blendDstAlpha":1}]},"depthStencilState":{"depthFunc":2,"depthTest":true,"depthWrite":false}},{"phase":"shadow-caster","propertyIndex":0,"program":"dcc/imported-specular-glossiness|shadow-caster-vs:vert|shadow-caster-fs:frag","rasterizerState":{"cullMode":1},"properties":{"tilingOffset":{"type":16,"value":[1,1,0,0]},"mainColor":{"type":16,"value":[1,1,1,1],"editor":{"displayName":"Albedo","type":"color"},"handleInfo":["albedo",0,16]},"albedoScale":{"type":15,"value":[1,1,1],"handleInfo":["albedoScaleAndCutoff",0,15]},"alphaThreshold":{"type":13,"value":[0.5],"editor":{"parent":"USE_ALPHA_TEST"},"handleInfo":["albedoScaleAndCutoff",3,13]},"mainTexture":{"value":"grey","type":28,"editor":{"displayName":"AlbedoMap"},"handleInfo":["albedoMap",0,28]},"albedo":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,1]},"albedoScaleAndCutoff":{"type":16,"editor":{"visible":false,"deprecated":true},"value":[1,1,1,0.5]},"albedoMap":{"type":28,"value":"grey","editor":{"visible":false,"deprecated":true}}}}]}]]],0,0,[],[],[]],[[[112,"3",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainTexture",6,0]],11]]],0,0,[0,0],[30,12],[73,25]],[[[112,"1",[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{}],[[[{},"mainColor",8,[4,2133178879]]],11]]],0,0,[0],[12],[34]],[[[50,"P-Cargo-0"],[185,"P-Cargo-0",[[-11,-12,[80,"Events",-14,[2,"d95EadoVJHU5W5txftTQiE",-13,0]],-15],1,1,4,1],[[-6,[55,-7,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-8,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-9,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-10,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],1,4,4,4,4],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[362,"Art",1,[[-17,-18,-19,-20,[89,"Spawn Enemies Position",-21,[2,"92C2ihYrZIh5C4P7PUymES",1,0],[1,0,0,0.334]]],1,1,1,1,4],[[88,true,-16,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[2,"4505kBZFlJebjm5k8fm2Li",1,0]],[35,"Scripts",1,[-22,-23,-24,-25,-26],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[46,"Movement",3,[-27],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,2,[29,"891ZPn4nZbPKViqxf9B2Lw",-29,[69,"de+ZzbaCVEz6dhmUt5BqpK",1,[[67,[4,["891ZPn4nZbPKViqxf9B2Lw"]],[[55,-28,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[28,"SM_Model",["_name"],[4,["891ZPn4nZbPKViqxf9B2Lw"]]],[22,["_lpos"],[4,["891ZPn4nZbPKViqxf9B2Lw"]],[1,0,0,0]],[22,["_lrot"],[4,["891ZPn4nZbPKViqxf9B2Lw"]],[3,0,0,0,1]],[22,["_euler"],[4,["891ZPn4nZbPKViqxf9B2Lw"]],[1,0,0,0]],[40,["_materials","0"],[4,["2bPtrJwrJaRbWH2ryoR9YV"]],3],[28,"SM_Model",["_name"],[4,["e0BhHAhhZUvI7kUr1l9BXG"]]]]],2]],[35,"VFX",2,[-30,-31,-32],[2,"86UwATuFRNZbAyv2wVMIuG",1,0]],[115,"Spawn Enemies",[[191,-34,[1,"2bbkspvNpEQ7+deqegYn6+"],-33]],[2,"ddPGPRhwNAzY8D82XoRcNi",1,0]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-42,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-41]]]],[[14,"P-HP-Bar",["_name"],-35],[10,["_lpos"],-36,[1,207,448.00000000000006,0]],[10,["_lrot"],-37,[3,0,0,0,1]],[10,["_euler"],-38,[1,0,0,0]],[14,"Art",["_name"],-39],[10,["_lpos"],-40,[1,0,0,0]]]],15]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Death_Erupt",6,[-43],[2,"21NlB1r8pKBImFR83LT4iO",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,10,[1,"0a7Eew0jpIUIR9RidHSUe2"],[4],[5],[3,0.4],[0],[0],[0],[0],[0],[0],[0],[3,0.16],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.3169642857142857],[13,0.4575892857142857,[4,4294938922]],[13,1,[4,4289817645]]],[[9,255,0.5736607142857143],[9,0,1]]]]],[31,[0]],[78,true,true,[111,2,2,[8,[0,1],[[6,2,0.02962962962962963,1.913888888888889,1.913888888888889],[11,2,1]]],[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-44],[26,5]],[59,"VFX_Death_Shards",6,[-45],[2,"1fo7ROk/xOrr70IbFR+gBj",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,12,[1,"7bAMDUeelEUoY5SQ3cQdyl"],[6],[5],[23,3,0.05,0.1],[0],[0],[23,3,3,5],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.3,0.8],[3,1],[0],[0],[[25,[23,3,5,7]]],[20,true,[16,1,[33,[[43,0.16964285714285715],[13,0.33035714285714285,[4,4294938368]],[13,0.7991071428571429,[4,4284748062]]],[[9,255,0.23883928571428573],[9,0,1]]]]],[109,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-8.726646259971647,8.726646259971647]],[123,true,2,2,[0],[0]],[19,[0],[0],[5],[5],-46],[26,7]],[59,"VFX_Spawn",6,[-47,-48],[2,"a5209nuxBHwqsEgTEDCA32",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[46,"HP Controller",3,[-49],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[139,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-50],[7,"cc.ParticleSystem","play",10],[7,"cc.ParticleSystem","play",12],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",4],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",5],[7,"71b59j50pJOQYyfqjE0LpJs","spawnEnemies",7]]],[54,"On Death VFX Finished",3,[[96,-51,[1,"73y0T1JFxHvY0QNTDhOJ8F"],[11,13],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"f9EjW3+g5LA7yjyBUe+OwC",1,0]],[105,"Temp-Model",false,2,[[79,"Sphere<ModelComponent>",-52,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",2,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,14,[1,"4bSBlWxxND96ByqcEj9B6T"],[8],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-53],[26,9]],[97,0.3,false,14,[1,"a0cTEPTtpDGIwVZ5Q2vfh+"],[[10,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-54],[26,11]],[104,4,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[35,"Specials",3,[7],[2,"c3O8NYyeZLHIqWEOBVwkGI",1,0]],[233,"Cargo-0",1,1,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",4],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",15],[7,"71b59j50pJOQYyfqjE0LpJs","initialize",7]],16,22],[234,[1,"c3ae4MCbxK8YUgB7h5tdE2"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",4]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",4]]],[46,"Stun",3,[25],[2,"dac7ZgdvtBBILxt/AUoxlG",1,0]],[35,"UI",1,[8],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,5,0,-2,8,0,3,8,0,13,16,0,2,1,0,-1,24,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,3,0,2,1,0,7,1,0,-4,27,0,0,2,0,-1,18,0,-2,19,0,-3,5,0,-4,6,0,7,2,0,-1,4,0,-2,15,0,-3,26,0,-4,17,0,-5,23,0,-1,22,0,0,5,0,2,5,0,-1,10,0,-2,12,0,-3,14,0,38,24,0,0,7,0,1,9,0,1,9,0,1,9,0,1,9,0,1,28,0,1,28,0,17,19,0,2,8,0,-1,11,0,4,11,0,-1,13,0,4,13,0,-1,20,0,-2,21,0,-1,16,0,3,17,0,0,17,0,0,18,0,4,20,0,4,21,0,9,1,7,7,23,8,7,27,24,20,25,25,0,26,54],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,-2,18,8],[14,13,553,1,20,19,10,18,4,3,11,9,5,15,5,16]],[[[63,"SM_Terrain_01__0.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",2651114680,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,-1],"maxPosition",8,[1,0.5,0.5,0]]],-1],0,0,[],[],[]],[[[62],[47,"SM_Terrain_01",[-2],[2,"41a5+qz5hYnIPWfy1FW12A",-1,0]],[53,"SM_Terrain_01",1,[[52,-3,[1,"acGj9fHzdeWYNWvKyhsFEP"],[0],[34],1]],[2,"beOI3ZOflcHa6cx5C+09BJ",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[554,555]],[[[63,"SM_Terrain_02__0.001",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[57,".bin",2188122872,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":1152,"length":144,"count":36,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":1152,"count":24,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.5,-0.5,-1],"maxPosition",8,[1,0.5,0.5,0]]],-1],0,0,[],[],[]],[[[62],[47,"SM_Terrain_02",[-2],[2,"c2ITubO5BY0ZR5scOChS6x",-1,0]],[53,"SM_Terrain_02",1,[[52,-3,[1,"018VhKq6ZVZbAm171nxoLE"],[0],[34],1]],[2,"e2kf+C7V5c1ruSk8xjP5ma",1,0],[3,4.329780375814312e-17,0.7071067811865476,0.7071067811865476,4.329780375814312e-17],[1,-90.00000000000003,180,7.016709451900449e-15]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[556,557]],[[[57,".bin",900802491,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":960,"length":360,"count":90,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":960,"count":20,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.48000001907348633,-0.47999992966651917,-0.5],"maxPosition",8,[1,0.47999992966651917,0.48000001907348633,0.699999988079071]]],-1],0,0,[],[],[]],[[[50,"P-LaserTower-Beam-ElectronDischarger"],[47,"P-LaserTower-Beam-ElectronDischarger",[-2],[2,"c46/YsCPVOJYA4mWEpNYRx",-1,0]],[54,"Temp",1,[[295,-3,[1,"222iH/EhhPB7NCHRxT98+N"],[3,0.5],[5],0]],[2,"b5twpQgB9KKoMf5U6SpAil",1,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0],[42],[65]],[[[50,"P-Runner-0"],[125,"P-Runner-0",[[-16,-17,[80,"Events",-19,[2,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[156,"Runner-0",-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[55,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[164,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[2,"4505kBZFlJebjm5k8fm2Li",1,0]],[124,"Movement",[-26],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,2,[29,"d0adRU765c27WX41620vEc",-32,[69,"3cz+5HcTNKUK2p31mcJ1bm",1,[[67,[4,["d0adRU765c27WX41620vEc"]],[[55,-31,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[14,"SM_Model",["_name"],-27],[10,["_lpos"],-28,[1,0,0,0]],[10,["_lrot"],-29,[3,0,0,0,1]],[10,["_euler"],-30,[1,0,0,0]],[40,["_materials","0"],[4,["7dZSupN3RW26NRzewpcbRt"]],3],[28,"SM_Model",["_name"],[4,["98EZ57Gb1dMaZCZDdMJXKN"]]]]],2]],[35,"Scripts",1,[3,-33,-34,-35],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[4,["d0adRU765c27WX41620vEc"]],[35,"VFX",2,[-36,-37,-38],[2,"47XnFp0lhA+ZwJVUtsAwIG",1,0]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-46,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[14,"P-HP-Bar",["_name"],-39],[10,["_lpos"],-40,[1,207,448.00000000000006,0]],[10,["_lrot"],-41,[3,0,0,0,1]],[10,["_euler"],-42,[1,0,0,0]],[14,"Art",["_name"],-43],[10,["_lpos"],-44,[1,0,0,0]]]],15]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Death_Erupt",7,[-47],[2,"53E7LR5ftGDIs16fiVbUiD",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,10,[1,"3dgUxZBaNNRYOnzgS7mppU"],[4],[5],[3,0.4],[0],[0],[0],[0],[0],[0],[0],[3,0.16],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.3169642857142857],[13,0.4575892857142857,[4,4294938922]],[13,1,[4,4289817645]]],[[9,255,0.5736607142857143],[9,0,1]]]]],[31,[0]],[78,true,true,[111,2,2,[8,[0,1],[[6,2,0.02962962962962963,1.913888888888889,1.913888888888889],[11,2,1]]],[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-48],[26,5]],[59,"VFX_Death_Shards",7,[-49],[2,"45Yobpl+hPkKUOXFcJ6PKW",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,12,[1,"fbHfhg7FBEPatI1PyCUcy2"],[6],[5],[23,3,0.05,0.1],[0],[0],[23,3,3,5],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.3,0.8],[3,1],[0],[0],[[25,[23,3,5,7]]],[20,true,[16,1,[33,[[43,0.16964285714285715],[13,0.33035714285714285,[4,4294938368]],[13,0.7991071428571429,[4,4284748062]]],[[9,255,0.23883928571428573],[9,0,1]]]]],[109,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-8.726646259971647,8.726646259971647]],[123,true,2,2,[0],[0]],[19,[0],[0],[5],[5],-50],[26,7]],[59,"VFX_Spawn",7,[-51,-52],[2,"61OoH7rd5MLrg6nnisv1ts",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[46,"HP Controller",5,[-53],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[139,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[7,"cc.ParticleSystem","play",10],[7,"cc.ParticleSystem","play",12],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[54,"On Death VFX Finished",5,[[96,-55,[1,"10YxHsCVVPs7bieW/lsaMI"],[11,13],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"1aaOMv63VCIb3bFCg5rt7N",1,0]],[105,"Temp-Model",false,2,[[79,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",2,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,14,[1,"2crvuY90JDmKdjZBfXRLTh"],[8],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-57],[26,9]],[97,0.3,false,14,[1,"8dW2Qi0YlP/7uxhWv0k5l3"],[[10,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-58],[26,11]],[104,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[46,"Stun",5,[-59],[2,"a2KbPtmYVDHJlKprPfK2dF",1,0]],[117,23,[1,"f3I+5x8DtNWpsRFAN5q7fN"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[35,"UI",1,[8],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,3,8,0,13,16,0,2,1,0,20,24,0,27,22,0,28,16,0,3,3,0,3,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,2,1,0,7,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,6,0,1,6,0,1,6,0,1,6,0,0,4,0,2,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,17,19,0,2,8,0,-1,11,0,4,11,0,-1,13,0,4,13,0,-1,20,0,-2,21,0,-1,16,0,3,17,0,0,17,0,0,18,0,4,20,0,4,21,0,-1,24,0,9,1,3,7,5,8,7,25,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,-2,18,8],[14,13,558,1,20,19,10,18,4,3,11,9,5,15,5,16]],[[[50,"P-Stunner-1"],[125,"P-Stunner-1",[[-16,-17,[80,"Events",-19,[2,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[179,"Stunner-1",1,-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[55,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[151,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[2,"4505kBZFlJebjm5k8fm2Li",1,0],[1,1,1,1.1]],[124,"Movement",[-26],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,2,[29,"22NP+cD/5Tgoh+buCGMtgq",-32,[69,"e2uIc3Fv1A4qrgPG+WAd+U",1,[[67,[4,["22NP+cD/5Tgoh+buCGMtgq"]],[[55,-31,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[14,"SM_Model",["_name"],-27],[10,["_lpos"],-28,[1,0,0,0]],[10,["_lrot"],-29,[3,0,0,0,1]],[10,["_euler"],-30,[1,0,0,0]],[40,["_materials","0"],[4,["11T+cnA+pVrprAp+evER/v"]],3],[28,"SM_Model",["_name"],[4,["aecmakxK5ezJYcZJrdxRqp"]]]]],2]],[35,"Scripts",1,[3,-33,-34,-35],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[4,["22NP+cD/5Tgoh+buCGMtgq"]],[35,"VFX",2,[-36,-37,-38],[2,"18KTDx1/xOopizTMetkWja",1,0]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-46,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[14,"P-HP-Bar",["_name"],-39],[10,["_lpos"],-40,[1,207,448.00000000000006,0]],[10,["_lrot"],-41,[3,0,0,0,1]],[10,["_euler"],-42,[1,0,0,0]],[14,"Art",["_name"],-43],[10,["_lpos"],-44,[1,0,0,0]]]],15]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Death_Erupt",7,[-47],[2,"bcDYiGGsJGlJcBLJ6g+bSM",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,10,[1,"b4IiUfMFZNp5gjVHxjS5bf"],[4],[5],[3,0.4],[0],[0],[0],[0],[0],[0],[0],[3,0.16],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.3169642857142857],[13,0.4575892857142857,[4,4294938922]],[13,1,[4,4289817645]]],[[9,255,0.5736607142857143],[9,0,1]]]]],[31,[0]],[78,true,true,[111,2,2,[8,[0,1],[[6,2,0.02962962962962963,1.913888888888889,1.913888888888889],[11,2,1]]],[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-48],[26,5]],[59,"VFX_Death_Shards",7,[-49],[2,"9f7oH49lpIsLDuDlrioh86",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,12,[1,"a5wXUoFrBLbLHlfS3GqNSk"],[6],[5],[23,3,0.05,0.1],[0],[0],[23,3,3,5],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.3,0.8],[3,1],[0],[0],[[25,[23,3,5,7]]],[20,true,[16,1,[33,[[43,0.16964285714285715],[13,0.33035714285714285,[4,4294938368]],[13,0.7991071428571429,[4,4284748062]]],[[9,255,0.23883928571428573],[9,0,1]]]]],[109,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-8.726646259971647,8.726646259971647]],[123,true,2,2,[0],[0]],[19,[0],[0],[5],[5],-50],[26,7]],[59,"VFX_Spawn",7,[-51,-52],[2,"b05kSVRldJtazN9Iq14BbQ",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[46,"HP Controller",5,[-53],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[139,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[7,"cc.ParticleSystem","play",10],[7,"cc.ParticleSystem","play",12],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[54,"On Death VFX Finished",5,[[96,-55,[1,"cfRvE9HGVF3JcFwwHa0Gsb"],[11,13],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"6dL2SHH0xMPo4Cy1ozGBo2",1,0]],[105,"Temp-Model",false,2,[[79,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",2,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,14,[1,"6dYe4DZ+ZK5K7LGqQLTLyU"],[8],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-57],[26,9]],[97,0.3,false,14,[1,"1cNmIyv15KvKrr+mA1v+1s"],[[10,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-58],[26,11]],[104,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[46,"Stun",5,[-59],[2,"28wv4th1pNs6qDNkpOR9dx",1,0]],[117,23,[1,"92X5rq9oNDNouphSNFIziH"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[35,"UI",1,[8],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,3,8,0,13,16,0,2,1,0,20,24,0,27,22,0,28,16,0,3,3,0,3,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,2,1,0,7,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,6,0,1,6,0,1,6,0,1,6,0,0,4,0,2,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,17,19,0,2,8,0,-1,11,0,4,11,0,-1,13,0,4,13,0,-1,20,0,-2,21,0,-1,16,0,3,17,0,0,17,0,0,18,0,4,20,0,4,21,0,-1,24,0,9,1,3,7,5,8,7,25,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,-2,18,8],[14,13,559,1,20,19,10,18,4,3,11,9,5,15,5,16]],[[[50,"P-Crowder-1"],[125,"P-Crowder-1",[[-16,-17,[80,"Events",-19,[2,"d95EadoVJHU5W5txftTQiE",-18,0]],-20],1,1,4,1],[[156,"Crowder-1",-11,[1,"95OmLYxt5NrpFAw81Ndtci"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","initialize",-9],[7,"133b7ahIhlFXJe04KNJ+98c","initialize",-10]],-8,-7,-6],[55,-12,[1,"6a0xgfKuBH2blibok3kK7I"]],[93,true,0.25,-13,[1,"afUKI2VbJCAKqRAyFYA3b2"]],[101,4,4,-14,[1,"a2KY71qk9NFbvpXzMsHAS5"]],[102,true,-15,[1,"21zoW24zRLz64UYzoBgFzh"],[1,0.6,2,0.6]]],[86,"c46/YsCPVOJYA4mWEpNYRx",-5,0,[[74,["_uiFillbar"],-4,-3,[4,["75rpDrYFxOrpjPTC4qrQGD"]]]],[-1,-2]]],[151,"Art",1,[-22,-23,-24,-25],[[88,true,-21,[1,"16mUt5j0BPfLyhp6c95pwE"],[12,13],14]],[2,"4505kBZFlJebjm5k8fm2Li",1,0],[1,0.7,0.7,0.9]],[124,"Movement",[-26],[2,"aceiK/34ZKZ5Mjkk/O23pN",1,0]],[36,0,null,2,[29,"b72WmV0l9c1KqFhtvygc0y",-32,[69,"36wdFeI49FwKrFnMDERSbJ",1,[[67,[4,["b72WmV0l9c1KqFhtvygc0y"]],[[55,-31,[1,"d4QeRVvaVOb7jWtHWa0BXg"]]]]],[[14,"SM_Model",["_name"],-27],[10,["_lpos"],-28,[1,0,-0.03,0.125]],[10,["_lrot"],-29,[3,0,0,0,1]],[10,["_euler"],-30,[1,0,0,0]],[40,["_materials","0"],[4,["b3aDCHVaVYjbgLKMR2nL+J"]],3],[28,"SM_Model",["_name"],[4,["01qnpmKihVjaWNSQR8aYkQ"]]]]],2]],[35,"Scripts",1,[3,-33,-34,-35],[2,"51NBBUiaZEWpPO6WfvLtCd",1,0]],[4,["b72WmV0l9c1KqFhtvygc0y"]],[301,"VFX",2,[-36,-37,-38],[2,"85FNgEJ2JJa6EPB7xpSBrb",1,0],[1,1.4285714285714288,1.4285714285714288,1.1111111111111112]],[82,0,{},[29,"c46/YsCPVOJYA4mWEpNYRx",-46,[69,"6bKe4jflhIZ7FP8vUekJqr",1,[[67,[4,["84Ywt62DNL1o63TuorfGV8"]],[[103,[1,"ecuocrP7tMvp1uFKi8lekM"],-45]]]],[[14,"P-HP-Bar",["_name"],-39],[10,["_lpos"],-40,[1,207,448.00000000000006,0]],[10,["_lrot"],-41,[3,0,0,0,1]],[10,["_euler"],-42,[1,0,0,0]],[14,"Art",["_name"],-43],[10,["_lpos"],-44,[1,0,0,0]]]],15]],[4,["c46/YsCPVOJYA4mWEpNYRx"]],[59,"VFX_Death_Erupt",7,[-47],[2,"1dm51OcV9CR5vZYrSLHUOT",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,10,[1,"9dLYSX/cpAJ6yWyVdmaDAV"],[4],[5],[3,0.4],[0],[0],[0],[0],[0],[0],[0],[3,0.16],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.3169642857142857],[13,0.4575892857142857,[4,4294938922]],[13,1,[4,4289817645]]],[[9,255,0.5736607142857143],[9,0,1]]]]],[31,[0]],[78,true,true,[111,2,2,[8,[0,1],[[6,2,0.02962962962962963,1.913888888888889,1.913888888888889],[11,2,1]]],[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.4407407407407407,-3.39869281045752,-3.39869281045752]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-48],[26,5]],[59,"VFX_Death_Shards",7,[-49],[2,"033QYjsxpD55euiRCls+D2",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[60,1,false,false,12,[1,"75sUJK5mFPZql4NRrmp+L7"],[6],[5],[23,3,0.05,0.1],[0],[0],[23,3,3,5],[0],[0],[44,3,6.283185307179586],[0],[23,3,0.3,0.8],[3,1],[0],[0],[[25,[23,3,5,7]]],[20,true,[16,1,[33,[[43,0.16964285714285715],[13,0.33035714285714285,[4,4294938368]],[13,0.7991071428571429,[4,4284748062]]],[[9,255,0.23883928571428573],[9,0,1]]]]],[109,true,0,0.2,1,0.3490658503988659,[0],[1,90,0,0]],[49,[0],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[58,true,[0],[0],[23,3,-8.726646259971647,8.726646259971647]],[123,true,2,2,[0],[0]],[19,[0],[0],[5],[5],-50],[26,7]],[59,"VFX_Spawn",7,[-51,-52],[2,"05oZk/dQNK5JkL9vhWdbAh",1,0],[1,1.6666666666666667,1.6666666666666667,1.25]],[46,"HP Controller",5,[-53],[2,"d2bKBq9oZCsJbtMFSBX1Fe",1,0]],[139,15,[1,"f3B793wMZKGovjAcwFxNT/"],[[7,"62285pUnQZPabUSSmdd/Zu1","waitParticlesFinish",-54],[7,"cc.ParticleSystem","play",10],[7,"cc.ParticleSystem","play",12],[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3],[7,"99672sUg5NFw4x7bEPAiyHE","deactivate",4]]],[54,"On Death VFX Finished",5,[[96,-55,[1,"faD77/d0JFObgw8ppU/IQO"],[11,13],[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]]],[2,"39JvZCAedOp6Sve/f5F4Kk",1,0]],[105,"Temp-Model",false,2,[[79,"Sphere<ModelComponent>",-56,[1,"8emoMQdrtEuI+amssYVZB1"],[0],[34],1]],[2,"274F3lNfJB8Z66b0SZorII",1,0],[1,0.5,0.5,0.5]],[89,"HP UI Reference Position",2,[2,"b5tpUml3xJ3pefHRgWdRzu",1,0],[1,0,1,0]],[98,0.3,false,14,[1,"b0h1viJI9NJp2YFd13e8ps"],[8],[5],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2,[8,[0,1],[[72,2,1,1,1],[45,2,-2.8260869565217384,1,-2.8260869565217384,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-57],[26,9]],[97,0.3,false,14,[1,"8e3C5E/thOBbxPvQPp8/NG"],[[10,null],6,0],[56,[4,3372220415]],[3,0.3],[0],[0],[0],[0],[0],[0],[0],[3,0.3],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[37,[[9,255,0.5044642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,2.5,[8,[0,1],[[45,2,1.815873015873016,1,1.815873015873016,1],[41,2,0.9888888888888889,0.03282828282828335,1,0.03282828282828335,1]]]],[12,1,0.75,[8,[0.002314922765629036,0.16526413076721125,1],[[6,2,0.5395300454042952,4.184733825497376,4.184733825497376],[6,2,0.987702372434522,0.1718012968624493,0.1718012968624493],[6,2,0.26666666666666666,-3.3511111111111105,-3.3511111111111105]]]],[12,1,3,[8,[0,0.6256410256410256,1],[[6,2,0.2555555555555556,2.663194444444444,2.663194444444444],[11,2,1],[6,2,0.7814814814814813,-1.6725146198830416,-1.6725146198830416]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-58],[26,11]],[104,3,[1,"0aL7ztN9pFhLROPFy2Zobs"],1,[[7,"99672sUg5NFw4x7bEPAiyHE","destroyNode",1]]],[46,"Stun",5,[-59],[2,"d8dKppTK1Bg5gb3LSAfK53",1,0]],[117,23,[1,"3alebOeupLRK4YP9EKkBoR"],[[7,"f42c8MUO3JGzqBnIvM7zfpb","disable",3]],[[7,"f42c8MUO3JGzqBnIvM7zfpb","enable",3]]],[35,"UI",1,[8],[2,"e1sIDwi6dNXb7xZgB/IQwA",1,0]],[4,["84Ywt62DNL1o63TuorfGV8"]]],0,[0,-1,4,0,-2,8,0,3,8,0,13,16,0,2,1,0,20,24,0,27,22,0,28,16,0,3,3,0,3,15,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,-1,2,0,-2,5,0,2,1,0,7,1,0,-4,25,0,0,2,0,-1,18,0,-2,19,0,-3,4,0,-4,7,0,-1,22,0,1,6,0,1,6,0,1,6,0,1,6,0,0,4,0,2,4,0,-2,15,0,-3,23,0,-4,17,0,-1,10,0,-2,12,0,-3,14,0,1,9,0,1,9,0,1,9,0,1,9,0,1,26,0,1,26,0,17,19,0,2,8,0,-1,11,0,4,11,0,-1,13,0,4,13,0,-1,20,0,-2,21,0,-1,16,0,3,17,0,0,17,0,0,18,0,4,20,0,4,21,0,-1,24,0,9,1,3,7,5,8,7,25,59],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,10,8,11,-1,5,-1,5,-1,5,-1,5,-1,-2,18,8],[14,13,560,1,20,19,10,18,4,3,11,9,5,15,5,16]],[[[50,"P-CannonTower-Bullet"],[132,"P-CannonTower-Bullet",32,[-10,-11,-12,-13,-14,-15,-16],[[197,-9,[1,"2eB6S5fH9Gpa6sXL5ogwek"],[[7,"12ea43w32ZDAL2+IVCNZlsZ","play",-8]],[[7,"12ea43w32ZDAL2+IVCNZlsZ","play",-3],[7,"cc.ParticleSystem","play",-4],[7,"cc.ParticleSystem","play",-5],[7,"cc.ParticleSystem","play",-6],[7,"cc.ParticleSystem","play",-7]],[-2]]],[2,"e8sP6FFh9D17STW5Nbkx1m",-1,0]],[142,"Projectile",32,1,[[-17,[198,false,0,-19,[1,"60NA75wIBKrb9UenM7BSXD"],[[12,null],6,0],[56,[4,4294963651]],[23,3,0.05,0.1],[0],[0],[3,1],[0],[0],[44,3,6.283185307179586],[0],[23,3,1,1],[0],[0],[3,5],[20,true,[16,1,[33,[[13,0.026785714285714315,[4,4291435445]],[13,0.2767857142857143,[4,4285071381]],[13,1,[4,4282851095]]],[[9,255,0.4888392857142857],[9,0,1]]]]],[187,true,0,true,0.1,1,0.17453292519943295,[0],[1,0,180,0]],[49,[30,1,[8,[0,1],[[41,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[41,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[21,[3,6],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[12,1,40,[8,[0,1],[[126,1,1,1,1],[106,1,1,1,1,1]]]]],[138,true,2,2,1,[83,4],[44,3,2]],[19,[0],[0],[5],[5],-18],[26,13]]],1,4],[2,"ffLh35Rv5Pub/YXZRrDmog",1,0]],[64,"Bullet_Burst_Fragments",32,1,[-20],[2,"77kPImBYpO4qoUMcARek8M",1,0],[3,0.7071067811865475,0,0,0.7071067811865476],[1,90,0,0]],[94,"Bullet_Burst_Dome",32,1,[-21],[2,"7f/mMQLctLupWl1kxrg8pL",1,0]],[94,"Bullet_Burst_Erupt",32,1,[-22],[2,"6a5g/BsbVIe6yRhZBz18gk",1,0]],[94,"Bullet_Burst_Crossflash",32,1,[-23],[2,"9ctdF1fEBAQo4uOfUo90S3",1,0]],[130,0.3,false,false,5,6,[1,"4aw8Ro5vZKpK3qiuIxnxCq"],[[6,null],6,0],[5],[3,2.5],[0],[0],[0],[0],[0],[0],[0],[3,0.4],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.07589285714285715],[13,0.14285714285714285,[4,4292358049]],[13,0.4330357142857143,[4,4282652448]]],[[38,255],[9,0,1]]]]],[31,[0]],[32,true,[30,1,[8,[0.10512820512820513,0.4205128205128205,1],[[41,2,1,-2.6093189964157695,1,-2.6093189964157695,1],[6,2,0.3296296296296296,-1.148148148148149,-1.148148148148149],[373,2,1,1]]]],[30,1,[8,[0,0.14358974358974358,0.9948717948717949],[[6,2,0.8074074074074075,-3.0044444444444456,-3.0044444444444456],[6,2,0.4925925925925926,-1.4814814814814814,-1.4814814814814814],[6,2,0.07777777777777778,0.09219858156028381,0.09219858156028381]]]],[12,1,1.5,[8,[0,0.3,1],[[6,2,0.24814814814814815,3.3703703703703707,3.3703703703703707],[6,2,0.8148148148148148,0.6098765432098767,0.6098765432098767],[11,2,1]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-24],[26,7]],[486,false,false,0,[1,"60NA75wIBKrb9UenM7BSXD"],[[8,null],6,0],[56,[4,4294963651]],[23,3,0.05,0.1],[0],[0],[3,1],[0],[0],[44,3,6.283185307179586],[0],[23,3,1,1],[0],[0],[3,5],[20,true,[16,1,[33,[[13,0.026785714285714315,[4,4291435445]],[13,0.2767857142857143,[4,4285071381]],[13,1,[4,4282851095]]],[[9,255,0.4888392857142857],[9,0,1]]]]],[187,true,0,true,0.1,1,0.17453292519943295,[0],[1,0,180,0]],[49,[30,1,[8,[0,1],[[41,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[41,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[21,[3,6],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[12,1,40,[8,[0,1],[[126,1,1,1,1],[106,1,1,1,1,1]]]]],[138,true,2,2,1,[83,4],[44,3,2]],[19,[0],[0],[5],[5],-25],[26,9]],[146,"Temporary",32,1,[-26,-27],[2,"7fW+IqqY1ABJgKtUjCjEXf",1,0]],[39,"Projectile Collision Fade Out",32,9,[[200,0.1,-28,[1,"53h3MEGrZHta1cWZlDZLcs"],2,[1,1,1,1],[1,0,0,0]]],[2,"91TFzB1KFDqo3PcLpjArLT",1,0]],[39,"Projectile Fade In",32,9,[[201,0,-29,[1,"eeNRsynBJH3YmBnheBo7iv"],2,[1,0.6,0.6,1]]],[2,"983Y4rFE1Er5oETxRL2kPn",1,0]],[73,0.5,false,false,3,[1,"dc5n3c3wpBgrDQc+cL5LAK"],[[0,null],6,0],[5],[23,3,0.05,0.2],[0],[0],[0],[0],[0],[0],[0],[23,3,0.3,1],[0],[0],[0],[[25,[23,3,8,16]]],[20,true,[16,1,[33,[[13,0.026785714285714315,[4,4293175763]],[13,0.14732142857142858,[4,4291449978]],[13,0.7142857142857143,[4,4282851095]]],[[9,255,0.12946428571428573],[9,0,1]]]]],[371,true,0,true,0.6,0.5,0.17453292519943295,[0]],[32,true,[30,1,[8,[0,1],[[41,2,1,-1.9259259259259258,1,-1.9259259259259258,1],[41,2,0.31851851851851853,-0.11791383219954621,1,-0.11791383219954621,1]]]],[0],[0],[0]],[110,true,[0],[0],[111,2,3,[8,[0.005128205128205128,1],[[106,-1,1,1,1,1],[106,0.07407407407407407,1.079610538373425,1,1.079610538373425,1]]],[8,[0,1],[[106,-0.3333333333333333,1,1,1,1],[106,-0.007407407407407408,0.3259259259259259,1,0.3259259259259259,1]]]],[3,1]],[15,[0],[0],[0]],[310,0,[12,1,5,[8,[0,1],[[126,1,1,1,1],[106,1,1,1,1,1]]]],[12,1,5,[8,[0,1],[[11,2,1],[11,2,1]]]],[12,1,5,[8,[0,0.14102564102564102],[[106,-0.007407407407407407,-1,1,-1,1],[106,1,7.143434343434343,1,7.143434343434343,1]]]],[0]],[58,true,[0],[0],[12,1,40,[8,[0,1],[[126,1,1,1,1],[106,1,1,1,1,1]]]]],[280,2,2,1,[83,4],[44,3,2]],[19,[0],[0],[5],[5],-30],[26,1]],[370,true,true,0.5,false,false,5,[null,null],4,[1,"39yFXTfNtGxYUbi0PjKyYM"],[5],[3,6],[3,6],[3,6],[0],[3,-1.5707963267948966],[0],[0],[0],[3,0.4],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[43,0.08258928571428571],[13,0.1383928571428572,[4,4294145738]],[13,0.859375,[4,4293332504]]],[[9,255,0.1294642857142857],[9,0,1]]]]],[31,[0]],[32,true,[12,1,10,[8,[0,0.27692307692307694,1],[[41,2,0.45555555555555555,1.805555555555556,1,1.805555555555556,1],[6,2,0.8148148148148149,0.741741741741742,0.741741741741742],[72,2,1,1,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[374,true,true,[83,20],[83,180],[161,10.471975511965978,180]],[24,[0],[0]],[19,[0],[0],[5],[5],-31],[375,4,0,2,3]],[130,0.3,false,false,5,5,[1,"2afh8fCupLiYbEXkwFmj9H"],[[4,null],6,0],[5],[3,2.5],[0],[0],[0],[0],[0],[0],[0],[3,0.4],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[119],[13,0.14285714285714285,[4,4292358049]],[13,0.4330357142857143,[4,4284233013]]],[[38,255],[9,0,1]]]]],[31,[0]],[78,true,true,[0],[30,1,[8,[0,0.14358974358974358,0.9948717948717949],[[6,2,0.8074074074074075,-3.0044444444444456,-3.0044444444444456],[6,2,0.4925925925925926,-1.4814814814814814,-1.4814814814814814],[6,2,0.07777777777777778,0.09219858156028381,0.09219858156028381]]]],[12,1,1.5,[8,[0,0.3,1],[[6,2,0.24814814814814815,3.3703703703703707,3.3703703703703707],[6,2,0.8148148148148148,0.6098765432098767,0.6098765432098767],[11,2,1]]]],[3,1]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[0]],[24,[0],[0]],[19,[0],[0],[5],[5],-32],[26,5]],[94,"Bullet_Trail",32,1,[8],[2,"48fu0FU+9EVL4gh+tFJ1Oq",1,0]],[366,1,4,2,2,[1,"85ZEf8rc5GG4ynsarsE4M4"],[[10,null],6,0],[5],[3,1],[0],[0],[0],[0],[0],[0],[0],[3,1],[0],[0],[0],[[25,[3,1]]],[20,true,[16,1,[33,[[119],[13,0.5245535714285714,[4,4294946672]],[43,1]],[[38,255]]]]],[31,[0]],[32,true,[30,1,[8,[0,0.5076923076923077,1],[[41,2,1,-0.07222222222222197,1,-0.07222222222222197,1],[11,2,0.8518518518518519],[72,2,1,1,1]]]],[0],[0],[0]],[21,[0],[0],[0],[3,1]],[15,[0],[0],[0]],[17,[0],[0],[0],[0]],[27,[0],[0],[3,-6.283185307179586]],[24,[0],[0]],[147,true,false,[3,5],[3,0.7],[56,[4,4294901974]],[16,1,[33,[[87,[4,4293656746]],[13,0.6383928571428572,[4,4284226069]]],[[9,255,0.8883928571428572],[9,0,1]]]],-33],[26,11]]],0,[0,2,1,0,-1,7,0,3,10,0,3,3,0,3,4,0,3,5,0,3,6,0,3,11,0,0,1,0,-1,3,0,-2,4,0,-3,5,0,-4,6,0,-5,15,0,-6,2,0,-7,9,0,-1,16,0,4,8,0,0,2,0,-1,12,0,-1,13,0,-1,14,0,-1,7,0,4,7,0,4,8,0,-1,10,0,-2,11,0,0,10,0,0,11,0,4,12,0,4,13,0,4,14,0,4,16,0,9,1,8,0,15,33],[0,0,0,0,0,0,0,0,0,0,0,0,0,0],[-1,5,10,5,-1,5,-1,5,-1,5,-1,5,-1,5],[4,3,146,147,20,19,33,29,4,3,145,86,4,3]],[[[168,[{"rasterizerState":{},"depthStencilState":{},"blendState":{"targets":[{}]}}],[{"ROUGHNESS":3}],[[[{"energy":10,"thickness":0.1,"outline_thickness":0.1,"beam_difference":0.1},"mainColor",8,[4,4291733291],"outlineColor",8,[4,4294959520]]],11]]],0,0,[0],[12],[561]],[[[63,"SM_TowerBase_01__0",[{"rasterizerState":{},"blendState":{"targets":[{}]},"depthStencilState":{}}],[{"DCC_APP_NAME":1,"HAS_EXPORTED_METALLIC":true}],[[[{"shininessExponent":35.99999928474426,"emissiveFactor":1,"metallic":0,"transparencyFactor":0},"mainColor",8,[4,4291611852],"emissiveColor",8,[4,4278190080]]],11]]],0,0,[0],[12],[2]],[[[62],[47,"SM_TowerBase_01",[-2],[2,"a6UoiMmTtU6YsbaNPx5rqf",-1,0]],[53,"SM_TowerBase_01",1,[[52,-3,[1,"c8x41wezhYTop9GywitTd7"],[0],[34],1]],[2,"52Wr8elKJczKH4c2zJXMeu",1,0],[3,-0.7071067811865474,-1.5454310096341944e-8,-1.5454310096341944e-8,0.7071067811865474],[1,-90.00000000000001,-0.0000025044781562438674,0]]],0,[0,2,1,0,-1,2,0,0,2,0,9,1,3],[0,0],[-1,10],[562,563]],[[[57,".bin",1797920726,[{"primitives":[{"primitiveMode":7,"vertexBundelIndices":[0],"indexView":{"offset":9792,"length":2784,"count":696,"stride":4}}],"vertexBundles":[{"view":{"offset":0,"length":9792,"count":204,"stride":48},"attributes":[{"name":"a_position","format":32,"isNormalized":false},{"name":"a_normal","format":32,"isNormalized":false},{"name":"a_texCoord","format":21,"isNormalized":false},{"name":"a_tangent","format":44,"isNormalized":false}]}]},"minPosition",8,[1,-0.3708244562149048,-0.3708243668079376,7.450580596923828e-9],"maxPosition",8,[1,0.37082427740097046,0.37082439661026,0.14156852662563324]]],-1],0,0,[],[],[]]]]
